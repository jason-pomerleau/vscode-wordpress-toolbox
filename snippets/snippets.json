{
        "Class:_WP_Dependency": {
                "prefix": "_WP_Dependency",
                "body": "_WP_Dependency",
                "description": "Class _WP_Dependency"
        },
        "Class:_WP_Editors": {
                "prefix": "_WP_Editors",
                "body": "_WP_Editors",
                "description": "Facilitates adding of the WordPress editor as used on the Write and Edit screens."
        },
        "Class:_WP_List_Table_Compat": {
                "prefix": "_WP_List_Table_Compat",
                "body": "_WP_List_Table_Compat",
                "description": "Helper class to be used only by back compat functions."
        },
        "Class:AMFReader": {
                "prefix": "AMFReader",
                "body": "AMFReader",
                "description": ""
        },
        "Class:AMFStream": {
                "prefix": "AMFStream",
                "body": "AMFStream",
                "description": ""
        },
        "Class:AtomEntry": {
                "prefix": "AtomEntry",
                "body": "AtomEntry",
                "description": "Structure that store Atom Entry Properties"
        },
        "Class:AtomFeed": {
                "prefix": "AtomFeed",
                "body": "AtomFeed",
                "description": "Structure that store common Atom Feed Properties"
        },
        "Class:AtomParser": {
                "prefix": "AtomParser",
                "body": "AtomParser",
                "description": "AtomLib Atom Parser API"
        },
        "Class:Automatic_Upgrader_Skin": {
                "prefix": "Automatic_Upgrader_Skin",
                "body": "Automatic_Upgrader_Skin",
                "description": "Upgrader Skin for Automatic WordPress Upgrades."
        },
        "Class:AVCSequenceParameterSetReader": {
                "prefix": "AVCSequenceParameterSetReader",
                "body": "AVCSequenceParameterSetReader",
                "description": ""
        },
        "Class:Bulk_Plugin_Upgrader_Skin": {
                "prefix": "Bulk_Plugin_Upgrader_Skin",
                "body": "Bulk_Plugin_Upgrader_Skin",
                "description": "Bulk Plugin Upgrader Skin for WordPress Plugin Upgrades."
        },
        "Class:Bulk_Theme_Upgrader_Skin": {
                "prefix": "Bulk_Theme_Upgrader_Skin",
                "body": "Bulk_Theme_Upgrader_Skin",
                "description": "Bulk Theme Upgrader Skin for WordPress Theme Upgrades."
        },
        "Class:Bulk_Upgrader_Skin": {
                "prefix": "Bulk_Upgrader_Skin",
                "body": "Bulk_Upgrader_Skin",
                "description": "Generic Bulk Upgrader Skin for WordPress Upgrades."
        },
        "Class:Core_Upgrader": {
                "prefix": "Core_Upgrader",
                "body": "Core_Upgrader",
                "description": "Core class used for updating core."
        },
        "Class:Custom_Background": {
                "prefix": "Custom_Background",
                "body": "Custom_Background",
                "description": "The custom background class."
        },
        "Class:Custom_Image_Header": {
                "prefix": "Custom_Image_Header",
                "body": "Custom_Image_Header",
                "description": "The custom header image class."
        },
        "Class:Error": {
                "prefix": "Error",
                "body": "Error",
                "description": ""
        },
        "Class:File_Upload_Upgrader": {
                "prefix": "File_Upload_Upgrader",
                "body": "File_Upload_Upgrader",
                "description": "Core class used for handling file uploads."
        },
        "Class:ftp": {
                "prefix": "ftp",
                "body": "ftp",
                "description": "FTP implementation using fsockopen to connect."
        },
        "Class:ftp_base": {
                "prefix": "ftp_base",
                "body": "ftp_base",
                "description": "PemFTP base class"
        },
        "Class:ftp_pure": {
                "prefix": "ftp_pure",
                "body": "ftp_pure",
                "description": "FTP implementation using fsockopen to connect."
        },
        "Class:ftp_sockets": {
                "prefix": "ftp_sockets",
                "body": "ftp_sockets",
                "description": "Socket Based FTP implementation"
        },
        "Class:getID3": {
                "prefix": "getID3",
                "body": "getID3",
                "description": ""
        },
        "Class:getid3_ac3": {
                "prefix": "getid3_ac3",
                "body": "getid3_ac3",
                "description": ""
        },
        "Class:getid3_apetag": {
                "prefix": "getid3_apetag",
                "body": "getid3_apetag",
                "description": ""
        },
        "Class:getid3_asf": {
                "prefix": "getid3_asf",
                "body": "getid3_asf",
                "description": ""
        },
        "Class:getid3_dts": {
                "prefix": "getid3_dts",
                "body": "getid3_dts",
                "description": ""
        },
        "Class:getid3_exception": {
                "prefix": "getid3_exception",
                "body": "getid3_exception",
                "description": ""
        },
        "Class:getid3_flac": {
                "prefix": "getid3_flac",
                "body": "getid3_flac",
                "description": ""
        },
        "Class:getid3_flv": {
                "prefix": "getid3_flv",
                "body": "getid3_flv",
                "description": ""
        },
        "Class:getid3_handler": {
                "prefix": "getid3_handler",
                "body": "getid3_handler",
                "description": ""
        },
        "Class:getid3_id3v1": {
                "prefix": "getid3_id3v1",
                "body": "getid3_id3v1",
                "description": ""
        },
        "Class:getid3_id3v2": {
                "prefix": "getid3_id3v2",
                "body": "getid3_id3v2",
                "description": ""
        },
        "Class:getid3_lib": {
                "prefix": "getid3_lib",
                "body": "getid3_lib",
                "description": ""
        },
        "Class:getid3_lyrics3": {
                "prefix": "getid3_lyrics3",
                "body": "getid3_lyrics3",
                "description": ""
        },
        "Class:getid3_matroska": {
                "prefix": "getid3_matroska",
                "body": "getid3_matroska",
                "description": ""
        },
        "Class:getid3_mp3": {
                "prefix": "getid3_mp3",
                "body": "getid3_mp3",
                "description": ""
        },
        "Class:getid3_ogg": {
                "prefix": "getid3_ogg",
                "body": "getid3_ogg",
                "description": ""
        },
        "Class:getid3_quicktime": {
                "prefix": "getid3_quicktime",
                "body": "getid3_quicktime",
                "description": ""
        },
        "Class:getid3_riff": {
                "prefix": "getid3_riff",
                "body": "getid3_riff",
                "description": ""
        },
        "Class:Gettext_Translations": {
                "prefix": "Gettext_Translations",
                "body": "Gettext_Translations",
                "description": ""
        },
        "Class:IXR_Base64": {
                "prefix": "IXR_Base64",
                "body": "IXR_Base64",
                "description": "IXR_Base64"
        },
        "Class:IXR_Client": {
                "prefix": "IXR_Client",
                "body": "IXR_Client",
                "description": "IXR_Client"
        },
        "Class:IXR_ClientMulticall": {
                "prefix": "IXR_ClientMulticall",
                "body": "IXR_ClientMulticall",
                "description": "IXR_ClientMulticall"
        },
        "Class:IXR_Date": {
                "prefix": "IXR_Date",
                "body": "IXR_Date",
                "description": "IXR_Date"
        },
        "Class:IXR_Error": {
                "prefix": "IXR_Error",
                "body": "IXR_Error",
                "description": "IXR_Error"
        },
        "Class:IXR_IntrospectionServer": {
                "prefix": "IXR_IntrospectionServer",
                "body": "IXR_IntrospectionServer",
                "description": "IXR_IntrospectionServer"
        },
        "Class:IXR_Message": {
                "prefix": "IXR_Message",
                "body": "IXR_Message",
                "description": "IXR_MESSAGE"
        },
        "Class:IXR_Request": {
                "prefix": "IXR_Request",
                "body": "IXR_Request",
                "description": "IXR_Request"
        },
        "Class:IXR_Server": {
                "prefix": "IXR_Server",
                "body": "IXR_Server",
                "description": "IXR_Server"
        },
        "Class:IXR_Value": {
                "prefix": "IXR_Value",
                "body": "IXR_Value",
                "description": "IXR_Value"
        },
        "Class:Language_Pack_Upgrader": {
                "prefix": "Language_Pack_Upgrader",
                "body": "Language_Pack_Upgrader",
                "description": "Core class used for updating/installing language packs (translations) for plugins, themes, and core."
        },
        "Class:Language_Pack_Upgrader_Skin": {
                "prefix": "Language_Pack_Upgrader_Skin",
                "body": "Language_Pack_Upgrader_Skin",
                "description": "Translation Upgrader Skin for WordPress Translation Upgrades."
        },
        "Class:MagpieRSS": {
                "prefix": "MagpieRSS",
                "body": "MagpieRSS",
                "description": ""
        },
        "Class:MO": {
                "prefix": "MO",
                "body": "MO",
                "description": ""
        },
        "Class:NOOP_Translations": {
                "prefix": "NOOP_Translations",
                "body": "NOOP_Translations",
                "description": "Provides the same interface as Translations, but doesn&#039;t do anything"
        },
        "Class:ParagonIE_Sodium_Compat": {
                "prefix": "ParagonIE_Sodium_Compat",
                "body": "ParagonIE_Sodium_Compat",
                "description": ""
        },
        "Class:ParagonIE_Sodium_Core32_BLAKE2b": {
                "prefix": "ParagonIE_Sodium_Core32_BLAKE2b",
                "body": "ParagonIE_Sodium_Core32_BLAKE2b",
                "description": "Class ParagonIE_Sodium_Core_BLAKE2b"
        },
        "Class:ParagonIE_Sodium_Core32_ChaCha20": {
                "prefix": "ParagonIE_Sodium_Core32_ChaCha20",
                "body": "ParagonIE_Sodium_Core32_ChaCha20",
                "description": "Class ParagonIE_Sodium_Core32_ChaCha20"
        },
        "Class:ParagonIE_Sodium_Core32_ChaCha20_Ctx": {
                "prefix": "ParagonIE_Sodium_Core32_ChaCha20_Ctx",
                "body": "ParagonIE_Sodium_Core32_ChaCha20_Ctx",
                "description": "Class ParagonIE_Sodium_Core32_ChaCha20_Ctx"
        },
        "Class:ParagonIE_Sodium_Core32_ChaCha20_IetfCtx": {
                "prefix": "ParagonIE_Sodium_Core32_ChaCha20_IetfCtx",
                "body": "ParagonIE_Sodium_Core32_ChaCha20_IetfCtx",
                "description": "Class ParagonIE_Sodium_Core32_ChaCha20_IetfCtx"
        },
        "Class:ParagonIE_Sodium_Core32_Curve25519": {
                "prefix": "ParagonIE_Sodium_Core32_Curve25519",
                "body": "ParagonIE_Sodium_Core32_Curve25519",
                "description": "Class ParagonIE_Sodium_Core32_Curve25519"
        },
        "Class:ParagonIE_Sodium_Core32_Curve25519_Fe": {
                "prefix": "ParagonIE_Sodium_Core32_Curve25519_Fe",
                "body": "ParagonIE_Sodium_Core32_Curve25519_Fe",
                "description": "Class ParagonIE_Sodium_Core32_Curve25519_Fe"
        },
        "Class:ParagonIE_Sodium_Core32_Curve25519_Ge_Cached": {
                "prefix": "ParagonIE_Sodium_Core32_Curve25519_Ge_Cached",
                "body": "ParagonIE_Sodium_Core32_Curve25519_Ge_Cached",
                "description": "Class ParagonIE_Sodium_Core32_Curve25519_Ge_Cached"
        },
        "Class:ParagonIE_Sodium_Core32_Curve25519_Ge_P1p1": {
                "prefix": "ParagonIE_Sodium_Core32_Curve25519_Ge_P1p1",
                "body": "ParagonIE_Sodium_Core32_Curve25519_Ge_P1p1",
                "description": "Class ParagonIE_Sodium_Core32_Curve25519_Ge_P1p1"
        },
        "Class:ParagonIE_Sodium_Core32_Curve25519_Ge_P2": {
                "prefix": "ParagonIE_Sodium_Core32_Curve25519_Ge_P2",
                "body": "ParagonIE_Sodium_Core32_Curve25519_Ge_P2",
                "description": "Class ParagonIE_Sodium_Core32_Curve25519_Ge_P2"
        },
        "Class:ParagonIE_Sodium_Core32_Curve25519_Ge_P3": {
                "prefix": "ParagonIE_Sodium_Core32_Curve25519_Ge_P3",
                "body": "ParagonIE_Sodium_Core32_Curve25519_Ge_P3",
                "description": "Class ParagonIE_Sodium_Core32_Curve25519_Ge_P3"
        },
        "Class:ParagonIE_Sodium_Core32_Curve25519_Ge_Precomp": {
                "prefix": "ParagonIE_Sodium_Core32_Curve25519_Ge_Precomp",
                "body": "ParagonIE_Sodium_Core32_Curve25519_Ge_Precomp",
                "description": "Class ParagonIE_Sodium_Core32_Curve25519_Ge_Precomp"
        },
        "Class:ParagonIE_Sodium_Core32_Curve25519_H": {
                "prefix": "ParagonIE_Sodium_Core32_Curve25519_H",
                "body": "ParagonIE_Sodium_Core32_Curve25519_H",
                "description": "Class ParagonIE_Sodium_Core32_Curve25519_H"
        },
        "Class:ParagonIE_Sodium_Core32_Ed25519": {
                "prefix": "ParagonIE_Sodium_Core32_Ed25519",
                "body": "ParagonIE_Sodium_Core32_Ed25519",
                "description": "Class ParagonIE_Sodium_Core32_Ed25519"
        },
        "Class:ParagonIE_Sodium_Core32_HChaCha20": {
                "prefix": "ParagonIE_Sodium_Core32_HChaCha20",
                "body": "ParagonIE_Sodium_Core32_HChaCha20",
                "description": "Class ParagonIE_Sodium_Core_HChaCha20"
        },
        "Class:ParagonIE_Sodium_Core32_HSalsa20": {
                "prefix": "ParagonIE_Sodium_Core32_HSalsa20",
                "body": "ParagonIE_Sodium_Core32_HSalsa20",
                "description": "Class ParagonIE_Sodium_Core32_HSalsa20"
        },
        "Class:ParagonIE_Sodium_Core32_Int32": {
                "prefix": "ParagonIE_Sodium_Core32_Int32",
                "body": "ParagonIE_Sodium_Core32_Int32",
                "description": "Class ParagonIE_Sodium_Core32_Int32"
        },
        "Class:ParagonIE_Sodium_Core32_Int64": {
                "prefix": "ParagonIE_Sodium_Core32_Int64",
                "body": "ParagonIE_Sodium_Core32_Int64",
                "description": "Class ParagonIE_Sodium_Core32_Int64"
        },
        "Class:ParagonIE_Sodium_Core32_Poly1305": {
                "prefix": "ParagonIE_Sodium_Core32_Poly1305",
                "body": "ParagonIE_Sodium_Core32_Poly1305",
                "description": "Class ParagonIE_Sodium_Core32_Poly1305"
        },
        "Class:ParagonIE_Sodium_Core32_Poly1305_State": {
                "prefix": "ParagonIE_Sodium_Core32_Poly1305_State",
                "body": "ParagonIE_Sodium_Core32_Poly1305_State",
                "description": "Class ParagonIE_Sodium_Core32_Poly1305_State"
        },
        "Class:ParagonIE_Sodium_Core32_Salsa20": {
                "prefix": "ParagonIE_Sodium_Core32_Salsa20",
                "body": "ParagonIE_Sodium_Core32_Salsa20",
                "description": "Class ParagonIE_Sodium_Core32_Salsa20"
        },
        "Class:ParagonIE_Sodium_Core32_SecretStream_State": {
                "prefix": "ParagonIE_Sodium_Core32_SecretStream_State",
                "body": "ParagonIE_Sodium_Core32_SecretStream_State",
                "description": "Class ParagonIE_Sodium_Core32_SecretStream_State"
        },
        "Class:ParagonIE_Sodium_Core32_SipHash": {
                "prefix": "ParagonIE_Sodium_Core32_SipHash",
                "body": "ParagonIE_Sodium_Core32_SipHash",
                "description": "Class ParagonIE_SodiumCompat_Core32_SipHash"
        },
        "Class:ParagonIE_Sodium_Core32_Util": {
                "prefix": "ParagonIE_Sodium_Core32_Util",
                "body": "ParagonIE_Sodium_Core32_Util",
                "description": "Class ParagonIE_Sodium_Core_Util"
        },
        "Class:ParagonIE_Sodium_Core32_X25519": {
                "prefix": "ParagonIE_Sodium_Core32_X25519",
                "body": "ParagonIE_Sodium_Core32_X25519",
                "description": "Class ParagonIE_Sodium_Core32_X25519"
        },
        "Class:ParagonIE_Sodium_Core32_XChaCha20": {
                "prefix": "ParagonIE_Sodium_Core32_XChaCha20",
                "body": "ParagonIE_Sodium_Core32_XChaCha20",
                "description": "Class ParagonIE_Sodium_Core32_XChaCha20"
        },
        "Class:ParagonIE_Sodium_Core32_XSalsa20": {
                "prefix": "ParagonIE_Sodium_Core32_XSalsa20",
                "body": "ParagonIE_Sodium_Core32_XSalsa20",
                "description": "Class ParagonIE_Sodium_Core32_XSalsa20"
        },
        "Class:ParagonIE_Sodium_Core_Base64_Common": {
                "prefix": "ParagonIE_Sodium_Core_Base64_Common",
                "body": "ParagonIE_Sodium_Core_Base64_Common",
                "description": "Class ParagonIE_Sodium_Core_Base64"
        },
        "Class:ParagonIE_Sodium_Core_Base64_Original": {
                "prefix": "ParagonIE_Sodium_Core_Base64_Original",
                "body": "ParagonIE_Sodium_Core_Base64_Original",
                "description": "Class ParagonIE_Sodium_Core_Base64"
        },
        "Class:ParagonIE_Sodium_Core_Base64_UrlSafe": {
                "prefix": "ParagonIE_Sodium_Core_Base64_UrlSafe",
                "body": "ParagonIE_Sodium_Core_Base64_UrlSafe",
                "description": "Class ParagonIE_Sodium_Core_Base64UrlSafe"
        },
        "Class:ParagonIE_Sodium_Core_BLAKE2b": {
                "prefix": "ParagonIE_Sodium_Core_BLAKE2b",
                "body": "ParagonIE_Sodium_Core_BLAKE2b",
                "description": "Class ParagonIE_Sodium_Core_BLAKE2b"
        },
        "Class:ParagonIE_Sodium_Core_ChaCha20": {
                "prefix": "ParagonIE_Sodium_Core_ChaCha20",
                "body": "ParagonIE_Sodium_Core_ChaCha20",
                "description": "Class ParagonIE_Sodium_Core_ChaCha20"
        },
        "Class:ParagonIE_Sodium_Core_ChaCha20_Ctx": {
                "prefix": "ParagonIE_Sodium_Core_ChaCha20_Ctx",
                "body": "ParagonIE_Sodium_Core_ChaCha20_Ctx",
                "description": "Class ParagonIE_Sodium_Core_ChaCha20_Ctx"
        },
        "Class:ParagonIE_Sodium_Core_ChaCha20_IetfCtx": {
                "prefix": "ParagonIE_Sodium_Core_ChaCha20_IetfCtx",
                "body": "ParagonIE_Sodium_Core_ChaCha20_IetfCtx",
                "description": "Class ParagonIE_Sodium_Core_ChaCha20_IetfCtx"
        },
        "Class:ParagonIE_Sodium_Core_Curve25519": {
                "prefix": "ParagonIE_Sodium_Core_Curve25519",
                "body": "ParagonIE_Sodium_Core_Curve25519",
                "description": "Class ParagonIE_Sodium_Core_Curve25519"
        },
        "Class:ParagonIE_Sodium_Core_Curve25519_Fe": {
                "prefix": "ParagonIE_Sodium_Core_Curve25519_Fe",
                "body": "ParagonIE_Sodium_Core_Curve25519_Fe",
                "description": "Class ParagonIE_Sodium_Core_Curve25519_Fe"
        },
        "Class:ParagonIE_Sodium_Core_Curve25519_Ge_Cached": {
                "prefix": "ParagonIE_Sodium_Core_Curve25519_Ge_Cached",
                "body": "ParagonIE_Sodium_Core_Curve25519_Ge_Cached",
                "description": "Class ParagonIE_Sodium_Core_Curve25519_Ge_Cached"
        },
        "Class:ParagonIE_Sodium_Core_Curve25519_Ge_P1p1": {
                "prefix": "ParagonIE_Sodium_Core_Curve25519_Ge_P1p1",
                "body": "ParagonIE_Sodium_Core_Curve25519_Ge_P1p1",
                "description": "Class ParagonIE_Sodium_Core_Curve25519_Ge_P1p1"
        },
        "Class:ParagonIE_Sodium_Core_Curve25519_Ge_P2": {
                "prefix": "ParagonIE_Sodium_Core_Curve25519_Ge_P2",
                "body": "ParagonIE_Sodium_Core_Curve25519_Ge_P2",
                "description": "Class ParagonIE_Sodium_Core_Curve25519_Ge_P2"
        },
        "Class:ParagonIE_Sodium_Core_Curve25519_Ge_P3": {
                "prefix": "ParagonIE_Sodium_Core_Curve25519_Ge_P3",
                "body": "ParagonIE_Sodium_Core_Curve25519_Ge_P3",
                "description": "Class ParagonIE_Sodium_Core_Curve25519_Ge_P3"
        },
        "Class:ParagonIE_Sodium_Core_Curve25519_Ge_Precomp": {
                "prefix": "ParagonIE_Sodium_Core_Curve25519_Ge_Precomp",
                "body": "ParagonIE_Sodium_Core_Curve25519_Ge_Precomp",
                "description": "Class ParagonIE_Sodium_Core_Curve25519_Ge_Precomp"
        },
        "Class:ParagonIE_Sodium_Core_Curve25519_H": {
                "prefix": "ParagonIE_Sodium_Core_Curve25519_H",
                "body": "ParagonIE_Sodium_Core_Curve25519_H",
                "description": "Class ParagonIE_Sodium_Core_Curve25519_H"
        },
        "Class:ParagonIE_Sodium_Core_Ed25519": {
                "prefix": "ParagonIE_Sodium_Core_Ed25519",
                "body": "ParagonIE_Sodium_Core_Ed25519",
                "description": "Class ParagonIE_Sodium_Core_Ed25519"
        },
        "Class:ParagonIE_Sodium_Core_HChaCha20": {
                "prefix": "ParagonIE_Sodium_Core_HChaCha20",
                "body": "ParagonIE_Sodium_Core_HChaCha20",
                "description": "Class ParagonIE_Sodium_Core_HChaCha20"
        },
        "Class:ParagonIE_Sodium_Core_HSalsa20": {
                "prefix": "ParagonIE_Sodium_Core_HSalsa20",
                "body": "ParagonIE_Sodium_Core_HSalsa20",
                "description": "Class ParagonIE_Sodium_Core_HSalsa20"
        },
        "Class:ParagonIE_Sodium_Core_Poly1305": {
                "prefix": "ParagonIE_Sodium_Core_Poly1305",
                "body": "ParagonIE_Sodium_Core_Poly1305",
                "description": "Class ParagonIE_Sodium_Core_Poly1305"
        },
        "Class:ParagonIE_Sodium_Core_Poly1305_State": {
                "prefix": "ParagonIE_Sodium_Core_Poly1305_State",
                "body": "ParagonIE_Sodium_Core_Poly1305_State",
                "description": "Class ParagonIE_Sodium_Core_Poly1305_State"
        },
        "Class:ParagonIE_Sodium_Core_Ristretto255": {
                "prefix": "ParagonIE_Sodium_Core_Ristretto255",
                "body": "ParagonIE_Sodium_Core_Ristretto255",
                "description": "Class ParagonIE_Sodium_Core_Ristretto255"
        },
        "Class:ParagonIE_Sodium_Core_Salsa20": {
                "prefix": "ParagonIE_Sodium_Core_Salsa20",
                "body": "ParagonIE_Sodium_Core_Salsa20",
                "description": "Class ParagonIE_Sodium_Core_Salsa20"
        },
        "Class:ParagonIE_Sodium_Core_SecretStream_State": {
                "prefix": "ParagonIE_Sodium_Core_SecretStream_State",
                "body": "ParagonIE_Sodium_Core_SecretStream_State",
                "description": "Class ParagonIE_Sodium_Core_SecretStream_State"
        },
        "Class:ParagonIE_Sodium_Core_SipHash": {
                "prefix": "ParagonIE_Sodium_Core_SipHash",
                "body": "ParagonIE_Sodium_Core_SipHash",
                "description": "Class ParagonIE_SodiumCompat_Core_SipHash"
        },
        "Class:ParagonIE_Sodium_Core_Util": {
                "prefix": "ParagonIE_Sodium_Core_Util",
                "body": "ParagonIE_Sodium_Core_Util",
                "description": "Class ParagonIE_Sodium_Core_Util"
        },
        "Class:ParagonIE_Sodium_Core_X25519": {
                "prefix": "ParagonIE_Sodium_Core_X25519",
                "body": "ParagonIE_Sodium_Core_X25519",
                "description": "Class ParagonIE_Sodium_Core_X25519"
        },
        "Class:ParagonIE_Sodium_Core_XChaCha20": {
                "prefix": "ParagonIE_Sodium_Core_XChaCha20",
                "body": "ParagonIE_Sodium_Core_XChaCha20",
                "description": "Class ParagonIE_Sodium_Core_XChaCha20"
        },
        "Class:ParagonIE_Sodium_Core_XSalsa20": {
                "prefix": "ParagonIE_Sodium_Core_XSalsa20",
                "body": "ParagonIE_Sodium_Core_XSalsa20",
                "description": "Class ParagonIE_Sodium_Core_XSalsa20"
        },
        "Class:ParagonIE_Sodium_Crypto": {
                "prefix": "ParagonIE_Sodium_Crypto",
                "body": "ParagonIE_Sodium_Crypto",
                "description": "Class ParagonIE_Sodium_Crypto"
        },
        "Class:ParagonIE_Sodium_Crypto32": {
                "prefix": "ParagonIE_Sodium_Crypto32",
                "body": "ParagonIE_Sodium_Crypto32",
                "description": "Class ParagonIE_Sodium_Crypto"
        },
        "Class:ParagonIE_Sodium_File": {
                "prefix": "ParagonIE_Sodium_File",
                "body": "ParagonIE_Sodium_File",
                "description": "Class ParagonIE_Sodium_File"
        },
        "Class:PasswordHash": {
                "prefix": "PasswordHash",
                "body": "PasswordHash",
                "description": "Portable PHP password hashing framework."
        },
        "Class:PclZip": {
                "prefix": "PclZip",
                "body": "PclZip",
                "description": ""
        },
        "Class:Plugin_Installer_Skin": {
                "prefix": "Plugin_Installer_Skin",
                "body": "Plugin_Installer_Skin",
                "description": "Plugin Installer Skin for WordPress Plugin Installer."
        },
        "Class:Plugin_Upgrader": {
                "prefix": "Plugin_Upgrader",
                "body": "Plugin_Upgrader",
                "description": "Core class used for upgrading/installing plugins."
        },
        "Class:Plugin_Upgrader_Skin": {
                "prefix": "Plugin_Upgrader_Skin",
                "body": "Plugin_Upgrader_Skin",
                "description": "Plugin Upgrader Skin for WordPress Plugin Upgrades."
        },
        "Class:Plural_Forms": {
                "prefix": "Plural_Forms",
                "body": "Plural_Forms",
                "description": ""
        },
        "Class:PO": {
                "prefix": "PO",
                "body": "PO",
                "description": ""
        },
        "Class:POMO_CachedFileReader": {
                "prefix": "POMO_CachedFileReader",
                "body": "POMO_CachedFileReader",
                "description": "Reads the contents of the file in the beginning."
        },
        "Class:POMO_CachedIntFileReader": {
                "prefix": "POMO_CachedIntFileReader",
                "body": "POMO_CachedIntFileReader",
                "description": "Reads the contents of the file in the beginning."
        },
        "Class:POMO_FileReader": {
                "prefix": "POMO_FileReader",
                "body": "POMO_FileReader",
                "description": ""
        },
        "Class:POMO_Reader": {
                "prefix": "POMO_Reader",
                "body": "POMO_Reader",
                "description": ""
        },
        "Class:POMO_StringReader": {
                "prefix": "POMO_StringReader",
                "body": "POMO_StringReader",
                "description": "Provides file-like methods for manipulating a string instead of a physical file."
        },
        "Class:POP3": {
                "prefix": "POP3",
                "body": "POP3",
                "description": "mail_fetch/setup.php"
        },
        "Class:Requests": {
                "prefix": "Requests",
                "body": "Requests",
                "description": "Requests for PHP"
        },
        "Class:Requests_Auth_Basic": {
                "prefix": "Requests_Auth_Basic",
                "body": "Requests_Auth_Basic",
                "description": "Basic Authentication provider"
        },
        "Class:Requests_Cookie": {
                "prefix": "Requests_Cookie",
                "body": "Requests_Cookie",
                "description": "Cookie storage object"
        },
        "Class:Requests_Cookie_Jar": {
                "prefix": "Requests_Cookie_Jar",
                "body": "Requests_Cookie_Jar",
                "description": "Cookie holder object"
        },
        "Class:Requests_Exception": {
                "prefix": "Requests_Exception",
                "body": "Requests_Exception",
                "description": "Exception for HTTP requests"
        },
        "Class:Requests_Exception_HTTP": {
                "prefix": "Requests_Exception_HTTP",
                "body": "Requests_Exception_HTTP",
                "description": "Exception based on HTTP response"
        },
        "Class:Requests_Exception_HTTP_304": {
                "prefix": "Requests_Exception_HTTP_304",
                "body": "Requests_Exception_HTTP_304",
                "description": "Exception for 304 Not Modified responses"
        },
        "Class:Requests_Exception_HTTP_305": {
                "prefix": "Requests_Exception_HTTP_305",
                "body": "Requests_Exception_HTTP_305",
                "description": "Exception for 305 Use Proxy responses"
        },
        "Class:Requests_Exception_HTTP_306": {
                "prefix": "Requests_Exception_HTTP_306",
                "body": "Requests_Exception_HTTP_306",
                "description": "Exception for 306 Switch Proxy responses"
        },
        "Class:Requests_Exception_HTTP_400": {
                "prefix": "Requests_Exception_HTTP_400",
                "body": "Requests_Exception_HTTP_400",
                "description": "Exception for 400 Bad Request responses"
        },
        "Class:Requests_Exception_HTTP_401": {
                "prefix": "Requests_Exception_HTTP_401",
                "body": "Requests_Exception_HTTP_401",
                "description": "Exception for 401 Unauthorized responses"
        },
        "Class:Requests_Exception_HTTP_402": {
                "prefix": "Requests_Exception_HTTP_402",
                "body": "Requests_Exception_HTTP_402",
                "description": "Exception for 402 Payment Required responses"
        },
        "Class:Requests_Exception_HTTP_403": {
                "prefix": "Requests_Exception_HTTP_403",
                "body": "Requests_Exception_HTTP_403",
                "description": "Exception for 403 Forbidden responses"
        },
        "Class:Requests_Exception_HTTP_404": {
                "prefix": "Requests_Exception_HTTP_404",
                "body": "Requests_Exception_HTTP_404",
                "description": "Exception for 404 Not Found responses"
        },
        "Class:Requests_Exception_HTTP_405": {
                "prefix": "Requests_Exception_HTTP_405",
                "body": "Requests_Exception_HTTP_405",
                "description": "Exception for 405 Method Not Allowed responses"
        },
        "Class:Requests_Exception_HTTP_406": {
                "prefix": "Requests_Exception_HTTP_406",
                "body": "Requests_Exception_HTTP_406",
                "description": "Exception for 406 Not Acceptable responses"
        },
        "Class:Requests_Exception_HTTP_407": {
                "prefix": "Requests_Exception_HTTP_407",
                "body": "Requests_Exception_HTTP_407",
                "description": "Exception for 407 Proxy Authentication Required responses"
        },
        "Class:Requests_Exception_HTTP_408": {
                "prefix": "Requests_Exception_HTTP_408",
                "body": "Requests_Exception_HTTP_408",
                "description": "Exception for 408 Request Timeout responses"
        },
        "Class:Requests_Exception_HTTP_409": {
                "prefix": "Requests_Exception_HTTP_409",
                "body": "Requests_Exception_HTTP_409",
                "description": "Exception for 409 Conflict responses"
        },
        "Class:Requests_Exception_HTTP_410": {
                "prefix": "Requests_Exception_HTTP_410",
                "body": "Requests_Exception_HTTP_410",
                "description": "Exception for 410 Gone responses"
        },
        "Class:Requests_Exception_HTTP_411": {
                "prefix": "Requests_Exception_HTTP_411",
                "body": "Requests_Exception_HTTP_411",
                "description": "Exception for 411 Length Required responses"
        },
        "Class:Requests_Exception_HTTP_412": {
                "prefix": "Requests_Exception_HTTP_412",
                "body": "Requests_Exception_HTTP_412",
                "description": "Exception for 412 Precondition Failed responses"
        },
        "Class:Requests_Exception_HTTP_413": {
                "prefix": "Requests_Exception_HTTP_413",
                "body": "Requests_Exception_HTTP_413",
                "description": "Exception for 413 Request Entity Too Large responses"
        },
        "Class:Requests_Exception_HTTP_414": {
                "prefix": "Requests_Exception_HTTP_414",
                "body": "Requests_Exception_HTTP_414",
                "description": "Exception for 414 Request-URI Too Large responses"
        },
        "Class:Requests_Exception_HTTP_415": {
                "prefix": "Requests_Exception_HTTP_415",
                "body": "Requests_Exception_HTTP_415",
                "description": "Exception for 415 Unsupported Media Type responses"
        },
        "Class:Requests_Exception_HTTP_416": {
                "prefix": "Requests_Exception_HTTP_416",
                "body": "Requests_Exception_HTTP_416",
                "description": "Exception for 416 Requested Range Not Satisfiable responses"
        },
        "Class:Requests_Exception_HTTP_417": {
                "prefix": "Requests_Exception_HTTP_417",
                "body": "Requests_Exception_HTTP_417",
                "description": "Exception for 417 Expectation Failed responses"
        },
        "Class:Requests_Exception_HTTP_418": {
                "prefix": "Requests_Exception_HTTP_418",
                "body": "Requests_Exception_HTTP_418",
                "description": "Exception for 418 I&#039;m A Teapot responses"
        },
        "Class:Requests_Exception_HTTP_428": {
                "prefix": "Requests_Exception_HTTP_428",
                "body": "Requests_Exception_HTTP_428",
                "description": "Exception for 428 Precondition Required responses"
        },
        "Class:Requests_Exception_HTTP_429": {
                "prefix": "Requests_Exception_HTTP_429",
                "body": "Requests_Exception_HTTP_429",
                "description": "Exception for 429 Too Many Requests responses"
        },
        "Class:Requests_Exception_HTTP_431": {
                "prefix": "Requests_Exception_HTTP_431",
                "body": "Requests_Exception_HTTP_431",
                "description": "Exception for 431 Request Header Fields Too Large responses"
        },
        "Class:Requests_Exception_HTTP_500": {
                "prefix": "Requests_Exception_HTTP_500",
                "body": "Requests_Exception_HTTP_500",
                "description": "Exception for 500 Internal Server Error responses"
        },
        "Class:Requests_Exception_HTTP_501": {
                "prefix": "Requests_Exception_HTTP_501",
                "body": "Requests_Exception_HTTP_501",
                "description": "Exception for 501 Not Implemented responses"
        },
        "Class:Requests_Exception_HTTP_502": {
                "prefix": "Requests_Exception_HTTP_502",
                "body": "Requests_Exception_HTTP_502",
                "description": "Exception for 502 Bad Gateway responses"
        },
        "Class:Requests_Exception_HTTP_503": {
                "prefix": "Requests_Exception_HTTP_503",
                "body": "Requests_Exception_HTTP_503",
                "description": "Exception for 503 Service Unavailable responses"
        },
        "Class:Requests_Exception_HTTP_504": {
                "prefix": "Requests_Exception_HTTP_504",
                "body": "Requests_Exception_HTTP_504",
                "description": "Exception for 504 Gateway Timeout responses"
        },
        "Class:Requests_Exception_HTTP_505": {
                "prefix": "Requests_Exception_HTTP_505",
                "body": "Requests_Exception_HTTP_505",
                "description": "Exception for 505 HTTP Version Not Supported responses"
        },
        "Class:Requests_Exception_HTTP_511": {
                "prefix": "Requests_Exception_HTTP_511",
                "body": "Requests_Exception_HTTP_511",
                "description": "Exception for 511 Network Authentication Required responses"
        },
        "Class:Requests_Exception_HTTP_Unknown": {
                "prefix": "Requests_Exception_HTTP_Unknown",
                "body": "Requests_Exception_HTTP_Unknown",
                "description": "Exception for unknown status responses"
        },
        "Class:Requests_Exception_Transport": {
                "prefix": "Requests_Exception_Transport",
                "body": "Requests_Exception_Transport",
                "description": "Exception for HTTP requests"
        },
        "Class:Requests_Exception_Transport_cURL": {
                "prefix": "Requests_Exception_Transport_cURL",
                "body": "Requests_Exception_Transport_cURL",
                "description": "Exception for HTTP requests"
        },
        "Class:Requests_Hooks": {
                "prefix": "Requests_Hooks",
                "body": "Requests_Hooks",
                "description": "Handles adding and dispatching events"
        },
        "Class:Requests_IDNAEncoder": {
                "prefix": "Requests_IDNAEncoder",
                "body": "Requests_IDNAEncoder",
                "description": "IDNA URL encoder"
        },
        "Class:Requests_IPv6": {
                "prefix": "Requests_IPv6",
                "body": "Requests_IPv6",
                "description": "Class to validate and to work with IPv6 addresses"
        },
        "Class:Requests_IRI": {
                "prefix": "Requests_IRI",
                "body": "Requests_IRI",
                "description": "IRI parser/serialiser/normaliser"
        },
        "Class:Requests_Proxy_HTTP": {
                "prefix": "Requests_Proxy_HTTP",
                "body": "Requests_Proxy_HTTP",
                "description": "HTTP Proxy connection interface"
        },
        "Class:Requests_Response": {
                "prefix": "Requests_Response",
                "body": "Requests_Response",
                "description": "HTTP response class"
        },
        "Class:Requests_Response_Headers": {
                "prefix": "Requests_Response_Headers",
                "body": "Requests_Response_Headers",
                "description": "Case-insensitive dictionary, suitable for HTTP headers"
        },
        "Class:Requests_Session": {
                "prefix": "Requests_Session",
                "body": "Requests_Session",
                "description": "Session handler for persistent requests and default parameters"
        },
        "Class:Requests_SSL": {
                "prefix": "Requests_SSL",
                "body": "Requests_SSL",
                "description": "SSL utilities for Requests"
        },
        "Class:Requests_Transport_cURL": {
                "prefix": "Requests_Transport_cURL",
                "body": "Requests_Transport_cURL",
                "description": "cURL HTTP transport"
        },
        "Class:Requests_Transport_fsockopen": {
                "prefix": "Requests_Transport_fsockopen",
                "body": "Requests_Transport_fsockopen",
                "description": "fsockopen HTTP transport"
        },
        "Class:Requests_Utility_CaseInsensitiveDictionary": {
                "prefix": "Requests_Utility_CaseInsensitiveDictionary",
                "body": "Requests_Utility_CaseInsensitiveDictionary",
                "description": "Case-insensitive dictionary, suitable for HTTP headers"
        },
        "Class:Requests_Utility_FilteredIterator": {
                "prefix": "Requests_Utility_FilteredIterator",
                "body": "Requests_Utility_FilteredIterator",
                "description": "Iterator for arrays requiring filtered values"
        },
        "Class:RSSCache": {
                "prefix": "RSSCache",
                "body": "RSSCache",
                "description": ""
        },
        "Class:Services_JSON": {
                "prefix": "Services_JSON",
                "body": "Services_JSON",
                "description": "Converts to and from JSON format."
        },
        "Class:Services_JSON_Error": {
                "prefix": "Services_JSON_Error",
                "body": "Services_JSON_Error",
                "description": ""
        },
        "Class:SimplePie": {
                "prefix": "SimplePie",
                "body": "SimplePie",
                "description": "SimplePie"
        },
        "Class:SimplePie_Author": {
                "prefix": "SimplePie_Author",
                "body": "SimplePie_Author",
                "description": "Manages all author-related data"
        },
        "Class:SimplePie_Cache": {
                "prefix": "SimplePie_Cache",
                "body": "SimplePie_Cache",
                "description": "Used to create cache objects"
        },
        "Class:SimplePie_Cache_DB": {
                "prefix": "SimplePie_Cache_DB",
                "body": "SimplePie_Cache_DB",
                "description": "Base class for database-based caches"
        },
        "Class:SimplePie_Cache_File": {
                "prefix": "SimplePie_Cache_File",
                "body": "SimplePie_Cache_File",
                "description": "Caches data to the filesystem"
        },
        "Class:SimplePie_Cache_Memcache": {
                "prefix": "SimplePie_Cache_Memcache",
                "body": "SimplePie_Cache_Memcache",
                "description": "Caches data to memcache"
        },
        "Class:SimplePie_Cache_Memcached": {
                "prefix": "SimplePie_Cache_Memcached",
                "body": "SimplePie_Cache_Memcached",
                "description": "Caches data to memcached"
        },
        "Class:SimplePie_Cache_MySQL": {
                "prefix": "SimplePie_Cache_MySQL",
                "body": "SimplePie_Cache_MySQL",
                "description": "Caches data to a MySQL database"
        },
        "Class:SimplePie_Cache_Redis": {
                "prefix": "SimplePie_Cache_Redis",
                "body": "SimplePie_Cache_Redis",
                "description": "Caches data to redis"
        },
        "Class:SimplePie_Caption": {
                "prefix": "SimplePie_Caption",
                "body": "SimplePie_Caption",
                "description": "Handles `&lt;media:text&gt;` captions as defined in Media RSS."
        },
        "Class:SimplePie_Category": {
                "prefix": "SimplePie_Category",
                "body": "SimplePie_Category",
                "description": "Manages all category-related data"
        },
        "Class:SimplePie_Content_Type_Sniffer": {
                "prefix": "SimplePie_Content_Type_Sniffer",
                "body": "SimplePie_Content_Type_Sniffer",
                "description": "Content-type sniffing"
        },
        "Class:SimplePie_Copyright": {
                "prefix": "SimplePie_Copyright",
                "body": "SimplePie_Copyright",
                "description": "Manages `&lt;media:copyright&gt;` copyright tags as defined in Media RSS"
        },
        "Class:SimplePie_Core": {
                "prefix": "SimplePie_Core",
                "body": "SimplePie_Core",
                "description": "SimplePie class."
        },
        "Class:SimplePie_Credit": {
                "prefix": "SimplePie_Credit",
                "body": "SimplePie_Credit",
                "description": "Handles `&lt;media:credit&gt;` as defined in Media RSS"
        },
        "Class:SimplePie_Decode_HTML_Entities": {
                "prefix": "SimplePie_Decode_HTML_Entities",
                "body": "SimplePie_Decode_HTML_Entities",
                "description": "Decode HTML Entities"
        },
        "Class:SimplePie_Enclosure": {
                "prefix": "SimplePie_Enclosure",
                "body": "SimplePie_Enclosure",
                "description": "Handles everything related to enclosures (including Media RSS and iTunes RSS)"
        },
        "Class:SimplePie_Exception": {
                "prefix": "SimplePie_Exception",
                "body": "SimplePie_Exception",
                "description": "General SimplePie exception class"
        },
        "Class:SimplePie_File": {
                "prefix": "SimplePie_File",
                "body": "SimplePie_File",
                "description": "Used for fetching remote files and reading local files"
        },
        "Class:SimplePie_gzdecode": {
                "prefix": "SimplePie_gzdecode",
                "body": "SimplePie_gzdecode",
                "description": "Decode &#039;gzip&#039; encoded HTTP data"
        },
        "Class:SimplePie_HTTP_Parser": {
                "prefix": "SimplePie_HTTP_Parser",
                "body": "SimplePie_HTTP_Parser",
                "description": "HTTP Response Parser"
        },
        "Class:SimplePie_IRI": {
                "prefix": "SimplePie_IRI",
                "body": "SimplePie_IRI",
                "description": "IRI parser/serialiser/normaliser"
        },
        "Class:SimplePie_Item": {
                "prefix": "SimplePie_Item",
                "body": "SimplePie_Item",
                "description": "Manages all item-related data"
        },
        "Class:SimplePie_Locator": {
                "prefix": "SimplePie_Locator",
                "body": "SimplePie_Locator",
                "description": "Used for feed auto-discovery"
        },
        "Class:SimplePie_Misc": {
                "prefix": "SimplePie_Misc",
                "body": "SimplePie_Misc",
                "description": "Miscellanous utilities"
        },
        "Class:SimplePie_Net_IPv6": {
                "prefix": "SimplePie_Net_IPv6",
                "body": "SimplePie_Net_IPv6",
                "description": "Class to validate and to work with IPv6 addresses."
        },
        "Class:SimplePie_Parse_Date": {
                "prefix": "SimplePie_Parse_Date",
                "body": "SimplePie_Parse_Date",
                "description": "Date Parser"
        },
        "Class:SimplePie_Parser": {
                "prefix": "SimplePie_Parser",
                "body": "SimplePie_Parser",
                "description": "Parses XML into something sane"
        },
        "Class:SimplePie_Rating": {
                "prefix": "SimplePie_Rating",
                "body": "SimplePie_Rating",
                "description": "Handles `&lt;media:rating&gt;` or `&lt;itunes:explicit&gt;` tags as defined in Media RSS and iTunes RSS respectively"
        },
        "Class:SimplePie_Registry": {
                "prefix": "SimplePie_Registry",
                "body": "SimplePie_Registry",
                "description": "Handles creating objects and calling methods"
        },
        "Class:SimplePie_Restriction": {
                "prefix": "SimplePie_Restriction",
                "body": "SimplePie_Restriction",
                "description": "Handles `&lt;media:restriction&gt;` as defined in Media RSS"
        },
        "Class:SimplePie_Sanitize": {
                "prefix": "SimplePie_Sanitize",
                "body": "SimplePie_Sanitize",
                "description": "Used for data cleanup and post-processing"
        },
        "Class:SimplePie_Source": {
                "prefix": "SimplePie_Source",
                "body": "SimplePie_Source",
                "description": "Handles `&lt;atom:source&gt;`"
        },
        "Class:SimplePie_XML_Declaration_Parser": {
                "prefix": "SimplePie_XML_Declaration_Parser",
                "body": "SimplePie_XML_Declaration_Parser",
                "description": "Parses the XML Declaration"
        },
        "Class:Snoopy": {
                "prefix": "Snoopy",
                "body": "Snoopy",
                "description": ""
        },
        "Class:SodiumException": {
                "prefix": "SodiumException",
                "body": "SodiumException",
                "description": "Class SodiumException"
        },
        "Class:SplFixedArray": {
                "prefix": "SplFixedArray",
                "body": "SplFixedArray",
                "description": "The SplFixedArray class provides the main functionalities of array. The main differences between a SplFixedArray and a normal PHP array is that the SplFixedArray is of fixed length and allows only integers within the range as indexes. The advantage is that it allows a faster array implementation."
        },
        "Class:Text_Diff": {
                "prefix": "Text_Diff",
                "body": "Text_Diff",
                "description": "General API for generating and formatting diffs - the differences between two sequences of strings."
        },
        "Class:Text_Diff_Engine_native": {
                "prefix": "Text_Diff_Engine_native",
                "body": "Text_Diff_Engine_native",
                "description": "Class used internally by Text_Diff to actually compute the diffs."
        },
        "Class:Text_Diff_Engine_shell": {
                "prefix": "Text_Diff_Engine_shell",
                "body": "Text_Diff_Engine_shell",
                "description": "Class used internally by Diff to actually compute the diffs."
        },
        "Class:Text_Diff_Engine_string": {
                "prefix": "Text_Diff_Engine_string",
                "body": "Text_Diff_Engine_string",
                "description": "Parses unified or context diffs output from eg. the diff utility."
        },
        "Class:Text_Diff_Engine_xdiff": {
                "prefix": "Text_Diff_Engine_xdiff",
                "body": "Text_Diff_Engine_xdiff",
                "description": "Class used internally by Diff to actually compute the diffs."
        },
        "Class:Text_Diff_Op": {
                "prefix": "Text_Diff_Op",
                "body": "Text_Diff_Op",
                "description": ""
        },
        "Class:Text_Diff_Op_add": {
                "prefix": "Text_Diff_Op_add",
                "body": "Text_Diff_Op_add",
                "description": ""
        },
        "Class:Text_Diff_Op_change": {
                "prefix": "Text_Diff_Op_change",
                "body": "Text_Diff_Op_change",
                "description": ""
        },
        "Class:Text_Diff_Op_copy": {
                "prefix": "Text_Diff_Op_copy",
                "body": "Text_Diff_Op_copy",
                "description": ""
        },
        "Class:Text_Diff_Op_delete": {
                "prefix": "Text_Diff_Op_delete",
                "body": "Text_Diff_Op_delete",
                "description": ""
        },
        "Class:Text_Diff_Renderer": {
                "prefix": "Text_Diff_Renderer",
                "body": "Text_Diff_Renderer",
                "description": "A class to render Diffs in different formats."
        },
        "Class:Text_Diff_Renderer_inline": {
                "prefix": "Text_Diff_Renderer_inline",
                "body": "Text_Diff_Renderer_inline",
                "description": "&quot;Inline&quot; diff renderer."
        },
        "Class:Text_MappedDiff": {
                "prefix": "Text_MappedDiff",
                "body": "Text_MappedDiff",
                "description": "General API for generating and formatting diffs - the differences between two sequences of strings."
        },
        "Class:Theme_Installer_Skin": {
                "prefix": "Theme_Installer_Skin",
                "body": "Theme_Installer_Skin",
                "description": "Theme Installer Skin for the WordPress Theme Installer."
        },
        "Class:Theme_Upgrader": {
                "prefix": "Theme_Upgrader",
                "body": "Theme_Upgrader",
                "description": "Core class used for upgrading/installing themes."
        },
        "Class:Theme_Upgrader_Skin": {
                "prefix": "Theme_Upgrader_Skin",
                "body": "Theme_Upgrader_Skin",
                "description": "Theme Upgrader Skin for WordPress Theme Upgrades."
        },
        "Class:Translation_Entry": {
                "prefix": "Translation_Entry",
                "body": "Translation_Entry",
                "description": "Translation_Entry class encapsulates a translatable string."
        },
        "Class:Translations": {
                "prefix": "Translations",
                "body": "Translations",
                "description": ""
        },
        "Class:TypeError": {
                "prefix": "TypeError",
                "body": "TypeError",
                "description": ""
        },
        "Class:Walker": {
                "prefix": "Walker",
                "body": "Walker",
                "description": "A class for displaying various tree-like structures."
        },
        "Class:Walker_Category": {
                "prefix": "Walker_Category",
                "body": "Walker_Category",
                "description": "Core class used to create an HTML list of categories."
        },
        "Class:Walker_Category_Checklist": {
                "prefix": "Walker_Category_Checklist",
                "body": "Walker_Category_Checklist",
                "description": "Core walker class to output an unordered list of category checkbox input elements."
        },
        "Class:Walker_CategoryDropdown": {
                "prefix": "Walker_CategoryDropdown",
                "body": "Walker_CategoryDropdown",
                "description": "Core class used to create an HTML dropdown list of Categories."
        },
        "Class:Walker_Comment": {
                "prefix": "Walker_Comment",
                "body": "Walker_Comment",
                "description": "Core walker class used to create an HTML list of comments."
        },
        "Class:Walker_Nav_Menu": {
                "prefix": "Walker_Nav_Menu",
                "body": "Walker_Nav_Menu",
                "description": "Core class used to implement an HTML list of nav menu items."
        },
        "Class:Walker_Nav_Menu_Checklist": {
                "prefix": "Walker_Nav_Menu_Checklist",
                "body": "Walker_Nav_Menu_Checklist",
                "description": "Create HTML list of nav menu input items."
        },
        "Class:Walker_Nav_Menu_Edit": {
                "prefix": "Walker_Nav_Menu_Edit",
                "body": "Walker_Nav_Menu_Edit",
                "description": "Create HTML list of nav menu input items."
        },
        "Class:Walker_Page": {
                "prefix": "Walker_Page",
                "body": "Walker_Page",
                "description": "Core walker class used to create an HTML list of pages."
        },
        "Class:Walker_PageDropdown": {
                "prefix": "Walker_PageDropdown",
                "body": "Walker_PageDropdown",
                "description": "Core class used to create an HTML drop-down list of pages."
        },
        "Class:WP": {
                "prefix": "WP",
                "body": "WP",
                "description": "WordPress environment setup class."
        },
        "Class:WP_Admin_Bar": {
                "prefix": "WP_Admin_Bar",
                "body": "WP_Admin_Bar",
                "description": "Core class used to implement the Toolbar API."
        },
        "Class:WP_Ajax_Response": {
                "prefix": "WP_Ajax_Response",
                "body": "WP_Ajax_Response",
                "description": "Send XML response back to Ajax request."
        },
        "Class:WP_Ajax_Upgrader_Skin": {
                "prefix": "WP_Ajax_Upgrader_Skin",
                "body": "WP_Ajax_Upgrader_Skin",
                "description": "Upgrader Skin for Ajax WordPress upgrades."
        },
        "Class:WP_Application_Passwords": {
                "prefix": "WP_Application_Passwords",
                "body": "WP_Application_Passwords",
                "description": "Class for displaying, modifying, and sanitizing application passwords."
        },
        "Class:WP_Application_Passwords_List_Table": {
                "prefix": "WP_Application_Passwords_List_Table",
                "body": "WP_Application_Passwords_List_Table",
                "description": "Class for displaying the list of application password items."
        },
        "Class:wp_atom_server": {
                "prefix": "wp_atom_server",
                "body": "wp_atom_server",
                "description": ""
        },
        "Class:WP_Automatic_Updater": {
                "prefix": "WP_Automatic_Updater",
                "body": "WP_Automatic_Updater",
                "description": "Core class used for handling automatic background updates."
        },
        "Class:WP_Block": {
                "prefix": "WP_Block",
                "body": "WP_Block",
                "description": "Class representing a parsed instance of a block."
        },
        "Class:WP_Block_Editor_Context": {
                "prefix": "WP_Block_Editor_Context",
                "body": "WP_Block_Editor_Context",
                "description": "Contains information about a block editor being rendered."
        },
        "Class:WP_Block_List": {
                "prefix": "WP_Block_List",
                "body": "WP_Block_List",
                "description": "Class representing a list of block instances."
        },
        "Class:WP_Block_Parser": {
                "prefix": "WP_Block_Parser",
                "body": "WP_Block_Parser",
                "description": "Class WP_Block_Parser"
        },
        "Class:WP_Block_Parser_Block": {
                "prefix": "WP_Block_Parser_Block",
                "body": "WP_Block_Parser_Block",
                "description": "Class WP_Block_Parser_Block"
        },
        "Class:WP_Block_Parser_Frame": {
                "prefix": "WP_Block_Parser_Frame",
                "body": "WP_Block_Parser_Frame",
                "description": "Class WP_Block_Parser_Frame"
        },
        "Class:WP_Block_Pattern_Categories_Registry": {
                "prefix": "WP_Block_Pattern_Categories_Registry",
                "body": "WP_Block_Pattern_Categories_Registry",
                "description": "Class used for interacting with block pattern categories."
        },
        "Class:WP_Block_Patterns_Registry": {
                "prefix": "WP_Block_Patterns_Registry",
                "body": "WP_Block_Patterns_Registry",
                "description": "Class used for interacting with block patterns."
        },
        "Class:WP_Block_Styles_Registry": {
                "prefix": "WP_Block_Styles_Registry",
                "body": "WP_Block_Styles_Registry",
                "description": "Class used for interacting with block styles."
        },
        "Class:WP_Block_Supports": {
                "prefix": "WP_Block_Supports",
                "body": "WP_Block_Supports",
                "description": "Class encapsulating and implementing Block Supports."
        },
        "Class:WP_Block_Template": {
                "prefix": "WP_Block_Template",
                "body": "WP_Block_Template",
                "description": "Class representing a block template."
        },
        "Class:WP_Block_Type": {
                "prefix": "WP_Block_Type",
                "body": "WP_Block_Type",
                "description": "Core class representing a block type."
        },
        "Class:WP_Block_Type_Registry": {
                "prefix": "WP_Block_Type_Registry",
                "body": "WP_Block_Type_Registry",
                "description": "Core class used for interacting with block types."
        },
        "Class:WP_Comment": {
                "prefix": "WP_Comment",
                "body": "WP_Comment",
                "description": "Core class used to organize comments as instantiated objects with defined members."
        },
        "Class:WP_Comment_Query": {
                "prefix": "WP_Comment_Query",
                "body": "WP_Comment_Query",
                "description": "Core class used for querying comments."
        },
        "Class:WP_Comments_List_Table": {
                "prefix": "WP_Comments_List_Table",
                "body": "WP_Comments_List_Table",
                "description": "Core class used to implement displaying comments in a list table."
        },
        "Class:WP_Community_Events": {
                "prefix": "WP_Community_Events",
                "body": "WP_Community_Events",
                "description": "Class WP_Community_Events."
        },
        "Class:WP_Customize_Background_Image_Control": {
                "prefix": "WP_Customize_Background_Image_Control",
                "body": "WP_Customize_Background_Image_Control",
                "description": "Customize Background Image Control class."
        },
        "Class:WP_Customize_Background_Image_Setting": {
                "prefix": "WP_Customize_Background_Image_Setting",
                "body": "WP_Customize_Background_Image_Setting",
                "description": "Customizer Background Image Setting class."
        },
        "Class:WP_Customize_Background_Position_Control": {
                "prefix": "WP_Customize_Background_Position_Control",
                "body": "WP_Customize_Background_Position_Control",
                "description": "Customize Background Position Control class."
        },
        "Class:WP_Customize_Code_Editor_Control": {
                "prefix": "WP_Customize_Code_Editor_Control",
                "body": "WP_Customize_Code_Editor_Control",
                "description": "Customize Code Editor Control class."
        },
        "Class:WP_Customize_Color_Control": {
                "prefix": "WP_Customize_Color_Control",
                "body": "WP_Customize_Color_Control",
                "description": "Customize Color Control class."
        },
        "Class:WP_Customize_Control": {
                "prefix": "WP_Customize_Control",
                "body": "WP_Customize_Control",
                "description": "Customize Control class."
        },
        "Class:WP_Customize_Cropped_Image_Control": {
                "prefix": "WP_Customize_Cropped_Image_Control",
                "body": "WP_Customize_Cropped_Image_Control",
                "description": "Customize Cropped Image Control class."
        },
        "Class:WP_Customize_Custom_CSS_Setting": {
                "prefix": "WP_Customize_Custom_CSS_Setting",
                "body": "WP_Customize_Custom_CSS_Setting",
                "description": "Custom Setting to handle WP Custom CSS."
        },
        "Class:WP_Customize_Date_Time_Control": {
                "prefix": "WP_Customize_Date_Time_Control",
                "body": "WP_Customize_Date_Time_Control",
                "description": "Customize Date Time Control class."
        },
        "Class:WP_Customize_Filter_Setting": {
                "prefix": "WP_Customize_Filter_Setting",
                "body": "WP_Customize_Filter_Setting",
                "description": "A setting that is used to filter a value, but will not save the results."
        },
        "Class:WP_Customize_Header_Image_Control": {
                "prefix": "WP_Customize_Header_Image_Control",
                "body": "WP_Customize_Header_Image_Control",
                "description": "Customize Header Image Control class."
        },
        "Class:WP_Customize_Header_Image_Setting": {
                "prefix": "WP_Customize_Header_Image_Setting",
                "body": "WP_Customize_Header_Image_Setting",
                "description": "A setting that is used to filter a value, but will not save the results."
        },
        "Class:WP_Customize_Image_Control": {
                "prefix": "WP_Customize_Image_Control",
                "body": "WP_Customize_Image_Control",
                "description": "Customize Image Control class."
        },
        "Class:WP_Customize_Manager": {
                "prefix": "WP_Customize_Manager",
                "body": "WP_Customize_Manager",
                "description": "Customize Manager class."
        },
        "Class:WP_Customize_Media_Control": {
                "prefix": "WP_Customize_Media_Control",
                "body": "WP_Customize_Media_Control",
                "description": "Customize Media Control class."
        },
        "Class:WP_Customize_Nav_Menu_Auto_Add_Control": {
                "prefix": "WP_Customize_Nav_Menu_Auto_Add_Control",
                "body": "WP_Customize_Nav_Menu_Auto_Add_Control",
                "description": "Customize control to represent the auto_add field for a given menu."
        },
        "Class:WP_Customize_Nav_Menu_Control": {
                "prefix": "WP_Customize_Nav_Menu_Control",
                "body": "WP_Customize_Nav_Menu_Control",
                "description": "Customize Nav Menu Control Class."
        },
        "Class:WP_Customize_Nav_Menu_Item_Control": {
                "prefix": "WP_Customize_Nav_Menu_Item_Control",
                "body": "WP_Customize_Nav_Menu_Item_Control",
                "description": "Customize control to represent the name field for a given menu."
        },
        "Class:WP_Customize_Nav_Menu_Item_Setting": {
                "prefix": "WP_Customize_Nav_Menu_Item_Setting",
                "body": "WP_Customize_Nav_Menu_Item_Setting",
                "description": "Customize Setting to represent a nav_menu."
        },
        "Class:WP_Customize_Nav_Menu_Location_Control": {
                "prefix": "WP_Customize_Nav_Menu_Location_Control",
                "body": "WP_Customize_Nav_Menu_Location_Control",
                "description": "Customize Menu Location Control Class."
        },
        "Class:WP_Customize_Nav_Menu_Locations_Control": {
                "prefix": "WP_Customize_Nav_Menu_Locations_Control",
                "body": "WP_Customize_Nav_Menu_Locations_Control",
                "description": "Customize Nav Menu Locations Control Class."
        },
        "Class:WP_Customize_Nav_Menu_Name_Control": {
                "prefix": "WP_Customize_Nav_Menu_Name_Control",
                "body": "WP_Customize_Nav_Menu_Name_Control",
                "description": "Customize control to represent the name field for a given menu."
        },
        "Class:WP_Customize_Nav_Menu_Section": {
                "prefix": "WP_Customize_Nav_Menu_Section",
                "body": "WP_Customize_Nav_Menu_Section",
                "description": "Customize Menu Section Class"
        },
        "Class:WP_Customize_Nav_Menu_Setting": {
                "prefix": "WP_Customize_Nav_Menu_Setting",
                "body": "WP_Customize_Nav_Menu_Setting",
                "description": "Customize Setting to represent a nav_menu."
        },
        "Class:WP_Customize_Nav_Menus": {
                "prefix": "WP_Customize_Nav_Menus",
                "body": "WP_Customize_Nav_Menus",
                "description": "Customize Nav Menus class."
        },
        "Class:WP_Customize_Nav_Menus_Panel": {
                "prefix": "WP_Customize_Nav_Menus_Panel",
                "body": "WP_Customize_Nav_Menus_Panel",
                "description": "Customize Nav Menus Panel Class"
        },
        "Class:WP_Customize_New_Menu_Control": {
                "prefix": "WP_Customize_New_Menu_Control",
                "body": "WP_Customize_New_Menu_Control",
                "description": "Customize control class for new menus."
        },
        "Class:WP_Customize_New_Menu_Section": {
                "prefix": "WP_Customize_New_Menu_Section",
                "body": "WP_Customize_New_Menu_Section",
                "description": "Customize Menu Section Class"
        },
        "Class:WP_Customize_Panel": {
                "prefix": "WP_Customize_Panel",
                "body": "WP_Customize_Panel",
                "description": "Customize Panel class."
        },
        "Class:WP_Customize_Partial": {
                "prefix": "WP_Customize_Partial",
                "body": "WP_Customize_Partial",
                "description": "Core Customizer class for implementing selective refresh partials."
        },
        "Class:WP_Customize_Section": {
                "prefix": "WP_Customize_Section",
                "body": "WP_Customize_Section",
                "description": "Customize Section class."
        },
        "Class:WP_Customize_Selective_Refresh": {
                "prefix": "WP_Customize_Selective_Refresh",
                "body": "WP_Customize_Selective_Refresh",
                "description": "Core Customizer class for implementing selective refresh."
        },
        "Class:WP_Customize_Setting": {
                "prefix": "WP_Customize_Setting",
                "body": "WP_Customize_Setting",
                "description": "Customize Setting class."
        },
        "Class:WP_Customize_Sidebar_Section": {
                "prefix": "WP_Customize_Sidebar_Section",
                "body": "WP_Customize_Sidebar_Section",
                "description": "Customizer section representing widget area (sidebar)."
        },
        "Class:WP_Customize_Site_Icon_Control": {
                "prefix": "WP_Customize_Site_Icon_Control",
                "body": "WP_Customize_Site_Icon_Control",
                "description": "Customize Site Icon control class."
        },
        "Class:WP_Customize_Theme_Control": {
                "prefix": "WP_Customize_Theme_Control",
                "body": "WP_Customize_Theme_Control",
                "description": "Customize Theme Control class."
        },
        "Class:WP_Customize_Themes_Panel": {
                "prefix": "WP_Customize_Themes_Panel",
                "body": "WP_Customize_Themes_Panel",
                "description": "Customize Themes Panel Class"
        },
        "Class:WP_Customize_Themes_Section": {
                "prefix": "WP_Customize_Themes_Section",
                "body": "WP_Customize_Themes_Section",
                "description": "Customize Themes Section class."
        },
        "Class:WP_Customize_Upload_Control": {
                "prefix": "WP_Customize_Upload_Control",
                "body": "WP_Customize_Upload_Control",
                "description": "Customize Upload Control Class."
        },
        "Class:WP_Customize_Widgets": {
                "prefix": "WP_Customize_Widgets",
                "body": "WP_Customize_Widgets",
                "description": "Customize Widgets class."
        },
        "Class:WP_Date_Query": {
                "prefix": "WP_Date_Query",
                "body": "WP_Date_Query",
                "description": "Class for generating SQL clauses that filter a primary query according to date."
        },
        "Class:WP_Debug_Data": {
                "prefix": "WP_Debug_Data",
                "body": "WP_Debug_Data",
                "description": "Class for providing debug data based on a users WordPress environment."
        },
        "Class:WP_Dependencies": {
                "prefix": "WP_Dependencies",
                "body": "WP_Dependencies",
                "description": "Core base class extended to register items."
        },
        "Class:WP_Embed": {
                "prefix": "WP_Embed",
                "body": "WP_Embed",
                "description": "API for easily embedding rich media such as videos and images into content."
        },
        "Class:WP_Error": {
                "prefix": "WP_Error",
                "body": "WP_Error",
                "description": "WordPress Error class."
        },
        "Class:WP_Fatal_Error_Handler": {
                "prefix": "WP_Fatal_Error_Handler",
                "body": "WP_Fatal_Error_Handler",
                "description": "Core class used as the default shutdown handler for fatal errors."
        },
        "Class:WP_Feed_Cache": {
                "prefix": "WP_Feed_Cache",
                "body": "WP_Feed_Cache",
                "description": "Core class used to implement a feed cache."
        },
        "Class:WP_Feed_Cache_Transient": {
                "prefix": "WP_Feed_Cache_Transient",
                "body": "WP_Feed_Cache_Transient",
                "description": "Core class used to implement feed cache transients."
        },
        "Class:WP_Filesystem_Base": {
                "prefix": "WP_Filesystem_Base",
                "body": "WP_Filesystem_Base",
                "description": "Base WordPress Filesystem class which Filesystem implementations extend."
        },
        "Class:WP_Filesystem_Direct": {
                "prefix": "WP_Filesystem_Direct",
                "body": "WP_Filesystem_Direct",
                "description": "WordPress Filesystem Class for direct PHP file and folder manipulation."
        },
        "Class:WP_Filesystem_FTPext": {
                "prefix": "WP_Filesystem_FTPext",
                "body": "WP_Filesystem_FTPext",
                "description": "WordPress Filesystem Class for implementing FTP."
        },
        "Class:WP_Filesystem_ftpsockets": {
                "prefix": "WP_Filesystem_ftpsockets",
                "body": "WP_Filesystem_ftpsockets",
                "description": "WordPress Filesystem Class for implementing FTP Sockets."
        },
        "Class:WP_Filesystem_SSH2": {
                "prefix": "WP_Filesystem_SSH2",
                "body": "WP_Filesystem_SSH2",
                "description": "WordPress Filesystem Class for implementing SSH2"
        },
        "Class:WP_Hook": {
                "prefix": "WP_Hook",
                "body": "WP_Hook",
                "description": "Core class used to implement action and filter hook functionality."
        },
        "Class:WP_Http": {
                "prefix": "WP_Http",
                "body": "WP_Http",
                "description": "Core class used for managing HTTP transports and making HTTP requests."
        },
        "Class:WP_Http_Cookie": {
                "prefix": "WP_Http_Cookie",
                "body": "WP_Http_Cookie",
                "description": "Core class used to encapsulate a single cookie object for internal use."
        },
        "Class:WP_Http_Curl": {
                "prefix": "WP_Http_Curl",
                "body": "WP_Http_Curl",
                "description": "Core class used to integrate Curl as an HTTP transport."
        },
        "Class:WP_Http_Encoding": {
                "prefix": "WP_Http_Encoding",
                "body": "WP_Http_Encoding",
                "description": "Core class used to implement deflate and gzip transfer encoding support for HTTP requests."
        },
        "Class:WP_HTTP_Fsockopen": {
                "prefix": "WP_HTTP_Fsockopen",
                "body": "WP_HTTP_Fsockopen",
                "description": "Deprecated HTTP Transport method which used fsockopen."
        },
        "Class:WP_HTTP_IXR_Client": {
                "prefix": "WP_HTTP_IXR_Client",
                "body": "WP_HTTP_IXR_Client",
                "description": "WP_HTTP_IXR_Client"
        },
        "Class:WP_HTTP_Proxy": {
                "prefix": "WP_HTTP_Proxy",
                "body": "WP_HTTP_Proxy",
                "description": "Core class used to implement HTTP API proxy support."
        },
        "Class:WP_HTTP_Requests_Hooks": {
                "prefix": "WP_HTTP_Requests_Hooks",
                "body": "WP_HTTP_Requests_Hooks",
                "description": "Bridge to connect Requests internal hooks to WordPress actions."
        },
        "Class:WP_HTTP_Requests_Response": {
                "prefix": "WP_HTTP_Requests_Response",
                "body": "WP_HTTP_Requests_Response",
                "description": "Core wrapper object for a Requests_Response for standardisation."
        },
        "Class:WP_HTTP_Response": {
                "prefix": "WP_HTTP_Response",
                "body": "WP_HTTP_Response",
                "description": "Core class used to prepare HTTP responses."
        },
        "Class:WP_Http_Streams": {
                "prefix": "WP_Http_Streams",
                "body": "WP_Http_Streams",
                "description": "Core class used to integrate PHP Streams as an HTTP transport."
        },
        "Class:WP_Image_Editor": {
                "prefix": "WP_Image_Editor",
                "body": "WP_Image_Editor",
                "description": "Base image editor class from which implementations extend"
        },
        "Class:WP_Image_Editor_GD": {
                "prefix": "WP_Image_Editor_GD",
                "body": "WP_Image_Editor_GD",
                "description": "WordPress Image Editor Class for Image Manipulation through GD"
        },
        "Class:WP_Image_Editor_Imagick": {
                "prefix": "WP_Image_Editor_Imagick",
                "body": "WP_Image_Editor_Imagick",
                "description": "WordPress Image Editor Class for Image Manipulation through Imagick PHP Module"
        },
        "Class:WP_Importer": {
                "prefix": "WP_Importer",
                "body": "WP_Importer",
                "description": "WP_Importer base class"
        },
        "Class:WP_Internal_Pointers": {
                "prefix": "WP_Internal_Pointers",
                "body": "WP_Internal_Pointers",
                "description": "Core class used to implement an internal admin pointers API."
        },
        "Class:WP_Links_List_Table": {
                "prefix": "WP_Links_List_Table",
                "body": "WP_Links_List_Table",
                "description": "Core class used to implement displaying links in a list table."
        },
        "Class:WP_List_Table": {
                "prefix": "WP_List_Table",
                "body": "WP_List_Table",
                "description": "Base class for displaying a list of items in an ajaxified HTML table."
        },
        "Class:WP_List_Util": {
                "prefix": "WP_List_Util",
                "body": "WP_List_Util",
                "description": "List utility."
        },
        "Class:WP_Locale": {
                "prefix": "WP_Locale",
                "body": "WP_Locale",
                "description": "Core class used to store translated data for a locale."
        },
        "Class:WP_Locale_Switcher": {
                "prefix": "WP_Locale_Switcher",
                "body": "WP_Locale_Switcher",
                "description": "Core class used for switching locales."
        },
        "Class:WP_MatchesMapRegex": {
                "prefix": "WP_MatchesMapRegex",
                "body": "WP_MatchesMapRegex",
                "description": "Helper class to remove the need to use eval to replace $matches[] in query strings."
        },
        "Class:WP_Media_List_Table": {
                "prefix": "WP_Media_List_Table",
                "body": "WP_Media_List_Table",
                "description": "Core class used to implement displaying media items in a list table."
        },
        "Class:WP_Meta_Query": {
                "prefix": "WP_Meta_Query",
                "body": "WP_Meta_Query",
                "description": "Core class used to implement meta queries for the Meta API."
        },
        "Class:WP_Metadata_Lazyloader": {
                "prefix": "WP_Metadata_Lazyloader",
                "body": "WP_Metadata_Lazyloader",
                "description": "Core class used for lazy-loading object metadata."
        },
        "Class:WP_MS_Sites_List_Table": {
                "prefix": "WP_MS_Sites_List_Table",
                "body": "WP_MS_Sites_List_Table",
                "description": "Core class used to implement displaying sites in a list table for the network admin."
        },
        "Class:WP_MS_Themes_List_Table": {
                "prefix": "WP_MS_Themes_List_Table",
                "body": "WP_MS_Themes_List_Table",
                "description": "Core class used to implement displaying themes in a list table for the network admin."
        },
        "Class:WP_MS_Users_List_Table": {
                "prefix": "WP_MS_Users_List_Table",
                "body": "WP_MS_Users_List_Table",
                "description": "Core class used to implement displaying users in a list table for the network admin."
        },
        "Class:WP_Nav_Menu_Widget": {
                "prefix": "WP_Nav_Menu_Widget",
                "body": "WP_Nav_Menu_Widget",
                "description": "Core class used to implement the Navigation Menu widget."
        },
        "Class:WP_Network": {
                "prefix": "WP_Network",
                "body": "WP_Network",
                "description": "Core class used for interacting with a multisite network."
        },
        "Class:WP_Network_Query": {
                "prefix": "WP_Network_Query",
                "body": "WP_Network_Query",
                "description": "Core class used for querying networks."
        },
        "Class:WP_Object_Cache": {
                "prefix": "WP_Object_Cache",
                "body": "WP_Object_Cache",
                "description": "Core class that implements an object cache."
        },
        "Class:WP_oEmbed": {
                "prefix": "WP_oEmbed",
                "body": "WP_oEmbed",
                "description": "Core class used to implement oEmbed functionality."
        },
        "Class:WP_oEmbed_Controller": {
                "prefix": "WP_oEmbed_Controller",
                "body": "WP_oEmbed_Controller",
                "description": "oEmbed API endpoint controller."
        },
        "Class:WP_Paused_Extensions_Storage": {
                "prefix": "WP_Paused_Extensions_Storage",
                "body": "WP_Paused_Extensions_Storage",
                "description": "Core class used for storing paused extensions."
        },
        "Class:WP_Plugin_Install_List_Table": {
                "prefix": "WP_Plugin_Install_List_Table",
                "body": "WP_Plugin_Install_List_Table",
                "description": "Core class used to implement displaying plugins to install in a list table."
        },
        "Class:WP_Plugins_List_Table": {
                "prefix": "WP_Plugins_List_Table",
                "body": "WP_Plugins_List_Table",
                "description": "Core class used to implement displaying installed plugins in a list table."
        },
        "Class:WP_Post": {
                "prefix": "WP_Post",
                "body": "WP_Post",
                "description": "Core class used to implement the WP_Post object."
        },
        "Class:WP_Post_Comments_List_Table": {
                "prefix": "WP_Post_Comments_List_Table",
                "body": "WP_Post_Comments_List_Table",
                "description": "Core class used to implement displaying post comments in a list table."
        },
        "Class:WP_Post_Type": {
                "prefix": "WP_Post_Type",
                "body": "WP_Post_Type",
                "description": "Core class used for interacting with post types."
        },
        "Class:WP_Posts_List_Table": {
                "prefix": "WP_Posts_List_Table",
                "body": "WP_Posts_List_Table",
                "description": "Core class used to implement displaying posts in a list table."
        },
        "Class:WP_Privacy_Data_Export_Requests_List_Table": {
                "prefix": "WP_Privacy_Data_Export_Requests_List_Table",
                "body": "WP_Privacy_Data_Export_Requests_List_Table",
                "description": "WP_Privacy_Data_Export_Requests_Table class."
        },
        "Class:WP_Privacy_Data_Export_Requests_Table": {
                "prefix": "WP_Privacy_Data_Export_Requests_Table",
                "body": "WP_Privacy_Data_Export_Requests_Table",
                "description": "Previous class for list table for privacy data export requests."
        },
        "Class:WP_Privacy_Data_Removal_Requests_List_Table": {
                "prefix": "WP_Privacy_Data_Removal_Requests_List_Table",
                "body": "WP_Privacy_Data_Removal_Requests_List_Table",
                "description": "WP_Privacy_Data_Removal_Requests_List_Table class."
        },
        "Class:WP_Privacy_Data_Removal_Requests_Table": {
                "prefix": "WP_Privacy_Data_Removal_Requests_Table",
                "body": "WP_Privacy_Data_Removal_Requests_Table",
                "description": "Previous class for list table for privacy data erasure requests."
        },
        "Class:WP_Privacy_Policy_Content": {
                "prefix": "WP_Privacy_Policy_Content",
                "body": "WP_Privacy_Policy_Content",
                "description": "WP_Privacy_Policy_Content class."
        },
        "Class:WP_Privacy_Requests_Table": {
                "prefix": "WP_Privacy_Requests_Table",
                "body": "WP_Privacy_Requests_Table",
                "description": "List Table API: WP_Privacy_Requests_Table class"
        },
        "Class:WP_Query": {
                "prefix": "WP_Query",
                "body": "WP_Query",
                "description": "The WordPress Query class."
        },
        "Class:WP_Recovery_Mode": {
                "prefix": "WP_Recovery_Mode",
                "body": "WP_Recovery_Mode",
                "description": "Core class used to implement Recovery Mode."
        },
        "Class:WP_Recovery_Mode_Cookie_Service": {
                "prefix": "WP_Recovery_Mode_Cookie_Service",
                "body": "WP_Recovery_Mode_Cookie_Service",
                "description": "Core class used to set, validate, and clear cookies that identify a Recovery Mode session."
        },
        "Class:WP_Recovery_Mode_Email_Service": {
                "prefix": "WP_Recovery_Mode_Email_Service",
                "body": "WP_Recovery_Mode_Email_Service",
                "description": "Core class used to send an email with a link to begin Recovery Mode."
        },
        "Class:WP_Recovery_Mode_Key_Service": {
                "prefix": "WP_Recovery_Mode_Key_Service",
                "body": "WP_Recovery_Mode_Key_Service",
                "description": "Core class used to generate and validate keys used to enter Recovery Mode."
        },
        "Class:WP_Recovery_Mode_Link_Service": {
                "prefix": "WP_Recovery_Mode_Link_Service",
                "body": "WP_Recovery_Mode_Link_Service",
                "description": "Core class used to generate and handle recovery mode links."
        },
        "Class:WP_REST_Application_Passwords_Controller": {
                "prefix": "WP_REST_Application_Passwords_Controller",
                "body": "WP_REST_Application_Passwords_Controller",
                "description": "Core class to access a user&#039;s application passwords via the REST API."
        },
        "Class:WP_REST_Attachments_Controller": {
                "prefix": "WP_REST_Attachments_Controller",
                "body": "WP_REST_Attachments_Controller",
                "description": "Core controller used to access attachments via the REST API."
        },
        "Class:WP_REST_Autosaves_Controller": {
                "prefix": "WP_REST_Autosaves_Controller",
                "body": "WP_REST_Autosaves_Controller",
                "description": "Core class used to access autosaves via the REST API."
        },
        "Class:WP_REST_Block_Directory_Controller": {
                "prefix": "WP_REST_Block_Directory_Controller",
                "body": "WP_REST_Block_Directory_Controller",
                "description": "Controller which provides REST endpoint for the blocks."
        },
        "Class:WP_REST_Block_Pattern_Categories_Controller": {
                "prefix": "WP_REST_Block_Pattern_Categories_Controller",
                "body": "WP_REST_Block_Pattern_Categories_Controller",
                "description": "Core class used to access block pattern categories via the REST API."
        },
        "Class:WP_REST_Block_Patterns_Controller": {
                "prefix": "WP_REST_Block_Patterns_Controller",
                "body": "WP_REST_Block_Patterns_Controller",
                "description": "Core class used to access block patterns via the REST API."
        },
        "Class:WP_REST_Block_Renderer_Controller": {
                "prefix": "WP_REST_Block_Renderer_Controller",
                "body": "WP_REST_Block_Renderer_Controller",
                "description": "Controller which provides REST endpoint for rendering a block."
        },
        "Class:WP_REST_Block_Types_Controller": {
                "prefix": "WP_REST_Block_Types_Controller",
                "body": "WP_REST_Block_Types_Controller",
                "description": "Core class used to access block types via the REST API."
        },
        "Class:WP_REST_Blocks_Controller": {
                "prefix": "WP_REST_Blocks_Controller",
                "body": "WP_REST_Blocks_Controller",
                "description": "Controller which provides a REST endpoint for the editor to read, create, edit and delete reusable blocks. Blocks are stored as posts with the wp_block post type."
        },
        "Class:WP_REST_Comment_Meta_Fields": {
                "prefix": "WP_REST_Comment_Meta_Fields",
                "body": "WP_REST_Comment_Meta_Fields",
                "description": "Core class to manage comment meta via the REST API."
        },
        "Class:WP_REST_Comments_Controller": {
                "prefix": "WP_REST_Comments_Controller",
                "body": "WP_REST_Comments_Controller",
                "description": "Core controller used to access comments via the REST API."
        },
        "Class:WP_REST_Controller": {
                "prefix": "WP_REST_Controller",
                "body": "WP_REST_Controller",
                "description": "Core base controller for managing and interacting with REST API items."
        },
        "Class:WP_REST_Edit_Site_Export_Controller": {
                "prefix": "WP_REST_Edit_Site_Export_Controller",
                "body": "WP_REST_Edit_Site_Export_Controller",
                "description": "Controller which provides REST endpoint for exporting current templates and template parts."
        },
        "Class:WP_REST_Global_Styles_Controller": {
                "prefix": "WP_REST_Global_Styles_Controller",
                "body": "WP_REST_Global_Styles_Controller",
                "description": "Base Global Styles REST API Controller."
        },
        "Class:WP_REST_Menu_Items_Controller": {
                "prefix": "WP_REST_Menu_Items_Controller",
                "body": "WP_REST_Menu_Items_Controller",
                "description": "Core class to access nav items via the REST API."
        },
        "Class:WP_REST_Menu_Locations_Controller": {
                "prefix": "WP_REST_Menu_Locations_Controller",
                "body": "WP_REST_Menu_Locations_Controller",
                "description": "Core class used to access menu locations via the REST API."
        },
        "Class:WP_REST_Menus_Controller": {
                "prefix": "WP_REST_Menus_Controller",
                "body": "WP_REST_Menus_Controller",
                "description": "Core class used to managed menu terms associated via the REST API."
        },
        "Class:WP_REST_Meta_Fields": {
                "prefix": "WP_REST_Meta_Fields",
                "body": "WP_REST_Meta_Fields",
                "description": "Core class to manage meta values for an object via the REST API."
        },
        "Class:WP_REST_Pattern_Directory_Controller": {
                "prefix": "WP_REST_Pattern_Directory_Controller",
                "body": "WP_REST_Pattern_Directory_Controller",
                "description": "Controller which provides REST endpoint for block patterns."
        },
        "Class:WP_REST_Plugins_Controller": {
                "prefix": "WP_REST_Plugins_Controller",
                "body": "WP_REST_Plugins_Controller",
                "description": "Core class to access plugins via the REST API."
        },
        "Class:WP_REST_Post_Format_Search_Handler": {
                "prefix": "WP_REST_Post_Format_Search_Handler",
                "body": "WP_REST_Post_Format_Search_Handler",
                "description": "Core class representing a search handler for post formats in the REST API."
        },
        "Class:WP_REST_Post_Meta_Fields": {
                "prefix": "WP_REST_Post_Meta_Fields",
                "body": "WP_REST_Post_Meta_Fields",
                "description": "Core class used to manage meta values for posts via the REST API."
        },
        "Class:WP_REST_Post_Search_Handler": {
                "prefix": "WP_REST_Post_Search_Handler",
                "body": "WP_REST_Post_Search_Handler",
                "description": "Core class representing a search handler for posts in the REST API."
        },
        "Class:WP_REST_Post_Statuses_Controller": {
                "prefix": "WP_REST_Post_Statuses_Controller",
                "body": "WP_REST_Post_Statuses_Controller",
                "description": "Core class used to access post statuses via the REST API."
        },
        "Class:WP_REST_Post_Types_Controller": {
                "prefix": "WP_REST_Post_Types_Controller",
                "body": "WP_REST_Post_Types_Controller",
                "description": "Core class to access post types via the REST API."
        },
        "Class:WP_REST_Posts_Controller": {
                "prefix": "WP_REST_Posts_Controller",
                "body": "WP_REST_Posts_Controller",
                "description": "Core class to access posts via the REST API."
        },
        "Class:WP_REST_Request": {
                "prefix": "WP_REST_Request",
                "body": "WP_REST_Request",
                "description": "Core class used to implement a REST request object."
        },
        "Class:WP_REST_Response": {
                "prefix": "WP_REST_Response",
                "body": "WP_REST_Response",
                "description": "Core class used to implement a REST response object."
        },
        "Class:WP_REST_Revisions_Controller": {
                "prefix": "WP_REST_Revisions_Controller",
                "body": "WP_REST_Revisions_Controller",
                "description": "Core class used to access revisions via the REST API."
        },
        "Class:WP_REST_Search_Controller": {
                "prefix": "WP_REST_Search_Controller",
                "body": "WP_REST_Search_Controller",
                "description": "Core class to search through all WordPress content via the REST API."
        },
        "Class:WP_REST_Search_Handler": {
                "prefix": "WP_REST_Search_Handler",
                "body": "WP_REST_Search_Handler",
                "description": "Core base class representing a search handler for an object type in the REST API."
        },
        "Class:WP_REST_Server": {
                "prefix": "WP_REST_Server",
                "body": "WP_REST_Server",
                "description": "Core class used to implement the WordPress REST API server."
        },
        "Class:WP_REST_Settings_Controller": {
                "prefix": "WP_REST_Settings_Controller",
                "body": "WP_REST_Settings_Controller",
                "description": "Core class used to manage a site&#039;s settings via the REST API."
        },
        "Class:WP_REST_Sidebars_Controller": {
                "prefix": "WP_REST_Sidebars_Controller",
                "body": "WP_REST_Sidebars_Controller",
                "description": "Core class used to manage a site&#039;s sidebars."
        },
        "Class:WP_REST_Site_Health_Controller": {
                "prefix": "WP_REST_Site_Health_Controller",
                "body": "WP_REST_Site_Health_Controller",
                "description": "Core class for interacting with Site Health tests."
        },
        "Class:WP_REST_Taxonomies_Controller": {
                "prefix": "WP_REST_Taxonomies_Controller",
                "body": "WP_REST_Taxonomies_Controller",
                "description": "Core class used to manage taxonomies via the REST API."
        },
        "Class:WP_REST_Templates_Controller": {
                "prefix": "WP_REST_Templates_Controller",
                "body": "WP_REST_Templates_Controller",
                "description": "Base Templates REST API Controller."
        },
        "Class:WP_REST_Term_Meta_Fields": {
                "prefix": "WP_REST_Term_Meta_Fields",
                "body": "WP_REST_Term_Meta_Fields",
                "description": "Core class used to manage meta values for terms via the REST API."
        },
        "Class:WP_REST_Term_Search_Handler": {
                "prefix": "WP_REST_Term_Search_Handler",
                "body": "WP_REST_Term_Search_Handler",
                "description": "Core class representing a search handler for terms in the REST API."
        },
        "Class:WP_REST_Terms_Controller": {
                "prefix": "WP_REST_Terms_Controller",
                "body": "WP_REST_Terms_Controller",
                "description": "Core class used to managed terms associated with a taxonomy via the REST API."
        },
        "Class:WP_REST_Themes_Controller": {
                "prefix": "WP_REST_Themes_Controller",
                "body": "WP_REST_Themes_Controller",
                "description": "Core class used to manage themes via the REST API."
        },
        "Class:WP_REST_URL_Details_Controller": {
                "prefix": "WP_REST_URL_Details_Controller",
                "body": "WP_REST_URL_Details_Controller",
                "description": "Controller which provides REST endpoint for retrieving information from a remote site&#039;s HTML response."
        },
        "Class:WP_REST_User_Meta_Fields": {
                "prefix": "WP_REST_User_Meta_Fields",
                "body": "WP_REST_User_Meta_Fields",
                "description": "Core class used to manage meta values for users via the REST API."
        },
        "Class:WP_REST_Users_Controller": {
                "prefix": "WP_REST_Users_Controller",
                "body": "WP_REST_Users_Controller",
                "description": "Core class used to manage users via the REST API."
        },
        "Class:WP_REST_Widget_Types_Controller": {
                "prefix": "WP_REST_Widget_Types_Controller",
                "body": "WP_REST_Widget_Types_Controller",
                "description": "Core class to access widget types via the REST API."
        },
        "Class:WP_REST_Widgets_Controller": {
                "prefix": "WP_REST_Widgets_Controller",
                "body": "WP_REST_Widgets_Controller",
                "description": "Core class to access widgets via the REST API."
        },
        "Class:WP_Rewrite": {
                "prefix": "WP_Rewrite",
                "body": "WP_Rewrite",
                "description": "Core class used to implement a rewrite component API."
        },
        "Class:WP_Role": {
                "prefix": "WP_Role",
                "body": "WP_Role",
                "description": "Core class used to extend the user roles API."
        },
        "Class:WP_Roles": {
                "prefix": "WP_Roles",
                "body": "WP_Roles",
                "description": "Core class used to implement a user roles API."
        },
        "Class:WP_Screen": {
                "prefix": "WP_Screen",
                "body": "WP_Screen",
                "description": "Core class used to implement an admin screen API."
        },
        "Class:WP_Scripts": {
                "prefix": "WP_Scripts",
                "body": "WP_Scripts",
                "description": "Core class used to register scripts."
        },
        "Class:WP_Session_Tokens": {
                "prefix": "WP_Session_Tokens",
                "body": "WP_Session_Tokens",
                "description": "Abstract class for managing user session tokens."
        },
        "Class:WP_Sidebar_Block_Editor_Control": {
                "prefix": "WP_Sidebar_Block_Editor_Control",
                "body": "WP_Sidebar_Block_Editor_Control",
                "description": "Core class used to implement the widgets block editor control in the customizer."
        },
        "Class:WP_SimplePie_File": {
                "prefix": "WP_SimplePie_File",
                "body": "WP_SimplePie_File",
                "description": "Core class for fetching remote files and reading local files with SimplePie."
        },
        "Class:WP_SimplePie_Sanitize_KSES": {
                "prefix": "WP_SimplePie_Sanitize_KSES",
                "body": "WP_SimplePie_Sanitize_KSES",
                "description": "Core class used to implement SimplePie feed sanitization."
        },
        "Class:WP_Site": {
                "prefix": "WP_Site",
                "body": "WP_Site",
                "description": "Core class used for interacting with a multisite site."
        },
        "Class:WP_Site_Health": {
                "prefix": "WP_Site_Health",
                "body": "WP_Site_Health",
                "description": "Class for looking up a site&#039;s health based on a user&#039;s WordPress environment."
        },
        "Class:WP_Site_Health_Auto_Updates": {
                "prefix": "WP_Site_Health_Auto_Updates",
                "body": "WP_Site_Health_Auto_Updates",
                "description": "Class for testing automatic updates in the WordPress code."
        },
        "Class:WP_Site_Icon": {
                "prefix": "WP_Site_Icon",
                "body": "WP_Site_Icon",
                "description": "Core class used to implement site icon functionality."
        },
        "Class:WP_Site_Query": {
                "prefix": "WP_Site_Query",
                "body": "WP_Site_Query",
                "description": "Core class used for querying sites."
        },
        "Class:WP_Sitemaps": {
                "prefix": "WP_Sitemaps",
                "body": "WP_Sitemaps",
                "description": "Class WP_Sitemaps."
        },
        "Class:WP_Sitemaps_Index": {
                "prefix": "WP_Sitemaps_Index",
                "body": "WP_Sitemaps_Index",
                "description": "Class WP_Sitemaps_Index."
        },
        "Class:WP_Sitemaps_Posts": {
                "prefix": "WP_Sitemaps_Posts",
                "body": "WP_Sitemaps_Posts",
                "description": "Posts XML sitemap provider."
        },
        "Class:WP_Sitemaps_Provider": {
                "prefix": "WP_Sitemaps_Provider",
                "body": "WP_Sitemaps_Provider",
                "description": "Class WP_Sitemaps_Provider."
        },
        "Class:WP_Sitemaps_Registry": {
                "prefix": "WP_Sitemaps_Registry",
                "body": "WP_Sitemaps_Registry",
                "description": "Class WP_Sitemaps_Registry."
        },
        "Class:WP_Sitemaps_Renderer": {
                "prefix": "WP_Sitemaps_Renderer",
                "body": "WP_Sitemaps_Renderer",
                "description": "Class WP_Sitemaps_Renderer"
        },
        "Class:WP_Sitemaps_Stylesheet": {
                "prefix": "WP_Sitemaps_Stylesheet",
                "body": "WP_Sitemaps_Stylesheet",
                "description": "Stylesheet provider class."
        },
        "Class:WP_Sitemaps_Taxonomies": {
                "prefix": "WP_Sitemaps_Taxonomies",
                "body": "WP_Sitemaps_Taxonomies",
                "description": "Taxonomies XML sitemap provider."
        },
        "Class:WP_Sitemaps_Users": {
                "prefix": "WP_Sitemaps_Users",
                "body": "WP_Sitemaps_Users",
                "description": "Users XML sitemap provider."
        },
        "Class:WP_Styles": {
                "prefix": "WP_Styles",
                "body": "WP_Styles",
                "description": "Core class used to register styles."
        },
        "Class:WP_Tax_Query": {
                "prefix": "WP_Tax_Query",
                "body": "WP_Tax_Query",
                "description": "Core class used to implement taxonomy queries for the Taxonomy API."
        },
        "Class:WP_Taxonomy": {
                "prefix": "WP_Taxonomy",
                "body": "WP_Taxonomy",
                "description": "Core class used for interacting with taxonomies."
        },
        "Class:WP_Term": {
                "prefix": "WP_Term",
                "body": "WP_Term",
                "description": "Core class used to implement the WP_Term object."
        },
        "Class:WP_Term_Query": {
                "prefix": "WP_Term_Query",
                "body": "WP_Term_Query",
                "description": "Class used for querying terms."
        },
        "Class:WP_Terms_List_Table": {
                "prefix": "WP_Terms_List_Table",
                "body": "WP_Terms_List_Table",
                "description": "Core class used to implement displaying terms in a list table."
        },
        "Class:WP_Text_Diff_Renderer_inline": {
                "prefix": "WP_Text_Diff_Renderer_inline",
                "body": "WP_Text_Diff_Renderer_inline",
                "description": "Better word splitting than the PEAR package provides."
        },
        "Class:WP_Text_Diff_Renderer_Table": {
                "prefix": "WP_Text_Diff_Renderer_Table",
                "body": "WP_Text_Diff_Renderer_Table",
                "description": "Table renderer to display the diff lines."
        },
        "Class:WP_Theme": {
                "prefix": "WP_Theme",
                "body": "WP_Theme",
                "description": "WP_Theme Class"
        },
        "Class:WP_Theme_Install_List_Table": {
                "prefix": "WP_Theme_Install_List_Table",
                "body": "WP_Theme_Install_List_Table",
                "description": "Core class used to implement displaying themes to install in a list table."
        },
        "Class:WP_Theme_JSON": {
                "prefix": "WP_Theme_JSON",
                "body": "WP_Theme_JSON",
                "description": "Class that encapsulates the processing of structures that adhere to the theme.json spec."
        },
        "Class:WP_Theme_JSON_Resolver": {
                "prefix": "WP_Theme_JSON_Resolver",
                "body": "WP_Theme_JSON_Resolver",
                "description": "Class that abstracts the processing of the different data sources for site-level config and offers an API to work with them."
        },
        "Class:WP_Theme_JSON_Schema": {
                "prefix": "WP_Theme_JSON_Schema",
                "body": "WP_Theme_JSON_Schema",
                "description": "Class that migrates a given theme.json structure to the latest schema."
        },
        "Class:WP_Themes_List_Table": {
                "prefix": "WP_Themes_List_Table",
                "body": "WP_Themes_List_Table",
                "description": "Core class used to implement displaying installed themes in a list table."
        },
        "Class:WP_Upgrader": {
                "prefix": "WP_Upgrader",
                "body": "WP_Upgrader",
                "description": "Core class used for upgrading/installing a local set of files via the Filesystem Abstraction classes from a Zip file."
        },
        "Class:WP_Upgrader_Skin": {
                "prefix": "WP_Upgrader_Skin",
                "body": "WP_Upgrader_Skin",
                "description": "Generic Skin for the WordPress Upgrader classes. This skin is designed to be extended for specific purposes."
        },
        "Class:WP_User": {
                "prefix": "WP_User",
                "body": "WP_User",
                "description": "Core class used to implement the WP_User object."
        },
        "Class:WP_User_Meta_Session_Tokens": {
                "prefix": "WP_User_Meta_Session_Tokens",
                "body": "WP_User_Meta_Session_Tokens",
                "description": "Meta-based user sessions token manager."
        },
        "Class:WP_User_Query": {
                "prefix": "WP_User_Query",
                "body": "WP_User_Query",
                "description": "Core class used for querying users."
        },
        "Class:WP_User_Request": {
                "prefix": "WP_User_Request",
                "body": "WP_User_Request",
                "description": "WP_User_Request class."
        },
        "Class:WP_User_Search": {
                "prefix": "WP_User_Search",
                "body": "WP_User_Search",
                "description": "WordPress User Search class."
        },
        "Class:WP_Users_List_Table": {
                "prefix": "WP_Users_List_Table",
                "body": "WP_Users_List_Table",
                "description": "Core class used to implement displaying users in a list table."
        },
        "Class:WP_Widget": {
                "prefix": "WP_Widget",
                "body": "WP_Widget",
                "description": "Core base class extended to register widgets."
        },
        "Class:WP_Widget_Archives": {
                "prefix": "WP_Widget_Archives",
                "body": "WP_Widget_Archives",
                "description": "Core class used to implement the Archives widget."
        },
        "Class:WP_Widget_Area_Customize_Control": {
                "prefix": "WP_Widget_Area_Customize_Control",
                "body": "WP_Widget_Area_Customize_Control",
                "description": "Widget Area Customize Control class."
        },
        "Class:WP_Widget_Block": {
                "prefix": "WP_Widget_Block",
                "body": "WP_Widget_Block",
                "description": "Core class used to implement a Block widget."
        },
        "Class:WP_Widget_Calendar": {
                "prefix": "WP_Widget_Calendar",
                "body": "WP_Widget_Calendar",
                "description": "Core class used to implement the Calendar widget."
        },
        "Class:WP_Widget_Categories": {
                "prefix": "WP_Widget_Categories",
                "body": "WP_Widget_Categories",
                "description": "Core class used to implement a Categories widget."
        },
        "Class:WP_Widget_Custom_HTML": {
                "prefix": "WP_Widget_Custom_HTML",
                "body": "WP_Widget_Custom_HTML",
                "description": "Core class used to implement a Custom HTML widget."
        },
        "Class:WP_Widget_Factory": {
                "prefix": "WP_Widget_Factory",
                "body": "WP_Widget_Factory",
                "description": "Singleton that registers and instantiates WP_Widget classes."
        },
        "Class:WP_Widget_Form_Customize_Control": {
                "prefix": "WP_Widget_Form_Customize_Control",
                "body": "WP_Widget_Form_Customize_Control",
                "description": "Widget Form Customize Control class."
        },
        "Class:WP_Widget_Links": {
                "prefix": "WP_Widget_Links",
                "body": "WP_Widget_Links",
                "description": "Core class used to implement a Links widget."
        },
        "Class:WP_Widget_Media": {
                "prefix": "WP_Widget_Media",
                "body": "WP_Widget_Media",
                "description": "Core class that implements a media widget."
        },
        "Class:WP_Widget_Media_Audio": {
                "prefix": "WP_Widget_Media_Audio",
                "body": "WP_Widget_Media_Audio",
                "description": "Core class that implements an audio widget."
        },
        "Class:WP_Widget_Media_Gallery": {
                "prefix": "WP_Widget_Media_Gallery",
                "body": "WP_Widget_Media_Gallery",
                "description": "Core class that implements a gallery widget."
        },
        "Class:WP_Widget_Media_Image": {
                "prefix": "WP_Widget_Media_Image",
                "body": "WP_Widget_Media_Image",
                "description": "Core class that implements an image widget."
        },
        "Class:WP_Widget_Media_Video": {
                "prefix": "WP_Widget_Media_Video",
                "body": "WP_Widget_Media_Video",
                "description": "Core class that implements a video widget."
        },
        "Class:WP_Widget_Meta": {
                "prefix": "WP_Widget_Meta",
                "body": "WP_Widget_Meta",
                "description": "Core class used to implement a Meta widget."
        },
        "Class:WP_Widget_Pages": {
                "prefix": "WP_Widget_Pages",
                "body": "WP_Widget_Pages",
                "description": "Core class used to implement a Pages widget."
        },
        "Class:WP_Widget_Recent_Comments": {
                "prefix": "WP_Widget_Recent_Comments",
                "body": "WP_Widget_Recent_Comments",
                "description": "Core class used to implement a Recent Comments widget."
        },
        "Class:WP_Widget_Recent_Posts": {
                "prefix": "WP_Widget_Recent_Posts",
                "body": "WP_Widget_Recent_Posts",
                "description": "Core class used to implement a Recent Posts widget."
        },
        "Class:WP_Widget_RSS": {
                "prefix": "WP_Widget_RSS",
                "body": "WP_Widget_RSS",
                "description": "Core class used to implement a RSS widget."
        },
        "Class:WP_Widget_Search": {
                "prefix": "WP_Widget_Search",
                "body": "WP_Widget_Search",
                "description": "Core class used to implement a Search widget."
        },
        "Class:WP_Widget_Tag_Cloud": {
                "prefix": "WP_Widget_Tag_Cloud",
                "body": "WP_Widget_Tag_Cloud",
                "description": "Core class used to implement a Tag cloud widget."
        },
        "Class:WP_Widget_Text": {
                "prefix": "WP_Widget_Text",
                "body": "WP_Widget_Text",
                "description": "Core class used to implement a Text widget."
        },
        "Class:wp_xmlrpc_server": {
                "prefix": "wp_xmlrpc_server",
                "body": "wp_xmlrpc_server",
                "description": "WordPress XMLRPC server implementation."
        },
        "Class:wpdb": {
                "prefix": "wpdb",
                "body": "wpdb",
                "description": "WordPress database access abstraction class."
        },
        "Constant:$GUIDname": {
                "prefix": "$GUIDname",
                "body": "$GUIDname",
                "description": ""
        },
        "Constant:ABSPATH": {
                "prefix": "ABSPATH",
                "body": "ABSPATH",
                "description": ""
        },
        "Constant:ADMIN_COOKIE_PATH": {
                "prefix": "ADMIN_COOKIE_PATH",
                "body": "ADMIN_COOKIE_PATH",
                "description": ""
        },
        "Constant:ARRAY_A": {
                "prefix": "ARRAY_A",
                "body": "ARRAY_A",
                "description": ""
        },
        "Constant:ARRAY_N": {
                "prefix": "ARRAY_N",
                "body": "ARRAY_N",
                "description": ""
        },
        "Constant:ATOM": {
                "prefix": "ATOM",
                "body": "ATOM",
                "description": ""
        },
        "Constant:AUTH_COOKIE": {
                "prefix": "AUTH_COOKIE",
                "body": "AUTH_COOKIE",
                "description": ""
        },
        "Constant:AUTH_KEY": {
                "prefix": "AUTH_KEY",
                "body": "AUTH_KEY",
                "description": ""
        },
        "Constant:AUTH_SALT": {
                "prefix": "AUTH_SALT",
                "body": "AUTH_SALT",
                "description": ""
        },
        "Constant:AUTOSAVE_INTERVAL": {
                "prefix": "AUTOSAVE_INTERVAL",
                "body": "AUTOSAVE_INTERVAL",
                "description": ""
        },
        "Constant:BACKGROUND_COLOR": {
                "prefix": "BACKGROUND_COLOR",
                "body": "BACKGROUND_COLOR",
                "description": ""
        },
        "Constant:BACKGROUND_IMAGE": {
                "prefix": "BACKGROUND_IMAGE",
                "body": "BACKGROUND_IMAGE",
                "description": ""
        },
        "Constant:BLOGUPLOADDIR": {
                "prefix": "BLOGUPLOADDIR",
                "body": "BLOGUPLOADDIR",
                "description": ""
        },
        "Constant:COMMENTS_TEMPLATE": {
                "prefix": "COMMENTS_TEMPLATE",
                "body": "COMMENTS_TEMPLATE",
                "description": ""
        },
        "Constant:COOKIE_DOMAIN": {
                "prefix": "COOKIE_DOMAIN",
                "body": "COOKIE_DOMAIN",
                "description": ""
        },
        "Constant:COOKIEHASH": {
                "prefix": "COOKIEHASH",
                "body": "COOKIEHASH",
                "description": ""
        },
        "Constant:COOKIEPATH": {
                "prefix": "COOKIEPATH",
                "body": "COOKIEPATH",
                "description": ""
        },
        "Constant:CRLF": {
                "prefix": "CRLF",
                "body": "CRLF",
                "description": ""
        },
        "Constant:CUSTOM_TAGS": {
                "prefix": "CUSTOM_TAGS",
                "body": "CUSTOM_TAGS",
                "description": ""
        },
        "Constant:DAY_IN_SECONDS": {
                "prefix": "DAY_IN_SECONDS",
                "body": "DAY_IN_SECONDS",
                "description": ""
        },
        "Constant:DB_CHARSET": {
                "prefix": "DB_CHARSET",
                "body": "DB_CHARSET",
                "description": "Database charset to use in creating database tables."
        },
        "Constant:DB_COLLATE": {
                "prefix": "DB_COLLATE",
                "body": "DB_COLLATE",
                "description": "The database collate type. Don&#039;t change this if in doubt."
        },
        "Constant:DB_HOST": {
                "prefix": "DB_HOST",
                "body": "DB_HOST",
                "description": ""
        },
        "Constant:DB_NAME": {
                "prefix": "DB_NAME",
                "body": "DB_NAME",
                "description": ""
        },
        "Constant:DB_PASSWORD": {
                "prefix": "DB_PASSWORD",
                "body": "DB_PASSWORD",
                "description": "Database password"
        },
        "Constant:DB_USER": {
                "prefix": "DB_USER",
                "body": "DB_USER",
                "description": ""
        },
        "Constant:DOING_AJAX": {
                "prefix": "DOING_AJAX",
                "body": "DOING_AJAX",
                "description": "Executing Ajax process."
        },
        "Constant:DOING_AUTOSAVE": {
                "prefix": "DOING_AUTOSAVE",
                "body": "DOING_AUTOSAVE",
                "description": ""
        },
        "Constant:DOING_CRON": {
                "prefix": "DOING_CRON",
                "body": "DOING_CRON",
                "description": "Tell WordPress we are doing the cron task."
        },
        "Constant:EB_IN_BYTES": {
                "prefix": "EB_IN_BYTES",
                "body": "EB_IN_BYTES",
                "description": ""
        },
        "Constant:EBML_ID_ASPECTRATIOTYPE": {
                "prefix": "EBML_ID_ASPECTRATIOTYPE",
                "body": "EBML_ID_ASPECTRATIOTYPE",
                "description": ""
        },
        "Constant:EBML_ID_ATTACHEDFILE": {
                "prefix": "EBML_ID_ATTACHEDFILE",
                "body": "EBML_ID_ATTACHEDFILE",
                "description": ""
        },
        "Constant:EBML_ID_ATTACHMENTLINK": {
                "prefix": "EBML_ID_ATTACHMENTLINK",
                "body": "EBML_ID_ATTACHMENTLINK",
                "description": ""
        },
        "Constant:EBML_ID_ATTACHMENTS": {
                "prefix": "EBML_ID_ATTACHMENTS",
                "body": "EBML_ID_ATTACHMENTS",
                "description": ""
        },
        "Constant:EBML_ID_AUDIO": {
                "prefix": "EBML_ID_AUDIO",
                "body": "EBML_ID_AUDIO",
                "description": ""
        },
        "Constant:EBML_ID_BITDEPTH": {
                "prefix": "EBML_ID_BITDEPTH",
                "body": "EBML_ID_BITDEPTH",
                "description": ""
        },
        "Constant:EBML_ID_CHANNELPOSITIONS": {
                "prefix": "EBML_ID_CHANNELPOSITIONS",
                "body": "EBML_ID_CHANNELPOSITIONS",
                "description": ""
        },
        "Constant:EBML_ID_CHANNELS": {
                "prefix": "EBML_ID_CHANNELS",
                "body": "EBML_ID_CHANNELS",
                "description": ""
        },
        "Constant:EBML_ID_CHAPCOUNTRY": {
                "prefix": "EBML_ID_CHAPCOUNTRY",
                "body": "EBML_ID_CHAPCOUNTRY",
                "description": ""
        },
        "Constant:EBML_ID_CHAPLANGUAGE": {
                "prefix": "EBML_ID_CHAPLANGUAGE",
                "body": "EBML_ID_CHAPLANGUAGE",
                "description": ""
        },
        "Constant:EBML_ID_CHAPPROCESS": {
                "prefix": "EBML_ID_CHAPPROCESS",
                "body": "EBML_ID_CHAPPROCESS",
                "description": ""
        },
        "Constant:EBML_ID_CHAPPROCESSCODECID": {
                "prefix": "EBML_ID_CHAPPROCESSCODECID",
                "body": "EBML_ID_CHAPPROCESSCODECID",
                "description": ""
        },
        "Constant:EBML_ID_CHAPPROCESSCOMMAND": {
                "prefix": "EBML_ID_CHAPPROCESSCOMMAND",
                "body": "EBML_ID_CHAPPROCESSCOMMAND",
                "description": ""
        },
        "Constant:EBML_ID_CHAPPROCESSDATA": {
                "prefix": "EBML_ID_CHAPPROCESSDATA",
                "body": "EBML_ID_CHAPPROCESSDATA",
                "description": ""
        },
        "Constant:EBML_ID_CHAPPROCESSPRIVATE": {
                "prefix": "EBML_ID_CHAPPROCESSPRIVATE",
                "body": "EBML_ID_CHAPPROCESSPRIVATE",
                "description": ""
        },
        "Constant:EBML_ID_CHAPPROCESSTIME": {
                "prefix": "EBML_ID_CHAPPROCESSTIME",
                "body": "EBML_ID_CHAPPROCESSTIME",
                "description": ""
        },
        "Constant:EBML_ID_CHAPSTRING": {
                "prefix": "EBML_ID_CHAPSTRING",
                "body": "EBML_ID_CHAPSTRING",
                "description": ""
        },
        "Constant:EBML_ID_CHAPTERATOM": {
                "prefix": "EBML_ID_CHAPTERATOM",
                "body": "EBML_ID_CHAPTERATOM",
                "description": ""
        },
        "Constant:EBML_ID_CHAPTERDISPLAY": {
                "prefix": "EBML_ID_CHAPTERDISPLAY",
                "body": "EBML_ID_CHAPTERDISPLAY",
                "description": ""
        },
        "Constant:EBML_ID_CHAPTERFLAGENABLED": {
                "prefix": "EBML_ID_CHAPTERFLAGENABLED",
                "body": "EBML_ID_CHAPTERFLAGENABLED",
                "description": ""
        },
        "Constant:EBML_ID_CHAPTERFLAGHIDDEN": {
                "prefix": "EBML_ID_CHAPTERFLAGHIDDEN",
                "body": "EBML_ID_CHAPTERFLAGHIDDEN",
                "description": ""
        },
        "Constant:EBML_ID_CHAPTERPHYSICALEQUIV": {
                "prefix": "EBML_ID_CHAPTERPHYSICALEQUIV",
                "body": "EBML_ID_CHAPTERPHYSICALEQUIV",
                "description": ""
        },
        "Constant:EBML_ID_CHAPTERS": {
                "prefix": "EBML_ID_CHAPTERS",
                "body": "EBML_ID_CHAPTERS",
                "description": ""
        },
        "Constant:EBML_ID_CHAPTERSEGMENTEDITIONUID": {
                "prefix": "EBML_ID_CHAPTERSEGMENTEDITIONUID",
                "body": "EBML_ID_CHAPTERSEGMENTEDITIONUID",
                "description": ""
        },
        "Constant:EBML_ID_CHAPTERSEGMENTUID": {
                "prefix": "EBML_ID_CHAPTERSEGMENTUID",
                "body": "EBML_ID_CHAPTERSEGMENTUID",
                "description": ""
        },
        "Constant:EBML_ID_CHAPTERTIMEEND": {
                "prefix": "EBML_ID_CHAPTERTIMEEND",
                "body": "EBML_ID_CHAPTERTIMEEND",
                "description": ""
        },
        "Constant:EBML_ID_CHAPTERTIMESTART": {
                "prefix": "EBML_ID_CHAPTERTIMESTART",
                "body": "EBML_ID_CHAPTERTIMESTART",
                "description": ""
        },
        "Constant:EBML_ID_CHAPTERTRACK": {
                "prefix": "EBML_ID_CHAPTERTRACK",
                "body": "EBML_ID_CHAPTERTRACK",
                "description": ""
        },
        "Constant:EBML_ID_CHAPTERTRACKNUMBER": {
                "prefix": "EBML_ID_CHAPTERTRACKNUMBER",
                "body": "EBML_ID_CHAPTERTRACKNUMBER",
                "description": ""
        },
        "Constant:EBML_ID_CHAPTERTRANSLATE": {
                "prefix": "EBML_ID_CHAPTERTRANSLATE",
                "body": "EBML_ID_CHAPTERTRANSLATE",
                "description": ""
        },
        "Constant:EBML_ID_CHAPTERTRANSLATECODEC": {
                "prefix": "EBML_ID_CHAPTERTRANSLATECODEC",
                "body": "EBML_ID_CHAPTERTRANSLATECODEC",
                "description": ""
        },
        "Constant:EBML_ID_CHAPTERTRANSLATEEDITIONUID": {
                "prefix": "EBML_ID_CHAPTERTRANSLATEEDITIONUID",
                "body": "EBML_ID_CHAPTERTRANSLATEEDITIONUID",
                "description": ""
        },
        "Constant:EBML_ID_CHAPTERTRANSLATEID": {
                "prefix": "EBML_ID_CHAPTERTRANSLATEID",
                "body": "EBML_ID_CHAPTERTRANSLATEID",
                "description": ""
        },
        "Constant:EBML_ID_CHAPTERUID": {
                "prefix": "EBML_ID_CHAPTERUID",
                "body": "EBML_ID_CHAPTERUID",
                "description": ""
        },
        "Constant:EBML_ID_CLUSTER": {
                "prefix": "EBML_ID_CLUSTER",
                "body": "EBML_ID_CLUSTER",
                "description": ""
        },
        "Constant:EBML_ID_CLUSTERBLOCK": {
                "prefix": "EBML_ID_CLUSTERBLOCK",
                "body": "EBML_ID_CLUSTERBLOCK",
                "description": ""
        },
        "Constant:EBML_ID_CLUSTERBLOCKADDID": {
                "prefix": "EBML_ID_CLUSTERBLOCKADDID",
                "body": "EBML_ID_CLUSTERBLOCKADDID",
                "description": ""
        },
        "Constant:EBML_ID_CLUSTERBLOCKADDITIONAL": {
                "prefix": "EBML_ID_CLUSTERBLOCKADDITIONAL",
                "body": "EBML_ID_CLUSTERBLOCKADDITIONAL",
                "description": ""
        },
        "Constant:EBML_ID_CLUSTERBLOCKADDITIONID": {
                "prefix": "EBML_ID_CLUSTERBLOCKADDITIONID",
                "body": "EBML_ID_CLUSTERBLOCKADDITIONID",
                "description": ""
        },
        "Constant:EBML_ID_CLUSTERBLOCKADDITIONS": {
                "prefix": "EBML_ID_CLUSTERBLOCKADDITIONS",
                "body": "EBML_ID_CLUSTERBLOCKADDITIONS",
                "description": ""
        },
        "Constant:EBML_ID_CLUSTERBLOCKDURATION": {
                "prefix": "EBML_ID_CLUSTERBLOCKDURATION",
                "body": "EBML_ID_CLUSTERBLOCKDURATION",
                "description": ""
        },
        "Constant:EBML_ID_CLUSTERBLOCKGROUP": {
                "prefix": "EBML_ID_CLUSTERBLOCKGROUP",
                "body": "EBML_ID_CLUSTERBLOCKGROUP",
                "description": ""
        },
        "Constant:EBML_ID_CLUSTERBLOCKMORE": {
                "prefix": "EBML_ID_CLUSTERBLOCKMORE",
                "body": "EBML_ID_CLUSTERBLOCKMORE",
                "description": ""
        },
        "Constant:EBML_ID_CLUSTERBLOCKVIRTUAL": {
                "prefix": "EBML_ID_CLUSTERBLOCKVIRTUAL",
                "body": "EBML_ID_CLUSTERBLOCKVIRTUAL",
                "description": ""
        },
        "Constant:EBML_ID_CLUSTERCODECSTATE": {
                "prefix": "EBML_ID_CLUSTERCODECSTATE",
                "body": "EBML_ID_CLUSTERCODECSTATE",
                "description": ""
        },
        "Constant:EBML_ID_CLUSTERDELAY": {
                "prefix": "EBML_ID_CLUSTERDELAY",
                "body": "EBML_ID_CLUSTERDELAY",
                "description": ""
        },
        "Constant:EBML_ID_CLUSTERDURATION": {
                "prefix": "EBML_ID_CLUSTERDURATION",
                "body": "EBML_ID_CLUSTERDURATION",
                "description": ""
        },
        "Constant:EBML_ID_CLUSTERENCRYPTEDBLOCK": {
                "prefix": "EBML_ID_CLUSTERENCRYPTEDBLOCK",
                "body": "EBML_ID_CLUSTERENCRYPTEDBLOCK",
                "description": ""
        },
        "Constant:EBML_ID_CLUSTERFRAMENUMBER": {
                "prefix": "EBML_ID_CLUSTERFRAMENUMBER",
                "body": "EBML_ID_CLUSTERFRAMENUMBER",
                "description": ""
        },
        "Constant:EBML_ID_CLUSTERLACENUMBER": {
                "prefix": "EBML_ID_CLUSTERLACENUMBER",
                "body": "EBML_ID_CLUSTERLACENUMBER",
                "description": ""
        },
        "Constant:EBML_ID_CLUSTERPOSITION": {
                "prefix": "EBML_ID_CLUSTERPOSITION",
                "body": "EBML_ID_CLUSTERPOSITION",
                "description": ""
        },
        "Constant:EBML_ID_CLUSTERPREVSIZE": {
                "prefix": "EBML_ID_CLUSTERPREVSIZE",
                "body": "EBML_ID_CLUSTERPREVSIZE",
                "description": ""
        },
        "Constant:EBML_ID_CLUSTERREFERENCEBLOCK": {
                "prefix": "EBML_ID_CLUSTERREFERENCEBLOCK",
                "body": "EBML_ID_CLUSTERREFERENCEBLOCK",
                "description": ""
        },
        "Constant:EBML_ID_CLUSTERREFERENCEPRIORITY": {
                "prefix": "EBML_ID_CLUSTERREFERENCEPRIORITY",
                "body": "EBML_ID_CLUSTERREFERENCEPRIORITY",
                "description": ""
        },
        "Constant:EBML_ID_CLUSTERREFERENCEVIRTUAL": {
                "prefix": "EBML_ID_CLUSTERREFERENCEVIRTUAL",
                "body": "EBML_ID_CLUSTERREFERENCEVIRTUAL",
                "description": ""
        },
        "Constant:EBML_ID_CLUSTERSILENTTRACKNUMBER": {
                "prefix": "EBML_ID_CLUSTERSILENTTRACKNUMBER",
                "body": "EBML_ID_CLUSTERSILENTTRACKNUMBER",
                "description": ""
        },
        "Constant:EBML_ID_CLUSTERSILENTTRACKS": {
                "prefix": "EBML_ID_CLUSTERSILENTTRACKS",
                "body": "EBML_ID_CLUSTERSILENTTRACKS",
                "description": ""
        },
        "Constant:EBML_ID_CLUSTERSIMPLEBLOCK": {
                "prefix": "EBML_ID_CLUSTERSIMPLEBLOCK",
                "body": "EBML_ID_CLUSTERSIMPLEBLOCK",
                "description": ""
        },
        "Constant:EBML_ID_CLUSTERSLICES": {
                "prefix": "EBML_ID_CLUSTERSLICES",
                "body": "EBML_ID_CLUSTERSLICES",
                "description": ""
        },
        "Constant:EBML_ID_CLUSTERTIMECODE": {
                "prefix": "EBML_ID_CLUSTERTIMECODE",
                "body": "EBML_ID_CLUSTERTIMECODE",
                "description": ""
        },
        "Constant:EBML_ID_CLUSTERTIMESLICE": {
                "prefix": "EBML_ID_CLUSTERTIMESLICE",
                "body": "EBML_ID_CLUSTERTIMESLICE",
                "description": ""
        },
        "Constant:EBML_ID_CODECDECODEALL": {
                "prefix": "EBML_ID_CODECDECODEALL",
                "body": "EBML_ID_CODECDECODEALL",
                "description": ""
        },
        "Constant:EBML_ID_CODECDOWNLOADURL": {
                "prefix": "EBML_ID_CODECDOWNLOADURL",
                "body": "EBML_ID_CODECDOWNLOADURL",
                "description": ""
        },
        "Constant:EBML_ID_CODECID": {
                "prefix": "EBML_ID_CODECID",
                "body": "EBML_ID_CODECID",
                "description": ""
        },
        "Constant:EBML_ID_CODECINFOURL": {
                "prefix": "EBML_ID_CODECINFOURL",
                "body": "EBML_ID_CODECINFOURL",
                "description": ""
        },
        "Constant:EBML_ID_CODECNAME": {
                "prefix": "EBML_ID_CODECNAME",
                "body": "EBML_ID_CODECNAME",
                "description": ""
        },
        "Constant:EBML_ID_CODECPRIVATE": {
                "prefix": "EBML_ID_CODECPRIVATE",
                "body": "EBML_ID_CODECPRIVATE",
                "description": ""
        },
        "Constant:EBML_ID_CODECSETTINGS": {
                "prefix": "EBML_ID_CODECSETTINGS",
                "body": "EBML_ID_CODECSETTINGS",
                "description": ""
        },
        "Constant:EBML_ID_COLOURSPACE": {
                "prefix": "EBML_ID_COLOURSPACE",
                "body": "EBML_ID_COLOURSPACE",
                "description": ""
        },
        "Constant:EBML_ID_CONTENTCOMPALGO": {
                "prefix": "EBML_ID_CONTENTCOMPALGO",
                "body": "EBML_ID_CONTENTCOMPALGO",
                "description": ""
        },
        "Constant:EBML_ID_CONTENTCOMPRESSION": {
                "prefix": "EBML_ID_CONTENTCOMPRESSION",
                "body": "EBML_ID_CONTENTCOMPRESSION",
                "description": ""
        },
        "Constant:EBML_ID_CONTENTCOMPSETTINGS": {
                "prefix": "EBML_ID_CONTENTCOMPSETTINGS",
                "body": "EBML_ID_CONTENTCOMPSETTINGS",
                "description": ""
        },
        "Constant:EBML_ID_CONTENTENCALGO": {
                "prefix": "EBML_ID_CONTENTENCALGO",
                "body": "EBML_ID_CONTENTENCALGO",
                "description": ""
        },
        "Constant:EBML_ID_CONTENTENCKEYID": {
                "prefix": "EBML_ID_CONTENTENCKEYID",
                "body": "EBML_ID_CONTENTENCKEYID",
                "description": ""
        },
        "Constant:EBML_ID_CONTENTENCODING": {
                "prefix": "EBML_ID_CONTENTENCODING",
                "body": "EBML_ID_CONTENTENCODING",
                "description": ""
        },
        "Constant:EBML_ID_CONTENTENCODINGORDER": {
                "prefix": "EBML_ID_CONTENTENCODINGORDER",
                "body": "EBML_ID_CONTENTENCODINGORDER",
                "description": ""
        },
        "Constant:EBML_ID_CONTENTENCODINGS": {
                "prefix": "EBML_ID_CONTENTENCODINGS",
                "body": "EBML_ID_CONTENTENCODINGS",
                "description": ""
        },
        "Constant:EBML_ID_CONTENTENCODINGSCOPE": {
                "prefix": "EBML_ID_CONTENTENCODINGSCOPE",
                "body": "EBML_ID_CONTENTENCODINGSCOPE",
                "description": ""
        },
        "Constant:EBML_ID_CONTENTENCODINGTYPE": {
                "prefix": "EBML_ID_CONTENTENCODINGTYPE",
                "body": "EBML_ID_CONTENTENCODINGTYPE",
                "description": ""
        },
        "Constant:EBML_ID_CONTENTENCRYPTION": {
                "prefix": "EBML_ID_CONTENTENCRYPTION",
                "body": "EBML_ID_CONTENTENCRYPTION",
                "description": ""
        },
        "Constant:EBML_ID_CONTENTSIGALGO": {
                "prefix": "EBML_ID_CONTENTSIGALGO",
                "body": "EBML_ID_CONTENTSIGALGO",
                "description": ""
        },
        "Constant:EBML_ID_CONTENTSIGHASHALGO": {
                "prefix": "EBML_ID_CONTENTSIGHASHALGO",
                "body": "EBML_ID_CONTENTSIGHASHALGO",
                "description": ""
        },
        "Constant:EBML_ID_CONTENTSIGKEYID": {
                "prefix": "EBML_ID_CONTENTSIGKEYID",
                "body": "EBML_ID_CONTENTSIGKEYID",
                "description": ""
        },
        "Constant:EBML_ID_CONTENTSIGNATURE": {
                "prefix": "EBML_ID_CONTENTSIGNATURE",
                "body": "EBML_ID_CONTENTSIGNATURE",
                "description": ""
        },
        "Constant:EBML_ID_CRC32": {
                "prefix": "EBML_ID_CRC32",
                "body": "EBML_ID_CRC32",
                "description": ""
        },
        "Constant:EBML_ID_CUEBLOCKNUMBER": {
                "prefix": "EBML_ID_CUEBLOCKNUMBER",
                "body": "EBML_ID_CUEBLOCKNUMBER",
                "description": ""
        },
        "Constant:EBML_ID_CUECLUSTERPOSITION": {
                "prefix": "EBML_ID_CUECLUSTERPOSITION",
                "body": "EBML_ID_CUECLUSTERPOSITION",
                "description": ""
        },
        "Constant:EBML_ID_CUECODECSTATE": {
                "prefix": "EBML_ID_CUECODECSTATE",
                "body": "EBML_ID_CUECODECSTATE",
                "description": ""
        },
        "Constant:EBML_ID_CUEPOINT": {
                "prefix": "EBML_ID_CUEPOINT",
                "body": "EBML_ID_CUEPOINT",
                "description": ""
        },
        "Constant:EBML_ID_CUEREFCLUSTER": {
                "prefix": "EBML_ID_CUEREFCLUSTER",
                "body": "EBML_ID_CUEREFCLUSTER",
                "description": ""
        },
        "Constant:EBML_ID_CUEREFCODECSTATE": {
                "prefix": "EBML_ID_CUEREFCODECSTATE",
                "body": "EBML_ID_CUEREFCODECSTATE",
                "description": ""
        },
        "Constant:EBML_ID_CUEREFERENCE": {
                "prefix": "EBML_ID_CUEREFERENCE",
                "body": "EBML_ID_CUEREFERENCE",
                "description": ""
        },
        "Constant:EBML_ID_CUEREFNUMBER": {
                "prefix": "EBML_ID_CUEREFNUMBER",
                "body": "EBML_ID_CUEREFNUMBER",
                "description": ""
        },
        "Constant:EBML_ID_CUEREFTIME": {
                "prefix": "EBML_ID_CUEREFTIME",
                "body": "EBML_ID_CUEREFTIME",
                "description": ""
        },
        "Constant:EBML_ID_CUES": {
                "prefix": "EBML_ID_CUES",
                "body": "EBML_ID_CUES",
                "description": ""
        },
        "Constant:EBML_ID_CUETIME": {
                "prefix": "EBML_ID_CUETIME",
                "body": "EBML_ID_CUETIME",
                "description": ""
        },
        "Constant:EBML_ID_CUETRACK": {
                "prefix": "EBML_ID_CUETRACK",
                "body": "EBML_ID_CUETRACK",
                "description": ""
        },
        "Constant:EBML_ID_CUETRACKPOSITIONS": {
                "prefix": "EBML_ID_CUETRACKPOSITIONS",
                "body": "EBML_ID_CUETRACKPOSITIONS",
                "description": ""
        },
        "Constant:EBML_ID_DATEUTC": {
                "prefix": "EBML_ID_DATEUTC",
                "body": "EBML_ID_DATEUTC",
                "description": ""
        },
        "Constant:EBML_ID_DEFAULTDURATION": {
                "prefix": "EBML_ID_DEFAULTDURATION",
                "body": "EBML_ID_DEFAULTDURATION",
                "description": ""
        },
        "Constant:EBML_ID_DISPLAYHEIGHT": {
                "prefix": "EBML_ID_DISPLAYHEIGHT",
                "body": "EBML_ID_DISPLAYHEIGHT",
                "description": ""
        },
        "Constant:EBML_ID_DISPLAYUNIT": {
                "prefix": "EBML_ID_DISPLAYUNIT",
                "body": "EBML_ID_DISPLAYUNIT",
                "description": ""
        },
        "Constant:EBML_ID_DISPLAYWIDTH": {
                "prefix": "EBML_ID_DISPLAYWIDTH",
                "body": "EBML_ID_DISPLAYWIDTH",
                "description": ""
        },
        "Constant:EBML_ID_DOCTYPE": {
                "prefix": "EBML_ID_DOCTYPE",
                "body": "EBML_ID_DOCTYPE",
                "description": ""
        },
        "Constant:EBML_ID_DOCTYPEREADVERSION": {
                "prefix": "EBML_ID_DOCTYPEREADVERSION",
                "body": "EBML_ID_DOCTYPEREADVERSION",
                "description": ""
        },
        "Constant:EBML_ID_DOCTYPEVERSION": {
                "prefix": "EBML_ID_DOCTYPEVERSION",
                "body": "EBML_ID_DOCTYPEVERSION",
                "description": ""
        },
        "Constant:EBML_ID_DURATION": {
                "prefix": "EBML_ID_DURATION",
                "body": "EBML_ID_DURATION",
                "description": ""
        },
        "Constant:EBML_ID_EBML": {
                "prefix": "EBML_ID_EBML",
                "body": "EBML_ID_EBML",
                "description": ""
        },
        "Constant:EBML_ID_EBMLMAXIDLENGTH": {
                "prefix": "EBML_ID_EBMLMAXIDLENGTH",
                "body": "EBML_ID_EBMLMAXIDLENGTH",
                "description": ""
        },
        "Constant:EBML_ID_EBMLMAXSIZELENGTH": {
                "prefix": "EBML_ID_EBMLMAXSIZELENGTH",
                "body": "EBML_ID_EBMLMAXSIZELENGTH",
                "description": ""
        },
        "Constant:EBML_ID_EBMLREADVERSION": {
                "prefix": "EBML_ID_EBMLREADVERSION",
                "body": "EBML_ID_EBMLREADVERSION",
                "description": ""
        },
        "Constant:EBML_ID_EBMLVERSION": {
                "prefix": "EBML_ID_EBMLVERSION",
                "body": "EBML_ID_EBMLVERSION",
                "description": ""
        },
        "Constant:EBML_ID_EDITIONENTRY": {
                "prefix": "EBML_ID_EDITIONENTRY",
                "body": "EBML_ID_EDITIONENTRY",
                "description": ""
        },
        "Constant:EBML_ID_EDITIONFLAGDEFAULT": {
                "prefix": "EBML_ID_EDITIONFLAGDEFAULT",
                "body": "EBML_ID_EDITIONFLAGDEFAULT",
                "description": ""
        },
        "Constant:EBML_ID_EDITIONFLAGHIDDEN": {
                "prefix": "EBML_ID_EDITIONFLAGHIDDEN",
                "body": "EBML_ID_EDITIONFLAGHIDDEN",
                "description": ""
        },
        "Constant:EBML_ID_EDITIONFLAGORDERED": {
                "prefix": "EBML_ID_EDITIONFLAGORDERED",
                "body": "EBML_ID_EDITIONFLAGORDERED",
                "description": ""
        },
        "Constant:EBML_ID_EDITIONUID": {
                "prefix": "EBML_ID_EDITIONUID",
                "body": "EBML_ID_EDITIONUID",
                "description": ""
        },
        "Constant:EBML_ID_FILEDATA": {
                "prefix": "EBML_ID_FILEDATA",
                "body": "EBML_ID_FILEDATA",
                "description": ""
        },
        "Constant:EBML_ID_FILEDESCRIPTION": {
                "prefix": "EBML_ID_FILEDESCRIPTION",
                "body": "EBML_ID_FILEDESCRIPTION",
                "description": ""
        },
        "Constant:EBML_ID_FILEMIMETYPE": {
                "prefix": "EBML_ID_FILEMIMETYPE",
                "body": "EBML_ID_FILEMIMETYPE",
                "description": ""
        },
        "Constant:EBML_ID_FILENAME": {
                "prefix": "EBML_ID_FILENAME",
                "body": "EBML_ID_FILENAME",
                "description": ""
        },
        "Constant:EBML_ID_FILEREFERRAL": {
                "prefix": "EBML_ID_FILEREFERRAL",
                "body": "EBML_ID_FILEREFERRAL",
                "description": ""
        },
        "Constant:EBML_ID_FILEUID": {
                "prefix": "EBML_ID_FILEUID",
                "body": "EBML_ID_FILEUID",
                "description": ""
        },
        "Constant:EBML_ID_FLAGDEFAULT": {
                "prefix": "EBML_ID_FLAGDEFAULT",
                "body": "EBML_ID_FLAGDEFAULT",
                "description": ""
        },
        "Constant:EBML_ID_FLAGENABLED": {
                "prefix": "EBML_ID_FLAGENABLED",
                "body": "EBML_ID_FLAGENABLED",
                "description": ""
        },
        "Constant:EBML_ID_FLAGFORCED": {
                "prefix": "EBML_ID_FLAGFORCED",
                "body": "EBML_ID_FLAGFORCED",
                "description": ""
        },
        "Constant:EBML_ID_FLAGINTERLACED": {
                "prefix": "EBML_ID_FLAGINTERLACED",
                "body": "EBML_ID_FLAGINTERLACED",
                "description": ""
        },
        "Constant:EBML_ID_FLAGLACING": {
                "prefix": "EBML_ID_FLAGLACING",
                "body": "EBML_ID_FLAGLACING",
                "description": ""
        },
        "Constant:EBML_ID_GAMMAVALUE": {
                "prefix": "EBML_ID_GAMMAVALUE",
                "body": "EBML_ID_GAMMAVALUE",
                "description": ""
        },
        "Constant:EBML_ID_INFO": {
                "prefix": "EBML_ID_INFO",
                "body": "EBML_ID_INFO",
                "description": ""
        },
        "Constant:EBML_ID_LANGUAGE": {
                "prefix": "EBML_ID_LANGUAGE",
                "body": "EBML_ID_LANGUAGE",
                "description": ""
        },
        "Constant:EBML_ID_MAXBLOCKADDITIONID": {
                "prefix": "EBML_ID_MAXBLOCKADDITIONID",
                "body": "EBML_ID_MAXBLOCKADDITIONID",
                "description": ""
        },
        "Constant:EBML_ID_MAXCACHE": {
                "prefix": "EBML_ID_MAXCACHE",
                "body": "EBML_ID_MAXCACHE",
                "description": ""
        },
        "Constant:EBML_ID_MINCACHE": {
                "prefix": "EBML_ID_MINCACHE",
                "body": "EBML_ID_MINCACHE",
                "description": ""
        },
        "Constant:EBML_ID_MUXINGAPP": {
                "prefix": "EBML_ID_MUXINGAPP",
                "body": "EBML_ID_MUXINGAPP",
                "description": ""
        },
        "Constant:EBML_ID_NAME": {
                "prefix": "EBML_ID_NAME",
                "body": "EBML_ID_NAME",
                "description": ""
        },
        "Constant:EBML_ID_NEXTFILENAME": {
                "prefix": "EBML_ID_NEXTFILENAME",
                "body": "EBML_ID_NEXTFILENAME",
                "description": ""
        },
        "Constant:EBML_ID_NEXTUID": {
                "prefix": "EBML_ID_NEXTUID",
                "body": "EBML_ID_NEXTUID",
                "description": ""
        },
        "Constant:EBML_ID_OLDSTEREOMODE": {
                "prefix": "EBML_ID_OLDSTEREOMODE",
                "body": "EBML_ID_OLDSTEREOMODE",
                "description": ""
        },
        "Constant:EBML_ID_OUTPUTSAMPLINGFREQUENCY": {
                "prefix": "EBML_ID_OUTPUTSAMPLINGFREQUENCY",
                "body": "EBML_ID_OUTPUTSAMPLINGFREQUENCY",
                "description": ""
        },
        "Constant:EBML_ID_PIXELCROPBOTTOM": {
                "prefix": "EBML_ID_PIXELCROPBOTTOM",
                "body": "EBML_ID_PIXELCROPBOTTOM",
                "description": ""
        },
        "Constant:EBML_ID_PIXELCROPLEFT": {
                "prefix": "EBML_ID_PIXELCROPLEFT",
                "body": "EBML_ID_PIXELCROPLEFT",
                "description": ""
        },
        "Constant:EBML_ID_PIXELCROPRIGHT": {
                "prefix": "EBML_ID_PIXELCROPRIGHT",
                "body": "EBML_ID_PIXELCROPRIGHT",
                "description": ""
        },
        "Constant:EBML_ID_PIXELCROPTOP": {
                "prefix": "EBML_ID_PIXELCROPTOP",
                "body": "EBML_ID_PIXELCROPTOP",
                "description": ""
        },
        "Constant:EBML_ID_PIXELHEIGHT": {
                "prefix": "EBML_ID_PIXELHEIGHT",
                "body": "EBML_ID_PIXELHEIGHT",
                "description": ""
        },
        "Constant:EBML_ID_PIXELWIDTH": {
                "prefix": "EBML_ID_PIXELWIDTH",
                "body": "EBML_ID_PIXELWIDTH",
                "description": ""
        },
        "Constant:EBML_ID_PREVFILENAME": {
                "prefix": "EBML_ID_PREVFILENAME",
                "body": "EBML_ID_PREVFILENAME",
                "description": ""
        },
        "Constant:EBML_ID_PREVUID": {
                "prefix": "EBML_ID_PREVUID",
                "body": "EBML_ID_PREVUID",
                "description": ""
        },
        "Constant:EBML_ID_SAMPLINGFREQUENCY": {
                "prefix": "EBML_ID_SAMPLINGFREQUENCY",
                "body": "EBML_ID_SAMPLINGFREQUENCY",
                "description": ""
        },
        "Constant:EBML_ID_SEEK": {
                "prefix": "EBML_ID_SEEK",
                "body": "EBML_ID_SEEK",
                "description": ""
        },
        "Constant:EBML_ID_SEEKHEAD": {
                "prefix": "EBML_ID_SEEKHEAD",
                "body": "EBML_ID_SEEKHEAD",
                "description": ""
        },
        "Constant:EBML_ID_SEEKID": {
                "prefix": "EBML_ID_SEEKID",
                "body": "EBML_ID_SEEKID",
                "description": ""
        },
        "Constant:EBML_ID_SEEKPOSITION": {
                "prefix": "EBML_ID_SEEKPOSITION",
                "body": "EBML_ID_SEEKPOSITION",
                "description": ""
        },
        "Constant:EBML_ID_SEGMENT": {
                "prefix": "EBML_ID_SEGMENT",
                "body": "EBML_ID_SEGMENT",
                "description": ""
        },
        "Constant:EBML_ID_SEGMENTFAMILY": {
                "prefix": "EBML_ID_SEGMENTFAMILY",
                "body": "EBML_ID_SEGMENTFAMILY",
                "description": ""
        },
        "Constant:EBML_ID_SEGMENTFILENAME": {
                "prefix": "EBML_ID_SEGMENTFILENAME",
                "body": "EBML_ID_SEGMENTFILENAME",
                "description": ""
        },
        "Constant:EBML_ID_SEGMENTUID": {
                "prefix": "EBML_ID_SEGMENTUID",
                "body": "EBML_ID_SEGMENTUID",
                "description": ""
        },
        "Constant:EBML_ID_SIMPLETAG": {
                "prefix": "EBML_ID_SIMPLETAG",
                "body": "EBML_ID_SIMPLETAG",
                "description": ""
        },
        "Constant:EBML_ID_STEREOMODE": {
                "prefix": "EBML_ID_STEREOMODE",
                "body": "EBML_ID_STEREOMODE",
                "description": ""
        },
        "Constant:EBML_ID_TAG": {
                "prefix": "EBML_ID_TAG",
                "body": "EBML_ID_TAG",
                "description": ""
        },
        "Constant:EBML_ID_TAGATTACHMENTUID": {
                "prefix": "EBML_ID_TAGATTACHMENTUID",
                "body": "EBML_ID_TAGATTACHMENTUID",
                "description": ""
        },
        "Constant:EBML_ID_TAGBINARY": {
                "prefix": "EBML_ID_TAGBINARY",
                "body": "EBML_ID_TAGBINARY",
                "description": ""
        },
        "Constant:EBML_ID_TAGCHAPTERUID": {
                "prefix": "EBML_ID_TAGCHAPTERUID",
                "body": "EBML_ID_TAGCHAPTERUID",
                "description": ""
        },
        "Constant:EBML_ID_TAGDEFAULT": {
                "prefix": "EBML_ID_TAGDEFAULT",
                "body": "EBML_ID_TAGDEFAULT",
                "description": ""
        },
        "Constant:EBML_ID_TAGEDITIONUID": {
                "prefix": "EBML_ID_TAGEDITIONUID",
                "body": "EBML_ID_TAGEDITIONUID",
                "description": ""
        },
        "Constant:EBML_ID_TAGLANGUAGE": {
                "prefix": "EBML_ID_TAGLANGUAGE",
                "body": "EBML_ID_TAGLANGUAGE",
                "description": ""
        },
        "Constant:EBML_ID_TAGNAME": {
                "prefix": "EBML_ID_TAGNAME",
                "body": "EBML_ID_TAGNAME",
                "description": ""
        },
        "Constant:EBML_ID_TAGS": {
                "prefix": "EBML_ID_TAGS",
                "body": "EBML_ID_TAGS",
                "description": ""
        },
        "Constant:EBML_ID_TAGSTRING": {
                "prefix": "EBML_ID_TAGSTRING",
                "body": "EBML_ID_TAGSTRING",
                "description": ""
        },
        "Constant:EBML_ID_TAGTRACKUID": {
                "prefix": "EBML_ID_TAGTRACKUID",
                "body": "EBML_ID_TAGTRACKUID",
                "description": ""
        },
        "Constant:EBML_ID_TARGETS": {
                "prefix": "EBML_ID_TARGETS",
                "body": "EBML_ID_TARGETS",
                "description": ""
        },
        "Constant:EBML_ID_TARGETTYPE": {
                "prefix": "EBML_ID_TARGETTYPE",
                "body": "EBML_ID_TARGETTYPE",
                "description": ""
        },
        "Constant:EBML_ID_TARGETTYPEVALUE": {
                "prefix": "EBML_ID_TARGETTYPEVALUE",
                "body": "EBML_ID_TARGETTYPEVALUE",
                "description": ""
        },
        "Constant:EBML_ID_TIMECODESCALE": {
                "prefix": "EBML_ID_TIMECODESCALE",
                "body": "EBML_ID_TIMECODESCALE",
                "description": ""
        },
        "Constant:EBML_ID_TITLE": {
                "prefix": "EBML_ID_TITLE",
                "body": "EBML_ID_TITLE",
                "description": ""
        },
        "Constant:EBML_ID_TRACKENTRY": {
                "prefix": "EBML_ID_TRACKENTRY",
                "body": "EBML_ID_TRACKENTRY",
                "description": ""
        },
        "Constant:EBML_ID_TRACKNUMBER": {
                "prefix": "EBML_ID_TRACKNUMBER",
                "body": "EBML_ID_TRACKNUMBER",
                "description": ""
        },
        "Constant:EBML_ID_TRACKOFFSET": {
                "prefix": "EBML_ID_TRACKOFFSET",
                "body": "EBML_ID_TRACKOFFSET",
                "description": ""
        },
        "Constant:EBML_ID_TRACKOVERLAY": {
                "prefix": "EBML_ID_TRACKOVERLAY",
                "body": "EBML_ID_TRACKOVERLAY",
                "description": ""
        },
        "Constant:EBML_ID_TRACKS": {
                "prefix": "EBML_ID_TRACKS",
                "body": "EBML_ID_TRACKS",
                "description": ""
        },
        "Constant:EBML_ID_TRACKTIMECODESCALE": {
                "prefix": "EBML_ID_TRACKTIMECODESCALE",
                "body": "EBML_ID_TRACKTIMECODESCALE",
                "description": ""
        },
        "Constant:EBML_ID_TRACKTRANSLATE": {
                "prefix": "EBML_ID_TRACKTRANSLATE",
                "body": "EBML_ID_TRACKTRANSLATE",
                "description": ""
        },
        "Constant:EBML_ID_TRACKTRANSLATECODEC": {
                "prefix": "EBML_ID_TRACKTRANSLATECODEC",
                "body": "EBML_ID_TRACKTRANSLATECODEC",
                "description": ""
        },
        "Constant:EBML_ID_TRACKTRANSLATEEDITIONUID": {
                "prefix": "EBML_ID_TRACKTRANSLATEEDITIONUID",
                "body": "EBML_ID_TRACKTRANSLATEEDITIONUID",
                "description": ""
        },
        "Constant:EBML_ID_TRACKTRANSLATETRACKID": {
                "prefix": "EBML_ID_TRACKTRANSLATETRACKID",
                "body": "EBML_ID_TRACKTRANSLATETRACKID",
                "description": ""
        },
        "Constant:EBML_ID_TRACKTYPE": {
                "prefix": "EBML_ID_TRACKTYPE",
                "body": "EBML_ID_TRACKTYPE",
                "description": ""
        },
        "Constant:EBML_ID_TRACKUID": {
                "prefix": "EBML_ID_TRACKUID",
                "body": "EBML_ID_TRACKUID",
                "description": ""
        },
        "Constant:EBML_ID_VIDEO": {
                "prefix": "EBML_ID_VIDEO",
                "body": "EBML_ID_VIDEO",
                "description": ""
        },
        "Constant:EBML_ID_VOID": {
                "prefix": "EBML_ID_VOID",
                "body": "EBML_ID_VOID",
                "description": ""
        },
        "Constant:EBML_ID_WRITINGAPP": {
                "prefix": "EBML_ID_WRITINGAPP",
                "body": "EBML_ID_WRITINGAPP",
                "description": ""
        },
        "Constant:EMPTY_TRASH_DAYS": {
                "prefix": "EMPTY_TRASH_DAYS",
                "body": "EMPTY_TRASH_DAYS",
                "description": ""
        },
        "Constant:ENT_SUBSTITUTE": {
                "prefix": "ENT_SUBSTITUTE",
                "body": "ENT_SUBSTITUTE",
                "description": ""
        },
        "Constant:EP_ALL": {
                "prefix": "EP_ALL",
                "body": "EP_ALL",
                "description": "Endpoint mask that matches everything."
        },
        "Constant:EP_ALL_ARCHIVES": {
                "prefix": "EP_ALL_ARCHIVES",
                "body": "EP_ALL_ARCHIVES",
                "description": "Endpoint mask that matches all archive views."
        },
        "Constant:EP_ATTACHMENT": {
                "prefix": "EP_ATTACHMENT",
                "body": "EP_ATTACHMENT",
                "description": "Endpoint mask that matches attachment permalinks."
        },
        "Constant:EP_AUTHORS": {
                "prefix": "EP_AUTHORS",
                "body": "EP_AUTHORS",
                "description": "Endpoint mask that matches author archives."
        },
        "Constant:EP_CATEGORIES": {
                "prefix": "EP_CATEGORIES",
                "body": "EP_CATEGORIES",
                "description": "Endpoint mask that matches category archives."
        },
        "Constant:EP_COMMENTS": {
                "prefix": "EP_COMMENTS",
                "body": "EP_COMMENTS",
                "description": "Endpoint mask that matches comment feeds."
        },
        "Constant:EP_DATE": {
                "prefix": "EP_DATE",
                "body": "EP_DATE",
                "description": "Endpoint mask that matches any date archives."
        },
        "Constant:EP_DAY": {
                "prefix": "EP_DAY",
                "body": "EP_DAY",
                "description": "Endpoint mask that matches daily archives."
        },
        "Constant:EP_MONTH": {
                "prefix": "EP_MONTH",
                "body": "EP_MONTH",
                "description": "Endpoint mask that matches monthly archives."
        },
        "Constant:EP_NONE": {
                "prefix": "EP_NONE",
                "body": "EP_NONE",
                "description": "Endpoint mask that matches nothing."
        },
        "Constant:EP_PAGES": {
                "prefix": "EP_PAGES",
                "body": "EP_PAGES",
                "description": "Endpoint mask that matches pages."
        },
        "Constant:EP_PERMALINK": {
                "prefix": "EP_PERMALINK",
                "body": "EP_PERMALINK",
                "description": "Endpoint mask that matches post permalinks."
        },
        "Constant:EP_ROOT": {
                "prefix": "EP_ROOT",
                "body": "EP_ROOT",
                "description": "Endpoint mask that matches the site root."
        },
        "Constant:EP_SEARCH": {
                "prefix": "EP_SEARCH",
                "body": "EP_SEARCH",
                "description": "Endpoint mask that matches searches."
        },
        "Constant:EP_TAGS": {
                "prefix": "EP_TAGS",
                "body": "EP_TAGS",
                "description": "Endpoint mask that matches tag archives."
        },
        "Constant:EP_YEAR": {
                "prefix": "EP_YEAR",
                "body": "EP_YEAR",
                "description": "Endpoint mask that matches yearly archives."
        },
        "Constant:EZSQL_VERSION": {
                "prefix": "EZSQL_VERSION",
                "body": "EZSQL_VERSION",
                "description": ""
        },
        "Constant:FORCE_SSL_ADMIN": {
                "prefix": "FORCE_SSL_ADMIN",
                "body": "FORCE_SSL_ADMIN",
                "description": ""
        },
        "Constant:FS_CHMOD_DIR": {
                "prefix": "FS_CHMOD_DIR",
                "body": "FS_CHMOD_DIR",
                "description": ""
        },
        "Constant:FS_CHMOD_FILE": {
                "prefix": "FS_CHMOD_FILE",
                "body": "FS_CHMOD_FILE",
                "description": ""
        },
        "Constant:FS_CONNECT_TIMEOUT": {
                "prefix": "FS_CONNECT_TIMEOUT",
                "body": "FS_CONNECT_TIMEOUT",
                "description": ""
        },
        "Constant:FS_TIMEOUT": {
                "prefix": "FS_TIMEOUT",
                "body": "FS_TIMEOUT",
                "description": ""
        },
        "Constant:FTP_ASCII": {
                "prefix": "FTP_ASCII",
                "body": "FTP_ASCII",
                "description": ""
        },
        "Constant:FTP_AUTOASCII": {
                "prefix": "FTP_AUTOASCII",
                "body": "FTP_AUTOASCII",
                "description": ""
        },
        "Constant:FTP_BINARY": {
                "prefix": "FTP_BINARY",
                "body": "FTP_BINARY",
                "description": ""
        },
        "Constant:FTP_FORCE": {
                "prefix": "FTP_FORCE",
                "body": "FTP_FORCE",
                "description": ""
        },
        "Constant:FTP_OS_Mac": {
                "prefix": "FTP_OS_Mac",
                "body": "FTP_OS_Mac",
                "description": ""
        },
        "Constant:FTP_OS_Unix": {
                "prefix": "FTP_OS_Unix",
                "body": "FTP_OS_Unix",
                "description": ""
        },
        "Constant:FTP_OS_Windows": {
                "prefix": "FTP_OS_Windows",
                "body": "FTP_OS_Windows",
                "description": ""
        },
        "Constant:GB_IN_BYTES": {
                "prefix": "GB_IN_BYTES",
                "body": "GB_IN_BYTES",
                "description": ""
        },
        "Constant:GETID3_FLV_TAG_AUDIO": {
                "prefix": "GETID3_FLV_TAG_AUDIO",
                "body": "GETID3_FLV_TAG_AUDIO",
                "description": ""
        },
        "Constant:GETID3_FLV_TAG_META": {
                "prefix": "GETID3_FLV_TAG_META",
                "body": "GETID3_FLV_TAG_META",
                "description": ""
        },
        "Constant:GETID3_FLV_TAG_VIDEO": {
                "prefix": "GETID3_FLV_TAG_VIDEO",
                "body": "GETID3_FLV_TAG_VIDEO",
                "description": ""
        },
        "Constant:GETID3_FLV_VIDEO_H263": {
                "prefix": "GETID3_FLV_VIDEO_H263",
                "body": "GETID3_FLV_VIDEO_H263",
                "description": ""
        },
        "Constant:GETID3_FLV_VIDEO_H264": {
                "prefix": "GETID3_FLV_VIDEO_H264",
                "body": "GETID3_FLV_VIDEO_H264",
                "description": ""
        },
        "Constant:GETID3_FLV_VIDEO_SCREEN": {
                "prefix": "GETID3_FLV_VIDEO_SCREEN",
                "body": "GETID3_FLV_VIDEO_SCREEN",
                "description": ""
        },
        "Constant:GETID3_FLV_VIDEO_SCREENV2": {
                "prefix": "GETID3_FLV_VIDEO_SCREENV2",
                "body": "GETID3_FLV_VIDEO_SCREENV2",
                "description": ""
        },
        "Constant:GETID3_FLV_VIDEO_VP6FLV": {
                "prefix": "GETID3_FLV_VIDEO_VP6FLV",
                "body": "GETID3_FLV_VIDEO_VP6FLV",
                "description": ""
        },
        "Constant:GETID3_FLV_VIDEO_VP6FLV_ALPHA": {
                "prefix": "GETID3_FLV_VIDEO_VP6FLV_ALPHA",
                "body": "GETID3_FLV_VIDEO_VP6FLV_ALPHA",
                "description": ""
        },
        "Constant:GETID3_HELPERAPPSDIR": {
                "prefix": "GETID3_HELPERAPPSDIR",
                "body": "GETID3_HELPERAPPSDIR",
                "description": ""
        },
        "Constant:GETID3_INCLUDEPATH": {
                "prefix": "GETID3_INCLUDEPATH",
                "body": "GETID3_INCLUDEPATH",
                "description": ""
        },
        "Constant:GETID3_OS_ISWINDOWS": {
                "prefix": "GETID3_OS_ISWINDOWS",
                "body": "GETID3_OS_ISWINDOWS",
                "description": ""
        },
        "Constant:GETID3_TEMP_DIR": {
                "prefix": "GETID3_TEMP_DIR",
                "body": "GETID3_TEMP_DIR",
                "description": ""
        },
        "Constant:H264_AVC_SEQUENCE_HEADER": {
                "prefix": "H264_AVC_SEQUENCE_HEADER",
                "body": "H264_AVC_SEQUENCE_HEADER",
                "description": ""
        },
        "Constant:H264_PROFILE_BASELINE": {
                "prefix": "H264_PROFILE_BASELINE",
                "body": "H264_PROFILE_BASELINE",
                "description": ""
        },
        "Constant:H264_PROFILE_EXTENDED": {
                "prefix": "H264_PROFILE_EXTENDED",
                "body": "H264_PROFILE_EXTENDED",
                "description": ""
        },
        "Constant:H264_PROFILE_HIGH": {
                "prefix": "H264_PROFILE_HIGH",
                "body": "H264_PROFILE_HIGH",
                "description": ""
        },
        "Constant:H264_PROFILE_HIGH10": {
                "prefix": "H264_PROFILE_HIGH10",
                "body": "H264_PROFILE_HIGH10",
                "description": ""
        },
        "Constant:H264_PROFILE_HIGH422": {
                "prefix": "H264_PROFILE_HIGH422",
                "body": "H264_PROFILE_HIGH422",
                "description": ""
        },
        "Constant:H264_PROFILE_HIGH444": {
                "prefix": "H264_PROFILE_HIGH444",
                "body": "H264_PROFILE_HIGH444",
                "description": ""
        },
        "Constant:H264_PROFILE_HIGH444_PREDICTIVE": {
                "prefix": "H264_PROFILE_HIGH444_PREDICTIVE",
                "body": "H264_PROFILE_HIGH444_PREDICTIVE",
                "description": ""
        },
        "Constant:H264_PROFILE_MAIN": {
                "prefix": "H264_PROFILE_MAIN",
                "body": "H264_PROFILE_MAIN",
                "description": ""
        },
        "Constant:HEADER_IMAGE": {
                "prefix": "HEADER_IMAGE",
                "body": "HEADER_IMAGE",
                "description": ""
        },
        "Constant:HEADER_IMAGE_HEIGHT": {
                "prefix": "HEADER_IMAGE_HEIGHT",
                "body": "HEADER_IMAGE_HEIGHT",
                "description": ""
        },
        "Constant:HEADER_IMAGE_WIDTH": {
                "prefix": "HEADER_IMAGE_WIDTH",
                "body": "HEADER_IMAGE_WIDTH",
                "description": ""
        },
        "Constant:HEADER_TEXTCOLOR": {
                "prefix": "HEADER_TEXTCOLOR",
                "body": "HEADER_TEXTCOLOR",
                "description": ""
        },
        "Constant:HOUR_IN_SECONDS": {
                "prefix": "HOUR_IN_SECONDS",
                "body": "HOUR_IN_SECONDS",
                "description": ""
        },
        "Constant:IFRAME_REQUEST": {
                "prefix": "IFRAME_REQUEST",
                "body": "IFRAME_REQUEST",
                "description": ""
        },
        "Constant:IMAGETYPE_WEBP": {
                "prefix": "IMAGETYPE_WEBP",
                "body": "IMAGETYPE_WEBP",
                "description": ""
        },
        "Constant:IMG_WEBP": {
                "prefix": "IMG_WEBP",
                "body": "IMG_WEBP",
                "description": ""
        },
        "Constant:IS_PROFILE_PAGE": {
                "prefix": "IS_PROFILE_PAGE",
                "body": "IS_PROFILE_PAGE",
                "description": "This is a profile page."
        },
        "Constant:KB_IN_BYTES": {
                "prefix": "KB_IN_BYTES",
                "body": "KB_IN_BYTES",
                "description": ""
        },
        "Constant:LANGDIR": {
                "prefix": "LANGDIR",
                "body": "LANGDIR",
                "description": ""
        },
        "Constant:LOGGED_IN_COOKIE": {
                "prefix": "LOGGED_IN_COOKIE",
                "body": "LOGGED_IN_COOKIE",
                "description": ""
        },
        "Constant:LOGGED_IN_KEY": {
                "prefix": "LOGGED_IN_KEY",
                "body": "LOGGED_IN_KEY",
                "description": ""
        },
        "Constant:LOGGED_IN_SALT": {
                "prefix": "LOGGED_IN_SALT",
                "body": "LOGGED_IN_SALT",
                "description": ""
        },
        "Constant:MAGPIE_CACHE_AGE": {
                "prefix": "MAGPIE_CACHE_AGE",
                "body": "MAGPIE_CACHE_AGE",
                "description": ""
        },
        "Constant:MAGPIE_CACHE_DIR": {
                "prefix": "MAGPIE_CACHE_DIR",
                "body": "MAGPIE_CACHE_DIR",
                "description": ""
        },
        "Constant:MAGPIE_CACHE_FRESH_ONLY": {
                "prefix": "MAGPIE_CACHE_FRESH_ONLY",
                "body": "MAGPIE_CACHE_FRESH_ONLY",
                "description": ""
        },
        "Constant:MAGPIE_CACHE_ON": {
                "prefix": "MAGPIE_CACHE_ON",
                "body": "MAGPIE_CACHE_ON",
                "description": ""
        },
        "Constant:MAGPIE_DEBUG": {
                "prefix": "MAGPIE_DEBUG",
                "body": "MAGPIE_DEBUG",
                "description": ""
        },
        "Constant:MAGPIE_FETCH_TIME_OUT": {
                "prefix": "MAGPIE_FETCH_TIME_OUT",
                "body": "MAGPIE_FETCH_TIME_OUT",
                "description": ""
        },
        "Constant:MAGPIE_INITALIZED": {
                "prefix": "MAGPIE_INITALIZED",
                "body": "MAGPIE_INITALIZED",
                "description": ""
        },
        "Constant:MAGPIE_USE_GZIP": {
                "prefix": "MAGPIE_USE_GZIP",
                "body": "MAGPIE_USE_GZIP",
                "description": ""
        },
        "Constant:MAGPIE_USER_AGENT": {
                "prefix": "MAGPIE_USER_AGENT",
                "body": "MAGPIE_USER_AGENT",
                "description": ""
        },
        "Constant:MB_IN_BYTES": {
                "prefix": "MB_IN_BYTES",
                "body": "MB_IN_BYTES",
                "description": ""
        },
        "Constant:MEDIA_TRASH": {
                "prefix": "MEDIA_TRASH",
                "body": "MEDIA_TRASH",
                "description": ""
        },
        "Constant:MINUTE_IN_SECONDS": {
                "prefix": "MINUTE_IN_SECONDS",
                "body": "MINUTE_IN_SECONDS",
                "description": ""
        },
        "Constant:MONTH_IN_SECONDS": {
                "prefix": "MONTH_IN_SECONDS",
                "body": "MONTH_IN_SECONDS",
                "description": ""
        },
        "Constant:MS_FILES_REQUEST": {
                "prefix": "MS_FILES_REQUEST",
                "body": "MS_FILES_REQUEST",
                "description": ""
        },
        "Constant:MULTISITE": {
                "prefix": "MULTISITE",
                "body": "MULTISITE",
                "description": ""
        },
        "Constant:MUPLUGINDIR": {
                "prefix": "MUPLUGINDIR",
                "body": "MUPLUGINDIR",
                "description": ""
        },
        "Constant:NO_HEADER_TEXT": {
                "prefix": "NO_HEADER_TEXT",
                "body": "NO_HEADER_TEXT",
                "description": ""
        },
        "Constant:NONCE_KEY": {
                "prefix": "NONCE_KEY",
                "body": "NONCE_KEY",
                "description": ""
        },
        "Constant:NONCE_SALT": {
                "prefix": "NONCE_SALT",
                "body": "NONCE_SALT",
                "description": ""
        },
        "Constant:object": {
                "prefix": "object",
                "body": "object",
                "description": ""
        },
        "Constant:OBJECT": {
                "prefix": "OBJECT",
                "body": "OBJECT",
                "description": ""
        },
        "Constant:OBJECT_K": {
                "prefix": "OBJECT_K",
                "body": "OBJECT_K",
                "description": ""
        },
        "Constant:PASS_COOKIE": {
                "prefix": "PASS_COOKIE",
                "body": "PASS_COOKIE",
                "description": ""
        },
        "Constant:PB_IN_BYTES": {
                "prefix": "PB_IN_BYTES",
                "body": "PB_IN_BYTES",
                "description": ""
        },
        "Constant:PCLZIP_ATT_FILE_COMMENT": {
                "prefix": "PCLZIP_ATT_FILE_COMMENT",
                "body": "PCLZIP_ATT_FILE_COMMENT",
                "description": ""
        },
        "Constant:PCLZIP_ATT_FILE_CONTENT": {
                "prefix": "PCLZIP_ATT_FILE_CONTENT",
                "body": "PCLZIP_ATT_FILE_CONTENT",
                "description": ""
        },
        "Constant:PCLZIP_ATT_FILE_MTIME": {
                "prefix": "PCLZIP_ATT_FILE_MTIME",
                "body": "PCLZIP_ATT_FILE_MTIME",
                "description": ""
        },
        "Constant:PCLZIP_ATT_FILE_NAME": {
                "prefix": "PCLZIP_ATT_FILE_NAME",
                "body": "PCLZIP_ATT_FILE_NAME",
                "description": ""
        },
        "Constant:PCLZIP_ATT_FILE_NEW_FULL_NAME": {
                "prefix": "PCLZIP_ATT_FILE_NEW_FULL_NAME",
                "body": "PCLZIP_ATT_FILE_NEW_FULL_NAME",
                "description": ""
        },
        "Constant:PCLZIP_ATT_FILE_NEW_SHORT_NAME": {
                "prefix": "PCLZIP_ATT_FILE_NEW_SHORT_NAME",
                "body": "PCLZIP_ATT_FILE_NEW_SHORT_NAME",
                "description": ""
        },
        "Constant:PCLZIP_CB_POST_ADD": {
                "prefix": "PCLZIP_CB_POST_ADD",
                "body": "PCLZIP_CB_POST_ADD",
                "description": ""
        },
        "Constant:PCLZIP_CB_POST_EXTRACT": {
                "prefix": "PCLZIP_CB_POST_EXTRACT",
                "body": "PCLZIP_CB_POST_EXTRACT",
                "description": ""
        },
        "Constant:PCLZIP_CB_PRE_ADD": {
                "prefix": "PCLZIP_CB_PRE_ADD",
                "body": "PCLZIP_CB_PRE_ADD",
                "description": ""
        },
        "Constant:PCLZIP_CB_PRE_EXTRACT": {
                "prefix": "PCLZIP_CB_PRE_EXTRACT",
                "body": "PCLZIP_CB_PRE_EXTRACT",
                "description": ""
        },
        "Constant:PCLZIP_ERR_ALREADY_A_DIRECTORY": {
                "prefix": "PCLZIP_ERR_ALREADY_A_DIRECTORY",
                "body": "PCLZIP_ERR_ALREADY_A_DIRECTORY",
                "description": ""
        },
        "Constant:PCLZIP_ERR_BAD_CHECKSUM": {
                "prefix": "PCLZIP_ERR_BAD_CHECKSUM",
                "body": "PCLZIP_ERR_BAD_CHECKSUM",
                "description": ""
        },
        "Constant:PCLZIP_ERR_BAD_EXTENSION": {
                "prefix": "PCLZIP_ERR_BAD_EXTENSION",
                "body": "PCLZIP_ERR_BAD_EXTENSION",
                "description": ""
        },
        "Constant:PCLZIP_ERR_BAD_EXTRACTED_FILE": {
                "prefix": "PCLZIP_ERR_BAD_EXTRACTED_FILE",
                "body": "PCLZIP_ERR_BAD_EXTRACTED_FILE",
                "description": ""
        },
        "Constant:PCLZIP_ERR_BAD_FORMAT": {
                "prefix": "PCLZIP_ERR_BAD_FORMAT",
                "body": "PCLZIP_ERR_BAD_FORMAT",
                "description": ""
        },
        "Constant:PCLZIP_ERR_DELETE_FILE_FAIL": {
                "prefix": "PCLZIP_ERR_DELETE_FILE_FAIL",
                "body": "PCLZIP_ERR_DELETE_FILE_FAIL",
                "description": ""
        },
        "Constant:PCLZIP_ERR_DIR_CREATE_FAIL": {
                "prefix": "PCLZIP_ERR_DIR_CREATE_FAIL",
                "body": "PCLZIP_ERR_DIR_CREATE_FAIL",
                "description": ""
        },
        "Constant:PCLZIP_ERR_DIRECTORY_RESTRICTION": {
                "prefix": "PCLZIP_ERR_DIRECTORY_RESTRICTION",
                "body": "PCLZIP_ERR_DIRECTORY_RESTRICTION",
                "description": ""
        },
        "Constant:PCLZIP_ERR_FILENAME_TOO_LONG": {
                "prefix": "PCLZIP_ERR_FILENAME_TOO_LONG",
                "body": "PCLZIP_ERR_FILENAME_TOO_LONG",
                "description": ""
        },
        "Constant:PCLZIP_ERR_INVALID_ARCHIVE_ZIP": {
                "prefix": "PCLZIP_ERR_INVALID_ARCHIVE_ZIP",
                "body": "PCLZIP_ERR_INVALID_ARCHIVE_ZIP",
                "description": ""
        },
        "Constant:PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE": {
                "prefix": "PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE",
                "body": "PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE",
                "description": ""
        },
        "Constant:PCLZIP_ERR_INVALID_OPTION_VALUE": {
                "prefix": "PCLZIP_ERR_INVALID_OPTION_VALUE",
                "body": "PCLZIP_ERR_INVALID_OPTION_VALUE",
                "description": ""
        },
        "Constant:PCLZIP_ERR_INVALID_PARAMETER": {
                "prefix": "PCLZIP_ERR_INVALID_PARAMETER",
                "body": "PCLZIP_ERR_INVALID_PARAMETER",
                "description": ""
        },
        "Constant:PCLZIP_ERR_INVALID_ZIP": {
                "prefix": "PCLZIP_ERR_INVALID_ZIP",
                "body": "PCLZIP_ERR_INVALID_ZIP",
                "description": ""
        },
        "Constant:PCLZIP_ERR_MISSING_FILE": {
                "prefix": "PCLZIP_ERR_MISSING_FILE",
                "body": "PCLZIP_ERR_MISSING_FILE",
                "description": ""
        },
        "Constant:PCLZIP_ERR_MISSING_OPTION_VALUE": {
                "prefix": "PCLZIP_ERR_MISSING_OPTION_VALUE",
                "body": "PCLZIP_ERR_MISSING_OPTION_VALUE",
                "description": ""
        },
        "Constant:PCLZIP_ERR_NO_ERROR": {
                "prefix": "PCLZIP_ERR_NO_ERROR",
                "body": "PCLZIP_ERR_NO_ERROR",
                "description": ""
        },
        "Constant:PCLZIP_ERR_READ_OPEN_FAIL": {
                "prefix": "PCLZIP_ERR_READ_OPEN_FAIL",
                "body": "PCLZIP_ERR_READ_OPEN_FAIL",
                "description": ""
        },
        "Constant:PCLZIP_ERR_RENAME_FILE_FAIL": {
                "prefix": "PCLZIP_ERR_RENAME_FILE_FAIL",
                "body": "PCLZIP_ERR_RENAME_FILE_FAIL",
                "description": ""
        },
        "Constant:PCLZIP_ERR_UNSUPPORTED_COMPRESSION": {
                "prefix": "PCLZIP_ERR_UNSUPPORTED_COMPRESSION",
                "body": "PCLZIP_ERR_UNSUPPORTED_COMPRESSION",
                "description": ""
        },
        "Constant:PCLZIP_ERR_UNSUPPORTED_ENCRYPTION": {
                "prefix": "PCLZIP_ERR_UNSUPPORTED_ENCRYPTION",
                "body": "PCLZIP_ERR_UNSUPPORTED_ENCRYPTION",
                "description": ""
        },
        "Constant:PCLZIP_ERR_USER_ABORTED": {
                "prefix": "PCLZIP_ERR_USER_ABORTED",
                "body": "PCLZIP_ERR_USER_ABORTED",
                "description": ""
        },
        "Constant:PCLZIP_ERR_WRITE_OPEN_FAIL": {
                "prefix": "PCLZIP_ERR_WRITE_OPEN_FAIL",
                "body": "PCLZIP_ERR_WRITE_OPEN_FAIL",
                "description": ""
        },
        "Constant:PCLZIP_ERROR_EXTERNAL": {
                "prefix": "PCLZIP_ERROR_EXTERNAL",
                "body": "PCLZIP_ERROR_EXTERNAL",
                "description": ""
        },
        "Constant:PCLZIP_OPT_ADD_COMMENT": {
                "prefix": "PCLZIP_OPT_ADD_COMMENT",
                "body": "PCLZIP_OPT_ADD_COMMENT",
                "description": ""
        },
        "Constant:PCLZIP_OPT_ADD_PATH": {
                "prefix": "PCLZIP_OPT_ADD_PATH",
                "body": "PCLZIP_OPT_ADD_PATH",
                "description": ""
        },
        "Constant:PCLZIP_OPT_ADD_TEMP_FILE_OFF": {
                "prefix": "PCLZIP_OPT_ADD_TEMP_FILE_OFF",
                "body": "PCLZIP_OPT_ADD_TEMP_FILE_OFF",
                "description": ""
        },
        "Constant:PCLZIP_OPT_ADD_TEMP_FILE_ON": {
                "prefix": "PCLZIP_OPT_ADD_TEMP_FILE_ON",
                "body": "PCLZIP_OPT_ADD_TEMP_FILE_ON",
                "description": ""
        },
        "Constant:PCLZIP_OPT_ADD_TEMP_FILE_THRESHOLD": {
                "prefix": "PCLZIP_OPT_ADD_TEMP_FILE_THRESHOLD",
                "body": "PCLZIP_OPT_ADD_TEMP_FILE_THRESHOLD",
                "description": ""
        },
        "Constant:PCLZIP_OPT_BY_EREG": {
                "prefix": "PCLZIP_OPT_BY_EREG",
                "body": "PCLZIP_OPT_BY_EREG",
                "description": ""
        },
        "Constant:PCLZIP_OPT_BY_INDEX": {
                "prefix": "PCLZIP_OPT_BY_INDEX",
                "body": "PCLZIP_OPT_BY_INDEX",
                "description": ""
        },
        "Constant:PCLZIP_OPT_BY_NAME": {
                "prefix": "PCLZIP_OPT_BY_NAME",
                "body": "PCLZIP_OPT_BY_NAME",
                "description": ""
        },
        "Constant:PCLZIP_OPT_BY_PREG": {
                "prefix": "PCLZIP_OPT_BY_PREG",
                "body": "PCLZIP_OPT_BY_PREG",
                "description": ""
        },
        "Constant:PCLZIP_OPT_COMMENT": {
                "prefix": "PCLZIP_OPT_COMMENT",
                "body": "PCLZIP_OPT_COMMENT",
                "description": ""
        },
        "Constant:PCLZIP_OPT_EXTRACT_AS_STRING": {
                "prefix": "PCLZIP_OPT_EXTRACT_AS_STRING",
                "body": "PCLZIP_OPT_EXTRACT_AS_STRING",
                "description": ""
        },
        "Constant:PCLZIP_OPT_EXTRACT_DIR_RESTRICTION": {
                "prefix": "PCLZIP_OPT_EXTRACT_DIR_RESTRICTION",
                "body": "PCLZIP_OPT_EXTRACT_DIR_RESTRICTION",
                "description": ""
        },
        "Constant:PCLZIP_OPT_EXTRACT_IN_OUTPUT": {
                "prefix": "PCLZIP_OPT_EXTRACT_IN_OUTPUT",
                "body": "PCLZIP_OPT_EXTRACT_IN_OUTPUT",
                "description": ""
        },
        "Constant:PCLZIP_OPT_NO_COMPRESSION": {
                "prefix": "PCLZIP_OPT_NO_COMPRESSION",
                "body": "PCLZIP_OPT_NO_COMPRESSION",
                "description": ""
        },
        "Constant:PCLZIP_OPT_PATH": {
                "prefix": "PCLZIP_OPT_PATH",
                "body": "PCLZIP_OPT_PATH",
                "description": ""
        },
        "Constant:PCLZIP_OPT_PREPEND_COMMENT": {
                "prefix": "PCLZIP_OPT_PREPEND_COMMENT",
                "body": "PCLZIP_OPT_PREPEND_COMMENT",
                "description": ""
        },
        "Constant:PCLZIP_OPT_REMOVE_ALL_PATH": {
                "prefix": "PCLZIP_OPT_REMOVE_ALL_PATH",
                "body": "PCLZIP_OPT_REMOVE_ALL_PATH",
                "description": ""
        },
        "Constant:PCLZIP_OPT_REMOVE_PATH": {
                "prefix": "PCLZIP_OPT_REMOVE_PATH",
                "body": "PCLZIP_OPT_REMOVE_PATH",
                "description": ""
        },
        "Constant:PCLZIP_OPT_REPLACE_NEWER": {
                "prefix": "PCLZIP_OPT_REPLACE_NEWER",
                "body": "PCLZIP_OPT_REPLACE_NEWER",
                "description": ""
        },
        "Constant:PCLZIP_OPT_SET_CHMOD": {
                "prefix": "PCLZIP_OPT_SET_CHMOD",
                "body": "PCLZIP_OPT_SET_CHMOD",
                "description": ""
        },
        "Constant:PCLZIP_OPT_STOP_ON_ERROR": {
                "prefix": "PCLZIP_OPT_STOP_ON_ERROR",
                "body": "PCLZIP_OPT_STOP_ON_ERROR",
                "description": ""
        },
        "Constant:PCLZIP_OPT_TEMP_FILE_OFF": {
                "prefix": "PCLZIP_OPT_TEMP_FILE_OFF",
                "body": "PCLZIP_OPT_TEMP_FILE_OFF",
                "description": ""
        },
        "Constant:PCLZIP_OPT_TEMP_FILE_ON": {
                "prefix": "PCLZIP_OPT_TEMP_FILE_ON",
                "body": "PCLZIP_OPT_TEMP_FILE_ON",
                "description": ""
        },
        "Constant:PCLZIP_OPT_TEMP_FILE_THRESHOLD": {
                "prefix": "PCLZIP_OPT_TEMP_FILE_THRESHOLD",
                "body": "PCLZIP_OPT_TEMP_FILE_THRESHOLD",
                "description": ""
        },
        "Constant:PCLZIP_READ_BLOCK_SIZE": {
                "prefix": "PCLZIP_READ_BLOCK_SIZE",
                "body": "PCLZIP_READ_BLOCK_SIZE",
                "description": ""
        },
        "Constant:PCLZIP_SEPARATOR": {
                "prefix": "PCLZIP_SEPARATOR",
                "body": "PCLZIP_SEPARATOR",
                "description": ""
        },
        "Constant:PCLZIP_TEMPORARY_DIR": {
                "prefix": "PCLZIP_TEMPORARY_DIR",
                "body": "PCLZIP_TEMPORARY_DIR",
                "description": ""
        },
        "Constant:PCLZIP_TEMPORARY_FILE_RATIO": {
                "prefix": "PCLZIP_TEMPORARY_FILE_RATIO",
                "body": "PCLZIP_TEMPORARY_FILE_RATIO",
                "description": ""
        },
        "Constant:PHP_INT_MIN": {
                "prefix": "PHP_INT_MIN",
                "body": "PHP_INT_MIN",
                "description": ""
        },
        "Constant:PHP_VERSION_ID": {
                "prefix": "PHP_VERSION_ID",
                "body": "PHP_VERSION_ID",
                "description": ""
        },
        "Constant:PLUGINDIR": {
                "prefix": "PLUGINDIR",
                "body": "PLUGINDIR",
                "description": ""
        },
        "Constant:PLUGINS_COOKIE_PATH": {
                "prefix": "PLUGINS_COOKIE_PATH",
                "body": "PLUGINS_COOKIE_PATH",
                "description": ""
        },
        "Constant:PO_MAX_LINE_LEN": {
                "prefix": "PO_MAX_LINE_LEN",
                "body": "PO_MAX_LINE_LEN",
                "description": ""
        },
        "Constant:RANDOM_COMPAT_READ_BUFFER": {
                "prefix": "RANDOM_COMPAT_READ_BUFFER",
                "body": "RANDOM_COMPAT_READ_BUFFER",
                "description": ""
        },
        "Constant:RECOVERY_MODE_COOKIE": {
                "prefix": "RECOVERY_MODE_COOKIE",
                "body": "RECOVERY_MODE_COOKIE",
                "description": ""
        },
        "Constant:REST_API_VERSION": {
                "prefix": "REST_API_VERSION",
                "body": "REST_API_VERSION",
                "description": "Version number for our API."
        },
        "Constant:REST_REQUEST": {
                "prefix": "REST_REQUEST",
                "body": "REST_REQUEST",
                "description": "Whether this is a REST Request."
        },
        "Constant:RSS": {
                "prefix": "RSS",
                "body": "RSS",
                "description": "RSS feed constant."
        },
        "Constant:SCRIPT_DEBUG": {
                "prefix": "SCRIPT_DEBUG",
                "body": "SCRIPT_DEBUG",
                "description": ""
        },
        "Constant:SECURE_AUTH_COOKIE": {
                "prefix": "SECURE_AUTH_COOKIE",
                "body": "SECURE_AUTH_COOKIE",
                "description": ""
        },
        "Constant:SECURE_AUTH_KEY": {
                "prefix": "SECURE_AUTH_KEY",
                "body": "SECURE_AUTH_KEY",
                "description": ""
        },
        "Constant:SECURE_AUTH_SALT": {
                "prefix": "SECURE_AUTH_SALT",
                "body": "SECURE_AUTH_SALT",
                "description": ""
        },
        "Constant:SERVICES_JSON_IN_ARR": {
                "prefix": "SERVICES_JSON_IN_ARR",
                "body": "SERVICES_JSON_IN_ARR",
                "description": "Marker constant for Services_JSON::decode(), used to flag stack state"
        },
        "Constant:SERVICES_JSON_IN_CMT": {
                "prefix": "SERVICES_JSON_IN_CMT",
                "body": "SERVICES_JSON_IN_CMT",
                "description": "Marker constant for Services_JSON::decode(), used to flag stack state"
        },
        "Constant:SERVICES_JSON_IN_OBJ": {
                "prefix": "SERVICES_JSON_IN_OBJ",
                "body": "SERVICES_JSON_IN_OBJ",
                "description": "Marker constant for Services_JSON::decode(), used to flag stack state"
        },
        "Constant:SERVICES_JSON_IN_STR": {
                "prefix": "SERVICES_JSON_IN_STR",
                "body": "SERVICES_JSON_IN_STR",
                "description": "Marker constant for Services_JSON::decode(), used to flag stack state"
        },
        "Constant:SERVICES_JSON_LOOSE_TYPE": {
                "prefix": "SERVICES_JSON_LOOSE_TYPE",
                "body": "SERVICES_JSON_LOOSE_TYPE",
                "description": "Behavior switch for Services_JSON::decode()"
        },
        "Constant:SERVICES_JSON_SLICE": {
                "prefix": "SERVICES_JSON_SLICE",
                "body": "SERVICES_JSON_SLICE",
                "description": "Marker constant for Services_JSON::decode(), used to flag stack state"
        },
        "Constant:SERVICES_JSON_SUPPRESS_ERRORS": {
                "prefix": "SERVICES_JSON_SUPPRESS_ERRORS",
                "body": "SERVICES_JSON_SUPPRESS_ERRORS",
                "description": "Behavior switch for Services_JSON::decode()"
        },
        "Constant:SERVICES_JSON_USE_TO_JSON": {
                "prefix": "SERVICES_JSON_USE_TO_JSON",
                "body": "SERVICES_JSON_USE_TO_JSON",
                "description": "Behavior switch for Services_JSON::decode()"
        },
        "Constant:SHORTINIT": {
                "prefix": "SHORTINIT",
                "body": "SHORTINIT",
                "description": ""
        },
        "Constant:SIMPLEPIE_BUILD": {
                "prefix": "SIMPLEPIE_BUILD",
                "body": "SIMPLEPIE_BUILD",
                "description": "SimplePie Build"
        },
        "Constant:SIMPLEPIE_CONSTRUCT_ALL": {
                "prefix": "SIMPLEPIE_CONSTRUCT_ALL",
                "body": "SIMPLEPIE_CONSTRUCT_ALL",
                "description": "All constructs"
        },
        "Constant:SIMPLEPIE_CONSTRUCT_BASE64": {
                "prefix": "SIMPLEPIE_CONSTRUCT_BASE64",
                "body": "SIMPLEPIE_CONSTRUCT_BASE64",
                "description": "base64-encoded construct"
        },
        "Constant:SIMPLEPIE_CONSTRUCT_HTML": {
                "prefix": "SIMPLEPIE_CONSTRUCT_HTML",
                "body": "SIMPLEPIE_CONSTRUCT_HTML",
                "description": "HTML construct"
        },
        "Constant:SIMPLEPIE_CONSTRUCT_IRI": {
                "prefix": "SIMPLEPIE_CONSTRUCT_IRI",
                "body": "SIMPLEPIE_CONSTRUCT_IRI",
                "description": "IRI construct"
        },
        "Constant:SIMPLEPIE_CONSTRUCT_MAYBE_HTML": {
                "prefix": "SIMPLEPIE_CONSTRUCT_MAYBE_HTML",
                "body": "SIMPLEPIE_CONSTRUCT_MAYBE_HTML",
                "description": "A construct that might be HTML"
        },
        "Constant:SIMPLEPIE_CONSTRUCT_NONE": {
                "prefix": "SIMPLEPIE_CONSTRUCT_NONE",
                "body": "SIMPLEPIE_CONSTRUCT_NONE",
                "description": "No construct"
        },
        "Constant:SIMPLEPIE_CONSTRUCT_TEXT": {
                "prefix": "SIMPLEPIE_CONSTRUCT_TEXT",
                "body": "SIMPLEPIE_CONSTRUCT_TEXT",
                "description": "Text construct"
        },
        "Constant:SIMPLEPIE_CONSTRUCT_XHTML": {
                "prefix": "SIMPLEPIE_CONSTRUCT_XHTML",
                "body": "SIMPLEPIE_CONSTRUCT_XHTML",
                "description": "XHTML construct"
        },
        "Constant:SIMPLEPIE_FILE_SOURCE_CURL": {
                "prefix": "SIMPLEPIE_FILE_SOURCE_CURL",
                "body": "SIMPLEPIE_FILE_SOURCE_CURL",
                "description": "cURL file source"
        },
        "Constant:SIMPLEPIE_FILE_SOURCE_FILE_GET_CONTENTS": {
                "prefix": "SIMPLEPIE_FILE_SOURCE_FILE_GET_CONTENTS",
                "body": "SIMPLEPIE_FILE_SOURCE_FILE_GET_CONTENTS",
                "description": "file_get_contents() file source"
        },
        "Constant:SIMPLEPIE_FILE_SOURCE_FSOCKOPEN": {
                "prefix": "SIMPLEPIE_FILE_SOURCE_FSOCKOPEN",
                "body": "SIMPLEPIE_FILE_SOURCE_FSOCKOPEN",
                "description": "fsockopen() file source"
        },
        "Constant:SIMPLEPIE_FILE_SOURCE_LOCAL": {
                "prefix": "SIMPLEPIE_FILE_SOURCE_LOCAL",
                "body": "SIMPLEPIE_FILE_SOURCE_LOCAL",
                "description": "Local file source"
        },
        "Constant:SIMPLEPIE_FILE_SOURCE_NONE": {
                "prefix": "SIMPLEPIE_FILE_SOURCE_NONE",
                "body": "SIMPLEPIE_FILE_SOURCE_NONE",
                "description": "No file source"
        },
        "Constant:SIMPLEPIE_FILE_SOURCE_REMOTE": {
                "prefix": "SIMPLEPIE_FILE_SOURCE_REMOTE",
                "body": "SIMPLEPIE_FILE_SOURCE_REMOTE",
                "description": "Remote file source"
        },
        "Constant:SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY": {
                "prefix": "SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY",
                "body": "SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY",
                "description": "IANA Link Relations Registry"
        },
        "Constant:SIMPLEPIE_LINKBACK": {
                "prefix": "SIMPLEPIE_LINKBACK",
                "body": "SIMPLEPIE_LINKBACK",
                "description": "SimplePie Linkback"
        },
        "Constant:SIMPLEPIE_LOCATOR_ALL": {
                "prefix": "SIMPLEPIE_LOCATOR_ALL",
                "body": "SIMPLEPIE_LOCATOR_ALL",
                "description": "All Feed Autodiscovery"
        },
        "Constant:SIMPLEPIE_LOCATOR_AUTODISCOVERY": {
                "prefix": "SIMPLEPIE_LOCATOR_AUTODISCOVERY",
                "body": "SIMPLEPIE_LOCATOR_AUTODISCOVERY",
                "description": "Feed Link Element Autodiscovery"
        },
        "Constant:SIMPLEPIE_LOCATOR_LOCAL_BODY": {
                "prefix": "SIMPLEPIE_LOCATOR_LOCAL_BODY",
                "body": "SIMPLEPIE_LOCATOR_LOCAL_BODY",
                "description": "Local Feed Body Autodiscovery"
        },
        "Constant:SIMPLEPIE_LOCATOR_LOCAL_EXTENSION": {
                "prefix": "SIMPLEPIE_LOCATOR_LOCAL_EXTENSION",
                "body": "SIMPLEPIE_LOCATOR_LOCAL_EXTENSION",
                "description": "Local Feed Extension Autodiscovery"
        },
        "Constant:SIMPLEPIE_LOCATOR_NONE": {
                "prefix": "SIMPLEPIE_LOCATOR_NONE",
                "body": "SIMPLEPIE_LOCATOR_NONE",
                "description": "No Autodiscovery"
        },
        "Constant:SIMPLEPIE_LOCATOR_REMOTE_BODY": {
                "prefix": "SIMPLEPIE_LOCATOR_REMOTE_BODY",
                "body": "SIMPLEPIE_LOCATOR_REMOTE_BODY",
                "description": "Remote Feed Body Autodiscovery"
        },
        "Constant:SIMPLEPIE_LOCATOR_REMOTE_EXTENSION": {
                "prefix": "SIMPLEPIE_LOCATOR_REMOTE_EXTENSION",
                "body": "SIMPLEPIE_LOCATOR_REMOTE_EXTENSION",
                "description": "Remote Feed Extension Autodiscovery"
        },
        "Constant:SIMPLEPIE_LOWERCASE": {
                "prefix": "SIMPLEPIE_LOWERCASE",
                "body": "SIMPLEPIE_LOWERCASE",
                "description": "Change to lowercase"
        },
        "Constant:SIMPLEPIE_NAME": {
                "prefix": "SIMPLEPIE_NAME",
                "body": "SIMPLEPIE_NAME",
                "description": "SimplePie Name"
        },
        "Constant:SIMPLEPIE_NAMESPACE_ATOM_03": {
                "prefix": "SIMPLEPIE_NAMESPACE_ATOM_03",
                "body": "SIMPLEPIE_NAMESPACE_ATOM_03",
                "description": "Atom 0.3 Namespace"
        },
        "Constant:SIMPLEPIE_NAMESPACE_ATOM_10": {
                "prefix": "SIMPLEPIE_NAMESPACE_ATOM_10",
                "body": "SIMPLEPIE_NAMESPACE_ATOM_10",
                "description": "Atom 1.0 Namespace"
        },
        "Constant:SIMPLEPIE_NAMESPACE_DC_10": {
                "prefix": "SIMPLEPIE_NAMESPACE_DC_10",
                "body": "SIMPLEPIE_NAMESPACE_DC_10",
                "description": "DC 1.0 Namespace"
        },
        "Constant:SIMPLEPIE_NAMESPACE_DC_11": {
                "prefix": "SIMPLEPIE_NAMESPACE_DC_11",
                "body": "SIMPLEPIE_NAMESPACE_DC_11",
                "description": "DC 1.1 Namespace"
        },
        "Constant:SIMPLEPIE_NAMESPACE_GEORSS": {
                "prefix": "SIMPLEPIE_NAMESPACE_GEORSS",
                "body": "SIMPLEPIE_NAMESPACE_GEORSS",
                "description": "GeoRSS Namespace"
        },
        "Constant:SIMPLEPIE_NAMESPACE_ITUNES": {
                "prefix": "SIMPLEPIE_NAMESPACE_ITUNES",
                "body": "SIMPLEPIE_NAMESPACE_ITUNES",
                "description": "iTunes RSS Namespace"
        },
        "Constant:SIMPLEPIE_NAMESPACE_MEDIARSS": {
                "prefix": "SIMPLEPIE_NAMESPACE_MEDIARSS",
                "body": "SIMPLEPIE_NAMESPACE_MEDIARSS",
                "description": "Media RSS Namespace"
        },
        "Constant:SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG": {
                "prefix": "SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG",
                "body": "SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG",
                "description": "Wrong Media RSS Namespace. Caused by a long-standing typo in the spec."
        },
        "Constant:SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG2": {
                "prefix": "SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG2",
                "body": "SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG2",
                "description": "Wrong Media RSS Namespace #2. New namespace introduced in Media RSS 1.5."
        },
        "Constant:SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG3": {
                "prefix": "SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG3",
                "body": "SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG3",
                "description": "Wrong Media RSS Namespace #3. A possible typo of the Media RSS 1.5 namespace."
        },
        "Constant:SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG4": {
                "prefix": "SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG4",
                "body": "SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG4",
                "description": "Wrong Media RSS Namespace #4. New spec location after the RSS Advisory Board takes it over, but not a valid namespace."
        },
        "Constant:SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG5": {
                "prefix": "SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG5",
                "body": "SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG5",
                "description": "Wrong Media RSS Namespace #5. A possible typo of the RSS Advisory Board URL."
        },
        "Constant:SIMPLEPIE_NAMESPACE_RDF": {
                "prefix": "SIMPLEPIE_NAMESPACE_RDF",
                "body": "SIMPLEPIE_NAMESPACE_RDF",
                "description": "RDF Namespace"
        },
        "Constant:SIMPLEPIE_NAMESPACE_RSS_090": {
                "prefix": "SIMPLEPIE_NAMESPACE_RSS_090",
                "body": "SIMPLEPIE_NAMESPACE_RSS_090",
                "description": "RSS 0.90 Namespace"
        },
        "Constant:SIMPLEPIE_NAMESPACE_RSS_10": {
                "prefix": "SIMPLEPIE_NAMESPACE_RSS_10",
                "body": "SIMPLEPIE_NAMESPACE_RSS_10",
                "description": "RSS 1.0 Namespace"
        },
        "Constant:SIMPLEPIE_NAMESPACE_RSS_10_MODULES_CONTENT": {
                "prefix": "SIMPLEPIE_NAMESPACE_RSS_10_MODULES_CONTENT",
                "body": "SIMPLEPIE_NAMESPACE_RSS_10_MODULES_CONTENT",
                "description": "RSS 1.0 Content Module Namespace"
        },
        "Constant:SIMPLEPIE_NAMESPACE_RSS_20": {
                "prefix": "SIMPLEPIE_NAMESPACE_RSS_20",
                "body": "SIMPLEPIE_NAMESPACE_RSS_20",
                "description": "RSS 2.0 Namespace (Stupid, I know, but I&#039;m certain it will confuse people less with support.)"
        },
        "Constant:SIMPLEPIE_NAMESPACE_W3C_BASIC_GEO": {
                "prefix": "SIMPLEPIE_NAMESPACE_W3C_BASIC_GEO",
                "body": "SIMPLEPIE_NAMESPACE_W3C_BASIC_GEO",
                "description": "W3C Basic Geo (WGS84 lat/long) Vocabulary Namespace"
        },
        "Constant:SIMPLEPIE_NAMESPACE_XHTML": {
                "prefix": "SIMPLEPIE_NAMESPACE_XHTML",
                "body": "SIMPLEPIE_NAMESPACE_XHTML",
                "description": "XHTML Namespace"
        },
        "Constant:SIMPLEPIE_NAMESPACE_XML": {
                "prefix": "SIMPLEPIE_NAMESPACE_XML",
                "body": "SIMPLEPIE_NAMESPACE_XML",
                "description": "XML Namespace"
        },
        "Constant:SIMPLEPIE_PCRE_HTML_ATTRIBUTE": {
                "prefix": "SIMPLEPIE_PCRE_HTML_ATTRIBUTE",
                "body": "SIMPLEPIE_PCRE_HTML_ATTRIBUTE",
                "description": "PCRE for HTML attributes"
        },
        "Constant:SIMPLEPIE_PCRE_XML_ATTRIBUTE": {
                "prefix": "SIMPLEPIE_PCRE_XML_ATTRIBUTE",
                "body": "SIMPLEPIE_PCRE_XML_ATTRIBUTE",
                "description": "PCRE for XML attributes"
        },
        "Constant:SIMPLEPIE_SAME_CASE": {
                "prefix": "SIMPLEPIE_SAME_CASE",
                "body": "SIMPLEPIE_SAME_CASE",
                "description": "Don&#039;t change case"
        },
        "Constant:SIMPLEPIE_TYPE_ALL": {
                "prefix": "SIMPLEPIE_TYPE_ALL",
                "body": "SIMPLEPIE_TYPE_ALL",
                "description": "All feed types"
        },
        "Constant:SIMPLEPIE_TYPE_ATOM_03": {
                "prefix": "SIMPLEPIE_TYPE_ATOM_03",
                "body": "SIMPLEPIE_TYPE_ATOM_03",
                "description": "Atom 0.3"
        },
        "Constant:SIMPLEPIE_TYPE_ATOM_10": {
                "prefix": "SIMPLEPIE_TYPE_ATOM_10",
                "body": "SIMPLEPIE_TYPE_ATOM_10",
                "description": "Atom 1.0"
        },
        "Constant:SIMPLEPIE_TYPE_ATOM_ALL": {
                "prefix": "SIMPLEPIE_TYPE_ATOM_ALL",
                "body": "SIMPLEPIE_TYPE_ATOM_ALL",
                "description": "All Atom"
        },
        "Constant:SIMPLEPIE_TYPE_NONE": {
                "prefix": "SIMPLEPIE_TYPE_NONE",
                "body": "SIMPLEPIE_TYPE_NONE",
                "description": "No known feed type"
        },
        "Constant:SIMPLEPIE_TYPE_RSS_090": {
                "prefix": "SIMPLEPIE_TYPE_RSS_090",
                "body": "SIMPLEPIE_TYPE_RSS_090",
                "description": "RSS 0.90"
        },
        "Constant:SIMPLEPIE_TYPE_RSS_091": {
                "prefix": "SIMPLEPIE_TYPE_RSS_091",
                "body": "SIMPLEPIE_TYPE_RSS_091",
                "description": "RSS 0.91 (both Netscape and Userland)"
        },
        "Constant:SIMPLEPIE_TYPE_RSS_091_NETSCAPE": {
                "prefix": "SIMPLEPIE_TYPE_RSS_091_NETSCAPE",
                "body": "SIMPLEPIE_TYPE_RSS_091_NETSCAPE",
                "description": "RSS 0.91 (Netscape)"
        },
        "Constant:SIMPLEPIE_TYPE_RSS_091_USERLAND": {
                "prefix": "SIMPLEPIE_TYPE_RSS_091_USERLAND",
                "body": "SIMPLEPIE_TYPE_RSS_091_USERLAND",
                "description": "RSS 0.91 (Userland)"
        },
        "Constant:SIMPLEPIE_TYPE_RSS_092": {
                "prefix": "SIMPLEPIE_TYPE_RSS_092",
                "body": "SIMPLEPIE_TYPE_RSS_092",
                "description": "RSS 0.92"
        },
        "Constant:SIMPLEPIE_TYPE_RSS_093": {
                "prefix": "SIMPLEPIE_TYPE_RSS_093",
                "body": "SIMPLEPIE_TYPE_RSS_093",
                "description": "RSS 0.93"
        },
        "Constant:SIMPLEPIE_TYPE_RSS_094": {
                "prefix": "SIMPLEPIE_TYPE_RSS_094",
                "body": "SIMPLEPIE_TYPE_RSS_094",
                "description": "RSS 0.94"
        },
        "Constant:SIMPLEPIE_TYPE_RSS_10": {
                "prefix": "SIMPLEPIE_TYPE_RSS_10",
                "body": "SIMPLEPIE_TYPE_RSS_10",
                "description": "RSS 1.0"
        },
        "Constant:SIMPLEPIE_TYPE_RSS_20": {
                "prefix": "SIMPLEPIE_TYPE_RSS_20",
                "body": "SIMPLEPIE_TYPE_RSS_20",
                "description": "RSS 2.0"
        },
        "Constant:SIMPLEPIE_TYPE_RSS_ALL": {
                "prefix": "SIMPLEPIE_TYPE_RSS_ALL",
                "body": "SIMPLEPIE_TYPE_RSS_ALL",
                "description": "All RSS"
        },
        "Constant:SIMPLEPIE_TYPE_RSS_RDF": {
                "prefix": "SIMPLEPIE_TYPE_RSS_RDF",
                "body": "SIMPLEPIE_TYPE_RSS_RDF",
                "description": "RDF-based RSS"
        },
        "Constant:SIMPLEPIE_TYPE_RSS_SYNDICATION": {
                "prefix": "SIMPLEPIE_TYPE_RSS_SYNDICATION",
                "body": "SIMPLEPIE_TYPE_RSS_SYNDICATION",
                "description": "Non-RDF-based RSS (truly intended as syndication format)"
        },
        "Constant:SIMPLEPIE_UPPERCASE": {
                "prefix": "SIMPLEPIE_UPPERCASE",
                "body": "SIMPLEPIE_UPPERCASE",
                "description": "Change to uppercase"
        },
        "Constant:SIMPLEPIE_URL": {
                "prefix": "SIMPLEPIE_URL",
                "body": "SIMPLEPIE_URL",
                "description": "SimplePie Website URL"
        },
        "Constant:SIMPLEPIE_USERAGENT": {
                "prefix": "SIMPLEPIE_USERAGENT",
                "body": "SIMPLEPIE_USERAGENT",
                "description": "SimplePie Useragent"
        },
        "Constant:SIMPLEPIE_VERSION": {
                "prefix": "SIMPLEPIE_VERSION",
                "body": "SIMPLEPIE_VERSION",
                "description": "SimplePie Version"
        },
        "Constant:SITECOOKIEPATH": {
                "prefix": "SITECOOKIEPATH",
                "body": "SITECOOKIEPATH",
                "description": ""
        },
        "Constant:SODIUM_BASE64_VARIANT_ORIGINAL": {
                "prefix": "SODIUM_BASE64_VARIANT_ORIGINAL",
                "body": "SODIUM_BASE64_VARIANT_ORIGINAL",
                "description": ""
        },
        "Constant:SODIUM_BASE64_VARIANT_ORIGINAL_NO_PADDING": {
                "prefix": "SODIUM_BASE64_VARIANT_ORIGINAL_NO_PADDING",
                "body": "SODIUM_BASE64_VARIANT_ORIGINAL_NO_PADDING",
                "description": ""
        },
        "Constant:SODIUM_BASE64_VARIANT_URLSAFE": {
                "prefix": "SODIUM_BASE64_VARIANT_URLSAFE",
                "body": "SODIUM_BASE64_VARIANT_URLSAFE",
                "description": ""
        },
        "Constant:SODIUM_BASE64_VARIANT_URLSAFE_NO_PADDING": {
                "prefix": "SODIUM_BASE64_VARIANT_URLSAFE_NO_PADDING",
                "body": "SODIUM_BASE64_VARIANT_URLSAFE_NO_PADDING",
                "description": ""
        },
        "Constant:SODIUM_COMPAT_POLYFILLED_RISTRETTO255": {
                "prefix": "SODIUM_COMPAT_POLYFILLED_RISTRETTO255",
                "body": "SODIUM_COMPAT_POLYFILLED_RISTRETTO255",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_AEAD_AES256GCM_ABYTES": {
                "prefix": "SODIUM_CRYPTO_AEAD_AES256GCM_ABYTES",
                "body": "SODIUM_CRYPTO_AEAD_AES256GCM_ABYTES",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_AEAD_AES256GCM_KEYBYTES": {
                "prefix": "SODIUM_CRYPTO_AEAD_AES256GCM_KEYBYTES",
                "body": "SODIUM_CRYPTO_AEAD_AES256GCM_KEYBYTES",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_AEAD_AES256GCM_NPUBBYTES": {
                "prefix": "SODIUM_CRYPTO_AEAD_AES256GCM_NPUBBYTES",
                "body": "SODIUM_CRYPTO_AEAD_AES256GCM_NPUBBYTES",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_AEAD_AES256GCM_NSECBYTES": {
                "prefix": "SODIUM_CRYPTO_AEAD_AES256GCM_NSECBYTES",
                "body": "SODIUM_CRYPTO_AEAD_AES256GCM_NSECBYTES",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_ABYTES": {
                "prefix": "SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_ABYTES",
                "body": "SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_ABYTES",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_IETF_ABYTES": {
                "prefix": "SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_IETF_ABYTES",
                "body": "SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_IETF_ABYTES",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_IETF_KEYBYTES": {
                "prefix": "SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_IETF_KEYBYTES",
                "body": "SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_IETF_KEYBYTES",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_IETF_NPUBBYTES": {
                "prefix": "SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_IETF_NPUBBYTES",
                "body": "SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_IETF_NPUBBYTES",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_IETF_NSECBYTES": {
                "prefix": "SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_IETF_NSECBYTES",
                "body": "SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_IETF_NSECBYTES",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_KEYBYTES": {
                "prefix": "SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_KEYBYTES",
                "body": "SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_KEYBYTES",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_NPUBBYTES": {
                "prefix": "SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_NPUBBYTES",
                "body": "SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_NPUBBYTES",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_NSECBYTES": {
                "prefix": "SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_NSECBYTES",
                "body": "SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_NSECBYTES",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_AEAD_XCHACHA20POLY1305_IETF_ABYTES": {
                "prefix": "SODIUM_CRYPTO_AEAD_XCHACHA20POLY1305_IETF_ABYTES",
                "body": "SODIUM_CRYPTO_AEAD_XCHACHA20POLY1305_IETF_ABYTES",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_AEAD_XCHACHA20POLY1305_IETF_KEYBYTES": {
                "prefix": "SODIUM_CRYPTO_AEAD_XCHACHA20POLY1305_IETF_KEYBYTES",
                "body": "SODIUM_CRYPTO_AEAD_XCHACHA20POLY1305_IETF_KEYBYTES",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_AEAD_XCHACHA20POLY1305_IETF_NPUBBYTES": {
                "prefix": "SODIUM_CRYPTO_AEAD_XCHACHA20POLY1305_IETF_NPUBBYTES",
                "body": "SODIUM_CRYPTO_AEAD_XCHACHA20POLY1305_IETF_NPUBBYTES",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_AEAD_XCHACHA20POLY1305_IETF_NSECBYTES": {
                "prefix": "SODIUM_CRYPTO_AEAD_XCHACHA20POLY1305_IETF_NSECBYTES",
                "body": "SODIUM_CRYPTO_AEAD_XCHACHA20POLY1305_IETF_NSECBYTES",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_AUTH_BYTES": {
                "prefix": "SODIUM_CRYPTO_AUTH_BYTES",
                "body": "SODIUM_CRYPTO_AUTH_BYTES",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_AUTH_KEYBYTES": {
                "prefix": "SODIUM_CRYPTO_AUTH_KEYBYTES",
                "body": "SODIUM_CRYPTO_AUTH_KEYBYTES",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_BOX_KEYPAIRBYTES": {
                "prefix": "SODIUM_CRYPTO_BOX_KEYPAIRBYTES",
                "body": "SODIUM_CRYPTO_BOX_KEYPAIRBYTES",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_BOX_MACBYTES": {
                "prefix": "SODIUM_CRYPTO_BOX_MACBYTES",
                "body": "SODIUM_CRYPTO_BOX_MACBYTES",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_BOX_NONCEBYTES": {
                "prefix": "SODIUM_CRYPTO_BOX_NONCEBYTES",
                "body": "SODIUM_CRYPTO_BOX_NONCEBYTES",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_BOX_PUBLICKEYBYTES": {
                "prefix": "SODIUM_CRYPTO_BOX_PUBLICKEYBYTES",
                "body": "SODIUM_CRYPTO_BOX_PUBLICKEYBYTES",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_BOX_SEALBYTES": {
                "prefix": "SODIUM_CRYPTO_BOX_SEALBYTES",
                "body": "SODIUM_CRYPTO_BOX_SEALBYTES",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_BOX_SECRETKEYBYTES": {
                "prefix": "SODIUM_CRYPTO_BOX_SECRETKEYBYTES",
                "body": "SODIUM_CRYPTO_BOX_SECRETKEYBYTES",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_BOX_SEEDBYTES": {
                "prefix": "SODIUM_CRYPTO_BOX_SEEDBYTES",
                "body": "SODIUM_CRYPTO_BOX_SEEDBYTES",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_CORE_RISTRETTO255_BYTES": {
                "prefix": "SODIUM_CRYPTO_CORE_RISTRETTO255_BYTES",
                "body": "SODIUM_CRYPTO_CORE_RISTRETTO255_BYTES",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_CORE_RISTRETTO255_HASHBYTES": {
                "prefix": "SODIUM_CRYPTO_CORE_RISTRETTO255_HASHBYTES",
                "body": "SODIUM_CRYPTO_CORE_RISTRETTO255_HASHBYTES",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_CORE_RISTRETTO255_NONREDUCEDSCALARBYTES": {
                "prefix": "SODIUM_CRYPTO_CORE_RISTRETTO255_NONREDUCEDSCALARBYTES",
                "body": "SODIUM_CRYPTO_CORE_RISTRETTO255_NONREDUCEDSCALARBYTES",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_CORE_RISTRETTO255_SCALARBYTES": {
                "prefix": "SODIUM_CRYPTO_CORE_RISTRETTO255_SCALARBYTES",
                "body": "SODIUM_CRYPTO_CORE_RISTRETTO255_SCALARBYTES",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_GENERICHASH_BYTES": {
                "prefix": "SODIUM_CRYPTO_GENERICHASH_BYTES",
                "body": "SODIUM_CRYPTO_GENERICHASH_BYTES",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_GENERICHASH_BYTES_MAX": {
                "prefix": "SODIUM_CRYPTO_GENERICHASH_BYTES_MAX",
                "body": "SODIUM_CRYPTO_GENERICHASH_BYTES_MAX",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_GENERICHASH_BYTES_MIN": {
                "prefix": "SODIUM_CRYPTO_GENERICHASH_BYTES_MIN",
                "body": "SODIUM_CRYPTO_GENERICHASH_BYTES_MIN",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_GENERICHASH_KEYBYTES": {
                "prefix": "SODIUM_CRYPTO_GENERICHASH_KEYBYTES",
                "body": "SODIUM_CRYPTO_GENERICHASH_KEYBYTES",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_GENERICHASH_KEYBYTES_MAX": {
                "prefix": "SODIUM_CRYPTO_GENERICHASH_KEYBYTES_MAX",
                "body": "SODIUM_CRYPTO_GENERICHASH_KEYBYTES_MAX",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_GENERICHASH_KEYBYTES_MIN": {
                "prefix": "SODIUM_CRYPTO_GENERICHASH_KEYBYTES_MIN",
                "body": "SODIUM_CRYPTO_GENERICHASH_KEYBYTES_MIN",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_KDF_BYTES_MAX": {
                "prefix": "SODIUM_CRYPTO_KDF_BYTES_MAX",
                "body": "SODIUM_CRYPTO_KDF_BYTES_MAX",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_KDF_BYTES_MIN": {
                "prefix": "SODIUM_CRYPTO_KDF_BYTES_MIN",
                "body": "SODIUM_CRYPTO_KDF_BYTES_MIN",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_KDF_CONTEXTBYTES": {
                "prefix": "SODIUM_CRYPTO_KDF_CONTEXTBYTES",
                "body": "SODIUM_CRYPTO_KDF_CONTEXTBYTES",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_KDF_KEYBYTES": {
                "prefix": "SODIUM_CRYPTO_KDF_KEYBYTES",
                "body": "SODIUM_CRYPTO_KDF_KEYBYTES",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_KX_BYTES": {
                "prefix": "SODIUM_CRYPTO_KX_BYTES",
                "body": "SODIUM_CRYPTO_KX_BYTES",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_KX_KEYPAIRBYTES": {
                "prefix": "SODIUM_CRYPTO_KX_KEYPAIRBYTES",
                "body": "SODIUM_CRYPTO_KX_KEYPAIRBYTES",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_KX_PRIMITIVE": {
                "prefix": "SODIUM_CRYPTO_KX_PRIMITIVE",
                "body": "SODIUM_CRYPTO_KX_PRIMITIVE",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_KX_PUBLICKEYBYTES": {
                "prefix": "SODIUM_CRYPTO_KX_PUBLICKEYBYTES",
                "body": "SODIUM_CRYPTO_KX_PUBLICKEYBYTES",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_KX_SECRETKEYBYTES": {
                "prefix": "SODIUM_CRYPTO_KX_SECRETKEYBYTES",
                "body": "SODIUM_CRYPTO_KX_SECRETKEYBYTES",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_KX_SEEDBYTES": {
                "prefix": "SODIUM_CRYPTO_KX_SEEDBYTES",
                "body": "SODIUM_CRYPTO_KX_SEEDBYTES",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_KX_SESSIONKEYBYTES": {
                "prefix": "SODIUM_CRYPTO_KX_SESSIONKEYBYTES",
                "body": "SODIUM_CRYPTO_KX_SESSIONKEYBYTES",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_PWHASH_ALG_ARGON2I13": {
                "prefix": "SODIUM_CRYPTO_PWHASH_ALG_ARGON2I13",
                "body": "SODIUM_CRYPTO_PWHASH_ALG_ARGON2I13",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_PWHASH_ALG_ARGON2ID13": {
                "prefix": "SODIUM_CRYPTO_PWHASH_ALG_ARGON2ID13",
                "body": "SODIUM_CRYPTO_PWHASH_ALG_ARGON2ID13",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_PWHASH_MEMLIMIT_INTERACTIVE": {
                "prefix": "SODIUM_CRYPTO_PWHASH_MEMLIMIT_INTERACTIVE",
                "body": "SODIUM_CRYPTO_PWHASH_MEMLIMIT_INTERACTIVE",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_PWHASH_MEMLIMIT_MODERATE": {
                "prefix": "SODIUM_CRYPTO_PWHASH_MEMLIMIT_MODERATE",
                "body": "SODIUM_CRYPTO_PWHASH_MEMLIMIT_MODERATE",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_PWHASH_MEMLIMIT_SENSITIVE": {
                "prefix": "SODIUM_CRYPTO_PWHASH_MEMLIMIT_SENSITIVE",
                "body": "SODIUM_CRYPTO_PWHASH_MEMLIMIT_SENSITIVE",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_PWHASH_OPSLIMIT_INTERACTIVE": {
                "prefix": "SODIUM_CRYPTO_PWHASH_OPSLIMIT_INTERACTIVE",
                "body": "SODIUM_CRYPTO_PWHASH_OPSLIMIT_INTERACTIVE",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_PWHASH_OPSLIMIT_MODERATE": {
                "prefix": "SODIUM_CRYPTO_PWHASH_OPSLIMIT_MODERATE",
                "body": "SODIUM_CRYPTO_PWHASH_OPSLIMIT_MODERATE",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_PWHASH_OPSLIMIT_SENSITIVE": {
                "prefix": "SODIUM_CRYPTO_PWHASH_OPSLIMIT_SENSITIVE",
                "body": "SODIUM_CRYPTO_PWHASH_OPSLIMIT_SENSITIVE",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_PWHASH_SALTBYTES": {
                "prefix": "SODIUM_CRYPTO_PWHASH_SALTBYTES",
                "body": "SODIUM_CRYPTO_PWHASH_SALTBYTES",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_PWHASH_SCRYPTSALSA208SHA256_MEMLIMIT_INTERACTIVE": {
                "prefix": "SODIUM_CRYPTO_PWHASH_SCRYPTSALSA208SHA256_MEMLIMIT_INTERACTIVE",
                "body": "SODIUM_CRYPTO_PWHASH_SCRYPTSALSA208SHA256_MEMLIMIT_INTERACTIVE",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_PWHASH_SCRYPTSALSA208SHA256_MEMLIMIT_SENSITIVE": {
                "prefix": "SODIUM_CRYPTO_PWHASH_SCRYPTSALSA208SHA256_MEMLIMIT_SENSITIVE",
                "body": "SODIUM_CRYPTO_PWHASH_SCRYPTSALSA208SHA256_MEMLIMIT_SENSITIVE",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_PWHASH_SCRYPTSALSA208SHA256_OPSLIMIT_INTERACTIVE": {
                "prefix": "SODIUM_CRYPTO_PWHASH_SCRYPTSALSA208SHA256_OPSLIMIT_INTERACTIVE",
                "body": "SODIUM_CRYPTO_PWHASH_SCRYPTSALSA208SHA256_OPSLIMIT_INTERACTIVE",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_PWHASH_SCRYPTSALSA208SHA256_OPSLIMIT_SENSITIVE": {
                "prefix": "SODIUM_CRYPTO_PWHASH_SCRYPTSALSA208SHA256_OPSLIMIT_SENSITIVE",
                "body": "SODIUM_CRYPTO_PWHASH_SCRYPTSALSA208SHA256_OPSLIMIT_SENSITIVE",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_PWHASH_SCRYPTSALSA208SHA256_SALTBYTES": {
                "prefix": "SODIUM_CRYPTO_PWHASH_SCRYPTSALSA208SHA256_SALTBYTES",
                "body": "SODIUM_CRYPTO_PWHASH_SCRYPTSALSA208SHA256_SALTBYTES",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_PWHASH_SCRYPTSALSA208SHA256_STRPREFIX": {
                "prefix": "SODIUM_CRYPTO_PWHASH_SCRYPTSALSA208SHA256_STRPREFIX",
                "body": "SODIUM_CRYPTO_PWHASH_SCRYPTSALSA208SHA256_STRPREFIX",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_PWHASH_STRPREFIX": {
                "prefix": "SODIUM_CRYPTO_PWHASH_STRPREFIX",
                "body": "SODIUM_CRYPTO_PWHASH_STRPREFIX",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_SCALARMULT_BYTES": {
                "prefix": "SODIUM_CRYPTO_SCALARMULT_BYTES",
                "body": "SODIUM_CRYPTO_SCALARMULT_BYTES",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_SCALARMULT_RISTRETTO255_BYTES": {
                "prefix": "SODIUM_CRYPTO_SCALARMULT_RISTRETTO255_BYTES",
                "body": "SODIUM_CRYPTO_SCALARMULT_RISTRETTO255_BYTES",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_SCALARMULT_RISTRETTO255_SCALARBYTES": {
                "prefix": "SODIUM_CRYPTO_SCALARMULT_RISTRETTO255_SCALARBYTES",
                "body": "SODIUM_CRYPTO_SCALARMULT_RISTRETTO255_SCALARBYTES",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_SCALARMULT_SCALARBYTES": {
                "prefix": "SODIUM_CRYPTO_SCALARMULT_SCALARBYTES",
                "body": "SODIUM_CRYPTO_SCALARMULT_SCALARBYTES",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_SECRETBOX_KEYBYTES": {
                "prefix": "SODIUM_CRYPTO_SECRETBOX_KEYBYTES",
                "body": "SODIUM_CRYPTO_SECRETBOX_KEYBYTES",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_SECRETBOX_MACBYTES": {
                "prefix": "SODIUM_CRYPTO_SECRETBOX_MACBYTES",
                "body": "SODIUM_CRYPTO_SECRETBOX_MACBYTES",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_SECRETBOX_NONCEBYTES": {
                "prefix": "SODIUM_CRYPTO_SECRETBOX_NONCEBYTES",
                "body": "SODIUM_CRYPTO_SECRETBOX_NONCEBYTES",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_ABYTES": {
                "prefix": "SODIUM_CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_ABYTES",
                "body": "SODIUM_CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_ABYTES",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_HEADERBYTES": {
                "prefix": "SODIUM_CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_HEADERBYTES",
                "body": "SODIUM_CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_HEADERBYTES",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_KEYBYTES": {
                "prefix": "SODIUM_CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_KEYBYTES",
                "body": "SODIUM_CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_KEYBYTES",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_MESSAGEBYTES_MAX": {
                "prefix": "SODIUM_CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_MESSAGEBYTES_MAX",
                "body": "SODIUM_CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_MESSAGEBYTES_MAX",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_TAG_FINAL": {
                "prefix": "SODIUM_CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_TAG_FINAL",
                "body": "SODIUM_CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_TAG_FINAL",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_TAG_PULL": {
                "prefix": "SODIUM_CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_TAG_PULL",
                "body": "SODIUM_CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_TAG_PULL",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_TAG_PUSH": {
                "prefix": "SODIUM_CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_TAG_PUSH",
                "body": "SODIUM_CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_TAG_PUSH",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_TAG_REKEY": {
                "prefix": "SODIUM_CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_TAG_REKEY",
                "body": "SODIUM_CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_TAG_REKEY",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_SHORTHASH_BYTES": {
                "prefix": "SODIUM_CRYPTO_SHORTHASH_BYTES",
                "body": "SODIUM_CRYPTO_SHORTHASH_BYTES",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_SHORTHASH_KEYBYTES": {
                "prefix": "SODIUM_CRYPTO_SHORTHASH_KEYBYTES",
                "body": "SODIUM_CRYPTO_SHORTHASH_KEYBYTES",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_SIGN_BYTES": {
                "prefix": "SODIUM_CRYPTO_SIGN_BYTES",
                "body": "SODIUM_CRYPTO_SIGN_BYTES",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_SIGN_KEYPAIRBYTES": {
                "prefix": "SODIUM_CRYPTO_SIGN_KEYPAIRBYTES",
                "body": "SODIUM_CRYPTO_SIGN_KEYPAIRBYTES",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_SIGN_PUBLICKEYBYTES": {
                "prefix": "SODIUM_CRYPTO_SIGN_PUBLICKEYBYTES",
                "body": "SODIUM_CRYPTO_SIGN_PUBLICKEYBYTES",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_SIGN_SECRETKEYBYTES": {
                "prefix": "SODIUM_CRYPTO_SIGN_SECRETKEYBYTES",
                "body": "SODIUM_CRYPTO_SIGN_SECRETKEYBYTES",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_SIGN_SEEDBYTES": {
                "prefix": "SODIUM_CRYPTO_SIGN_SEEDBYTES",
                "body": "SODIUM_CRYPTO_SIGN_SEEDBYTES",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_STREAM_KEYBYTES": {
                "prefix": "SODIUM_CRYPTO_STREAM_KEYBYTES",
                "body": "SODIUM_CRYPTO_STREAM_KEYBYTES",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_STREAM_NONCEBYTES": {
                "prefix": "SODIUM_CRYPTO_STREAM_NONCEBYTES",
                "body": "SODIUM_CRYPTO_STREAM_NONCEBYTES",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_STREAM_XCHACHA20_KEYBYTES": {
                "prefix": "SODIUM_CRYPTO_STREAM_XCHACHA20_KEYBYTES",
                "body": "SODIUM_CRYPTO_STREAM_XCHACHA20_KEYBYTES",
                "description": ""
        },
        "Constant:SODIUM_CRYPTO_STREAM_XCHACHA20_NONCEBYTES": {
                "prefix": "SODIUM_CRYPTO_STREAM_XCHACHA20_NONCEBYTES",
                "body": "SODIUM_CRYPTO_STREAM_XCHACHA20_NONCEBYTES",
                "description": ""
        },
        "Constant:SODIUM_LIBRARY_MAJOR_VERSION": {
                "prefix": "SODIUM_LIBRARY_MAJOR_VERSION",
                "body": "SODIUM_LIBRARY_MAJOR_VERSION",
                "description": ""
        },
        "Constant:SODIUM_LIBRARY_MINOR_VERSION": {
                "prefix": "SODIUM_LIBRARY_MINOR_VERSION",
                "body": "SODIUM_LIBRARY_MINOR_VERSION",
                "description": ""
        },
        "Constant:SODIUM_LIBRARY_VERSION": {
                "prefix": "SODIUM_LIBRARY_VERSION",
                "body": "SODIUM_LIBRARY_VERSION",
                "description": ""
        },
        "Constant:SODIUM_{$constant}": {
                "prefix": "SODIUM_{$constant}",
                "body": "SODIUM_{$constant}",
                "description": ""
        },
        "Constant:STYLESHEETPATH": {
                "prefix": "STYLESHEETPATH",
                "body": "STYLESHEETPATH",
                "description": "Filesystem path to the current active template stylesheet directory."
        },
        "Constant:SUBDOMAIN_INSTALL": {
                "prefix": "SUBDOMAIN_INSTALL",
                "body": "SUBDOMAIN_INSTALL",
                "description": ""
        },
        "Constant:TB_IN_BYTES": {
                "prefix": "TB_IN_BYTES",
                "body": "TB_IN_BYTES",
                "description": ""
        },
        "Constant:TEMPLATEPATH": {
                "prefix": "TEMPLATEPATH",
                "body": "TEMPLATEPATH",
                "description": "Filesystem path to the current active template directory."
        },
        "Constant:TEST_COOKIE": {
                "prefix": "TEST_COOKIE",
                "body": "TEST_COOKIE",
                "description": ""
        },
        "Constant:UPLOADBLOGSDIR": {
                "prefix": "UPLOADBLOGSDIR",
                "body": "UPLOADBLOGSDIR",
                "description": ""
        },
        "Constant:UPLOADS": {
                "prefix": "UPLOADS",
                "body": "UPLOADS",
                "description": ""
        },
        "Constant:USER_COOKIE": {
                "prefix": "USER_COOKIE",
                "body": "USER_COOKIE",
                "description": ""
        },
        "Constant:VHOST": {
                "prefix": "VHOST",
                "body": "VHOST",
                "description": ""
        },
        "Constant:WEEK_IN_SECONDS": {
                "prefix": "WEEK_IN_SECONDS",
                "body": "WEEK_IN_SECONDS",
                "description": ""
        },
        "Constant:WP_ADMIN": {
                "prefix": "WP_ADMIN",
                "body": "WP_ADMIN",
                "description": ""
        },
        "Constant:WP_BLOG_ADMIN": {
                "prefix": "WP_BLOG_ADMIN",
                "body": "WP_BLOG_ADMIN",
                "description": ""
        },
        "Constant:WP_CACHE": {
                "prefix": "WP_CACHE",
                "body": "WP_CACHE",
                "description": ""
        },
        "Constant:WP_CONTENT_DIR": {
                "prefix": "WP_CONTENT_DIR",
                "body": "WP_CONTENT_DIR",
                "description": ""
        },
        "Constant:WP_CONTENT_URL": {
                "prefix": "WP_CONTENT_URL",
                "body": "WP_CONTENT_URL",
                "description": ""
        },
        "Constant:WP_CRON_LOCK_TIMEOUT": {
                "prefix": "WP_CRON_LOCK_TIMEOUT",
                "body": "WP_CRON_LOCK_TIMEOUT",
                "description": ""
        },
        "Constant:WP_DEBUG": {
                "prefix": "WP_DEBUG",
                "body": "WP_DEBUG",
                "description": "For developers: WordPress debugging mode."
        },
        "Constant:WP_DEBUG_DISPLAY": {
                "prefix": "WP_DEBUG_DISPLAY",
                "body": "WP_DEBUG_DISPLAY",
                "description": ""
        },
        "Constant:WP_DEBUG_LOG": {
                "prefix": "WP_DEBUG_LOG",
                "body": "WP_DEBUG_LOG",
                "description": ""
        },
        "Constant:WP_DEFAULT_THEME": {
                "prefix": "WP_DEFAULT_THEME",
                "body": "WP_DEFAULT_THEME",
                "description": ""
        },
        "Constant:WP_FEATURE_BETTER_PASSWORDS": {
                "prefix": "WP_FEATURE_BETTER_PASSWORDS",
                "body": "WP_FEATURE_BETTER_PASSWORDS",
                "description": ""
        },
        "Constant:WP_IMPORTING": {
                "prefix": "WP_IMPORTING",
                "body": "WP_IMPORTING",
                "description": ""
        },
        "Constant:WP_INSTALLING": {
                "prefix": "WP_INSTALLING",
                "body": "WP_INSTALLING",
                "description": ""
        },
        "Constant:WP_INSTALLING_NETWORK": {
                "prefix": "WP_INSTALLING_NETWORK",
                "body": "WP_INSTALLING_NETWORK",
                "description": ""
        },
        "Constant:WP_LANG_DIR": {
                "prefix": "WP_LANG_DIR",
                "body": "WP_LANG_DIR",
                "description": "Server path of the language directory."
        },
        "Constant:WP_LOAD_IMPORTERS": {
                "prefix": "WP_LOAD_IMPORTERS",
                "body": "WP_LOAD_IMPORTERS",
                "description": ""
        },
        "Constant:WP_MAIL_INTERVAL": {
                "prefix": "WP_MAIL_INTERVAL",
                "body": "WP_MAIL_INTERVAL",
                "description": ""
        },
        "Constant:WP_MAX_MEMORY_LIMIT": {
                "prefix": "WP_MAX_MEMORY_LIMIT",
                "body": "WP_MAX_MEMORY_LIMIT",
                "description": ""
        },
        "Constant:WP_MEMORY_LIMIT": {
                "prefix": "WP_MEMORY_LIMIT",
                "body": "WP_MEMORY_LIMIT",
                "description": ""
        },
        "Constant:WP_NETWORK_ADMIN": {
                "prefix": "WP_NETWORK_ADMIN",
                "body": "WP_NETWORK_ADMIN",
                "description": ""
        },
        "Constant:WP_PLUGIN_DIR": {
                "prefix": "WP_PLUGIN_DIR",
                "body": "WP_PLUGIN_DIR",
                "description": ""
        },
        "Constant:WP_PLUGIN_URL": {
                "prefix": "WP_PLUGIN_URL",
                "body": "WP_PLUGIN_URL",
                "description": ""
        },
        "Constant:WP_POST_REVISIONS": {
                "prefix": "WP_POST_REVISIONS",
                "body": "WP_POST_REVISIONS",
                "description": ""
        },
        "Constant:WP_REPAIRING": {
                "prefix": "WP_REPAIRING",
                "body": "WP_REPAIRING",
                "description": ""
        },
        "Constant:WP_SANDBOX_SCRAPING": {
                "prefix": "WP_SANDBOX_SCRAPING",
                "body": "WP_SANDBOX_SCRAPING",
                "description": ""
        },
        "Constant:WP_SETUP_CONFIG": {
                "prefix": "WP_SETUP_CONFIG",
                "body": "WP_SETUP_CONFIG",
                "description": "We are blissfully unaware of anything."
        },
        "Constant:WP_START_TIMESTAMP": {
                "prefix": "WP_START_TIMESTAMP",
                "body": "WP_START_TIMESTAMP",
                "description": ""
        },
        "Constant:WP_TEMPLATE_PART_AREA_FOOTER": {
                "prefix": "WP_TEMPLATE_PART_AREA_FOOTER",
                "body": "WP_TEMPLATE_PART_AREA_FOOTER",
                "description": ""
        },
        "Constant:WP_TEMPLATE_PART_AREA_HEADER": {
                "prefix": "WP_TEMPLATE_PART_AREA_HEADER",
                "body": "WP_TEMPLATE_PART_AREA_HEADER",
                "description": ""
        },
        "Constant:WP_TEMPLATE_PART_AREA_SIDEBAR": {
                "prefix": "WP_TEMPLATE_PART_AREA_SIDEBAR",
                "body": "WP_TEMPLATE_PART_AREA_SIDEBAR",
                "description": ""
        },
        "Constant:WP_TEMPLATE_PART_AREA_UNCATEGORIZED": {
                "prefix": "WP_TEMPLATE_PART_AREA_UNCATEGORIZED",
                "body": "WP_TEMPLATE_PART_AREA_UNCATEGORIZED",
                "description": ""
        },
        "Constant:WP_UNINSTALL_PLUGIN": {
                "prefix": "WP_UNINSTALL_PLUGIN",
                "body": "WP_UNINSTALL_PLUGIN",
                "description": ""
        },
        "Constant:WP_USE_THEMES": {
                "prefix": "WP_USE_THEMES",
                "body": "WP_USE_THEMES",
                "description": "Tells WordPress to load the WordPress theme and output it."
        },
        "Constant:WP_USER_ADMIN": {
                "prefix": "WP_USER_ADMIN",
                "body": "WP_USER_ADMIN",
                "description": ""
        },
        "Constant:WPINC": {
                "prefix": "WPINC",
                "body": "WPINC",
                "description": ""
        },
        "Constant:WPMU_ACCEL_REDIRECT": {
                "prefix": "WPMU_ACCEL_REDIRECT",
                "body": "WPMU_ACCEL_REDIRECT",
                "description": ""
        },
        "Constant:WPMU_PLUGIN_DIR": {
                "prefix": "WPMU_PLUGIN_DIR",
                "body": "WPMU_PLUGIN_DIR",
                "description": ""
        },
        "Constant:WPMU_PLUGIN_URL": {
                "prefix": "WPMU_PLUGIN_URL",
                "body": "WPMU_PLUGIN_URL",
                "description": ""
        },
        "Constant:WPMU_SENDFILE": {
                "prefix": "WPMU_SENDFILE",
                "body": "WPMU_SENDFILE",
                "description": ""
        },
        "Constant:WXR_VERSION": {
                "prefix": "WXR_VERSION",
                "body": "WXR_VERSION",
                "description": "Version number for the export format."
        },
        "Constant:XMLRPC_REQUEST": {
                "prefix": "XMLRPC_REQUEST",
                "body": "XMLRPC_REQUEST",
                "description": "Whether this is an XML-RPC Request"
        },
        "Constant:YB_IN_BYTES": {
                "prefix": "YB_IN_BYTES",
                "body": "YB_IN_BYTES",
                "description": ""
        },
        "Constant:YEAR_IN_SECONDS": {
                "prefix": "YEAR_IN_SECONDS",
                "body": "YEAR_IN_SECONDS",
                "description": ""
        },
        "Constant:ZB_IN_BYTES": {
                "prefix": "ZB_IN_BYTES",
                "body": "ZB_IN_BYTES",
                "description": ""
        },
        "ƒ:_": {
                "prefix": [
                        "_",
                        ""
                ],
                "body": "_(${1:\\$string:} )",
                "description": ""
        },
        "ƒ:__": {
                "prefix": [
                        "__",
                        ""
                ],
                "body": "__(${1:\\$text:string},${2:\\$domain:string} )",
                "description": "Retrieve the translation of $text."
        },
        "ƒ:__checked_selected_helper": {
                "prefix": [
                        "__checked_selected_helper",
                        "csh"
                ],
                "body": "__checked_selected_helper(${1:\\$helper:mixed},${2:\\$current:mixed},${3:\\$echo:boolean},${4:\\$type:string} )",
                "description": "Private helper function for checked, selected, disabled and readonly."
        },
        "ƒ:__clear_multi_author_cache": {
                "prefix": [
                        "__clear_multi_author_cache",
                        "cmac"
                ],
                "body": "__clear_multi_author_cache()",
                "description": "Helper function to clear the cache for number of authors."
        },
        "ƒ:__ngettext": {
                "prefix": [
                        "__ngettext",
                        "n"
                ],
                "body": "__ngettext(${1:\\$args:} )",
                "description": "Retrieve the plural or single form based on the amount."
        },
        "ƒ:__ngettext_noop": {
                "prefix": [
                        "__ngettext_noop",
                        "nn"
                ],
                "body": "__ngettext_noop(${1:\\$args:} )",
                "description": "Register plural strings in POT file, but don&#039;t translate them."
        },
        "ƒ:__return_empty_array": {
                "prefix": [
                        "__return_empty_array",
                        "rea"
                ],
                "body": "__return_empty_array()",
                "description": "Returns an empty array."
        },
        "ƒ:__return_empty_string": {
                "prefix": [
                        "__return_empty_string",
                        "res"
                ],
                "body": "__return_empty_string()",
                "description": "Returns an empty string."
        },
        "ƒ:__return_false": {
                "prefix": [
                        "__return_false",
                        "rf"
                ],
                "body": "__return_false()",
                "description": "Returns false."
        },
        "ƒ:__return_null": {
                "prefix": [
                        "__return_null",
                        "rn"
                ],
                "body": "__return_null()",
                "description": "Returns null."
        },
        "ƒ:__return_true": {
                "prefix": [
                        "__return_true",
                        "rt"
                ],
                "body": "__return_true()",
                "description": "Returns true."
        },
        "ƒ:__return_zero": {
                "prefix": [
                        "__return_zero",
                        "rz"
                ],
                "body": "__return_zero()",
                "description": "Returns 0."
        },
        "ƒ:_access_denied_splash": {
                "prefix": [
                        "_access_denied_splash",
                        "ads"
                ],
                "body": "_access_denied_splash()",
                "description": "Displays an access denied message when a user tries to view a site&#039;s dashboard they do not have access to."
        },
        "ƒ:_add_block_template_info": {
                "prefix": [
                        "_add_block_template_info",
                        "abti"
                ],
                "body": "_add_block_template_info(${1:\\$template_item:array} )",
                "description": "Attempts to add custom template information to the template item."
        },
        "ƒ:_add_block_template_part_area_info": {
                "prefix": [
                        "_add_block_template_part_area_info",
                        "abtpai"
                ],
                "body": "_add_block_template_part_area_info(${1:\\$template_info:array} )",
                "description": "Attempts to add the template part&#039;s area information to the input template."
        },
        "ƒ:_add_default_theme_supports": {
                "prefix": [
                        "_add_default_theme_supports",
                        "adts"
                ],
                "body": "_add_default_theme_supports()",
                "description": "Adds default theme supports for block themes when the &#039;setup_theme&#039; action fires."
        },
        "ƒ:_add_plugin_file_editor_to_tools": {
                "prefix": [
                        "_add_plugin_file_editor_to_tools",
                        "apfett"
                ],
                "body": "_add_plugin_file_editor_to_tools()",
                "description": "Adds the &#039;Plugin File Editor&#039; menu item after the &#039;Themes File Editor&#039; in Tools for block themes."
        },
        "ƒ:_add_post_type_submenus": {
                "prefix": [
                        "_add_post_type_submenus",
                        "apts"
                ],
                "body": "_add_post_type_submenus()",
                "description": "Add submenus for post types."
        },
        "ƒ:_add_template_loader_filters": {
                "prefix": [
                        "_add_template_loader_filters",
                        "atlf"
                ],
                "body": "_add_template_loader_filters()",
                "description": "Adds necessary filters to use &#039;wp_template&#039; posts instead of theme template files."
        },
        "ƒ:_add_themes_utility_last": {
                "prefix": [
                        "_add_themes_utility_last",
                        "atul"
                ],
                "body": "_add_themes_utility_last()",
                "description": "Adds the &#039;Theme File Editor&#039; menu item to the bottom of the Appearance (non-block themes) or Tools (block themes) menu."
        },
        "ƒ:_admin_bar_bump_cb": {
                "prefix": [
                        "_admin_bar_bump_cb",
                        "abbc"
                ],
                "body": "_admin_bar_bump_cb()",
                "description": "Prints default admin bar callback."
        },
        "ƒ:_admin_notice_post_locked": {
                "prefix": [
                        "_admin_notice_post_locked",
                        "anpl"
                ],
                "body": "_admin_notice_post_locked()",
                "description": "Outputs the HTML for the notice to say that someone else is editing or has taken over editing of this post."
        },
        "ƒ:_admin_search_query": {
                "prefix": [
                        "_admin_search_query",
                        "asq"
                ],
                "body": "_admin_search_query()",
                "description": "Displays the search query."
        },
        "ƒ:_ajax_wp_die_handler": {
                "prefix": [
                        "_ajax_wp_die_handler",
                        "awdh"
                ],
                "body": "_ajax_wp_die_handler(${1:\\$message:string},${2:\\$title:string},${3:\\$args:string|array} )",
                "description": "Kills WordPress execution and displays Ajax response with an error message."
        },
        "ƒ:_autop_newline_preservation_helper": {
                "prefix": [
                        "_autop_newline_preservation_helper",
                        "anph"
                ],
                "body": "_autop_newline_preservation_helper(${1:\\$matches:array} )",
                "description": "Newline preservation help function for wpautop()."
        },
        "ƒ:_block_template_render_title_tag": {
                "prefix": [
                        "_block_template_render_title_tag",
                        "btrtt"
                ],
                "body": "_block_template_render_title_tag()",
                "description": "Displays title tag with content, regardless of whether theme has title-tag support."
        },
        "ƒ:_block_template_render_without_post_block_context": {
                "prefix": [
                        "_block_template_render_without_post_block_context",
                        "btrwpbc"
                ],
                "body": "_block_template_render_without_post_block_context(${1:\\$context:array} )",
                "description": "Removes post details from block context when rendering a block template."
        },
        "ƒ:_block_template_viewport_meta_tag": {
                "prefix": [
                        "_block_template_viewport_meta_tag",
                        "btvmt"
                ],
                "body": "_block_template_viewport_meta_tag()",
                "description": "Renders a &#039;viewport&#039; meta tag."
        },
        "ƒ:_build_block_template_result_from_file": {
                "prefix": [
                        "_build_block_template_result_from_file",
                        "bbtrff"
                ],
                "body": "_build_block_template_result_from_file(${1:\\$template_file:array},${2:\\$template_type:string} )",
                "description": "Build a unified template object based on a theme file."
        },
        "ƒ:_build_block_template_result_from_post": {
                "prefix": [
                        "_build_block_template_result_from_post",
                        "bbtrfp"
                ],
                "body": "_build_block_template_result_from_post(${1:\\$post:WP_Post} )",
                "description": "Build a unified template object based a post Object."
        },
        "ƒ:_c": {
                "prefix": [
                        "_c",
                        "c"
                ],
                "body": "_c(${1:\\$text:string},${2:\\$domain:string} )",
                "description": "Retrieve translated string with vertical bar context"
        },
        "ƒ:_canonical_charset": {
                "prefix": [
                        "_canonical_charset",
                        "cc"
                ],
                "body": "_canonical_charset(${1:\\$charset:string} )",
                "description": "Retrieve a canonical form of the provided charset appropriate for passing to PHP functions such as htmlspecialchars() and charset HTML attributes."
        },
        "ƒ:_cleanup_header_comment": {
                "prefix": [
                        "_cleanup_header_comment",
                        "chc"
                ],
                "body": "_cleanup_header_comment(${1:\\$str:string} )",
                "description": "Strip close comment and close php tags from file headers used by WP."
        },
        "ƒ:_cleanup_image_add_caption": {
                "prefix": [
                        "_cleanup_image_add_caption",
                        "ciac"
                ],
                "body": "_cleanup_image_add_caption(${1:\\$matches:} )",
                "description": "Private preg_replace callback used in image_add_caption()."
        },
        "ƒ:_clear_modified_cache_on_transition_comment_status": {
                "prefix": [
                        "_clear_modified_cache_on_transition_comment_status",
                        "cmcotcs"
                ],
                "body": "_clear_modified_cache_on_transition_comment_status(${1:\\$new_status:string},${2:\\$old_status:string} )",
                "description": "Clears the lastcommentmodified cached value when a comment status is changed."
        },
        "ƒ:_close_comments_for_old_post": {
                "prefix": [
                        "_close_comments_for_old_post",
                        "ccfop"
                ],
                "body": "_close_comments_for_old_post(${1:\\$open:boolean},${2:\\$post_id:integer} )",
                "description": "Closes comments on an old post. Hooked to comments_open and pings_open."
        },
        "ƒ:_close_comments_for_old_posts": {
                "prefix": [
                        "_close_comments_for_old_posts",
                        "ccfop"
                ],
                "body": "_close_comments_for_old_posts(${1:\\$posts:WP_Post},${2:\\$query:WP_Query} )",
                "description": "Closes comments on old posts on the fly, without any extra DB queries. Hooked to the_posts."
        },
        "ƒ:_config_wp_home": {
                "prefix": [
                        "_config_wp_home",
                        "cwh"
                ],
                "body": "_config_wp_home(${1:\\$url:string} )",
                "description": "Retrieve the WordPress home page URL."
        },
        "ƒ:_config_wp_siteurl": {
                "prefix": [
                        "_config_wp_siteurl",
                        "cws"
                ],
                "body": "_config_wp_siteurl(${1:\\$url:string} )",
                "description": "Retrieve the WordPress site URL."
        },
        "ƒ:_copy_image_file": {
                "prefix": [
                        "_copy_image_file",
                        "cif"
                ],
                "body": "_copy_image_file(${1:\\$attachment_id:integer} )",
                "description": "Copy an existing image file."
        },
        "ƒ:_count_posts_cache_key": {
                "prefix": [
                        "_count_posts_cache_key",
                        "cpck"
                ],
                "body": "_count_posts_cache_key(${1:\\$type:string},${2:\\$perm:string} )",
                "description": "Return the cache key for wp_count_posts() based on the passed arguments."
        },
        "ƒ:_custom_background_cb": {
                "prefix": [
                        "_custom_background_cb",
                        "cbc"
                ],
                "body": "_custom_background_cb()",
                "description": "Default custom background callback."
        },
        "ƒ:_custom_header_background_just_in_time": {
                "prefix": [
                        "_custom_header_background_just_in_time",
                        "chbjit"
                ],
                "body": "_custom_header_background_just_in_time()",
                "description": "Registers the internal custom header and background routines."
        },
        "ƒ:_custom_logo_header_styles": {
                "prefix": [
                        "_custom_logo_header_styles",
                        "clhs"
                ],
                "body": "_custom_logo_header_styles()",
                "description": "Adds CSS to hide header text for custom logo, based on Customizer setting."
        },
        "ƒ:_customizer_mobile_viewport_meta": {
                "prefix": [
                        "_customizer_mobile_viewport_meta",
                        "cmvm"
                ],
                "body": "_customizer_mobile_viewport_meta(${1:\\$viewport_meta:string} )",
                "description": "Adds viewport meta for mobile in Customizer."
        },
        "ƒ:_deep_replace": {
                "prefix": [
                        "_deep_replace",
                        "dr"
                ],
                "body": "_deep_replace(${1:\\$search:string|array},${2:\\$subject:string} )",
                "description": "Performs a deep string replace operation to ensure the values in $search are no longer present."
        },
        "ƒ:_default_wp_die_handler": {
                "prefix": [
                        "_default_wp_die_handler",
                        "dwdh"
                ],
                "body": "_default_wp_die_handler(${1:\\$message:string|WP_Error},${2:\\$title:string},${3:\\$args:string|array} )",
                "description": "Kills WordPress execution and displays HTML page with an error message."
        },
        "ƒ:_delete_attachment_theme_mod": {
                "prefix": [
                        "_delete_attachment_theme_mod",
                        "datm"
                ],
                "body": "_delete_attachment_theme_mod(${1:\\$id:integer} )",
                "description": "Checks an attachment being deleted to see if it&#039;s a header or background image."
        },
        "ƒ:_delete_custom_logo_on_remove_site_logo": {
                "prefix": [
                        "_delete_custom_logo_on_remove_site_logo",
                        "dclorsl"
                ],
                "body": "_delete_custom_logo_on_remove_site_logo()",
                "description": "Removes the custom_logo theme-mod when the site_logo option gets deleted."
        },
        "ƒ:_delete_option_fresh_site": {
                "prefix": [
                        "_delete_option_fresh_site",
                        "dofs"
                ],
                "body": "_delete_option_fresh_site()",
                "description": "Delete the fresh site option."
        },
        "ƒ:_delete_site_logo_on_remove_custom_logo": {
                "prefix": [
                        "_delete_site_logo_on_remove_custom_logo",
                        "dslorcl"
                ],
                "body": "_delete_site_logo_on_remove_custom_logo(${1:\\$old_value:array},${2:\\$value:array} )",
                "description": "Deletes the site_logo when the custom_logo theme mod is removed."
        },
        "ƒ:_delete_site_logo_on_remove_custom_logo_on_setup_theme": {
                "prefix": [
                        "_delete_site_logo_on_remove_custom_logo_on_setup_theme",
                        "dslorclost"
                ],
                "body": "_delete_site_logo_on_remove_custom_logo_on_setup_theme()",
                "description": "Hooks `_delete_site_logo_on_remove_custom_logo` in `update_option_theme_mods_$theme`."
        },
        "ƒ:_delete_site_logo_on_remove_theme_mods": {
                "prefix": [
                        "_delete_site_logo_on_remove_theme_mods",
                        "dslortm"
                ],
                "body": "_delete_site_logo_on_remove_theme_mods()",
                "description": "Deletes the site logo when all theme mods are being removed."
        },
        "ƒ:_deprecated_argument": {
                "prefix": [
                        "_deprecated_argument",
                        "da"
                ],
                "body": "_deprecated_argument(${1:\\$function:string},${2:\\$version:string},${3:\\$message:string} )",
                "description": "Mark a function argument as deprecated and inform when it has been used."
        },
        "ƒ:_deprecated_constructor": {
                "prefix": [
                        "_deprecated_constructor",
                        "dc"
                ],
                "body": "_deprecated_constructor(${1:\\$class:string},${2:\\$version:string},${3:\\$parent_class:string} )",
                "description": "Marks a constructor as deprecated and informs when it has been used."
        },
        "ƒ:_deprecated_file": {
                "prefix": [
                        "_deprecated_file",
                        "df"
                ],
                "body": "_deprecated_file(${1:\\$file:string},${2:\\$version:string},${3:\\$replacement:string},${4:\\$message:string} )",
                "description": "Mark a file as deprecated and inform when it has been used."
        },
        "ƒ:_deprecated_function": {
                "prefix": [
                        "_deprecated_function",
                        "df"
                ],
                "body": "_deprecated_function(${1:\\$function:string},${2:\\$version:string},${3:\\$replacement:string} )",
                "description": "Mark a function as deprecated and inform when it has been used."
        },
        "ƒ:_deprecated_hook": {
                "prefix": [
                        "_deprecated_hook",
                        "dh"
                ],
                "body": "_deprecated_hook(${1:\\$hook:string},${2:\\$version:string},${3:\\$replacement:string},${4:\\$message:string} )",
                "description": "Marks a deprecated action or filter hook as deprecated and throws a notice."
        },
        "ƒ:_device_can_upload": {
                "prefix": [
                        "_device_can_upload",
                        "dcu"
                ],
                "body": "_device_can_upload()",
                "description": "Test if the current device has the capability to upload files."
        },
        "ƒ:_disable_block_editor_for_navigation_post_type": {
                "prefix": [
                        "_disable_block_editor_for_navigation_post_type",
                        "dbefnpt"
                ],
                "body": "_disable_block_editor_for_navigation_post_type(${1:\\$value:boolean},${2:\\$post_type:string} )",
                "description": "Disables block editor for wp_navigation type posts so they can be managed via the UI."
        },
        "ƒ:_disable_content_editor_for_navigation_post_type": {
                "prefix": [
                        "_disable_content_editor_for_navigation_post_type",
                        "dcefnpt"
                ],
                "body": "_disable_content_editor_for_navigation_post_type(${1:\\$post:WP_Post} )",
                "description": "This callback disables the content editor for wp_navigation type posts."
        },
        "ƒ:_doing_it_wrong": {
                "prefix": [
                        "_doing_it_wrong",
                        "diw"
                ],
                "body": "_doing_it_wrong(${1:\\$function:string},${2:\\$message:string},${3:\\$version:string} )",
                "description": "Mark something as being incorrectly called."
        },
        "ƒ:_draft_or_post_title": {
                "prefix": [
                        "_draft_or_post_title",
                        "dopt"
                ],
                "body": "_draft_or_post_title(${1:\\$post:integer|WP_Post} )",
                "description": "Gets the post title."
        },
        "ƒ:_e": {
                "prefix": [
                        "_e",
                        "e"
                ],
                "body": "_e(${1:\\$text:string},${2:\\$domain:string} )",
                "description": "Display translated text."
        },
        "ƒ:_enable_content_editor_for_navigation_post_type": {
                "prefix": [
                        "_enable_content_editor_for_navigation_post_type",
                        "ecefnpt"
                ],
                "body": "_enable_content_editor_for_navigation_post_type(${1:\\$post:WP_Post} )",
                "description": "This callback enables content editor for wp_navigation type posts."
        },
        "ƒ:_ex": {
                "prefix": [
                        "_ex",
                        "e"
                ],
                "body": "_ex(${1:\\$text:string},${2:\\$context:string},${3:\\$domain:string} )",
                "description": "Display translated string with gettext context."
        },
        "ƒ:_excerpt_render_inner_blocks": {
                "prefix": [
                        "_excerpt_render_inner_blocks",
                        "erib"
                ],
                "body": "_excerpt_render_inner_blocks(${1:\\$parsed_block:array},${2:\\$allowed_blocks:array} )",
                "description": "Render inner blocks from the allowed wrapper blocks for generating an excerpt."
        },
        "ƒ:_excerpt_render_inner_columns_blocks": {
                "prefix": [
                        "_excerpt_render_inner_columns_blocks",
                        "ericb"
                ],
                "body": "_excerpt_render_inner_columns_blocks(${1:\\$columns:array},${2:\\$allowed_blocks:array} )",
                "description": "Render inner blocks from the `core/columns` block for generating an excerpt."
        },
        "ƒ:_fetch_remote_file": {
                "prefix": [
                        "_fetch_remote_file",
                        "frf"
                ],
                "body": "_fetch_remote_file(${1:\\$url:string},${2:\\$headers:array} )",
                "description": "Retrieve URL headers and content using WP HTTP Request API."
        },
        "ƒ:_filter_block_template_part_area": {
                "prefix": [
                        "_filter_block_template_part_area",
                        "fbtpa"
                ],
                "body": "_filter_block_template_part_area(${1:\\$type:string} )",
                "description": "Checks whether the input &#039;area&#039; is a supported value."
        },
        "ƒ:_filter_query_attachment_filenames": {
                "prefix": [
                        "_filter_query_attachment_filenames",
                        "fqaf"
                ],
                "body": "_filter_query_attachment_filenames(${1:\\$clauses:array} )",
                "description": "Filters the SQL clauses of an attachment query to include filenames."
        },
        "ƒ:_find_post_by_old_date": {
                "prefix": [
                        "_find_post_by_old_date",
                        "fpbod"
                ],
                "body": "_find_post_by_old_date(${1:\\$post_type:string} )",
                "description": "Find the post ID for redirecting an old date."
        },
        "ƒ:_find_post_by_old_slug": {
                "prefix": [
                        "_find_post_by_old_slug",
                        "fpbos"
                ],
                "body": "_find_post_by_old_slug(${1:\\$post_type:string} )",
                "description": "Find the post ID for redirecting an old slug."
        },
        "ƒ:_fix_attachment_links": {
                "prefix": [
                        "_fix_attachment_links",
                        "fal"
                ],
                "body": "_fix_attachment_links(${1:\\$post:integer|object} )",
                "description": "Replaces hrefs of attachment anchors with up-to-date permalinks."
        },
        "ƒ:_flatten_blocks": {
                "prefix": [
                        "_flatten_blocks",
                        "fb"
                ],
                "body": "_flatten_blocks(${1:\\$blocks:array} )",
                "description": "Returns an array containing the references of the passed blocks and their inner blocks."
        },
        "ƒ:_future_post_hook": {
                "prefix": [
                        "_future_post_hook",
                        "fph"
                ],
                "body": "_future_post_hook(${1:\\$deprecated:integer},${2:\\$post:WP_Post} )",
                "description": "Hook used to schedule publication for a post marked for the future."
        },
        "ƒ:_get_additional_user_keys": {
                "prefix": [
                        "_get_additional_user_keys",
                        "gauk"
                ],
                "body": "_get_additional_user_keys(${1:\\$user:WP_User} )",
                "description": "Returns a list of meta keys to be (maybe) populated in wp_update_user()."
        },
        "ƒ:_get_admin_bar_pref": {
                "prefix": [
                        "_get_admin_bar_pref",
                        "gabp"
                ],
                "body": "_get_admin_bar_pref(${1:\\$context:string},${2:\\$user:integer} )",
                "description": "Retrieves the admin bar display preference of a user."
        },
        "ƒ:_get_block_template_file": {
                "prefix": [
                        "_get_block_template_file",
                        "gbtf"
                ],
                "body": "_get_block_template_file(${1:\\$template_type:string},${2:\\$slug:string} )",
                "description": "Retrieves the template file from the theme for a given slug."
        },
        "ƒ:_get_block_templates_files": {
                "prefix": [
                        "_get_block_templates_files",
                        "gbtf"
                ],
                "body": "_get_block_templates_files(${1:\\$template_type:string} )",
                "description": "Retrieves the template files from the theme."
        },
        "ƒ:_get_block_templates_paths": {
                "prefix": [
                        "_get_block_templates_paths",
                        "gbtp"
                ],
                "body": "_get_block_templates_paths(${1:\\$base_directory:string} )",
                "description": "Finds all nested template part file paths in a theme&#039;s directory."
        },
        "ƒ:_get_cron_array": {
                "prefix": [
                        "_get_cron_array",
                        "gca"
                ],
                "body": "_get_cron_array()",
                "description": "Retrieve cron info array option."
        },
        "ƒ:_get_custom_object_labels": {
                "prefix": [
                        "_get_custom_object_labels",
                        "gcol"
                ],
                "body": "_get_custom_object_labels(${1:\\$object:object},${2:\\$nohier_vs_hier_defaults:array} )",
                "description": "Build an object with custom-something object (post type, taxonomy) labels out of a custom-something object"
        },
        "ƒ:_get_dropins": {
                "prefix": [
                        "_get_dropins",
                        "gd"
                ],
                "body": "_get_dropins()",
                "description": "Returns drop-ins that WordPress uses."
        },
        "ƒ:_get_last_post_time": {
                "prefix": [
                        "_get_last_post_time",
                        "glpt"
                ],
                "body": "_get_last_post_time(${1:\\$timezone:string},${2:\\$field:string},${3:\\$post_type:string} )",
                "description": "Gets the timestamp of the last time any post was modified or published."
        },
        "ƒ:_get_list_table": {
                "prefix": [
                        "_get_list_table",
                        "glt"
                ],
                "body": "_get_list_table(${1:\\$class_name:string},${2:\\$args:array} )",
                "description": "Fetches an instance of a WP_List_Table class."
        },
        "ƒ:_get_meta_table": {
                "prefix": [
                        "_get_meta_table",
                        "gmt"
                ],
                "body": "_get_meta_table(${1:\\$type:string} )",
                "description": "Retrieves the name of the metadata table for the specified object type."
        },
        "ƒ:_get_non_cached_ids": {
                "prefix": [
                        "_get_non_cached_ids",
                        "gnci"
                ],
                "body": "_get_non_cached_ids(${1:\\$object_ids:array},${2:\\$cache_key:string} )",
                "description": "Retrieve IDs that are not already present in the cache."
        },
        "ƒ:_get_page_link": {
                "prefix": [
                        "_get_page_link",
                        "gpl"
                ],
                "body": "_get_page_link(${1:\\$post:integer|WP_Post},${2:\\$leavename:boolean},${3:\\$sample:boolean} )",
                "description": "Retrieves the page permalink."
        },
        "ƒ:_get_path_to_translation": {
                "prefix": [
                        "_get_path_to_translation",
                        "gptt"
                ],
                "body": "_get_path_to_translation(${1:\\$domain:string},${2:\\$reset:boolean} )",
                "description": "Gets the path to a translation file for loading a textdomain just in time."
        },
        "ƒ:_get_path_to_translation_from_lang_dir": {
                "prefix": [
                        "_get_path_to_translation_from_lang_dir",
                        "gpttfld"
                ],
                "body": "_get_path_to_translation_from_lang_dir(${1:\\$domain:string} )",
                "description": "Gets the path to a translation file in the languages directory for the current locale."
        },
        "ƒ:_get_plugin_data_markup_translate": {
                "prefix": [
                        "_get_plugin_data_markup_translate",
                        "gpdmt"
                ],
                "body": "_get_plugin_data_markup_translate(${1:\\$plugin_file:string},${2:\\$plugin_data:array},${3:\\$markup:boolean},${4:\\$translate:boolean} )",
                "description": "Sanitizes plugin data, optionally adds markup, optionally translates."
        },
        "ƒ:_get_plugin_from_callback": {
                "prefix": [
                        "_get_plugin_from_callback",
                        "gpfc"
                ],
                "body": "_get_plugin_from_callback(${1:\\$callback:callable} )",
                "description": "Internal helper function to find the plugin from a meta box callback."
        },
        "ƒ:_get_post_ancestors": {
                "prefix": [
                        "_get_post_ancestors",
                        "gpa"
                ],
                "body": "_get_post_ancestors(${1:\\$post:WP_Post} )",
                "description": "Retrieve post ancestors."
        },
        "ƒ:_get_random_header_data": {
                "prefix": [
                        "_get_random_header_data",
                        "grhd"
                ],
                "body": "_get_random_header_data()",
                "description": "Gets random header image data from registered images in theme."
        },
        "ƒ:_get_template_edit_filename": {
                "prefix": [
                        "_get_template_edit_filename",
                        "gtef"
                ],
                "body": "_get_template_edit_filename(${1:\\$fullpath:string},${2:\\$containingfolder:string} )",
                "description": "Tidies a filename for url display by the theme file editor."
        },
        "ƒ:_get_term_children": {
                "prefix": [
                        "_get_term_children",
                        "gtc"
                ],
                "body": "_get_term_children(${1:\\$term_id:integer},${2:\\$terms:array},${3:\\$taxonomy:string},${4:\\$ancestors:array} )",
                "description": "Gets the subset of $terms that are descendants of $term_id."
        },
        "ƒ:_get_term_hierarchy": {
                "prefix": [
                        "_get_term_hierarchy",
                        "gth"
                ],
                "body": "_get_term_hierarchy(${1:\\$taxonomy:string} )",
                "description": "Retrieves children of taxonomy as term IDs."
        },
        "ƒ:_get_widget_id_base": {
                "prefix": [
                        "_get_widget_id_base",
                        "gwib"
                ],
                "body": "_get_widget_id_base(${1:\\$id:string} )",
                "description": "Retrieves the widget ID base value."
        },
        "ƒ:_http_build_query": {
                "prefix": [
                        "_http_build_query",
                        "hbq"
                ],
                "body": "_http_build_query(${1:\\$data:array|object},${2:\\$prefix:string|null},${3:\\$sep:string|null},${4:\\$key:string},${5:\\$urlencode:boolean} )",
                "description": "From php.net (modified by Mark Jaquith to behave like the native PHP5 function)."
        },
        "ƒ:_inject_theme_attribute_in_block_template_content": {
                "prefix": [
                        "_inject_theme_attribute_in_block_template_content",
                        "itaibtc"
                ],
                "body": "_inject_theme_attribute_in_block_template_content(${1:\\$template_content:string} )",
                "description": "Parses wp_template content and injects the active theme&#039;s stylesheet as a theme attribute into each wp_template_part"
        },
        "ƒ:_insert_into_post_button": {
                "prefix": [
                        "_insert_into_post_button",
                        "iipb"
                ],
                "body": "_insert_into_post_button(${1:\\$type:} )",
                "description": "This was once used to display an &#039;Insert into Post&#039; button."
        },
        "ƒ:_is_valid_nav_menu_item": {
                "prefix": [
                        "_is_valid_nav_menu_item",
                        "ivnmi"
                ],
                "body": "_is_valid_nav_menu_item(${1:\\$item:object} )",
                "description": "Determines whether a menu item is valid."
        },
        "ƒ:_json_wp_die_handler": {
                "prefix": [
                        "_json_wp_die_handler",
                        "jwdh"
                ],
                "body": "_json_wp_die_handler(${1:\\$message:string},${2:\\$title:string},${3:\\$args:string|array} )",
                "description": "Kills WordPress execution and displays JSON response with an error message."
        },
        "ƒ:_jsonp_wp_die_handler": {
                "prefix": [
                        "_jsonp_wp_die_handler",
                        "jwdh"
                ],
                "body": "_jsonp_wp_die_handler(${1:\\$message:string},${2:\\$title:string},${3:\\$args:string|array} )",
                "description": "Kills WordPress execution and displays JSONP response with an error message."
        },
        "ƒ:_links_add_base": {
                "prefix": [
                        "_links_add_base",
                        "lab"
                ],
                "body": "_links_add_base(${1:\\$m:string} )",
                "description": "Callback to add a base URL to relative links in passed content."
        },
        "ƒ:_links_add_target": {
                "prefix": [
                        "_links_add_target",
                        "lat"
                ],
                "body": "_links_add_target(${1:\\$m:string} )",
                "description": "Callback to add a target attribute to all links in passed content."
        },
        "ƒ:_list_meta_row": {
                "prefix": [
                        "_list_meta_row",
                        "lmr"
                ],
                "body": "_list_meta_row(${1:\\$entry:array},${2:\\$count:integer} )",
                "description": "Outputs a single row of public meta data in the Custom Fields meta box."
        },
        "ƒ:_load_image_to_edit_path": {
                "prefix": [
                        "_load_image_to_edit_path",
                        "litep"
                ],
                "body": "_load_image_to_edit_path(${1:\\$attachment_id:integer},${2:\\$size:string|array} )",
                "description": "Retrieve the path or URL of an attachment&#039;s attached file."
        },
        "ƒ:_load_remote_block_patterns": {
                "prefix": [
                        "_load_remote_block_patterns",
                        "lrbp"
                ],
                "body": "_load_remote_block_patterns(${1:\\$deprecated:WP_Screen|null} )",
                "description": "Register Core&#039;s official patterns from wordpress.org/patterns."
        },
        "ƒ:_load_remote_featured_patterns": {
                "prefix": [
                        "_load_remote_featured_patterns",
                        "lrfp"
                ],
                "body": "_load_remote_featured_patterns()",
                "description": "Register `Featured` (category) patterns from wordpress.org/patterns."
        },
        "ƒ:_load_textdomain_just_in_time": {
                "prefix": [
                        "_load_textdomain_just_in_time",
                        "ltjit"
                ],
                "body": "_load_textdomain_just_in_time(${1:\\$domain:string} )",
                "description": "Loads plugin and theme textdomains just-in-time."
        },
        "ƒ:_local_storage_notice": {
                "prefix": [
                        "_local_storage_notice",
                        "lsn"
                ],
                "body": "_local_storage_notice()",
                "description": "Output the HTML for restoring the post data from DOM storage"
        },
        "ƒ:_make_cat_compat": {
                "prefix": [
                        "_make_cat_compat",
                        "mcc"
                ],
                "body": "_make_cat_compat(${1:\\$category:array|object|WP_Term} )",
                "description": "Updates category structure to old pre-2.3 from new taxonomy structure."
        },
        "ƒ:_make_email_clickable_cb": {
                "prefix": [
                        "_make_email_clickable_cb",
                        "mecc"
                ],
                "body": "_make_email_clickable_cb(${1:\\$matches:array} )",
                "description": "Callback to convert email address match to HTML A element."
        },
        "ƒ:_make_url_clickable_cb": {
                "prefix": [
                        "_make_url_clickable_cb",
                        "mucc"
                ],
                "body": "_make_url_clickable_cb(${1:\\$matches:array} )",
                "description": "Callback to convert URI match to HTML A element."
        },
        "ƒ:_make_web_ftp_clickable_cb": {
                "prefix": [
                        "_make_web_ftp_clickable_cb",
                        "mwfcc"
                ],
                "body": "_make_web_ftp_clickable_cb(${1:\\$matches:array} )",
                "description": "Callback to convert URL match to HTML A element."
        },
        "ƒ:_maybe_update_core": {
                "prefix": [
                        "_maybe_update_core",
                        "muc"
                ],
                "body": "_maybe_update_core()",
                "description": "Determines whether core should be updated."
        },
        "ƒ:_maybe_update_plugins": {
                "prefix": [
                        "_maybe_update_plugins",
                        "mup"
                ],
                "body": "_maybe_update_plugins()",
                "description": "Check the last time plugins were run before checking plugin versions."
        },
        "ƒ:_maybe_update_themes": {
                "prefix": [
                        "_maybe_update_themes",
                        "mut"
                ],
                "body": "_maybe_update_themes()",
                "description": "Check themes versions only after a duration of time."
        },
        "ƒ:_mce_set_direction": {
                "prefix": [
                        "_mce_set_direction",
                        "msd"
                ],
                "body": "_mce_set_direction(${1:\\$mce_init:array} )",
                "description": "Set the localized direction for MCE plugin."
        },
        "ƒ:_media_button": {
                "prefix": [
                        "_media_button",
                        "mb"
                ],
                "body": "_media_button(${1:\\$title:},${2:\\$icon:},${3:\\$type:},${4:\\$id:} )",
                "description": "This was once used to display a media button."
        },
        "ƒ:_media_states": {
                "prefix": [
                        "_media_states",
                        "ms"
                ],
                "body": "_media_states(${1:\\$post:WP_Post},${2:\\$display:boolean} )",
                "description": "Outputs the attachment media states as HTML."
        },
        "ƒ:_n": {
                "prefix": [
                        "_n",
                        "n"
                ],
                "body": "_n(${1:\\$single:string},${2:\\$plural:string},${3:\\$number:integer},${4:\\$domain:string} )",
                "description": "Translates and retrieves the singular or plural form based on the supplied number."
        },
        "ƒ:_n_noop": {
                "prefix": [
                        "_n_noop",
                        "nn"
                ],
                "body": "_n_noop(${1:\\$singular:string},${2:\\$plural:string},${3:\\$domain:string|null} )",
                "description": "Registers plural strings in POT file, but does not translate them."
        },
        "ƒ:_nav_menu_item_id_use_once": {
                "prefix": [
                        "_nav_menu_item_id_use_once",
                        "nmiiuo"
                ],
                "body": "_nav_menu_item_id_use_once(${1:\\$id:string},${2:\\$item:object} )",
                "description": "Prevents a menu item ID from being used more than once."
        },
        "ƒ:_navigation_markup": {
                "prefix": [
                        "_navigation_markup",
                        "nm"
                ],
                "body": "_navigation_markup(${1:\\$links:string},${2:\\$class:string},${3:\\$screen_reader_text:string},${4:\\$aria_label:string} )",
                "description": "Wraps passed links in navigational markup."
        },
        "ƒ:_nc": {
                "prefix": [
                        "_nc",
                        "n"
                ],
                "body": "_nc(${1:\\$single:string},${2:\\$plural:string},${3:\\$number:integer},${4:\\$domain:string} )",
                "description": "Legacy version of _n(), which supports contexts."
        },
        "ƒ:_nx": {
                "prefix": [
                        "_nx",
                        "n"
                ],
                "body": "_nx(${1:\\$single:string},${2:\\$plural:string},${3:\\$number:integer},${4:\\$context:string},${5:\\$domain:string} )",
                "description": "Translates and retrieves the singular or plural form based on the supplied number, with gettext context."
        },
        "ƒ:_nx_noop": {
                "prefix": [
                        "_nx_noop",
                        "nn"
                ],
                "body": "_nx_noop(${1:\\$singular:string},${2:\\$plural:string},${3:\\$context:string},${4:\\$domain:string|null} )",
                "description": "Registers plural strings with gettext context in POT file, but does not translate them."
        },
        "ƒ:_oembed_create_xml": {
                "prefix": [
                        "_oembed_create_xml",
                        "ocx"
                ],
                "body": "_oembed_create_xml(${1:\\$data:array},${2:\\$node:SimpleXMLElement|null} )",
                "description": "Creates an XML string from a given array."
        },
        "ƒ:_oembed_filter_feed_content": {
                "prefix": [
                        "_oembed_filter_feed_content",
                        "offc"
                ],
                "body": "_oembed_filter_feed_content(${1:\\$content:string} )",
                "description": "Prepare the oembed HTML to be displayed in an RSS feed."
        },
        "ƒ:_oembed_rest_pre_serve_request": {
                "prefix": [
                        "_oembed_rest_pre_serve_request",
                        "orpsr"
                ],
                "body": "_oembed_rest_pre_serve_request(${1:\\$served:boolean},${2:\\$result:WP_HTTP_Response},${3:\\$request:WP_REST_Request},${4:\\$server:WP_REST_Server} )",
                "description": "Hooks into the REST API output to print XML instead of JSON."
        },
        "ƒ:_override_custom_logo_theme_mod": {
                "prefix": [
                        "_override_custom_logo_theme_mod",
                        "ocltm"
                ],
                "body": "_override_custom_logo_theme_mod(${1:\\$custom_logo:string} )",
                "description": "Overrides the custom logo with a site logo, if the option is set."
        },
        "ƒ:_pad_term_counts": {
                "prefix": [
                        "_pad_term_counts",
                        "ptc"
                ],
                "body": "_pad_term_counts(${1:\\$terms:array|array},${2:\\$taxonomy:string} )",
                "description": "Adds count of children to parent count."
        },
        "ƒ:_page_traverse_name": {
                "prefix": [
                        "_page_traverse_name",
                        "ptn"
                ],
                "body": "_page_traverse_name(${1:\\$page_id:integer},${2:\\$children:array},${3:\\$result:array} )",
                "description": "Traverse and return all the nested children post names of a root page."
        },
        "ƒ:_post_format_get_term": {
                "prefix": [
                        "_post_format_get_term",
                        "pfgt"
                ],
                "body": "_post_format_get_term(${1:\\$term:object} )",
                "description": "Remove the post format prefix from the name property of the term object created by get_term()."
        },
        "ƒ:_post_format_get_terms": {
                "prefix": [
                        "_post_format_get_terms",
                        "pfgt"
                ],
                "body": "_post_format_get_terms(${1:\\$terms:array},${2:\\$taxonomies:string|array},${3:\\$args:array} )",
                "description": "Remove the post format prefix from the name property of the term objects created by get_terms()."
        },
        "ƒ:_post_format_link": {
                "prefix": [
                        "_post_format_link",
                        "pfl"
                ],
                "body": "_post_format_link(${1:\\$link:string},${2:\\$term:WP_Term},${3:\\$taxonomy:string} )",
                "description": "Filters the post format term link to remove the format prefix."
        },
        "ƒ:_post_format_request": {
                "prefix": [
                        "_post_format_request",
                        "pfr"
                ],
                "body": "_post_format_request(${1:\\$qvs:array} )",
                "description": "Filters the request to allow for the format prefix."
        },
        "ƒ:_post_format_wp_get_object_terms": {
                "prefix": [
                        "_post_format_wp_get_object_terms",
                        "pfwgot"
                ],
                "body": "_post_format_wp_get_object_terms(${1:\\$terms:array} )",
                "description": "Remove the post format prefix from the name property of the term objects created by wp_get_object_terms()."
        },
        "ƒ:_post_states": {
                "prefix": [
                        "_post_states",
                        "ps"
                ],
                "body": "_post_states(${1:\\$post:WP_Post},${2:\\$display:boolean} )",
                "description": "Echoes or returns the post states as HTML."
        },
        "ƒ:_post_type_meta_capabilities": {
                "prefix": [
                        "_post_type_meta_capabilities",
                        "ptmc"
                ],
                "body": "_post_type_meta_capabilities(${1:\\$capabilities:array|null} )",
                "description": "Store or return a list of post type meta caps for map_meta_cap()."
        },
        "ƒ:_preview_theme_stylesheet_filter": {
                "prefix": [
                        "_preview_theme_stylesheet_filter",
                        "ptsf"
                ],
                "body": "_preview_theme_stylesheet_filter()",
                "description": "Private function to modify the current stylesheet when previewing a theme"
        },
        "ƒ:_preview_theme_template_filter": {
                "prefix": [
                        "_preview_theme_template_filter",
                        "pttf"
                ],
                "body": "_preview_theme_template_filter()",
                "description": "Private function to modify the current template when previewing a theme"
        },
        "ƒ:_prime_comment_caches": {
                "prefix": [
                        "_prime_comment_caches",
                        "pcc"
                ],
                "body": "_prime_comment_caches(${1:\\$comment_ids:array},${2:\\$update_meta_cache:boolean} )",
                "description": "Adds any comments from the given IDs to the cache that do not already exist in cache."
        },
        "ƒ:_prime_network_caches": {
                "prefix": [
                        "_prime_network_caches",
                        "pnc"
                ],
                "body": "_prime_network_caches(${1:\\$network_ids:array} )",
                "description": "Adds any networks from the given IDs to the cache that do not already exist in cache."
        },
        "ƒ:_prime_post_caches": {
                "prefix": [
                        "_prime_post_caches",
                        "ppc"
                ],
                "body": "_prime_post_caches(${1:\\$ids:array},${2:\\$update_term_cache:boolean},${3:\\$update_meta_cache:boolean} )",
                "description": "Adds any posts from the given IDs to the cache that do not already exist in cache."
        },
        "ƒ:_prime_site_caches": {
                "prefix": [
                        "_prime_site_caches",
                        "psc"
                ],
                "body": "_prime_site_caches(${1:\\$ids:array},${2:\\$update_meta_cache:boolean} )",
                "description": "Adds any sites from the given IDs to the cache that do not already exist in cache."
        },
        "ƒ:_prime_term_caches": {
                "prefix": [
                        "_prime_term_caches",
                        "ptc"
                ],
                "body": "_prime_term_caches(${1:\\$term_ids:array},${2:\\$update_meta_cache:boolean} )",
                "description": "Adds any terms from the given IDs to the cache that do not already exist in cache."
        },
        "ƒ:_publish_post_hook": {
                "prefix": [
                        "_publish_post_hook",
                        "pph"
                ],
                "body": "_publish_post_hook(${1:\\$post_id:integer} )",
                "description": "Hook to schedule pings and enclosures when a post is published."
        },
        "ƒ:_redirect_to_about_wordpress": {
                "prefix": [
                        "_redirect_to_about_wordpress",
                        "rtaw"
                ],
                "body": "_redirect_to_about_wordpress(${1:\\$new_version:string} )",
                "description": "Redirect to the About WordPress page after a successful upgrade."
        },
        "ƒ:_register_core_block_patterns_and_categories": {
                "prefix": [
                        "_register_core_block_patterns_and_categories",
                        "rcbpac"
                ],
                "body": "_register_core_block_patterns_and_categories()",
                "description": "Registers the core block patterns and categories."
        },
        "ƒ:_register_remote_theme_patterns": {
                "prefix": [
                        "_register_remote_theme_patterns",
                        "rrtp"
                ],
                "body": "_register_remote_theme_patterns()",
                "description": "Registers patterns from Pattern Directory provided by a theme&#039;s `theme.json` file."
        },
        "ƒ:_register_theme_block_patterns": {
                "prefix": [
                        "_register_theme_block_patterns",
                        "rtbp"
                ],
                "body": "_register_theme_block_patterns()",
                "description": "Register any patterns that the active theme may provide under its `./patterns/` directory. Each pattern is defined as a PHP file and defines its metadata using plugin-style headers. The minimum required definition is:"
        },
        "ƒ:_register_widget_form_callback": {
                "prefix": [
                        "_register_widget_form_callback",
                        "rwfc"
                ],
                "body": "_register_widget_form_callback(${1:\\$id:integer|string},${2:\\$name:string},${3:\\$form_callback:callable},${4:\\$options:array},${5:\\$params:mixed} )",
                "description": "Registers the form callback for a widget."
        },
        "ƒ:_register_widget_update_callback": {
                "prefix": [
                        "_register_widget_update_callback",
                        "rwuc"
                ],
                "body": "_register_widget_update_callback(${1:\\$id_base:string},${2:\\$update_callback:callable},${3:\\$options:array},${4:\\$params:mixed} )",
                "description": "Registers the update callback for a widget."
        },
        "ƒ:_relocate_children": {
                "prefix": [
                        "_relocate_children",
                        "rc"
                ],
                "body": "_relocate_children(${1:\\$old_ID:integer},${2:\\$new_ID:integer} )",
                "description": "This was once used to move child posts to a new parent."
        },
        "ƒ:_remove_qs_args_if_not_in_url": {
                "prefix": [
                        "_remove_qs_args_if_not_in_url",
                        "rqainiu"
                ],
                "body": "_remove_qs_args_if_not_in_url(${1:\\$query_string:string},${2:\\$args_to_check:array},${3:\\$url:string} )",
                "description": "Removes arguments from a query string if they are not present in a URL DO NOT use this in plugin code."
        },
        "ƒ:_remove_theme_attribute_in_block_template_content": {
                "prefix": [
                        "_remove_theme_attribute_in_block_template_content",
                        "rtaibtc"
                ],
                "body": "_remove_theme_attribute_in_block_template_content(${1:\\$template_content:string} )",
                "description": "Parses a block template and removes the theme attribute from each template part."
        },
        "ƒ:_remove_theme_support": {
                "prefix": [
                        "_remove_theme_support",
                        "rts"
                ],
                "body": "_remove_theme_support(${1:\\$feature:string} )",
                "description": "Do not use. Removes theme support internally without knowledge of those not used by themes directly."
        },
        "ƒ:_reset_front_page_settings_for_post": {
                "prefix": [
                        "_reset_front_page_settings_for_post",
                        "rfpsfp"
                ],
                "body": "_reset_front_page_settings_for_post(${1:\\$post_id:integer} )",
                "description": "Reset the page_on_front, show_on_front, and page_for_post settings when a linked page is deleted or trashed."
        },
        "ƒ:_resolve_home_block_template": {
                "prefix": [
                        "_resolve_home_block_template",
                        "rhbt"
                ],
                "body": "_resolve_home_block_template()",
                "description": "Returns the correct template for the site&#039;s home page."
        },
        "ƒ:_resolve_template_for_new_post": {
                "prefix": [
                        "_resolve_template_for_new_post",
                        "rtfnp"
                ],
                "body": "_resolve_template_for_new_post(${1:\\$wp_query:WP_Query} )",
                "description": "Sets the current WP_Query to return auto-draft posts."
        },
        "ƒ:_response_to_rss": {
                "prefix": [
                        "_response_to_rss",
                        "rtr"
                ],
                "body": "_response_to_rss(${1:\\$resp:array} )",
                "description": "Retrieve"
        },
        "ƒ:_rest_array_intersect_key_recursive": {
                "prefix": [
                        "_rest_array_intersect_key_recursive",
                        "raikr"
                ],
                "body": "_rest_array_intersect_key_recursive(${1:\\$array1:array},${2:\\$array2:array} )",
                "description": "Recursively computes the intersection of arrays using keys for comparison."
        },
        "ƒ:_restore_wpautop_hook": {
                "prefix": [
                        "_restore_wpautop_hook",
                        "rwh"
                ],
                "body": "_restore_wpautop_hook(${1:\\$content:string} )",
                "description": "If do_blocks() needs to remove wpautop() from the `the_content` filter, this re-adds it afterwards, for subsequent `the_content` usage."
        },
        "ƒ:_sanitize_text_fields": {
                "prefix": [
                        "_sanitize_text_fields",
                        "stf"
                ],
                "body": "_sanitize_text_fields(${1:\\$str:string},${2:\\$keep_newlines:boolean} )",
                "description": "Internal helper function to sanitize a string from user input or from the database."
        },
        "ƒ:_save_post_hook": {
                "prefix": [
                        "_save_post_hook",
                        "sph"
                ],
                "body": "_save_post_hook()",
                "description": "Callback formerly fired on the save_post hook. No longer needed."
        },
        "ƒ:_scalar_wp_die_handler": {
                "prefix": [
                        "_scalar_wp_die_handler",
                        "swdh"
                ],
                "body": "_scalar_wp_die_handler(${1:\\$message:string},${2:\\$title:string},${3:\\$args:string|array} )",
                "description": "Kills WordPress execution and displays an error message."
        },
        "ƒ:_search_terms_tidy": {
                "prefix": [
                        "_search_terms_tidy",
                        "stt"
                ],
                "body": "_search_terms_tidy(${1:\\$t:string} )",
                "description": "Formerly used internally to tidy up the search terms."
        },
        "ƒ:_set_cron_array": {
                "prefix": [
                        "_set_cron_array",
                        "sca"
                ],
                "body": "_set_cron_array(${1:\\$cron:array},${2:\\$wp_error:boolean} )",
                "description": "Updates the cron option with the new cron array."
        },
        "ƒ:_set_preview": {
                "prefix": [
                        "_set_preview",
                        "sp"
                ],
                "body": "_set_preview(${1:\\$post:WP_Post} )",
                "description": "Sets up the post object for preview based on the post autosave."
        },
        "ƒ:_show_post_preview": {
                "prefix": [
                        "_show_post_preview",
                        "spp"
                ],
                "body": "_show_post_preview()",
                "description": "Filters the latest content for preview from the post autosave."
        },
        "ƒ:_sort_name_callback": {
                "prefix": [
                        "_sort_name_callback",
                        "snc"
                ],
                "body": "_sort_name_callback(${1:\\$a:},${2:\\$b:} )",
                "description": "Callback to sort array by a &#039;name&#039; key."
        },
        "ƒ:_sort_nav_menu_items": {
                "prefix": [
                        "_sort_nav_menu_items",
                        "snmi"
                ],
                "body": "_sort_nav_menu_items(${1:\\$a:object},${2:\\$b:object} )",
                "description": "Sort menu items by the desired key."
        },
        "ƒ:_sort_uname_callback": {
                "prefix": [
                        "_sort_uname_callback",
                        "suc"
                ],
                "body": "_sort_uname_callback(${1:\\$a:array},${2:\\$b:array} )",
                "description": "Declares a callback to sort array by a &#039;Name&#039; key."
        },
        "ƒ:_split_str_by_whitespace": {
                "prefix": [
                        "_split_str_by_whitespace",
                        "ssbw"
                ],
                "body": "_split_str_by_whitespace(${1:\\$string:string},${2:\\$goal:integer} )",
                "description": "Breaks a string into chunks by splitting at whitespace characters."
        },
        "ƒ:_strip_template_file_suffix": {
                "prefix": [
                        "_strip_template_file_suffix",
                        "stfs"
                ],
                "body": "_strip_template_file_suffix(${1:\\$template_file:string} )",
                "description": "Strips .php or .html suffix from template file names."
        },
        "ƒ:_sync_custom_logo_to_site_logo": {
                "prefix": [
                        "_sync_custom_logo_to_site_logo",
                        "scltsl"
                ],
                "body": "_sync_custom_logo_to_site_logo(${1:\\$value:mixed} )",
                "description": "Updates the site_logo option when the custom_logo theme-mod gets updated."
        },
        "ƒ:_thickbox_path_admin_subfolder": {
                "prefix": [
                        "_thickbox_path_admin_subfolder",
                        "tpas"
                ],
                "body": "_thickbox_path_admin_subfolder()",
                "description": "Thickbox image paths for Network Admin."
        },
        "ƒ:_transition_post_status": {
                "prefix": [
                        "_transition_post_status",
                        "tps"
                ],
                "body": "_transition_post_status(${1:\\$new_status:string},${2:\\$old_status:string},${3:\\$post:WP_Post} )",
                "description": "Hook for managing future post transitions to published."
        },
        "ƒ:_truncate_post_slug": {
                "prefix": [
                        "_truncate_post_slug",
                        "tps"
                ],
                "body": "_truncate_post_slug(${1:\\$slug:string},${2:\\$length:integer} )",
                "description": "Truncate a post slug."
        },
        "ƒ:_unzip_file_pclzip": {
                "prefix": [
                        "_unzip_file_pclzip",
                        "ufp"
                ],
                "body": "_unzip_file_pclzip(${1:\\$file:string},${2:\\$to:string},${3:\\$needed_dirs:array} )",
                "description": "Attempts to unzip an archive using the PclZip library."
        },
        "ƒ:_unzip_file_ziparchive": {
                "prefix": [
                        "_unzip_file_ziparchive",
                        "ufz"
                ],
                "body": "_unzip_file_ziparchive(${1:\\$file:string},${2:\\$to:string},${3:\\$needed_dirs:array} )",
                "description": "Attempts to unzip an archive using the ZipArchive class."
        },
        "ƒ:_update_blog_date_on_post_delete": {
                "prefix": [
                        "_update_blog_date_on_post_delete",
                        "ubdopd"
                ],
                "body": "_update_blog_date_on_post_delete(${1:\\$post_id:integer} )",
                "description": "Handler for updating the current site&#039;s last updated date when a published post is deleted."
        },
        "ƒ:_update_blog_date_on_post_publish": {
                "prefix": [
                        "_update_blog_date_on_post_publish",
                        "ubdopp"
                ],
                "body": "_update_blog_date_on_post_publish(${1:\\$new_status:string},${2:\\$old_status:string},${3:\\$post:WP_Post} )",
                "description": "Handler for updating the site&#039;s last updated date when a post is published or an already published post is changed."
        },
        "ƒ:_update_generic_term_count": {
                "prefix": [
                        "_update_generic_term_count",
                        "ugtc"
                ],
                "body": "_update_generic_term_count(${1:\\$terms:array},${2:\\$taxonomy:WP_Taxonomy} )",
                "description": "Updates term count based on number of objects."
        },
        "ƒ:_update_post_term_count": {
                "prefix": [
                        "_update_post_term_count",
                        "uptc"
                ],
                "body": "_update_post_term_count(${1:\\$terms:array},${2:\\$taxonomy:WP_Taxonomy} )",
                "description": "Updates term count based on object types of the current taxonomy."
        },
        "ƒ:_update_posts_count_on_delete": {
                "prefix": [
                        "_update_posts_count_on_delete",
                        "upcod"
                ],
                "body": "_update_posts_count_on_delete(${1:\\$post_id:integer} )",
                "description": "Handler for updating the current site&#039;s posts count when a post is deleted."
        },
        "ƒ:_update_posts_count_on_transition_post_status": {
                "prefix": [
                        "_update_posts_count_on_transition_post_status",
                        "upcotps"
                ],
                "body": "_update_posts_count_on_transition_post_status(${1:\\$new_status:string},${2:\\$old_status:string},${3:\\$post:WP_Post|null} )",
                "description": "Handler for updating the current site&#039;s posts count when a post status changes."
        },
        "ƒ:_update_term_count_on_transition_post_status": {
                "prefix": [
                        "_update_term_count_on_transition_post_status",
                        "utcotps"
                ],
                "body": "_update_term_count_on_transition_post_status(${1:\\$new_status:string},${2:\\$old_status:string},${3:\\$post:WP_Post} )",
                "description": "Update the custom taxonomies&#039; term counts when a post&#039;s status is changed."
        },
        "ƒ:_upgrade_422_remove_genericons": {
                "prefix": [
                        "_upgrade_422_remove_genericons",
                        "u4rg"
                ],
                "body": "_upgrade_422_remove_genericons()",
                "description": "Cleans up Genericons example files."
        },
        "ƒ:_upgrade_cron_array": {
                "prefix": [
                        "_upgrade_cron_array",
                        "uca"
                ],
                "body": "_upgrade_cron_array(${1:\\$cron:array} )",
                "description": "Upgrade a Cron info array."
        },
        "ƒ:_usort_by_first_member": {
                "prefix": [
                        "_usort_by_first_member",
                        "ubfm"
                ],
                "body": "_usort_by_first_member(${1:\\$a:array},${2:\\$b:array} )",
                "description": "Sorts a multidimensional array by first member of each top level member"
        },
        "ƒ:_usort_terms_by_ID": {
                "prefix": [
                        "_usort_terms_by_ID",
                        "utbI"
                ],
                "body": "_usort_terms_by_ID(${1:\\$a:object},${2:\\$b:object} )",
                "description": "Sort categories by ID."
        },
        "ƒ:_usort_terms_by_name": {
                "prefix": [
                        "_usort_terms_by_name",
                        "utbn"
                ],
                "body": "_usort_terms_by_name(${1:\\$a:object},${2:\\$b:object} )",
                "description": "Sort categories by name."
        },
        "ƒ:_walk_bookmarks": {
                "prefix": [
                        "_walk_bookmarks",
                        "wb"
                ],
                "body": "_walk_bookmarks(${1:\\$bookmarks:array},${2:\\$args:string|array} )",
                "description": "The formatted output of a list of bookmarks."
        },
        "ƒ:_wp_add_additional_image_sizes": {
                "prefix": [
                        "_wp_add_additional_image_sizes",
                        "waais"
                ],
                "body": "_wp_add_additional_image_sizes()",
                "description": "Add additional default image sub-sizes."
        },
        "ƒ:_wp_admin_bar_init": {
                "prefix": [
                        "_wp_admin_bar_init",
                        "wabi"
                ],
                "body": "_wp_admin_bar_init()",
                "description": "Instantiates the admin bar object and set it up as a global for access elsewhere."
        },
        "ƒ:_wp_admin_html_begin": {
                "prefix": [
                        "_wp_admin_html_begin",
                        "wahb"
                ],
                "body": "_wp_admin_html_begin()",
                "description": ""
        },
        "ƒ:_wp_ajax_add_hierarchical_term": {
                "prefix": [
                        "_wp_ajax_add_hierarchical_term",
                        "waaht"
                ],
                "body": "_wp_ajax_add_hierarchical_term()",
                "description": "Ajax handler for adding a hierarchical term."
        },
        "ƒ:_wp_ajax_delete_comment_response": {
                "prefix": [
                        "_wp_ajax_delete_comment_response",
                        "wadcr"
                ],
                "body": "_wp_ajax_delete_comment_response(${1:\\$comment_id:integer},${2:\\$delta:integer} )",
                "description": "Sends back current comment total and new page links if they need to be updated."
        },
        "ƒ:_wp_ajax_menu_quick_search": {
                "prefix": [
                        "_wp_ajax_menu_quick_search",
                        "wamqs"
                ],
                "body": "_wp_ajax_menu_quick_search(${1:\\$request:array} )",
                "description": "Prints the appropriate response to a menu quick search."
        },
        "ƒ:_wp_auto_add_pages_to_menu": {
                "prefix": [
                        "_wp_auto_add_pages_to_menu",
                        "waaptm"
                ],
                "body": "_wp_auto_add_pages_to_menu(${1:\\$new_status:string},${2:\\$old_status:string},${3:\\$post:WP_Post} )",
                "description": "Automatically add newly published page objects to menus with that as an option."
        },
        "ƒ:_wp_batch_split_terms": {
                "prefix": [
                        "_wp_batch_split_terms",
                        "wbst"
                ],
                "body": "_wp_batch_split_terms()",
                "description": "Splits a batch of shared taxonomy terms."
        },
        "ƒ:_wp_batch_update_comment_type": {
                "prefix": [
                        "_wp_batch_update_comment_type",
                        "wbuct"
                ],
                "body": "_wp_batch_update_comment_type()",
                "description": "Updates the comment type for a batch of comments."
        },
        "ƒ:_wp_call_all_hook": {
                "prefix": [
                        "_wp_call_all_hook",
                        "wcah"
                ],
                "body": "_wp_call_all_hook(${1:\\$args:array} )",
                "description": "Calls the &#039;all&#039; hook, which will process the functions hooked into it."
        },
        "ƒ:_wp_check_alternate_file_names": {
                "prefix": [
                        "_wp_check_alternate_file_names",
                        "wcafn"
                ],
                "body": "_wp_check_alternate_file_names(${1:\\$filenames:array},${2:\\$dir:string},${3:\\$files:array} )",
                "description": "Helper function to test if each of an array of file names could conflict with existing files."
        },
        "ƒ:_wp_check_existing_file_names": {
                "prefix": [
                        "_wp_check_existing_file_names",
                        "wcefn"
                ],
                "body": "_wp_check_existing_file_names(${1:\\$filename:string},${2:\\$files:array} )",
                "description": "Helper function to check if a file name could match an existing image sub-size file name."
        },
        "ƒ:_wp_credits_add_profile_link": {
                "prefix": [
                        "_wp_credits_add_profile_link",
                        "wcapl"
                ],
                "body": "_wp_credits_add_profile_link(${1:\\$display_name:string},${2:\\$username:string},${3:\\$profiles:string} )",
                "description": "Retrieve the link to a contributor&#039;s WordPress.org profile page."
        },
        "ƒ:_wp_credits_build_object_link": {
                "prefix": [
                        "_wp_credits_build_object_link",
                        "wcbol"
                ],
                "body": "_wp_credits_build_object_link(${1:\\$data:string} )",
                "description": "Retrieve the link to an external library used in WordPress."
        },
        "ƒ:_wp_cron": {
                "prefix": [
                        "_wp_cron",
                        "wc"
                ],
                "body": "_wp_cron()",
                "description": "Run scheduled callbacks or spawn cron for all scheduled events."
        },
        "ƒ:_wp_customize_changeset_filter_insert_post_data": {
                "prefix": [
                        "_wp_customize_changeset_filter_insert_post_data",
                        "wccfipd"
                ],
                "body": "_wp_customize_changeset_filter_insert_post_data(${1:\\$post_data:array},${2:\\$supplied_post_data:array} )",
                "description": "Filters changeset post data upon insert to ensure post_name is intact."
        },
        "ƒ:_wp_customize_include": {
                "prefix": [
                        "_wp_customize_include",
                        "wci"
                ],
                "body": "_wp_customize_include()",
                "description": "Includes and instantiates the WP_Customize_Manager class."
        },
        "ƒ:_wp_customize_loader_settings": {
                "prefix": [
                        "_wp_customize_loader_settings",
                        "wcls"
                ],
                "body": "_wp_customize_loader_settings()",
                "description": "Adds settings for the customize-loader script."
        },
        "ƒ:_wp_customize_publish_changeset": {
                "prefix": [
                        "_wp_customize_publish_changeset",
                        "wcpc"
                ],
                "body": "_wp_customize_publish_changeset(${1:\\$new_status:string},${2:\\$old_status:string},${3:\\$changeset_post:WP_Post} )",
                "description": "Publishes a snapshot&#039;s changes."
        },
        "ƒ:_wp_dashboard_control_callback": {
                "prefix": [
                        "_wp_dashboard_control_callback",
                        "wdcc"
                ],
                "body": "_wp_dashboard_control_callback(${1:\\$dashboard:mixed},${2:\\$meta_box:array} )",
                "description": "Outputs controls for the current dashboard widget."
        },
        "ƒ:_wp_dashboard_recent_comments_row": {
                "prefix": [
                        "_wp_dashboard_recent_comments_row",
                        "wdrcr"
                ],
                "body": "_wp_dashboard_recent_comments_row(${1:\\$comment:WP_Comment},${2:\\$show_date:boolean} )",
                "description": "Outputs a row for the Recent Comments widget."
        },
        "ƒ:_wp_delete_customize_changeset_dependent_auto_drafts": {
                "prefix": [
                        "_wp_delete_customize_changeset_dependent_auto_drafts",
                        "wdccdad"
                ],
                "body": "_wp_delete_customize_changeset_dependent_auto_drafts(${1:\\$post_id:integer} )",
                "description": "Deletes auto-draft posts associated with the supplied changeset."
        },
        "ƒ:_wp_delete_orphaned_draft_menu_items": {
                "prefix": [
                        "_wp_delete_orphaned_draft_menu_items",
                        "wdodmi"
                ],
                "body": "_wp_delete_orphaned_draft_menu_items()",
                "description": "Deletes orphaned draft menu items"
        },
        "ƒ:_wp_delete_post_menu_item": {
                "prefix": [
                        "_wp_delete_post_menu_item",
                        "wdpmi"
                ],
                "body": "_wp_delete_post_menu_item(${1:\\$object_id:integer} )",
                "description": "Callback for handling a menu item when its original object is deleted."
        },
        "ƒ:_wp_delete_tax_menu_item": {
                "prefix": [
                        "_wp_delete_tax_menu_item",
                        "wdtmi"
                ],
                "body": "_wp_delete_tax_menu_item(${1:\\$object_id:integer},${2:\\$tt_id:integer},${3:\\$taxonomy:string} )",
                "description": "Serves as a callback for handling a menu item when its original object is deleted."
        },
        "ƒ:_wp_die_process_input": {
                "prefix": [
                        "_wp_die_process_input",
                        "wdpi"
                ],
                "body": "_wp_die_process_input(${1:\\$message:string|WP_Error},${2:\\$title:string},${3:\\$args:string|array} )",
                "description": "Processes arguments passed to wp_die() consistently for its handlers."
        },
        "ƒ:_wp_emoji_list": {
                "prefix": [
                        "_wp_emoji_list",
                        "wel"
                ],
                "body": "_wp_emoji_list(${1:\\$type:string} )",
                "description": "Returns arrays of emoji data."
        },
        "ƒ:_wp_filter_build_unique_id": {
                "prefix": [
                        "_wp_filter_build_unique_id",
                        "wfbui"
                ],
                "body": "_wp_filter_build_unique_id(${1:\\$hook_name:string},${2:\\$callback:callable|string|array},${3:\\$priority:integer} )",
                "description": "Builds Unique ID for storage and retrieval."
        },
        "ƒ:_wp_filter_taxonomy_base": {
                "prefix": [
                        "_wp_filter_taxonomy_base",
                        "wftb"
                ],
                "body": "_wp_filter_taxonomy_base(${1:\\$base:string} )",
                "description": "Filters the URL base for taxonomies."
        },
        "ƒ:_wp_footer_scripts": {
                "prefix": [
                        "_wp_footer_scripts",
                        "wfs"
                ],
                "body": "_wp_footer_scripts()",
                "description": "Private, for use in *_footer_scripts hooks"
        },
        "ƒ:_wp_get_allowed_postdata": {
                "prefix": [
                        "_wp_get_allowed_postdata",
                        "wgap"
                ],
                "body": "_wp_get_allowed_postdata(${1:\\$post_data:array|WP_Error|null} )",
                "description": "Returns only allowed post data fields."
        },
        "ƒ:_wp_get_attachment_relative_path": {
                "prefix": [
                        "_wp_get_attachment_relative_path",
                        "wgarp"
                ],
                "body": "_wp_get_attachment_relative_path(${1:\\$file:string} )",
                "description": "Get the attachment path relative to the upload directory."
        },
        "ƒ:_wp_get_current_user": {
                "prefix": [
                        "_wp_get_current_user",
                        "wgcu"
                ],
                "body": "_wp_get_current_user()",
                "description": "Retrieves the current user object."
        },
        "ƒ:_wp_get_iframed_editor_assets": {
                "prefix": [
                        "_wp_get_iframed_editor_assets",
                        "wgiea"
                ],
                "body": "_wp_get_iframed_editor_assets()",
                "description": "Collect the block editor assets that need to be loaded into the editor&#039;s iframe."
        },
        "ƒ:_wp_get_image_size_from_meta": {
                "prefix": [
                        "_wp_get_image_size_from_meta",
                        "wgisfm"
                ],
                "body": "_wp_get_image_size_from_meta(${1:\\$size_name:string},${2:\\$image_meta:array} )",
                "description": "Get the image size as array from its meta data."
        },
        "ƒ:_wp_get_post_revision_version": {
                "prefix": [
                        "_wp_get_post_revision_version",
                        "wgprv"
                ],
                "body": "_wp_get_post_revision_version(${1:\\$revision:WP_Post} )",
                "description": "Gets the post revision version."
        },
        "ƒ:_wp_get_user_contactmethods": {
                "prefix": [
                        "_wp_get_user_contactmethods",
                        "wguc"
                ],
                "body": "_wp_get_user_contactmethods(${1:\\$user:WP_User|null} )",
                "description": "The old private function for setting up user contact methods."
        },
        "ƒ:_wp_handle_upload": {
                "prefix": [
                        "_wp_handle_upload",
                        "whu"
                ],
                "body": "_wp_handle_upload(${1:\\$file:array},${2:\\$overrides:array|false},${3:\\$time:string},${4:\\$action:string} )",
                "description": "Handles PHP uploads in WordPress."
        },
        "ƒ:_wp_http_get_object": {
                "prefix": [
                        "_wp_http_get_object",
                        "whgo"
                ],
                "body": "_wp_http_get_object()",
                "description": "Returns the initialized WP_Http Object"
        },
        "ƒ:_wp_image_meta_replace_original": {
                "prefix": [
                        "_wp_image_meta_replace_original",
                        "wimro"
                ],
                "body": "_wp_image_meta_replace_original(${1:\\$saved_data:array},${2:\\$original_file:string},${3:\\$image_meta:array},${4:\\$attachment_id:integer} )",
                "description": "Updates the attached file and image meta data when the original image was edited."
        },
        "ƒ:_wp_iso_convert": {
                "prefix": [
                        "_wp_iso_convert",
                        "wic"
                ],
                "body": "_wp_iso_convert(${1:\\$match:array} )",
                "description": "Helper function to convert hex encoded chars to ASCII."
        },
        "ƒ:_wp_keep_alive_customize_changeset_dependent_auto_drafts": {
                "prefix": [
                        "_wp_keep_alive_customize_changeset_dependent_auto_drafts",
                        "wkaccdad"
                ],
                "body": "_wp_keep_alive_customize_changeset_dependent_auto_drafts(${1:\\$new_status:string},${2:\\$old_status:string},${3:\\$post:WP_Post} )",
                "description": "Makes sure that auto-draft posts get their post_date bumped or status changed to draft to prevent premature garbage-collection."
        },
        "ƒ:_wp_link_page": {
                "prefix": [
                        "_wp_link_page",
                        "wlp"
                ],
                "body": "_wp_link_page(${1:\\$i:integer} )",
                "description": "Helper function for wp_link_pages()."
        },
        "ƒ:_wp_make_subsizes": {
                "prefix": [
                        "_wp_make_subsizes",
                        "wms"
                ],
                "body": "_wp_make_subsizes(${1:\\$new_sizes:array},${2:\\$file:string},${3:\\$image_meta:array},${4:\\$attachment_id:integer} )",
                "description": "Low-level function to create image sub-sizes."
        },
        "ƒ:_wp_menu_item_classes_by_context": {
                "prefix": [
                        "_wp_menu_item_classes_by_context",
                        "wmicbc"
                ],
                "body": "_wp_menu_item_classes_by_context(${1:\\$menu_items:array} )",
                "description": "Adds the class property classes for the current context, if applicable."
        },
        "ƒ:_wp_menu_output": {
                "prefix": [
                        "_wp_menu_output",
                        "wmo"
                ],
                "body": "_wp_menu_output(${1:\\$menu:array},${2:\\$submenu:array},${3:\\$submenu_as_parent:boolean} )",
                "description": "Display menu."
        },
        "ƒ:_wp_menus_changed": {
                "prefix": [
                        "_wp_menus_changed",
                        "wmc"
                ],
                "body": "_wp_menus_changed()",
                "description": "Handles menu config after theme change."
        },
        "ƒ:_wp_multiple_block_styles": {
                "prefix": [
                        "_wp_multiple_block_styles",
                        "wmbs"
                ],
                "body": "_wp_multiple_block_styles(${1:\\$metadata:array} )",
                "description": "Allows multiple block styles."
        },
        "ƒ:_wp_nav_menu_meta_box_object": {
                "prefix": [
                        "_wp_nav_menu_meta_box_object",
                        "wnmmbo"
                ],
                "body": "_wp_nav_menu_meta_box_object(${1:\\$data_object:object|null} )",
                "description": "Adds custom arguments to some of the meta box object types."
        },
        "ƒ:_wp_normalize_relative_css_links": {
                "prefix": [
                        "_wp_normalize_relative_css_links",
                        "wnrcl"
                ],
                "body": "_wp_normalize_relative_css_links(${1:\\$css:string},${2:\\$stylesheet_url:string} )",
                "description": "Makes URLs relative to the WordPress installation."
        },
        "ƒ:_wp_object_count_sort_cb": {
                "prefix": [
                        "_wp_object_count_sort_cb",
                        "wocsc"
                ],
                "body": "_wp_object_count_sort_cb(${1:\\$a:object},${2:\\$b:object} )",
                "description": "Serves as a callback for comparing objects based on count."
        },
        "ƒ:_wp_object_name_sort_cb": {
                "prefix": [
                        "_wp_object_name_sort_cb",
                        "wonsc"
                ],
                "body": "_wp_object_name_sort_cb(${1:\\$a:object},${2:\\$b:object} )",
                "description": "Serves as a callback for comparing objects based on name."
        },
        "ƒ:_wp_oembed_get_object": {
                "prefix": [
                        "_wp_oembed_get_object",
                        "wogo"
                ],
                "body": "_wp_oembed_get_object()",
                "description": "Returns the initialized WP_oEmbed object."
        },
        "ƒ:_wp_personal_data_cleanup_requests": {
                "prefix": [
                        "_wp_personal_data_cleanup_requests",
                        "wpdcr"
                ],
                "body": "_wp_personal_data_cleanup_requests()",
                "description": "Cleans up failed and expired requests before displaying the list table."
        },
        "ƒ:_wp_personal_data_handle_actions": {
                "prefix": [
                        "_wp_personal_data_handle_actions",
                        "wpdha"
                ],
                "body": "_wp_personal_data_handle_actions()",
                "description": "Handle list table actions."
        },
        "ƒ:_wp_post_revision_data": {
                "prefix": [
                        "_wp_post_revision_data",
                        "wprd"
                ],
                "body": "_wp_post_revision_data(${1:\\$post:array|WP_Post},${2:\\$autosave:boolean} )",
                "description": "Returns a post array ready to be inserted into the posts table as a post revision."
        },
        "ƒ:_wp_post_revision_fields": {
                "prefix": [
                        "_wp_post_revision_fields",
                        "wprf"
                ],
                "body": "_wp_post_revision_fields(${1:\\$post:array|WP_Post},${2:\\$deprecated:boolean} )",
                "description": "Determines which fields of posts are to be saved in revisions."
        },
        "ƒ:_wp_post_thumbnail_html": {
                "prefix": [
                        "_wp_post_thumbnail_html",
                        "wpth"
                ],
                "body": "_wp_post_thumbnail_html(${1:\\$thumbnail_id:integer|null},${2:\\$post:integer|WP_Post|null} )",
                "description": "Returns HTML for the post thumbnail meta box."
        },
        "ƒ:_wp_preview_post_thumbnail_filter": {
                "prefix": [
                        "_wp_preview_post_thumbnail_filter",
                        "wpptf"
                ],
                "body": "_wp_preview_post_thumbnail_filter(${1:\\$value:null|array|string},${2:\\$post_id:integer},${3:\\$meta_key:string} )",
                "description": "Filters post thumbnail lookup to set the post thumbnail."
        },
        "ƒ:_wp_preview_terms_filter": {
                "prefix": [
                        "_wp_preview_terms_filter",
                        "wptf"
                ],
                "body": "_wp_preview_terms_filter(${1:\\$terms:array},${2:\\$post_id:integer},${3:\\$taxonomy:string} )",
                "description": "Filters terms lookup to set the post format."
        },
        "ƒ:_wp_privacy_account_request_confirmed": {
                "prefix": [
                        "_wp_privacy_account_request_confirmed",
                        "wparc"
                ],
                "body": "_wp_privacy_account_request_confirmed(${1:\\$request_id:integer} )",
                "description": "Updates log when privacy request is confirmed."
        },
        "ƒ:_wp_privacy_account_request_confirmed_message": {
                "prefix": [
                        "_wp_privacy_account_request_confirmed_message",
                        "wparcm"
                ],
                "body": "_wp_privacy_account_request_confirmed_message(${1:\\$request_id:integer} )",
                "description": "Returns request confirmation message HTML."
        },
        "ƒ:_wp_privacy_action_request_types": {
                "prefix": [
                        "_wp_privacy_action_request_types",
                        "wpart"
                ],
                "body": "_wp_privacy_action_request_types()",
                "description": "Gets all personal data request types."
        },
        "ƒ:_wp_privacy_completed_request": {
                "prefix": [
                        "_wp_privacy_completed_request",
                        "wpcr"
                ],
                "body": "_wp_privacy_completed_request(${1:\\$request_id:integer} )",
                "description": "Marks a request as completed by the admin and logs the current timestamp."
        },
        "ƒ:_wp_privacy_requests_screen_options": {
                "prefix": [
                        "_wp_privacy_requests_screen_options",
                        "wprso"
                ],
                "body": "_wp_privacy_requests_screen_options()",
                "description": "Was used to add options for the privacy requests screens before they were separate files."
        },
        "ƒ:_wp_privacy_resend_request": {
                "prefix": [
                        "_wp_privacy_resend_request",
                        "wprr"
                ],
                "body": "_wp_privacy_resend_request(${1:\\$request_id:integer} )",
                "description": "Resend an existing request and return the result."
        },
        "ƒ:_wp_privacy_send_erasure_fulfillment_notification": {
                "prefix": [
                        "_wp_privacy_send_erasure_fulfillment_notification",
                        "wpsefn"
                ],
                "body": "_wp_privacy_send_erasure_fulfillment_notification(${1:\\$request_id:integer} )",
                "description": "Notifies the user when their erasure request is fulfilled."
        },
        "ƒ:_wp_privacy_send_request_confirmation_notification": {
                "prefix": [
                        "_wp_privacy_send_request_confirmation_notification",
                        "wpsrcn"
                ],
                "body": "_wp_privacy_send_request_confirmation_notification(${1:\\$request_id:integer} )",
                "description": "Notifies the site administrator via email when a request is confirmed."
        },
        "ƒ:_wp_privacy_settings_filter_draft_page_titles": {
                "prefix": [
                        "_wp_privacy_settings_filter_draft_page_titles",
                        "wpsfdpt"
                ],
                "body": "_wp_privacy_settings_filter_draft_page_titles(${1:\\$title:string},${2:\\$page:WP_Post} )",
                "description": "Appends &#039;(Draft)&#039; to draft page titles in the privacy page dropdown so that unpublished content is obvious."
        },
        "ƒ:_wp_privacy_statuses": {
                "prefix": [
                        "_wp_privacy_statuses",
                        "wps"
                ],
                "body": "_wp_privacy_statuses()",
                "description": "Return statuses for privacy requests."
        },
        "ƒ:_wp_put_post_revision": {
                "prefix": [
                        "_wp_put_post_revision",
                        "wppr"
                ],
                "body": "_wp_put_post_revision(${1:\\$post:integer|WP_Post|array|null},${2:\\$autosave:boolean} )",
                "description": "Inserts post data into the posts table as a post revision."
        },
        "ƒ:_wp_register_meta_args_allowed_list": {
                "prefix": [
                        "_wp_register_meta_args_allowed_list",
                        "wrmaal"
                ],
                "body": "_wp_register_meta_args_allowed_list(${1:\\$args:array},${2:\\$default_args:array} )",
                "description": "Filters out `register_meta()` args based on an allowed list."
        },
        "ƒ:_wp_register_meta_args_whitelist": {
                "prefix": [
                        "_wp_register_meta_args_whitelist",
                        "wrmaw"
                ],
                "body": "_wp_register_meta_args_whitelist(${1:\\$args:array},${2:\\$default_args:array} )",
                "description": "Filters out `register_meta()` args based on an allowed list."
        },
        "ƒ:_wp_relative_upload_path": {
                "prefix": [
                        "_wp_relative_upload_path",
                        "wrup"
                ],
                "body": "_wp_relative_upload_path(${1:\\$path:string} )",
                "description": "Return relative path to an uploaded file."
        },
        "ƒ:_wp_remove_unregistered_widgets": {
                "prefix": [
                        "_wp_remove_unregistered_widgets",
                        "wruw"
                ],
                "body": "_wp_remove_unregistered_widgets(${1:\\$sidebars_widgets:array},${2:\\$allowed_widget_ids:array} )",
                "description": "Compares a list of sidebars with their widgets against an allowed list."
        },
        "ƒ:_wp_sidebars_changed": {
                "prefix": [
                        "_wp_sidebars_changed",
                        "wsc"
                ],
                "body": "_wp_sidebars_changed()",
                "description": "Handle sidebars config after theme change"
        },
        "ƒ:_wp_specialchars": {
                "prefix": [
                        "_wp_specialchars",
                        "ws"
                ],
                "body": "_wp_specialchars(${1:\\$string:string},${2:\\$quote_style:integer|string},${3:\\$charset:false|string},${4:\\$double_encode:boolean} )",
                "description": "Converts a number of special characters into their HTML entities."
        },
        "ƒ:_wp_theme_json_webfonts_handler": {
                "prefix": [
                        "_wp_theme_json_webfonts_handler",
                        "wtjwh"
                ],
                "body": "_wp_theme_json_webfonts_handler()",
                "description": "Runs the theme.json webfonts handler."
        },
        "ƒ:_wp_timezone_choice_usort_callback": {
                "prefix": [
                        "_wp_timezone_choice_usort_callback",
                        "wtcuc"
                ],
                "body": "_wp_timezone_choice_usort_callback(${1:\\$a:array},${2:\\$b:array} )",
                "description": "Sort-helper for timezones."
        },
        "ƒ:_wp_tinycolor_bound_alpha": {
                "prefix": [
                        "_wp_tinycolor_bound_alpha",
                        "wtba"
                ],
                "body": "_wp_tinycolor_bound_alpha(${1:\\$n:mixed} )",
                "description": "Direct port of tinycolor&#039;s boundAlpha function to maintain consistency with how tinycolor works."
        },
        "ƒ:_wp_to_kebab_case": {
                "prefix": [
                        "_wp_to_kebab_case",
                        "wtkc"
                ],
                "body": "_wp_to_kebab_case(${1:\\$string:string} )",
                "description": "This function is trying to replicate what lodash&#039;s kebabCase (JS library) does in the client."
        },
        "ƒ:_wp_translate_postdata": {
                "prefix": [
                        "_wp_translate_postdata",
                        "wtp"
                ],
                "body": "_wp_translate_postdata(${1:\\$update:boolean},${2:\\$post_data:array|null} )",
                "description": "Renames `$_POST` data from form names to DB post columns."
        },
        "ƒ:_wp_upgrade_revisions_of_post": {
                "prefix": [
                        "_wp_upgrade_revisions_of_post",
                        "wurop"
                ],
                "body": "_wp_upgrade_revisions_of_post(${1:\\$post:WP_Post},${2:\\$revisions:array} )",
                "description": "Upgrade the revisions author, add the current post as a revision and set the revisions version to 1"
        },
        "ƒ:_wp_upload_dir": {
                "prefix": [
                        "_wp_upload_dir",
                        "wud"
                ],
                "body": "_wp_upload_dir(${1:\\$time:string|null} )",
                "description": "A non-filtered, non-cached version of wp_upload_dir() that doesn&#039;t check the path."
        },
        "ƒ:_wptexturize_pushpop_element": {
                "prefix": [
                        "_wptexturize_pushpop_element",
                        "wpe"
                ],
                "body": "_wptexturize_pushpop_element(${1:\\$text:string},${2:\\$stack:array},${3:\\$disabled_elements:array} )",
                "description": "Searches for disabled element tags. Pushes element to stack on tag open and pops on tag close."
        },
        "ƒ:_x": {
                "prefix": [
                        "_x",
                        "x"
                ],
                "body": "_x(${1:\\$text:string},${2:\\$context:string},${3:\\$domain:string} )",
                "description": "Retrieve translated string with gettext context."
        },
        "ƒ:_xml_wp_die_handler": {
                "prefix": [
                        "_xml_wp_die_handler",
                        "xwdh"
                ],
                "body": "_xml_wp_die_handler(${1:\\$message:string},${2:\\$title:string},${3:\\$args:string|array} )",
                "description": "Kills WordPress execution and displays XML response with an error message."
        },
        "ƒ:_xmlrpc_wp_die_handler": {
                "prefix": [
                        "_xmlrpc_wp_die_handler",
                        "xwdh"
                ],
                "body": "_xmlrpc_wp_die_handler(${1:\\$message:string},${2:\\$title:string},${3:\\$args:string|array} )",
                "description": "Kills WordPress execution and displays XML response with an error message."
        },
        "ƒ:absint": {
                "prefix": [
                        "absint"
                ],
                "body": "absint(${1:\\$maybeint:mixed} )",
                "description": "Convert a value to non-negative integer."
        },
        "ƒ:activate_plugin": {
                "prefix": [
                        "activate_plugin",
                        "ap"
                ],
                "body": "activate_plugin(${1:\\$plugin:string},${2:\\$redirect:string},${3:\\$network_wide:boolean},${4:\\$silent:boolean} )",
                "description": "Attempts activation of plugin in a &quot;sandbox&quot; and redirects on success."
        },
        "ƒ:activate_plugins": {
                "prefix": [
                        "activate_plugins",
                        "ap"
                ],
                "body": "activate_plugins(${1:\\$plugins:string|array},${2:\\$redirect:string},${3:\\$network_wide:boolean},${4:\\$silent:boolean} )",
                "description": "Activates multiple plugins."
        },
        "ƒ:activate_sitewide_plugin": {
                "prefix": [
                        "activate_sitewide_plugin",
                        "asp"
                ],
                "body": "activate_sitewide_plugin()",
                "description": "Deprecated functionality for activating a network-only plugin."
        },
        "ƒ:add_action": {
                "prefix": [
                        "add_action",
                        "aa"
                ],
                "body": "add_action(${1:\\$hook_name:string},${2:\\$callback:callable},${3:\\$priority:integer},${4:\\$accepted_args:integer} )",
                "description": "Adds a callback function to an action hook."
        },
        "ƒ:add_allowed_options": {
                "prefix": [
                        "add_allowed_options",
                        "aao"
                ],
                "body": "add_allowed_options(${1:\\$new_options:array},${2:\\$options:string|array} )",
                "description": "Adds an array of options to the list of allowed options."
        },
        "ƒ:add_blog_option": {
                "prefix": [
                        "add_blog_option",
                        "abo"
                ],
                "body": "add_blog_option(${1:\\$id:integer},${2:\\$option:string},${3:\\$value:mixed} )",
                "description": "Add a new option for a given blog ID."
        },
        "ƒ:add_clean_index": {
                "prefix": [
                        "add_clean_index",
                        "aci"
                ],
                "body": "add_clean_index(${1:\\$table:string},${2:\\$index:string} )",
                "description": "Adds an index to a specified table."
        },
        "ƒ:add_comment_meta": {
                "prefix": [
                        "add_comment_meta",
                        "acm"
                ],
                "body": "add_comment_meta(${1:\\$comment_id:integer},${2:\\$meta_key:string},${3:\\$meta_value:mixed},${4:\\$unique:boolean} )",
                "description": "Adds meta data field to a comment."
        },
        "ƒ:add_comments_page": {
                "prefix": [
                        "add_comments_page",
                        "acp"
                ],
                "body": "add_comments_page(${1:\\$page_title:string},${2:\\$menu_title:string},${3:\\$capability:string},${4:\\$menu_slug:string},${5:\\$callback:callable},${6:\\$position:integer|null} )",
                "description": "Adds a submenu page to the Comments main menu."
        },
        "ƒ:add_contextual_help": {
                "prefix": [
                        "add_contextual_help",
                        "ach"
                ],
                "body": "add_contextual_help(${1:\\$screen:string},${2:\\$help:string} )",
                "description": "Add contextual help text for a page."
        },
        "ƒ:add_cssclass": {
                "prefix": [
                        "add_cssclass",
                        "ac"
                ],
                "body": "add_cssclass(${1:\\$class_to_add:string},${2:\\$classes:string} )",
                "description": "Adds a CSS class to a string."
        },
        "ƒ:add_custom_background": {
                "prefix": [
                        "add_custom_background",
                        "acb"
                ],
                "body": "add_custom_background(${1:\\$wp_head_callback:callable},${2:\\$admin_head_callback:callable},${3:\\$admin_preview_callback:callable} )",
                "description": "Add callbacks for background image display."
        },
        "ƒ:add_custom_image_header": {
                "prefix": [
                        "add_custom_image_header",
                        "acih"
                ],
                "body": "add_custom_image_header(${1:\\$wp_head_callback:callable},${2:\\$admin_head_callback:callable},${3:\\$admin_preview_callback:callable} )",
                "description": "Add callbacks for image header display."
        },
        "ƒ:add_dashboard_page": {
                "prefix": [
                        "add_dashboard_page",
                        "adp"
                ],
                "body": "add_dashboard_page(${1:\\$page_title:string},${2:\\$menu_title:string},${3:\\$capability:string},${4:\\$menu_slug:string},${5:\\$callback:callable},${6:\\$position:integer|null} )",
                "description": "Adds a submenu page to the Dashboard main menu."
        },
        "ƒ:add_editor_style": {
                "prefix": [
                        "add_editor_style",
                        "aes"
                ],
                "body": "add_editor_style(${1:\\$stylesheet:array|string} )",
                "description": "Adds callback for custom TinyMCE editor stylesheets."
        },
        "ƒ:add_existing_user_to_blog": {
                "prefix": [
                        "add_existing_user_to_blog",
                        "aeutb"
                ],
                "body": "add_existing_user_to_blog(${1:\\$details:array|false} )",
                "description": "Adds a user to a blog based on details from maybe_add_existing_user_to_blog()."
        },
        "ƒ:add_feed": {
                "prefix": [
                        "add_feed",
                        "af"
                ],
                "body": "add_feed(${1:\\$feedname:string},${2:\\$function:callable} )",
                "description": "Adds a new feed type like /atom1/."
        },
        "ƒ:add_filter": {
                "prefix": [
                        "add_filter",
                        "af"
                ],
                "body": "add_filter(${1:\\$hook_name:string},${2:\\$callback:callable},${3:\\$priority:integer},${4:\\$accepted_args:integer} )",
                "description": "Adds a callback function to a filter hook."
        },
        "ƒ:add_image_size": {
                "prefix": [
                        "add_image_size",
                        "ais"
                ],
                "body": "add_image_size(${1:\\$name:string},${2:\\$width:integer},${3:\\$height:integer},${4:\\$crop:boolean|array} )",
                "description": "Register a new image size."
        },
        "ƒ:add_link": {
                "prefix": [
                        "add_link",
                        "al"
                ],
                "body": "add_link()",
                "description": "Add a link to using values provided in $_POST."
        },
        "ƒ:add_links_page": {
                "prefix": [
                        "add_links_page",
                        "alp"
                ],
                "body": "add_links_page(${1:\\$page_title:string},${2:\\$menu_title:string},${3:\\$capability:string},${4:\\$menu_slug:string},${5:\\$callback:callable},${6:\\$position:integer|null} )",
                "description": "Adds a submenu page to the Links main menu."
        },
        "ƒ:add_magic_quotes": {
                "prefix": [
                        "add_magic_quotes",
                        "amq"
                ],
                "body": "add_magic_quotes(${1:\\$array:array} )",
                "description": "Walks the array while sanitizing the contents."
        },
        "ƒ:add_management_page": {
                "prefix": [
                        "add_management_page",
                        "amp"
                ],
                "body": "add_management_page(${1:\\$page_title:string},${2:\\$menu_title:string},${3:\\$capability:string},${4:\\$menu_slug:string},${5:\\$callback:callable},${6:\\$position:integer|null} )",
                "description": "Adds a submenu page to the Tools main menu."
        },
        "ƒ:add_media_page": {
                "prefix": [
                        "add_media_page",
                        "amp"
                ],
                "body": "add_media_page(${1:\\$page_title:string},${2:\\$menu_title:string},${3:\\$capability:string},${4:\\$menu_slug:string},${5:\\$callback:callable},${6:\\$position:integer|null} )",
                "description": "Adds a submenu page to the Media main menu."
        },
        "ƒ:add_menu_classes": {
                "prefix": [
                        "add_menu_classes",
                        "amc"
                ],
                "body": "add_menu_classes(${1:\\$menu:array} )",
                "description": "Adds CSS classes for top-level administration menu items."
        },
        "ƒ:add_menu_page": {
                "prefix": [
                        "add_menu_page",
                        "amp"
                ],
                "body": "add_menu_page(${1:\\$page_title:string},${2:\\$menu_title:string},${3:\\$capability:string},${4:\\$menu_slug:string},${5:\\$callback:callable},${6:\\$icon_url:string},${7:\\$position:integer|float|null} )",
                "description": "Adds a top-level menu page."
        },
        "ƒ:add_meta": {
                "prefix": [
                        "add_meta",
                        "am"
                ],
                "body": "add_meta(${1:\\$post_ID:integer} )",
                "description": "Adds post meta data defined in the `$_POST` superglobal for a post with given ID."
        },
        "ƒ:add_meta_box": {
                "prefix": [
                        "add_meta_box",
                        "amb"
                ],
                "body": "add_meta_box(${1:\\$id:string},${2:\\$title:string},${3:\\$callback:callable},${4:\\$screen:string|array|WP_Screen|null},${5:\\$context:string},${6:\\$priority:string},${7:\\$callback_args:array|null} )",
                "description": "Adds a meta box to one or more screens."
        },
        "ƒ:add_metadata": {
                "prefix": [
                        "add_metadata",
                        "am"
                ],
                "body": "add_metadata(${1:\\$meta_type:string},${2:\\$object_id:integer},${3:\\$meta_key:string},${4:\\$meta_value:mixed},${5:\\$unique:boolean} )",
                "description": "Adds metadata for the specified object."
        },
        "ƒ:add_network_option": {
                "prefix": [
                        "add_network_option",
                        "ano"
                ],
                "body": "add_network_option(${1:\\$network_id:integer},${2:\\$option:string},${3:\\$value:mixed} )",
                "description": "Adds a new network option."
        },
        "ƒ:add_new_user_to_blog": {
                "prefix": [
                        "add_new_user_to_blog",
                        "anutb"
                ],
                "body": "add_new_user_to_blog(${1:\\$user_id:integer},${2:\\$password:string},${3:\\$meta:array} )",
                "description": "Adds a newly created user to the appropriate blog"
        },
        "ƒ:add_object_page": {
                "prefix": [
                        "add_object_page",
                        "aop"
                ],
                "body": "add_object_page(${1:\\$page_title:string},${2:\\$menu_title:string},${3:\\$capability:string},${4:\\$menu_slug:string},${5:\\$callback:callable},${6:\\$icon_url:string} )",
                "description": "Add a top-level menu page in the &#039;objects&#039; section."
        },
        "ƒ:add_option": {
                "prefix": [
                        "add_option",
                        "ao"
                ],
                "body": "add_option(${1:\\$option:string},${2:\\$value:mixed},${3:\\$deprecated:string},${4:\\$autoload:string|boolean} )",
                "description": "Adds a new option."
        },
        "ƒ:add_option_update_handler": {
                "prefix": [
                        "add_option_update_handler",
                        "aouh"
                ],
                "body": "add_option_update_handler(${1:\\$option_group:string},${2:\\$option_name:string},${3:\\$sanitize_callback:callable} )",
                "description": "Register a setting and its sanitization callback"
        },
        "ƒ:add_option_whitelist": {
                "prefix": [
                        "add_option_whitelist",
                        "aow"
                ],
                "body": "add_option_whitelist(${1:\\$new_options:array},${2:\\$options:string|array} )",
                "description": "Adds an array of options to the list of allowed options."
        },
        "ƒ:add_options_page": {
                "prefix": [
                        "add_options_page",
                        "aop"
                ],
                "body": "add_options_page(${1:\\$page_title:string},${2:\\$menu_title:string},${3:\\$capability:string},${4:\\$menu_slug:string},${5:\\$callback:callable},${6:\\$position:integer|null} )",
                "description": "Adds a submenu page to the Settings main menu."
        },
        "ƒ:add_pages_page": {
                "prefix": [
                        "add_pages_page",
                        "app"
                ],
                "body": "add_pages_page(${1:\\$page_title:string},${2:\\$menu_title:string},${3:\\$capability:string},${4:\\$menu_slug:string},${5:\\$callback:callable},${6:\\$position:integer|null} )",
                "description": "Adds a submenu page to the Pages main menu."
        },
        "ƒ:add_permastruct": {
                "prefix": [
                        "add_permastruct",
                        "ap"
                ],
                "body": "add_permastruct(${1:\\$name:string},${2:\\$struct:string},${3:\\$args:array} )",
                "description": "Adds a permalink structure."
        },
        "ƒ:add_ping": {
                "prefix": [
                        "add_ping",
                        "ap"
                ],
                "body": "add_ping(${1:\\$post_id:integer|WP_Post},${2:\\$uri:string|array} )",
                "description": "Add a URL to those already pinged."
        },
        "ƒ:add_plugins_page": {
                "prefix": [
                        "add_plugins_page",
                        "app"
                ],
                "body": "add_plugins_page(${1:\\$page_title:string},${2:\\$menu_title:string},${3:\\$capability:string},${4:\\$menu_slug:string},${5:\\$callback:callable},${6:\\$position:integer|null} )",
                "description": "Adds a submenu page to the Plugins main menu."
        },
        "ƒ:add_post_meta": {
                "prefix": [
                        "add_post_meta",
                        "apm"
                ],
                "body": "add_post_meta(${1:\\$post_id:integer},${2:\\$meta_key:string},${3:\\$meta_value:mixed},${4:\\$unique:boolean} )",
                "description": "Adds a meta field to the given post."
        },
        "ƒ:add_post_type_support": {
                "prefix": [
                        "add_post_type_support",
                        "apts"
                ],
                "body": "add_post_type_support(${1:\\$post_type:string},${2:\\$feature:string|array},${3:\\$args:mixed} )",
                "description": "Registers support of certain features for a post type."
        },
        "ƒ:add_posts_page": {
                "prefix": [
                        "add_posts_page",
                        "app"
                ],
                "body": "add_posts_page(${1:\\$page_title:string},${2:\\$menu_title:string},${3:\\$capability:string},${4:\\$menu_slug:string},${5:\\$callback:callable},${6:\\$position:integer|null} )",
                "description": "Adds a submenu page to the Posts main menu."
        },
        "ƒ:add_query_arg": {
                "prefix": [
                        "add_query_arg",
                        "aqa"
                ],
                "body": "add_query_arg(${1:\\$args:} )",
                "description": "Retrieves a modified URL query string."
        },
        "ƒ:add_rewrite_endpoint": {
                "prefix": [
                        "add_rewrite_endpoint",
                        "are"
                ],
                "body": "add_rewrite_endpoint(${1:\\$name:string},${2:\\$places:integer},${3:\\$query_var:string|boolean} )",
                "description": "Adds an endpoint, like /trackback/."
        },
        "ƒ:add_rewrite_rule": {
                "prefix": [
                        "add_rewrite_rule",
                        "arr"
                ],
                "body": "add_rewrite_rule(${1:\\$regex:string},${2:\\$query:string|array},${3:\\$after:string} )",
                "description": "Adds a rewrite rule that transforms a URL structure to a set of query vars."
        },
        "ƒ:add_rewrite_tag": {
                "prefix": [
                        "add_rewrite_tag",
                        "art"
                ],
                "body": "add_rewrite_tag(${1:\\$tag:string},${2:\\$regex:string},${3:\\$query:string} )",
                "description": "Adds a new rewrite tag (like %postname%)."
        },
        "ƒ:add_role": {
                "prefix": [
                        "add_role",
                        "ar"
                ],
                "body": "add_role(${1:\\$role:string},${2:\\$display_name:string},${3:\\$capabilities:array} )",
                "description": "Adds a role, if it does not exist."
        },
        "ƒ:add_screen_option": {
                "prefix": [
                        "add_screen_option",
                        "aso"
                ],
                "body": "add_screen_option(${1:\\$option:string},${2:\\$args:mixed} )",
                "description": "Register and configure an admin screen option"
        },
        "ƒ:add_settings_error": {
                "prefix": [
                        "add_settings_error",
                        "ase"
                ],
                "body": "add_settings_error(${1:\\$setting:string},${2:\\$code:string},${3:\\$message:string},${4:\\$type:string} )",
                "description": "Registers a settings error to be displayed to the user."
        },
        "ƒ:add_settings_field": {
                "prefix": [
                        "add_settings_field",
                        "asf"
                ],
                "body": "add_settings_field(${1:\\$id:string},${2:\\$title:string},${3:\\$callback:callable},${4:\\$page:string},${5:\\$section:string},${6:\\$args:array} )",
                "description": "Adds a new field to a section of a settings page."
        },
        "ƒ:add_settings_section": {
                "prefix": [
                        "add_settings_section",
                        "ass"
                ],
                "body": "add_settings_section(${1:\\$id:string},${2:\\$title:string},${3:\\$callback:callable},${4:\\$page:string} )",
                "description": "Adds a new section to a settings page."
        },
        "ƒ:add_shortcode": {
                "prefix": [
                        "add_shortcode",
                        "as"
                ],
                "body": "add_shortcode(${1:\\$tag:string},${2:\\$callback:callable} )",
                "description": "Adds a new shortcode."
        },
        "ƒ:add_site_meta": {
                "prefix": [
                        "add_site_meta",
                        "asm"
                ],
                "body": "add_site_meta(${1:\\$site_id:integer},${2:\\$meta_key:string},${3:\\$meta_value:mixed},${4:\\$unique:boolean} )",
                "description": "Adds metadata to a site."
        },
        "ƒ:add_site_option": {
                "prefix": [
                        "add_site_option",
                        "aso"
                ],
                "body": "add_site_option(${1:\\$option:string},${2:\\$value:mixed} )",
                "description": "Adds a new option for the current network."
        },
        "ƒ:add_submenu_page": {
                "prefix": [
                        "add_submenu_page",
                        "asp"
                ],
                "body": "add_submenu_page(${1:\\$parent_slug:string},${2:\\$page_title:string},${3:\\$menu_title:string},${4:\\$capability:string},${5:\\$menu_slug:string},${6:\\$callback:callable},${7:\\$position:integer|float|null} )",
                "description": "Adds a submenu page."
        },
        "ƒ:add_term_meta": {
                "prefix": [
                        "add_term_meta",
                        "atm"
                ],
                "body": "add_term_meta(${1:\\$term_id:integer},${2:\\$meta_key:string},${3:\\$meta_value:mixed},${4:\\$unique:boolean} )",
                "description": "Adds metadata to a term."
        },
        "ƒ:add_theme_page": {
                "prefix": [
                        "add_theme_page",
                        "atp"
                ],
                "body": "add_theme_page(${1:\\$page_title:string},${2:\\$menu_title:string},${3:\\$capability:string},${4:\\$menu_slug:string},${5:\\$callback:callable},${6:\\$position:integer|null} )",
                "description": "Adds a submenu page to the Appearance main menu."
        },
        "ƒ:add_theme_support": {
                "prefix": [
                        "add_theme_support",
                        "ats"
                ],
                "body": "add_theme_support(${1:\\$feature:string},${2:\\$args:mixed} )",
                "description": "Registers theme support for a given feature."
        },
        "ƒ:add_thickbox": {
                "prefix": [
                        "add_thickbox",
                        "at"
                ],
                "body": "add_thickbox()",
                "description": "Enqueues the default ThickBox js and css."
        },
        "ƒ:add_user": {
                "prefix": [
                        "add_user",
                        "au"
                ],
                "body": "add_user()",
                "description": "Creates a new user from the &quot;Users&quot; form using $_POST information."
        },
        "ƒ:add_user_meta": {
                "prefix": [
                        "add_user_meta",
                        "aum"
                ],
                "body": "add_user_meta(${1:\\$user_id:integer},${2:\\$meta_key:string},${3:\\$meta_value:mixed},${4:\\$unique:boolean} )",
                "description": "Adds meta data to a user."
        },
        "ƒ:add_user_to_blog": {
                "prefix": [
                        "add_user_to_blog",
                        "autb"
                ],
                "body": "add_user_to_blog(${1:\\$blog_id:integer},${2:\\$user_id:integer},${3:\\$role:string} )",
                "description": "Adds a user to a blog, along with specifying the user&#039;s role."
        },
        "ƒ:add_users_page": {
                "prefix": [
                        "add_users_page",
                        "aup"
                ],
                "body": "add_users_page(${1:\\$page_title:string},${2:\\$menu_title:string},${3:\\$capability:string},${4:\\$menu_slug:string},${5:\\$callback:callable},${6:\\$position:integer|null} )",
                "description": "Adds a submenu page to the Users/Profile main menu."
        },
        "ƒ:add_utility_page": {
                "prefix": [
                        "add_utility_page",
                        "aup"
                ],
                "body": "add_utility_page(${1:\\$page_title:string},${2:\\$menu_title:string},${3:\\$capability:string},${4:\\$menu_slug:string},${5:\\$callback:callable},${6:\\$icon_url:string} )",
                "description": "Add a top-level menu page in the &#039;utility&#039; section."
        },
        "ƒ:addslashes_gpc": {
                "prefix": [
                        "addslashes_gpc",
                        "ag"
                ],
                "body": "addslashes_gpc(${1:\\$gpc:string|array} )",
                "description": "Adds slashes to a string or recursively adds slashes to strings within an array."
        },
        "ƒ:addslashes_strings_only": {
                "prefix": [
                        "addslashes_strings_only",
                        "aso"
                ],
                "body": "addslashes_strings_only(${1:\\$value:mixed} )",
                "description": "Adds slashes only if the provided value is a string."
        },
        "ƒ:adjacent_image_link": {
                "prefix": [
                        "adjacent_image_link",
                        "ail"
                ],
                "body": "adjacent_image_link(${1:\\$prev:boolean},${2:\\$size:string|array},${3:\\$text:boolean} )",
                "description": "Displays next or previous image link that has the same post parent."
        },
        "ƒ:adjacent_post_link": {
                "prefix": [
                        "adjacent_post_link",
                        "apl"
                ],
                "body": "adjacent_post_link(${1:\\$format:string},${2:\\$link:string},${3:\\$in_same_term:boolean},${4:\\$excluded_terms:array|string},${5:\\$previous:boolean},${6:\\$taxonomy:string} )",
                "description": "Displays the adjacent post link."
        },
        "ƒ:adjacent_posts_rel_link": {
                "prefix": [
                        "adjacent_posts_rel_link",
                        "aprl"
                ],
                "body": "adjacent_posts_rel_link(${1:\\$title:string},${2:\\$in_same_term:boolean},${3:\\$excluded_terms:array|string},${4:\\$taxonomy:string} )",
                "description": "Displays the relational links for the posts adjacent to the current post."
        },
        "ƒ:adjacent_posts_rel_link_wp_head": {
                "prefix": [
                        "adjacent_posts_rel_link_wp_head",
                        "aprlwh"
                ],
                "body": "adjacent_posts_rel_link_wp_head()",
                "description": "Displays relational links for the posts adjacent to the current post for single post pages."
        },
        "ƒ:admin_color_scheme_picker": {
                "prefix": [
                        "admin_color_scheme_picker",
                        "acsp"
                ],
                "body": "admin_color_scheme_picker(${1:\\$user_id:integer} )",
                "description": "Displays the default admin color scheme picker (Used in user-edit.php)."
        },
        "ƒ:admin_created_user_email": {
                "prefix": [
                        "admin_created_user_email",
                        "acue"
                ],
                "body": "admin_created_user_email(${1:\\$text:string} )",
                "description": ""
        },
        "ƒ:admin_url": {
                "prefix": [
                        "admin_url",
                        "au"
                ],
                "body": "admin_url(${1:\\$path:string},${2:\\$scheme:string} )",
                "description": "Retrieves the URL to the admin area for the current site."
        },
        "ƒ:allow_subdirectory_install": {
                "prefix": [
                        "allow_subdirectory_install",
                        "asi"
                ],
                "body": "allow_subdirectory_install()",
                "description": "Allow subdirectory installation."
        },
        "ƒ:allow_subdomain_install": {
                "prefix": [
                        "allow_subdomain_install",
                        "asi"
                ],
                "body": "allow_subdomain_install()",
                "description": "Allow subdomain installation"
        },
        "ƒ:allowed_http_request_hosts": {
                "prefix": [
                        "allowed_http_request_hosts",
                        "ahrh"
                ],
                "body": "allowed_http_request_hosts(${1:\\$is_external:boolean},${2:\\$host:string} )",
                "description": "Mark allowed redirect hosts safe for HTTP requests as well."
        },
        "ƒ:allowed_tags": {
                "prefix": [
                        "allowed_tags",
                        "at"
                ],
                "body": "allowed_tags()",
                "description": "Display all of the allowed tags in HTML format with attributes."
        },
        "ƒ:antispambot": {
                "prefix": [
                        "antispambot"
                ],
                "body": "antispambot(${1:\\$email_address:string},${2:\\$hex_encoding:integer} )",
                "description": "Converts email addresses characters to HTML entities to block spam bots."
        },
        "ƒ:apache_mod_loaded": {
                "prefix": [
                        "apache_mod_loaded",
                        "aml"
                ],
                "body": "apache_mod_loaded(${1:\\$mod:string},${2:\\$default:boolean} )",
                "description": "Does the specified module exist in the Apache config?"
        },
        "ƒ:apply_filters": {
                "prefix": [
                        "apply_filters",
                        "af"
                ],
                "body": "apply_filters(${1:\\$hook_name:string},${2:\\$value:mixed},${3:\\$args:mixed} )",
                "description": "Calls the callback functions that have been added to a filter hook."
        },
        "ƒ:apply_filters_deprecated": {
                "prefix": [
                        "apply_filters_deprecated",
                        "afd"
                ],
                "body": "apply_filters_deprecated(${1:\\$hook_name:string},${2:\\$args:array},${3:\\$version:string},${4:\\$replacement:string},${5:\\$message:string} )",
                "description": "Fires functions attached to a deprecated filter hook."
        },
        "ƒ:apply_filters_ref_array": {
                "prefix": [
                        "apply_filters_ref_array",
                        "afra"
                ],
                "body": "apply_filters_ref_array(${1:\\$hook_name:string},${2:\\$args:array} )",
                "description": "Calls the callback functions that have been added to a filter hook, specifying arguments in an array."
        },
        "ƒ:apply_shortcodes": {
                "prefix": [
                        "apply_shortcodes",
                        "as"
                ],
                "body": "apply_shortcodes(${1:\\$content:string},${2:\\$ignore_html:boolean} )",
                "description": "Search content for shortcodes and filter shortcodes through their hooks."
        },
        "ƒ:array_key_first": {
                "prefix": [
                        "array_key_first",
                        "akf"
                ],
                "body": "array_key_first(${1:\\$arr:array} )",
                "description": "Polyfill for array_key_first() function added in PHP 7.3."
        },
        "ƒ:array_key_last": {
                "prefix": [
                        "array_key_last",
                        "akl"
                ],
                "body": "array_key_last(${1:\\$arr:array} )",
                "description": "Polyfill for `array_key_last()` function added in PHP 7.3."
        },
        "ƒ:atom_enclosure": {
                "prefix": [
                        "atom_enclosure",
                        "ae"
                ],
                "body": "atom_enclosure()",
                "description": "Display the atom enclosure for the current post."
        },
        "ƒ:atom_site_icon": {
                "prefix": [
                        "atom_site_icon",
                        "asi"
                ],
                "body": "atom_site_icon()",
                "description": "Displays Site Icon in atom feeds."
        },
        "ƒ:attachment_id3_data_meta_box": {
                "prefix": [
                        "attachment_id3_data_meta_box",
                        "aidmb"
                ],
                "body": "attachment_id3_data_meta_box(${1:\\$post:WP_Post} )",
                "description": "Displays fields for ID3 data."
        },
        "ƒ:attachment_submit_meta_box": {
                "prefix": [
                        "attachment_submit_meta_box",
                        "asmb"
                ],
                "body": "attachment_submit_meta_box(${1:\\$post:WP_Post} )",
                "description": "Displays attachment submit form fields."
        },
        "ƒ:attachment_submitbox_metadata": {
                "prefix": [
                        "attachment_submitbox_metadata",
                        "asm"
                ],
                "body": "attachment_submitbox_metadata()",
                "description": "Displays non-editable attachment metadata in the publish meta box."
        },
        "ƒ:attachment_url_to_postid": {
                "prefix": [
                        "attachment_url_to_postid",
                        "autp"
                ],
                "body": "attachment_url_to_postid(${1:\\$url:string} )",
                "description": "Tries to convert an attachment URL into a post ID."
        },
        "ƒ:attribute_escape": {
                "prefix": [
                        "attribute_escape",
                        "ae"
                ],
                "body": "attribute_escape(${1:\\$text:string} )",
                "description": "Escaping for HTML attributes."
        },
        "ƒ:auth_redirect": {
                "prefix": [
                        "auth_redirect",
                        "ar"
                ],
                "body": "auth_redirect()",
                "description": "Checks if a user is logged in, if not it redirects them to the login page."
        },
        "ƒ:author_can": {
                "prefix": [
                        "author_can",
                        "ac"
                ],
                "body": "author_can(${1:\\$post:integer|WP_Post},${2:\\$capability:string},${3:\\$args:mixed} )",
                "description": "Returns whether the author of the supplied post has the specified capability."
        },
        "ƒ:automatic_feed_links": {
                "prefix": [
                        "automatic_feed_links",
                        "afl"
                ],
                "body": "automatic_feed_links(${1:\\$add:boolean} )",
                "description": "Enable/disable automatic general feed link outputting."
        },
        "ƒ:avoid_blog_page_permalink_collision": {
                "prefix": [
                        "avoid_blog_page_permalink_collision",
                        "abppc"
                ],
                "body": "avoid_blog_page_permalink_collision(${1:\\$data:array},${2:\\$postarr:array} )",
                "description": "Avoids a collision between a site slug and a permalink slug."
        },
        "ƒ:background_color": {
                "prefix": [
                        "background_color",
                        "bc"
                ],
                "body": "background_color()",
                "description": "Displays background color value."
        },
        "ƒ:background_image": {
                "prefix": [
                        "background_image",
                        "bi"
                ],
                "body": "background_image()",
                "description": "Displays background image path."
        },
        "ƒ:backslashit": {
                "prefix": [
                        "backslashit"
                ],
                "body": "backslashit(${1:\\$string:string} )",
                "description": "Adds backslashes before letters and before a number at the start of a string."
        },
        "ƒ:balanceTags": {
                "prefix": [
                        "balanceTags"
                ],
                "body": "balanceTags(${1:\\$text:string},${2:\\$force:boolean} )",
                "description": "Balances tags if forced to, or if the &#039;use_balanceTags&#039; option is set to true."
        },
        "ƒ:before_last_bar": {
                "prefix": [
                        "before_last_bar",
                        "blb"
                ],
                "body": "before_last_bar(${1:\\$string:string} )",
                "description": "Remove last item on a pipe-delimited string."
        },
        "ƒ:block_core_calendar_has_published_posts": {
                "prefix": [
                        "block_core_calendar_has_published_posts",
                        "bcchpp"
                ],
                "body": "block_core_calendar_has_published_posts()",
                "description": "Returns whether or not there are any published posts."
        },
        "ƒ:block_core_calendar_update_has_published_post_on_delete": {
                "prefix": [
                        "block_core_calendar_update_has_published_post_on_delete",
                        "bccuhppod"
                ],
                "body": "block_core_calendar_update_has_published_post_on_delete(${1:\\$post_id:integer} )",
                "description": "Handler for updating the has published posts flag when a post is deleted."
        },
        "ƒ:block_core_calendar_update_has_published_post_on_transition_post_status": {
                "prefix": [
                        "block_core_calendar_update_has_published_post_on_transition_post_status",
                        "bccuhppotps"
                ],
                "body": "block_core_calendar_update_has_published_post_on_transition_post_status(${1:\\$new_status:string},${2:\\$old_status:string},${3:\\$post:WP_Post} )",
                "description": "Handler for updating the has published posts flag when a post status changes."
        },
        "ƒ:block_core_calendar_update_has_published_posts": {
                "prefix": [
                        "block_core_calendar_update_has_published_posts",
                        "bccuhpp"
                ],
                "body": "block_core_calendar_update_has_published_posts()",
                "description": "Queries the database for any published post and saves a flag whether any published post exists or not."
        },
        "ƒ:block_core_comment_template_render_comments": {
                "prefix": [
                        "block_core_comment_template_render_comments",
                        "bcctrc"
                ],
                "body": "block_core_comment_template_render_comments(${1:\\$comments:array},${2:\\$block:WP_Block} )",
                "description": "Function that recursively renders a list of nested comments."
        },
        "ƒ:block_core_gallery_data_id_backcompatibility": {
                "prefix": [
                        "block_core_gallery_data_id_backcompatibility",
                        "bcgdib"
                ],
                "body": "block_core_gallery_data_id_backcompatibility(${1:\\$parsed_block:array} )",
                "description": "Handles backwards compatibility for Gallery Blocks, whose images feature a `data-id` attribute."
        },
        "ƒ:block_core_gallery_render": {
                "prefix": [
                        "block_core_gallery_render",
                        "bcgr"
                ],
                "body": "block_core_gallery_render(${1:\\$attributes:array},${2:\\$content:string} )",
                "description": "Adds a style tag for the --wp--style--unstable-gallery-gap var."
        },
        "ƒ:block_core_home_link_build_css_colors": {
                "prefix": [
                        "block_core_home_link_build_css_colors",
                        "bchlbcc"
                ],
                "body": "block_core_home_link_build_css_colors(${1:\\$context:array} )",
                "description": "Build an array with CSS classes and inline styles defining the colors which will be applied to the home link markup in the front-end."
        },
        "ƒ:block_core_home_link_build_css_font_sizes": {
                "prefix": [
                        "block_core_home_link_build_css_font_sizes",
                        "bchlbcfs"
                ],
                "body": "block_core_home_link_build_css_font_sizes(${1:\\$context:array} )",
                "description": "Build an array with CSS classes and inline styles defining the font sizes which will be applied to the home link markup in the front-end."
        },
        "ƒ:block_core_home_link_build_li_wrapper_attributes": {
                "prefix": [
                        "block_core_home_link_build_li_wrapper_attributes",
                        "bchlblwa"
                ],
                "body": "block_core_home_link_build_li_wrapper_attributes(${1:\\$context:array} )",
                "description": "Builds an array with classes and style for the li wrapper"
        },
        "ƒ:block_core_latest_posts_get_excerpt_length": {
                "prefix": [
                        "block_core_latest_posts_get_excerpt_length",
                        "bclpgel"
                ],
                "body": "block_core_latest_posts_get_excerpt_length()",
                "description": "Callback for the excerpt_length filter used by the Latest Posts block at render time."
        },
        "ƒ:block_core_latest_posts_migrate_categories": {
                "prefix": [
                        "block_core_latest_posts_migrate_categories",
                        "bclpmc"
                ],
                "body": "block_core_latest_posts_migrate_categories(${1:\\$block:array} )",
                "description": "Handles outdated versions of the `core/latest-posts` block by converting attribute `categories` from a numeric string to an array with key `id`."
        },
        "ƒ:block_core_navigation_build_css_colors": {
                "prefix": [
                        "block_core_navigation_build_css_colors",
                        "bcnbcc"
                ],
                "body": "block_core_navigation_build_css_colors(${1:\\$attributes:array} )",
                "description": "Build an array with CSS classes and inline styles defining the colors which will be applied to the navigation markup in the front-end."
        },
        "ƒ:block_core_navigation_build_css_font_sizes": {
                "prefix": [
                        "block_core_navigation_build_css_font_sizes",
                        "bcnbcfs"
                ],
                "body": "block_core_navigation_build_css_font_sizes(${1:\\$attributes:array} )",
                "description": "Build an array with CSS classes and inline styles defining the font sizes which will be applied to the navigation markup in the front-end."
        },
        "ƒ:block_core_navigation_filter_out_empty_blocks": {
                "prefix": [
                        "block_core_navigation_filter_out_empty_blocks",
                        "bcnfoeb"
                ],
                "body": "block_core_navigation_filter_out_empty_blocks(${1:\\$parsed_blocks:array} )",
                "description": "Filter out empty &quot;null&quot; blocks from the block list."
        },
        "ƒ:block_core_navigation_from_block_get_post_ids": {
                "prefix": [
                        "block_core_navigation_from_block_get_post_ids",
                        "bcnfbgpi"
                ],
                "body": "block_core_navigation_from_block_get_post_ids(${1:\\$block:WP_Block} )",
                "description": "Get post IDs from a navigation link block instance."
        },
        "ƒ:block_core_navigation_get_fallback_blocks": {
                "prefix": [
                        "block_core_navigation_get_fallback_blocks",
                        "bcngfb"
                ],
                "body": "block_core_navigation_get_fallback_blocks()",
                "description": "Retrieves the appropriate fallback to be used on the front of the site when there is no menu assigned to the Nav block."
        },
        "ƒ:block_core_navigation_get_first_non_empty_navigation": {
                "prefix": [
                        "block_core_navigation_get_first_non_empty_navigation",
                        "bcngfnen"
                ],
                "body": "block_core_navigation_get_first_non_empty_navigation()",
                "description": "Finds the first non-empty `wp_navigation` Post."
        },
        "ƒ:block_core_navigation_get_menu_items_at_location": {
                "prefix": [
                        "block_core_navigation_get_menu_items_at_location",
                        "bcngmial"
                ],
                "body": "block_core_navigation_get_menu_items_at_location(${1:\\$location:string} )",
                "description": "Returns the menu items for a WordPress menu location."
        },
        "ƒ:block_core_navigation_get_post_ids": {
                "prefix": [
                        "block_core_navigation_get_post_ids",
                        "bcngpi"
                ],
                "body": "block_core_navigation_get_post_ids(${1:\\$inner_blocks:WP_Block_List} )",
                "description": "Iterate through all inner blocks recursively and get navigation link block&#039;s post IDs."
        },
        "ƒ:block_core_navigation_link_build_css_colors": {
                "prefix": [
                        "block_core_navigation_link_build_css_colors",
                        "bcnlbcc"
                ],
                "body": "block_core_navigation_link_build_css_colors(${1:\\$context:array},${2:\\$attributes:array} )",
                "description": "Build an array with CSS classes and inline styles defining the colors which will be applied to the navigation markup in the front-end."
        },
        "ƒ:block_core_navigation_link_build_css_font_sizes": {
                "prefix": [
                        "block_core_navigation_link_build_css_font_sizes",
                        "bcnlbcfs"
                ],
                "body": "block_core_navigation_link_build_css_font_sizes(${1:\\$context:array} )",
                "description": "Build an array with CSS classes and inline styles defining the font sizes which will be applied to the navigation markup in the front-end."
        },
        "ƒ:block_core_navigation_link_render_submenu_icon": {
                "prefix": [
                        "block_core_navigation_link_render_submenu_icon",
                        "bcnlrsi"
                ],
                "body": "block_core_navigation_link_render_submenu_icon()",
                "description": "Returns the top-level submenu SVG chevron icon."
        },
        "ƒ:block_core_navigation_parse_blocks_from_menu_items": {
                "prefix": [
                        "block_core_navigation_parse_blocks_from_menu_items",
                        "bcnpbfmi"
                ],
                "body": "block_core_navigation_parse_blocks_from_menu_items(${1:\\$menu_items:array},${2:\\$menu_items_by_parent_id:array} )",
                "description": "Turns menu item data into a nested array of parsed blocks"
        },
        "ƒ:block_core_navigation_render_submenu_icon": {
                "prefix": [
                        "block_core_navigation_render_submenu_icon",
                        "bcnrsi"
                ],
                "body": "block_core_navigation_render_submenu_icon()",
                "description": "Returns the top-level submenu SVG chevron icon."
        },
        "ƒ:block_core_navigation_sort_menu_items_by_parent_id": {
                "prefix": [
                        "block_core_navigation_sort_menu_items_by_parent_id",
                        "bcnsmibpi"
                ],
                "body": "block_core_navigation_sort_menu_items_by_parent_id(${1:\\$menu_items:array} )",
                "description": "Sorts a standard array of menu items into a nested structure keyed by the id of the parent menu."
        },
        "ƒ:block_core_navigation_submenu_build_css_colors": {
                "prefix": [
                        "block_core_navigation_submenu_build_css_colors",
                        "bcnsbcc"
                ],
                "body": "block_core_navigation_submenu_build_css_colors(${1:\\$context:array},${2:\\$attributes:array} )",
                "description": "Build an array with CSS classes and inline styles defining the colors which will be applied to the navigation markup in the front-end."
        },
        "ƒ:block_core_navigation_submenu_build_css_font_sizes": {
                "prefix": [
                        "block_core_navigation_submenu_build_css_font_sizes",
                        "bcnsbcfs"
                ],
                "body": "block_core_navigation_submenu_build_css_font_sizes(${1:\\$context:array} )",
                "description": "Build an array with CSS classes and inline styles defining the font sizes which will be applied to the navigation markup in the front-end."
        },
        "ƒ:block_core_navigation_submenu_render_submenu_icon": {
                "prefix": [
                        "block_core_navigation_submenu_render_submenu_icon",
                        "bcnsrsi"
                ],
                "body": "block_core_navigation_submenu_render_submenu_icon()",
                "description": "Returns the top-level submenu SVG chevron icon."
        },
        "ƒ:block_core_navigation_typographic_presets_backcompatibility": {
                "prefix": [
                        "block_core_navigation_typographic_presets_backcompatibility",
                        "bcntpb"
                ],
                "body": "block_core_navigation_typographic_presets_backcompatibility(${1:\\$parsed_block:array} )",
                "description": "Filter that changes the parsed attribute values of navigation blocks contain typographic presets to contain the values directly."
        },
        "ƒ:block_core_page_list_build_css_colors": {
                "prefix": [
                        "block_core_page_list_build_css_colors",
                        "bcplbcc"
                ],
                "body": "block_core_page_list_build_css_colors(${1:\\$attributes:array},${2:\\$context:array} )",
                "description": "Build an array with CSS classes and inline styles defining the colors which will be applied to the pages markup in the front-end when it is a descendant of navigation."
        },
        "ƒ:block_core_page_list_build_css_font_sizes": {
                "prefix": [
                        "block_core_page_list_build_css_font_sizes",
                        "bcplbcfs"
                ],
                "body": "block_core_page_list_build_css_font_sizes(${1:\\$context:array} )",
                "description": "Build an array with CSS classes and inline styles defining the font sizes which will be applied to the pages markup in the front-end when it is a descendant of navigation."
        },
        "ƒ:block_core_page_list_nest_pages": {
                "prefix": [
                        "block_core_page_list_nest_pages",
                        "bcplnp"
                ],
                "body": "block_core_page_list_nest_pages(${1:\\$current_level:array},${2:\\$children:array} )",
                "description": "Outputs nested array of pages"
        },
        "ƒ:block_core_page_list_render_nested_page_list": {
                "prefix": [
                        "block_core_page_list_render_nested_page_list",
                        "bcplrnpl"
                ],
                "body": "block_core_page_list_render_nested_page_list(${1:\\$open_submenus_on_click:boolean},${2:\\$show_submenu_icons:boolean},${3:\\$is_navigation_child:boolean},${4:\\$nested_pages:array},${5:\\$active_page_ancestor_ids:array},${6:\\$colors:array},${7:\\$depth:integer} )",
                "description": "Outputs Page list markup from an array of pages with nested children."
        },
        "ƒ:block_core_post_template_uses_featured_image": {
                "prefix": [
                        "block_core_post_template_uses_featured_image",
                        "bcptufi"
                ],
                "body": "block_core_post_template_uses_featured_image(${1:\\$inner_blocks:WP_Block_List} )",
                "description": "Determines whether a block list contains a block that uses the featured image."
        },
        "ƒ:block_core_social_link_get_color_styles": {
                "prefix": [
                        "block_core_social_link_get_color_styles",
                        "bcslgcs"
                ],
                "body": "block_core_social_link_get_color_styles(${1:\\$context:array} )",
                "description": "Returns CSS styles for icon and icon background colors."
        },
        "ƒ:block_core_social_link_get_icon": {
                "prefix": [
                        "block_core_social_link_get_icon",
                        "bcslgi"
                ],
                "body": "block_core_social_link_get_icon(${1:\\$service:string} )",
                "description": "Returns the SVG for social link."
        },
        "ƒ:block_core_social_link_get_name": {
                "prefix": [
                        "block_core_social_link_get_name",
                        "bcslgn"
                ],
                "body": "block_core_social_link_get_name(${1:\\$service:string} )",
                "description": "Returns the brand name for social link."
        },
        "ƒ:block_core_social_link_services": {
                "prefix": [
                        "block_core_social_link_services",
                        "bcsls"
                ],
                "body": "block_core_social_link_services(${1:\\$service:string},${2:\\$field:string} )",
                "description": "Returns the SVG for social link."
        },
        "ƒ:block_editor_rest_api_preload": {
                "prefix": [
                        "block_editor_rest_api_preload",
                        "berap"
                ],
                "body": "block_editor_rest_api_preload(${1:\\$preload_paths:array},${2:\\$block_editor_context:WP_Block_Editor_Context} )",
                "description": "Preloads common data used with the block editor by specifying an array of REST API paths that will be preloaded for a given block editor context."
        },
        "ƒ:block_footer_area": {
                "prefix": [
                        "block_footer_area",
                        "bfa"
                ],
                "body": "block_footer_area()",
                "description": "Print the footer template-part."
        },
        "ƒ:block_has_support": {
                "prefix": [
                        "block_has_support",
                        "bhs"
                ],
                "body": "block_has_support(${1:\\$block_type:WP_Block_Type},${2:\\$feature:string},${3:\\$default:mixed} )",
                "description": "Checks whether the current block type supports the feature requested."
        },
        "ƒ:block_header_area": {
                "prefix": [
                        "block_header_area",
                        "bha"
                ],
                "body": "block_header_area()",
                "description": "Print the header template-part."
        },
        "ƒ:block_template_part": {
                "prefix": [
                        "block_template_part",
                        "btp"
                ],
                "body": "block_template_part(${1:\\$part:string} )",
                "description": "Print a template-part."
        },
        "ƒ:block_version": {
                "prefix": [
                        "block_version",
                        "bv"
                ],
                "body": "block_version(${1:\\$content:string} )",
                "description": "Returns the current version of the block format that the content string is using."
        },
        "ƒ:bloginfo": {
                "prefix": [
                        "bloginfo"
                ],
                "body": "bloginfo(${1:\\$show:string} )",
                "description": "Displays information about the current site."
        },
        "ƒ:bloginfo_rss": {
                "prefix": [
                        "bloginfo_rss",
                        "br"
                ],
                "body": "bloginfo_rss(${1:\\$show:string} )",
                "description": "Display RSS container for the bloginfo function."
        },
        "ƒ:body_class": {
                "prefix": [
                        "body_class",
                        "bc"
                ],
                "body": "body_class(${1:\\$class:string|array} )",
                "description": "Displays the class names for the body element."
        },
        "ƒ:bool_from_yn": {
                "prefix": [
                        "bool_from_yn",
                        "bfy"
                ],
                "body": "bool_from_yn(${1:\\$yn:string} )",
                "description": "Whether input is yes or no."
        },
        "ƒ:build_comment_query_vars_from_block": {
                "prefix": [
                        "build_comment_query_vars_from_block",
                        "bcqvfb"
                ],
                "body": "build_comment_query_vars_from_block(${1:\\$block:WP_Block} )",
                "description": "Helper function that constructs a comment query vars array from the passed block properties."
        },
        "ƒ:build_dropdown_script_block_core_categories": {
                "prefix": [
                        "build_dropdown_script_block_core_categories",
                        "bdsbcc"
                ],
                "body": "build_dropdown_script_block_core_categories(${1:\\$dropdown_id:string} )",
                "description": "Generates the inline script for a categories dropdown field."
        },
        "ƒ:build_query": {
                "prefix": [
                        "build_query",
                        "bq"
                ],
                "body": "build_query(${1:\\$data:array} )",
                "description": "Build URL query based on an associative and, or indexed array."
        },
        "ƒ:build_query_vars_from_query_block": {
                "prefix": [
                        "build_query_vars_from_query_block",
                        "bqvfqb"
                ],
                "body": "build_query_vars_from_query_block(${1:\\$block:WP_Block},${2:\\$page:integer} )",
                "description": "Helper function that constructs a WP_Query args array from a `Query` block properties."
        },
        "ƒ:build_template_part_block_variations": {
                "prefix": [
                        "build_template_part_block_variations",
                        "btpbv"
                ],
                "body": "build_template_part_block_variations()",
                "description": "Returns an array of variation objects for the template part block."
        },
        "ƒ:build_variation_for_navigation_link": {
                "prefix": [
                        "build_variation_for_navigation_link",
                        "bvfnl"
                ],
                "body": "build_variation_for_navigation_link(${1:\\$entity:WP_Taxonomy|WP_Post_Type},${2:\\$kind:string} )",
                "description": "Returns a navigation link variation"
        },
        "ƒ:bulk_edit_posts": {
                "prefix": [
                        "bulk_edit_posts",
                        "bep"
                ],
                "body": "bulk_edit_posts(${1:\\$post_data:array|null} )",
                "description": "Processes the post data for the bulk editing of posts."
        },
        "ƒ:cache_javascript_headers": {
                "prefix": [
                        "cache_javascript_headers",
                        "cjh"
                ],
                "body": "cache_javascript_headers()",
                "description": "Set the headers for caching for 10 days with JavaScript content type."
        },
        "ƒ:cache_users": {
                "prefix": [
                        "cache_users",
                        "cu"
                ],
                "body": "cache_users(${1:\\$user_ids:array} )",
                "description": "Retrieve info for user lists to prevent multiple queries by get_userdata()"
        },
        "ƒ:calendar_week_mod": {
                "prefix": [
                        "calendar_week_mod",
                        "cwm"
                ],
                "body": "calendar_week_mod(${1:\\$num:integer} )",
                "description": "Get number of days since the start of the week."
        },
        "ƒ:can_edit_network": {
                "prefix": [
                        "can_edit_network",
                        "cen"
                ],
                "body": "can_edit_network(${1:\\$network_id:integer} )",
                "description": "Whether or not we can edit this network from this page."
        },
        "ƒ:cancel_comment_reply_link": {
                "prefix": [
                        "cancel_comment_reply_link",
                        "ccrl"
                ],
                "body": "cancel_comment_reply_link(${1:\\$text:string} )",
                "description": "Displays HTML content for cancel comment reply link."
        },
        "ƒ:capital_P_dangit": {
                "prefix": [
                        "capital_P_dangit",
                        "cPd"
                ],
                "body": "capital_P_dangit(${1:\\$text:string} )",
                "description": "Forever eliminate &quot;Wordpress&quot; from the planet (or at least the little bit we can influence)."
        },
        "ƒ:cat_is_ancestor_of": {
                "prefix": [
                        "cat_is_ancestor_of",
                        "ciao"
                ],
                "body": "cat_is_ancestor_of(${1:\\$cat1:integer|object},${2:\\$cat2:integer|object} )",
                "description": "Checks if a category is an ancestor of another category."
        },
        "ƒ:category_description": {
                "prefix": [
                        "category_description",
                        "cd"
                ],
                "body": "category_description(${1:\\$category:integer} )",
                "description": "Retrieves category description."
        },
        "ƒ:category_exists": {
                "prefix": [
                        "category_exists",
                        "ce"
                ],
                "body": "category_exists(${1:\\$cat_name:integer|string},${2:\\$category_parent:integer|null} )",
                "description": "Check whether a category exists."
        },
        "ƒ:check_admin_referer": {
                "prefix": [
                        "check_admin_referer",
                        "car"
                ],
                "body": "check_admin_referer(${1:\\$action:integer|string},${2:\\$query_arg:string} )",
                "description": "Ensures intent by verifying that a user was referred from another admin page with the correct security nonce."
        },
        "ƒ:check_ajax_referer": {
                "prefix": [
                        "check_ajax_referer",
                        "car"
                ],
                "body": "check_ajax_referer(${1:\\$action:integer|string},${2:\\$query_arg:false|string},${3:\\$die:boolean} )",
                "description": "Verifies the Ajax request to prevent processing requests external of the blog."
        },
        "ƒ:check_and_publish_future_post": {
                "prefix": [
                        "check_and_publish_future_post",
                        "capfp"
                ],
                "body": "check_and_publish_future_post(${1:\\$post_id:integer|WP_Post} )",
                "description": "Publish future post and make sure post ID has future post status."
        },
        "ƒ:check_column": {
                "prefix": [
                        "check_column",
                        "cc"
                ],
                "body": "check_column(${1:\\$table_name:string},${2:\\$col_name:string},${3:\\$col_type:string},${4:\\$is_null:boolean|null},${5:\\$key:mixed|null},${6:\\$default_value:mixed|null},${7:\\$extra:mixed|null} )",
                "description": "Checks that database table column matches the criteria."
        },
        "ƒ:check_comment": {
                "prefix": [
                        "check_comment",
                        "cc"
                ],
                "body": "check_comment(${1:\\$author:string},${2:\\$email:string},${3:\\$url:string},${4:\\$comment:string},${5:\\$user_ip:string},${6:\\$user_agent:string},${7:\\$comment_type:string} )",
                "description": "Checks whether a comment passes internal checks to be allowed to add."
        },
        "ƒ:check_comment_flood_db": {
                "prefix": [
                        "check_comment_flood_db",
                        "ccfd"
                ],
                "body": "check_comment_flood_db()",
                "description": "Hooks WP&#039;s native database-based comment-flood check."
        },
        "ƒ:check_import_new_users": {
                "prefix": [
                        "check_import_new_users",
                        "cinu"
                ],
                "body": "check_import_new_users(${1:\\$permission:string} )",
                "description": "Checks if the current user has permissions to import new users."
        },
        "ƒ:check_password_reset_key": {
                "prefix": [
                        "check_password_reset_key",
                        "cprk"
                ],
                "body": "check_password_reset_key(${1:\\$key:string},${2:\\$login:string} )",
                "description": "Retrieves a user row based on password reset key and login."
        },
        "ƒ:check_theme_switched": {
                "prefix": [
                        "check_theme_switched",
                        "cts"
                ],
                "body": "check_theme_switched()",
                "description": "Checks if a theme has been changed and runs &#039;after_switch_theme&#039; hook on the next WP load."
        },
        "ƒ:check_upload_mimes": {
                "prefix": [
                        "check_upload_mimes",
                        "cum"
                ],
                "body": "check_upload_mimes(${1:\\$mimes:array} )",
                "description": "Checks an array of MIME types against a list of allowed types."
        },
        "ƒ:check_upload_size": {
                "prefix": [
                        "check_upload_size",
                        "cus"
                ],
                "body": "check_upload_size(${1:\\$file:array} )",
                "description": "Determine if uploaded file exceeds space quota."
        },
        "ƒ:checked": {
                "prefix": [
                        "checked"
                ],
                "body": "checked(${1:\\$checked:mixed},${2:\\$current:mixed},${3:\\$echo:boolean} )",
                "description": "Outputs the HTML checked attribute."
        },
        "ƒ:choose_primary_blog": {
                "prefix": [
                        "choose_primary_blog",
                        "cpb"
                ],
                "body": "choose_primary_blog()",
                "description": "Handles the display of choosing a user&#039;s primary site."
        },
        "ƒ:classnames_for_block_core_search": {
                "prefix": [
                        "classnames_for_block_core_search",
                        "cfbcs"
                ],
                "body": "classnames_for_block_core_search(${1:\\$attributes:array} )",
                "description": "Builds the correct top level classnames for the &#039;core/search&#039; block."
        },
        "ƒ:clean_attachment_cache": {
                "prefix": [
                        "clean_attachment_cache",
                        "cac"
                ],
                "body": "clean_attachment_cache(${1:\\$id:integer},${2:\\$clean_terms:boolean} )",
                "description": "Will clean the attachment in the cache."
        },
        "ƒ:clean_blog_cache": {
                "prefix": [
                        "clean_blog_cache",
                        "cbc"
                ],
                "body": "clean_blog_cache(${1:\\$blog:WP_Site|integer} )",
                "description": "Clean the blog cache"
        },
        "ƒ:clean_bookmark_cache": {
                "prefix": [
                        "clean_bookmark_cache",
                        "cbc"
                ],
                "body": "clean_bookmark_cache(${1:\\$bookmark_id:integer} )",
                "description": "Deletes the bookmark cache."
        },
        "ƒ:clean_category_cache": {
                "prefix": [
                        "clean_category_cache",
                        "ccc"
                ],
                "body": "clean_category_cache(${1:\\$id:integer} )",
                "description": "Removes the category cache data based on ID."
        },
        "ƒ:clean_comment_cache": {
                "prefix": [
                        "clean_comment_cache",
                        "ccc"
                ],
                "body": "clean_comment_cache(${1:\\$ids:integer|array} )",
                "description": "Removes a comment from the object cache."
        },
        "ƒ:clean_dirsize_cache": {
                "prefix": [
                        "clean_dirsize_cache",
                        "cdc"
                ],
                "body": "clean_dirsize_cache(${1:\\$path:string} )",
                "description": "Cleans directory size cache used by recurse_dirsize()."
        },
        "ƒ:clean_network_cache": {
                "prefix": [
                        "clean_network_cache",
                        "cnc"
                ],
                "body": "clean_network_cache(${1:\\$ids:integer|array} )",
                "description": "Removes a network from the object cache."
        },
        "ƒ:clean_object_term_cache": {
                "prefix": [
                        "clean_object_term_cache",
                        "cotc"
                ],
                "body": "clean_object_term_cache(${1:\\$object_ids:integer|array},${2:\\$object_type:array|string} )",
                "description": "Removes the taxonomy relationship to terms from the cache."
        },
        "ƒ:clean_page_cache": {
                "prefix": [
                        "clean_page_cache",
                        "cpc"
                ],
                "body": "clean_page_cache(${1:\\$id:integer} )",
                "description": "Will clean the page in the cache."
        },
        "ƒ:clean_post_cache": {
                "prefix": [
                        "clean_post_cache",
                        "cpc"
                ],
                "body": "clean_post_cache(${1:\\$post:integer|WP_Post} )",
                "description": "Will clean the post in the cache."
        },
        "ƒ:clean_pre": {
                "prefix": [
                        "clean_pre",
                        "cp"
                ],
                "body": "clean_pre(${1:\\$matches:array|string} )",
                "description": "Accepts matches array from preg_replace_callback in wpautop() or a string."
        },
        "ƒ:clean_site_details_cache": {
                "prefix": [
                        "clean_site_details_cache",
                        "csdc"
                ],
                "body": "clean_site_details_cache(${1:\\$site_id:integer} )",
                "description": "Cleans the site details cache for a site."
        },
        "ƒ:clean_taxonomy_cache": {
                "prefix": [
                        "clean_taxonomy_cache",
                        "ctc"
                ],
                "body": "clean_taxonomy_cache(${1:\\$taxonomy:string} )",
                "description": "Cleans the caches for a taxonomy."
        },
        "ƒ:clean_term_cache": {
                "prefix": [
                        "clean_term_cache",
                        "ctc"
                ],
                "body": "clean_term_cache(${1:\\$ids:integer|array},${2:\\$taxonomy:string},${3:\\$clean_taxonomy:boolean} )",
                "description": "Removes all of the term IDs from the cache."
        },
        "ƒ:clean_url": {
                "prefix": [
                        "clean_url",
                        "cu"
                ],
                "body": "clean_url(${1:\\$url:string},${2:\\$protocols:array|null},${3:\\$context:string} )",
                "description": "Checks and cleans a URL."
        },
        "ƒ:clean_user_cache": {
                "prefix": [
                        "clean_user_cache",
                        "cuc"
                ],
                "body": "clean_user_cache(${1:\\$user:WP_User|integer} )",
                "description": "Cleans all user caches."
        },
        "ƒ:clear_global_post_cache": {
                "prefix": [
                        "clear_global_post_cache",
                        "cgpc"
                ],
                "body": "clear_global_post_cache(${1:\\$post_id:integer} )",
                "description": "Deprecated functionality to clear the global post cache."
        },
        "ƒ:codepress_footer_js": {
                "prefix": [
                        "codepress_footer_js",
                        "cfj"
                ],
                "body": "codepress_footer_js()",
                "description": "Adds JavaScript required to make CodePress work on the theme/plugin file editors."
        },
        "ƒ:codepress_get_lang": {
                "prefix": [
                        "codepress_get_lang",
                        "cgl"
                ],
                "body": "codepress_get_lang(${1:\\$filename:string} )",
                "description": "Determines the language to use for CodePress syntax highlighting."
        },
        "ƒ:comment_author": {
                "prefix": [
                        "comment_author",
                        "ca"
                ],
                "body": "comment_author(${1:\\$comment_ID:integer|WP_Comment} )",
                "description": "Displays the author of the current comment."
        },
        "ƒ:comment_author_email": {
                "prefix": [
                        "comment_author_email",
                        "cae"
                ],
                "body": "comment_author_email(${1:\\$comment_ID:integer|WP_Comment} )",
                "description": "Displays the email of the author of the current global $comment."
        },
        "ƒ:comment_author_email_link": {
                "prefix": [
                        "comment_author_email_link",
                        "cael"
                ],
                "body": "comment_author_email_link(${1:\\$linktext:string},${2:\\$before:string},${3:\\$after:string},${4:\\$comment:integer|WP_Comment|null} )",
                "description": "Displays the HTML email link to the author of the current comment."
        },
        "ƒ:comment_author_IP": {
                "prefix": [
                        "comment_author_IP",
                        "caI"
                ],
                "body": "comment_author_IP(${1:\\$comment_ID:integer|WP_Comment} )",
                "description": "Displays the IP address of the author of the current comment."
        },
        "ƒ:comment_author_link": {
                "prefix": [
                        "comment_author_link",
                        "cal"
                ],
                "body": "comment_author_link(${1:\\$comment_ID:integer|WP_Comment} )",
                "description": "Displays the HTML link to the URL of the author of the current comment."
        },
        "ƒ:comment_author_rss": {
                "prefix": [
                        "comment_author_rss",
                        "car"
                ],
                "body": "comment_author_rss()",
                "description": "Display the current comment author in the feed."
        },
        "ƒ:comment_author_url": {
                "prefix": [
                        "comment_author_url",
                        "cau"
                ],
                "body": "comment_author_url(${1:\\$comment_ID:integer|WP_Comment} )",
                "description": "Displays the URL of the author of the current comment, not linked."
        },
        "ƒ:comment_author_url_link": {
                "prefix": [
                        "comment_author_url_link",
                        "caul"
                ],
                "body": "comment_author_url_link(${1:\\$linktext:string},${2:\\$before:string},${3:\\$after:string},${4:\\$comment:integer|WP_Comment} )",
                "description": "Displays the HTML link of the URL of the author of the current comment."
        },
        "ƒ:comment_class": {
                "prefix": [
                        "comment_class",
                        "cc"
                ],
                "body": "comment_class(${1:\\$css_class:string|array},${2:\\$comment:integer|WP_Comment|null},${3:\\$post_id:integer|WP_Post|null},${4:\\$display:boolean} )",
                "description": "Generates semantic classes for each comment element."
        },
        "ƒ:comment_date": {
                "prefix": [
                        "comment_date",
                        "cd"
                ],
                "body": "comment_date(${1:\\$format:string},${2:\\$comment_ID:integer|WP_Comment} )",
                "description": "Displays the comment date of the current comment."
        },
        "ƒ:comment_excerpt": {
                "prefix": [
                        "comment_excerpt",
                        "ce"
                ],
                "body": "comment_excerpt(${1:\\$comment_ID:integer|WP_Comment} )",
                "description": "Displays the excerpt of the current comment."
        },
        "ƒ:comment_exists": {
                "prefix": [
                        "comment_exists",
                        "ce"
                ],
                "body": "comment_exists(${1:\\$comment_author:string},${2:\\$comment_date:string},${3:\\$timezone:string} )",
                "description": "Determine if a comment exists based on author and date."
        },
        "ƒ:comment_footer_die": {
                "prefix": [
                        "comment_footer_die",
                        "cfd"
                ],
                "body": "comment_footer_die(${1:\\$msg:string} )",
                "description": "Display error message at bottom of comments."
        },
        "ƒ:comment_form": {
                "prefix": [
                        "comment_form",
                        "cf"
                ],
                "body": "comment_form(${1:\\$args:array},${2:\\$post_id:integer|WP_Post|null} )",
                "description": "Outputs a complete commenting form for use within a template."
        },
        "ƒ:comment_guid": {
                "prefix": [
                        "comment_guid",
                        "cg"
                ],
                "body": "comment_guid(${1:\\$comment_id:integer|WP_Comment|null} )",
                "description": "Display the feed GUID for the current comment."
        },
        "ƒ:comment_ID": {
                "prefix": [
                        "comment_ID",
                        "cI"
                ],
                "body": "comment_ID()",
                "description": "Displays the comment ID of the current comment."
        },
        "ƒ:comment_id_fields": {
                "prefix": [
                        "comment_id_fields",
                        "cif"
                ],
                "body": "comment_id_fields(${1:\\$post_id:integer} )",
                "description": "Outputs hidden input HTML for replying to comments."
        },
        "ƒ:comment_link": {
                "prefix": [
                        "comment_link",
                        "cl"
                ],
                "body": "comment_link(${1:\\$comment:integer|WP_Comment|null} )",
                "description": "Display the link to the comments."
        },
        "ƒ:comment_reply_link": {
                "prefix": [
                        "comment_reply_link",
                        "crl"
                ],
                "body": "comment_reply_link(${1:\\$args:array},${2:\\$comment:integer|WP_Comment|null},${3:\\$post:integer|WP_Post|null} )",
                "description": "Displays the HTML content for reply to comment link."
        },
        "ƒ:comment_text": {
                "prefix": [
                        "comment_text",
                        "ct"
                ],
                "body": "comment_text(${1:\\$comment_ID:integer|WP_Comment},${2:\\$args:array} )",
                "description": "Displays the text of the current comment."
        },
        "ƒ:comment_text_rss": {
                "prefix": [
                        "comment_text_rss",
                        "ctr"
                ],
                "body": "comment_text_rss()",
                "description": "Display the current comment content for use in the feeds."
        },
        "ƒ:comment_time": {
                "prefix": [
                        "comment_time",
                        "ct"
                ],
                "body": "comment_time(${1:\\$format:string} )",
                "description": "Displays the comment time of the current comment."
        },
        "ƒ:comment_type": {
                "prefix": [
                        "comment_type",
                        "ct"
                ],
                "body": "comment_type(${1:\\$commenttxt:string|false},${2:\\$trackbacktxt:string|false},${3:\\$pingbacktxt:string|false} )",
                "description": "Displays the comment type of the current comment."
        },
        "ƒ:comments_link": {
                "prefix": [
                        "comments_link",
                        "cl"
                ],
                "body": "comments_link(${1:\\$deprecated:string},${2:\\$deprecated_2:string} )",
                "description": "Displays the link to the current post comments."
        },
        "ƒ:comments_link_feed": {
                "prefix": [
                        "comments_link_feed",
                        "clf"
                ],
                "body": "comments_link_feed()",
                "description": "Outputs the link to the comments for the current post in an xml safe way"
        },
        "ƒ:comments_number": {
                "prefix": [
                        "comments_number",
                        "cn"
                ],
                "body": "comments_number(${1:\\$zero:string|false},${2:\\$one:string|false},${3:\\$more:string|false},${4:\\$post_id:integer|WP_Post} )",
                "description": "Displays the language string for the number of comments the current post has."
        },
        "ƒ:comments_open": {
                "prefix": [
                        "comments_open",
                        "co"
                ],
                "body": "comments_open(${1:\\$post_id:integer|WP_Post|null} )",
                "description": "Determines whether the current post is open for comments."
        },
        "ƒ:comments_popup_link": {
                "prefix": [
                        "comments_popup_link",
                        "cpl"
                ],
                "body": "comments_popup_link(${1:\\$zero:false|string},${2:\\$one:false|string},${3:\\$more:false|string},${4:\\$css_class:string},${5:\\$none:false|string} )",
                "description": "Displays the link to the comments for the current post ID."
        },
        "ƒ:comments_popup_script": {
                "prefix": [
                        "comments_popup_script",
                        "cps"
                ],
                "body": "comments_popup_script()",
                "description": "Display the JS popup script to show a comment."
        },
        "ƒ:comments_rss": {
                "prefix": [
                        "comments_rss",
                        "cr"
                ],
                "body": "comments_rss()",
                "description": "Return link to the post RSS feed."
        },
        "ƒ:comments_rss_link": {
                "prefix": [
                        "comments_rss_link",
                        "crl"
                ],
                "body": "comments_rss_link(${1:\\$link_text:string} )",
                "description": "Print RSS comment feed link."
        },
        "ƒ:comments_template": {
                "prefix": [
                        "comments_template",
                        "ct"
                ],
                "body": "comments_template(${1:\\$file:string},${2:\\$separate_comments:boolean} )",
                "description": "Loads the comment template specified in $file."
        },
        "ƒ:compression_test": {
                "prefix": [
                        "compression_test",
                        "ct"
                ],
                "body": "compression_test()",
                "description": "Tests support for compressing JavaScript from PHP."
        },
        "ƒ:confirm_another_blog_signup": {
                "prefix": [
                        "confirm_another_blog_signup",
                        "cabs"
                ],
                "body": "confirm_another_blog_signup(${1:\\$domain:string},${2:\\$path:string},${3:\\$blog_title:string},${4:\\$user_name:string},${5:\\$user_email:string},${6:\\$meta:array},${7:\\$blog_id:integer} )",
                "description": "Shows a message confirming that the new site has been created."
        },
        "ƒ:confirm_blog_signup": {
                "prefix": [
                        "confirm_blog_signup",
                        "cbs"
                ],
                "body": "confirm_blog_signup(${1:\\$domain:string},${2:\\$path:string},${3:\\$blog_title:string},${4:\\$user_name:string},${5:\\$user_email:string},${6:\\$meta:array} )",
                "description": "Shows a message confirming that the new site has been registered and is awaiting activation."
        },
        "ƒ:confirm_delete_users": {
                "prefix": [
                        "confirm_delete_users",
                        "cdu"
                ],
                "body": "confirm_delete_users(${1:\\$users:array} )",
                "description": ""
        },
        "ƒ:confirm_user_signup": {
                "prefix": [
                        "confirm_user_signup",
                        "cus"
                ],
                "body": "confirm_user_signup(${1:\\$user_name:string},${2:\\$user_email:string} )",
                "description": "Shows a message confirming that the new user has been registered and is awaiting activation."
        },
        "ƒ:content_url": {
                "prefix": [
                        "content_url",
                        "cu"
                ],
                "body": "content_url(${1:\\$path:string} )",
                "description": "Retrieves the URL to the content directory."
        },
        "ƒ:convert_chars": {
                "prefix": [
                        "convert_chars",
                        "cc"
                ],
                "body": "convert_chars(${1:\\$content:string},${2:\\$deprecated:string} )",
                "description": "Converts lone &amp; characters into `&amp;#038;` (a.k.a. `&amp;amp;`)"
        },
        "ƒ:convert_invalid_entities": {
                "prefix": [
                        "convert_invalid_entities",
                        "cie"
                ],
                "body": "convert_invalid_entities(${1:\\$content:string} )",
                "description": "Converts invalid Unicode references range to valid range."
        },
        "ƒ:convert_smilies": {
                "prefix": [
                        "convert_smilies",
                        "cs"
                ],
                "body": "convert_smilies(${1:\\$text:string} )",
                "description": "Converts text equivalent of smilies to images."
        },
        "ƒ:convert_to_screen": {
                "prefix": [
                        "convert_to_screen",
                        "cts"
                ],
                "body": "convert_to_screen(${1:\\$hook_name:string} )",
                "description": "Converts a screen string to a screen object."
        },
        "ƒ:copy_dir": {
                "prefix": [
                        "copy_dir",
                        "cd"
                ],
                "body": "copy_dir(${1:\\$from:string},${2:\\$to:string},${3:\\$skip_list:array} )",
                "description": "Copies a directory from one location to another via the WordPress Filesystem Abstraction."
        },
        "ƒ:core_auto_updates_settings": {
                "prefix": [
                        "core_auto_updates_settings",
                        "caus"
                ],
                "body": "core_auto_updates_settings()",
                "description": "Display WordPress auto-updates settings."
        },
        "ƒ:core_update_footer": {
                "prefix": [
                        "core_update_footer",
                        "cuf"
                ],
                "body": "core_update_footer(${1:\\$msg:string} )",
                "description": ""
        },
        "ƒ:core_upgrade_preamble": {
                "prefix": [
                        "core_upgrade_preamble",
                        "cup"
                ],
                "body": "core_upgrade_preamble()",
                "description": "Display upgrade WordPress for downloading latest or upgrading automatically form."
        },
        "ƒ:count_many_users_posts": {
                "prefix": [
                        "count_many_users_posts",
                        "cmup"
                ],
                "body": "count_many_users_posts(${1:\\$users:array},${2:\\$post_type:string|array},${3:\\$public_only:boolean} )",
                "description": "Gets the number of posts written by a list of users."
        },
        "ƒ:count_user_posts": {
                "prefix": [
                        "count_user_posts",
                        "cup"
                ],
                "body": "count_user_posts(${1:\\$userid:integer},${2:\\$post_type:array|string},${3:\\$public_only:boolean} )",
                "description": "Gets the number of posts a user has written."
        },
        "ƒ:count_users": {
                "prefix": [
                        "count_users",
                        "cu"
                ],
                "body": "count_users(${1:\\$strategy:string},${2:\\$site_id:integer|null} )",
                "description": "Counts number of users who have each of the user roles."
        },
        "ƒ:create_empty_blog": {
                "prefix": [
                        "create_empty_blog",
                        "ceb"
                ],
                "body": "create_empty_blog(${1:\\$domain:string},${2:\\$path:string},${3:\\$weblog_title:string},${4:\\$site_id:integer} )",
                "description": "Create an empty blog."
        },
        "ƒ:create_initial_post_types": {
                "prefix": [
                        "create_initial_post_types",
                        "cipt"
                ],
                "body": "create_initial_post_types()",
                "description": "Creates the initial post types when &#039;init&#039; action is fired."
        },
        "ƒ:create_initial_rest_routes": {
                "prefix": [
                        "create_initial_rest_routes",
                        "cirr"
                ],
                "body": "create_initial_rest_routes()",
                "description": "Registers default REST API routes."
        },
        "ƒ:create_initial_taxonomies": {
                "prefix": [
                        "create_initial_taxonomies",
                        "cit"
                ],
                "body": "create_initial_taxonomies()",
                "description": "Creates the initial taxonomies."
        },
        "ƒ:create_initial_theme_features": {
                "prefix": [
                        "create_initial_theme_features",
                        "citf"
                ],
                "body": "create_initial_theme_features()",
                "description": "Creates the initial theme features when the &#039;setup_theme&#039; action is fired."
        },
        "ƒ:create_user": {
                "prefix": [
                        "create_user",
                        "cu"
                ],
                "body": "create_user(${1:\\$username:string},${2:\\$password:string},${3:\\$email:string} )",
                "description": "An alias of wp_create_user()."
        },
        "ƒ:current_action": {
                "prefix": [
                        "current_action",
                        "ca"
                ],
                "body": "current_action()",
                "description": "Retrieves the name of the current action hook."
        },
        "ƒ:current_datetime": {
                "prefix": [
                        "current_datetime",
                        "cd"
                ],
                "body": "current_datetime()",
                "description": "Retrieves the current time as an object using the site&#039;s timezone."
        },
        "ƒ:current_filter": {
                "prefix": [
                        "current_filter",
                        "cf"
                ],
                "body": "current_filter()",
                "description": "Retrieves the name of the current filter hook."
        },
        "ƒ:current_theme_info": {
                "prefix": [
                        "current_theme_info",
                        "cti"
                ],
                "body": "current_theme_info()",
                "description": "Retrieves information on the current active theme."
        },
        "ƒ:current_theme_supports": {
                "prefix": [
                        "current_theme_supports",
                        "cts"
                ],
                "body": "current_theme_supports(${1:\\$feature:string},${2:\\$args:mixed} )",
                "description": "Checks a theme&#039;s support for a given feature."
        },
        "ƒ:current_time": {
                "prefix": [
                        "current_time",
                        "ct"
                ],
                "body": "current_time(${1:\\$type:string},${2:\\$gmt:integer|boolean} )",
                "description": "Retrieves the current time based on specified type."
        },
        "ƒ:current_user_can": {
                "prefix": [
                        "current_user_can",
                        "cuc"
                ],
                "body": "current_user_can(${1:\\$capability:string},${2:\\$args:mixed} )",
                "description": "Returns whether the current user has the specified capability."
        },
        "ƒ:current_user_can_for_blog": {
                "prefix": [
                        "current_user_can_for_blog",
                        "cucfb"
                ],
                "body": "current_user_can_for_blog(${1:\\$blog_id:integer},${2:\\$capability:string},${3:\\$args:mixed} )",
                "description": "Returns whether the current user has the specified capability for a given site."
        },
        "ƒ:customize_themes_print_templates": {
                "prefix": [
                        "customize_themes_print_templates",
                        "ctpt"
                ],
                "body": "customize_themes_print_templates()",
                "description": "Prints JS templates for the theme-browsing UI in the Customizer."
        },
        "ƒ:dashboard_browser_nag_class": {
                "prefix": [
                        "dashboard_browser_nag_class",
                        "dbnc"
                ],
                "body": "dashboard_browser_nag_class(${1:\\$classes:array} )",
                "description": "Adds an additional class to the browser nag if the current version is insecure."
        },
        "ƒ:dashboard_php_nag_class": {
                "prefix": [
                        "dashboard_php_nag_class",
                        "dpnc"
                ],
                "body": "dashboard_php_nag_class(${1:\\$classes:array} )",
                "description": "Adds an additional class to the PHP nag if the current version is insecure."
        },
        "ƒ:date_i18n": {
                "prefix": [
                        "date_i18n",
                        "di"
                ],
                "body": "date_i18n(${1:\\$format:string},${2:\\$timestamp_with_offset:integer|boolean},${3:\\$gmt:boolean} )",
                "description": "Retrieves the date in localized format, based on a sum of Unix timestamp and timezone offset in seconds."
        },
        "ƒ:dbDelta": {
                "prefix": [
                        "dbDelta"
                ],
                "body": "dbDelta(${1:\\$queries:array|string},${2:\\$execute:boolean} )",
                "description": "Modifies the database based on specified SQL statements."
        },
        "ƒ:deactivate_plugins": {
                "prefix": [
                        "deactivate_plugins",
                        "dp"
                ],
                "body": "deactivate_plugins(${1:\\$plugins:string|array},${2:\\$silent:boolean},${3:\\$network_wide:boolean|null} )",
                "description": "Deactivates a single plugin or multiple plugins."
        },
        "ƒ:deactivate_sitewide_plugin": {
                "prefix": [
                        "deactivate_sitewide_plugin",
                        "dsp"
                ],
                "body": "deactivate_sitewide_plugin(${1:\\$plugin:} )",
                "description": "Deprecated functionality for deactivating a network-only plugin."
        },
        "ƒ:deactivated_plugins_notice": {
                "prefix": [
                        "deactivated_plugins_notice",
                        "dpn"
                ],
                "body": "deactivated_plugins_notice()",
                "description": "Renders an admin notice when a plugin was deactivated during an update."
        },
        "ƒ:dead_db": {
                "prefix": [
                        "dead_db",
                        "dd"
                ],
                "body": "dead_db()",
                "description": "Load custom DB error or display WordPress DB error."
        },
        "ƒ:debug_fclose": {
                "prefix": [
                        "debug_fclose",
                        "df"
                ],
                "body": "debug_fclose(${1:\\$fp:mixed} )",
                "description": "Close the debugging file handle."
        },
        "ƒ:debug_fopen": {
                "prefix": [
                        "debug_fopen",
                        "df"
                ],
                "body": "debug_fopen(${1:\\$filename:string},${2:\\$mode:string} )",
                "description": "Open the file handle for debugging."
        },
        "ƒ:debug_fwrite": {
                "prefix": [
                        "debug_fwrite",
                        "df"
                ],
                "body": "debug_fwrite(${1:\\$fp:mixed},${2:\\$message:string} )",
                "description": "Write contents to the file used for debugging."
        },
        "ƒ:default_password_nag": {
                "prefix": [
                        "default_password_nag",
                        "dpn"
                ],
                "body": "default_password_nag()",
                "description": ""
        },
        "ƒ:default_password_nag_edit_user": {
                "prefix": [
                        "default_password_nag_edit_user",
                        "dpneu"
                ],
                "body": "default_password_nag_edit_user(${1:\\$user_ID:integer},${2:\\$old_data:WP_User} )",
                "description": ""
        },
        "ƒ:default_password_nag_handler": {
                "prefix": [
                        "default_password_nag_handler",
                        "dpnh"
                ],
                "body": "default_password_nag_handler(${1:\\$errors:false} )",
                "description": ""
        },
        "ƒ:default_topic_count_scale": {
                "prefix": [
                        "default_topic_count_scale",
                        "dtcs"
                ],
                "body": "default_topic_count_scale(${1:\\$count:integer} )",
                "description": "Default topic count scaling for tag links."
        },
        "ƒ:default_topic_count_text": {
                "prefix": [
                        "default_topic_count_text",
                        "dtct"
                ],
                "body": "default_topic_count_text(${1:\\$count:integer} )",
                "description": "Old callback for tag link tooltips."
        },
        "ƒ:delete_all_user_settings": {
                "prefix": [
                        "delete_all_user_settings",
                        "daus"
                ],
                "body": "delete_all_user_settings()",
                "description": "Deletes the user settings of the current user."
        },
        "ƒ:delete_blog_option": {
                "prefix": [
                        "delete_blog_option",
                        "dbo"
                ],
                "body": "delete_blog_option(${1:\\$id:integer},${2:\\$option:string} )",
                "description": "Removes option by name for a given blog ID. Prevents removal of protected WordPress options."
        },
        "ƒ:delete_comment_meta": {
                "prefix": [
                        "delete_comment_meta",
                        "dcm"
                ],
                "body": "delete_comment_meta(${1:\\$comment_id:integer},${2:\\$meta_key:string},${3:\\$meta_value:mixed} )",
                "description": "Removes metadata matching criteria from a comment."
        },
        "ƒ:delete_expired_transients": {
                "prefix": [
                        "delete_expired_transients",
                        "det"
                ],
                "body": "delete_expired_transients(${1:\\$force_db:boolean} )",
                "description": "Deletes all expired transients."
        },
        "ƒ:delete_get_calendar_cache": {
                "prefix": [
                        "delete_get_calendar_cache",
                        "dgcc"
                ],
                "body": "delete_get_calendar_cache()",
                "description": "Purge the cached results of get_calendar."
        },
        "ƒ:delete_meta": {
                "prefix": [
                        "delete_meta",
                        "dm"
                ],
                "body": "delete_meta(${1:\\$mid:integer} )",
                "description": "Deletes post meta data by meta ID."
        },
        "ƒ:delete_metadata": {
                "prefix": [
                        "delete_metadata",
                        "dm"
                ],
                "body": "delete_metadata(${1:\\$meta_type:string},${2:\\$object_id:integer},${3:\\$meta_key:string},${4:\\$meta_value:mixed},${5:\\$delete_all:boolean} )",
                "description": "Deletes metadata for the specified object."
        },
        "ƒ:delete_metadata_by_mid": {
                "prefix": [
                        "delete_metadata_by_mid",
                        "dmbm"
                ],
                "body": "delete_metadata_by_mid(${1:\\$meta_type:string},${2:\\$meta_id:integer} )",
                "description": "Deletes metadata by meta ID."
        },
        "ƒ:delete_network_option": {
                "prefix": [
                        "delete_network_option",
                        "dno"
                ],
                "body": "delete_network_option(${1:\\$network_id:integer},${2:\\$option:string} )",
                "description": "Removes a network option by name."
        },
        "ƒ:delete_option": {
                "prefix": [
                        "delete_option",
                        "do"
                ],
                "body": "delete_option(${1:\\$option:string} )",
                "description": "Removes option by name. Prevents removal of protected WordPress options."
        },
        "ƒ:delete_plugins": {
                "prefix": [
                        "delete_plugins",
                        "dp"
                ],
                "body": "delete_plugins(${1:\\$plugins:array},${2:\\$deprecated:string} )",
                "description": "Removes directory and files of a plugin for a list of plugins."
        },
        "ƒ:delete_post_meta": {
                "prefix": [
                        "delete_post_meta",
                        "dpm"
                ],
                "body": "delete_post_meta(${1:\\$post_id:integer},${2:\\$meta_key:string},${3:\\$meta_value:mixed} )",
                "description": "Deletes a post meta field for the given post ID."
        },
        "ƒ:delete_post_meta_by_key": {
                "prefix": [
                        "delete_post_meta_by_key",
                        "dpmbk"
                ],
                "body": "delete_post_meta_by_key(${1:\\$post_meta_key:string} )",
                "description": "Deletes everything from post meta matching the given meta key."
        },
        "ƒ:delete_post_thumbnail": {
                "prefix": [
                        "delete_post_thumbnail",
                        "dpt"
                ],
                "body": "delete_post_thumbnail(${1:\\$post:integer|WP_Post} )",
                "description": "Removes the thumbnail (featured image) from the given post."
        },
        "ƒ:delete_site_meta": {
                "prefix": [
                        "delete_site_meta",
                        "dsm"
                ],
                "body": "delete_site_meta(${1:\\$site_id:integer},${2:\\$meta_key:string},${3:\\$meta_value:mixed} )",
                "description": "Removes metadata matching criteria from a site."
        },
        "ƒ:delete_site_meta_by_key": {
                "prefix": [
                        "delete_site_meta_by_key",
                        "dsmbk"
                ],
                "body": "delete_site_meta_by_key(${1:\\$meta_key:string} )",
                "description": "Deletes everything from site meta matching meta key."
        },
        "ƒ:delete_site_option": {
                "prefix": [
                        "delete_site_option",
                        "dso"
                ],
                "body": "delete_site_option(${1:\\$option:string} )",
                "description": "Removes a option by name for the current network."
        },
        "ƒ:delete_site_transient": {
                "prefix": [
                        "delete_site_transient",
                        "dst"
                ],
                "body": "delete_site_transient(${1:\\$transient:string} )",
                "description": "Deletes a site transient."
        },
        "ƒ:delete_term_meta": {
                "prefix": [
                        "delete_term_meta",
                        "dtm"
                ],
                "body": "delete_term_meta(${1:\\$term_id:integer},${2:\\$meta_key:string},${3:\\$meta_value:mixed} )",
                "description": "Removes metadata matching criteria from a term."
        },
        "ƒ:delete_theme": {
                "prefix": [
                        "delete_theme",
                        "dt"
                ],
                "body": "delete_theme(${1:\\$stylesheet:string},${2:\\$redirect:string} )",
                "description": "Removes a theme."
        },
        "ƒ:delete_transient": {
                "prefix": [
                        "delete_transient",
                        "dt"
                ],
                "body": "delete_transient(${1:\\$transient:string} )",
                "description": "Deletes a transient."
        },
        "ƒ:delete_user_meta": {
                "prefix": [
                        "delete_user_meta",
                        "dum"
                ],
                "body": "delete_user_meta(${1:\\$user_id:integer},${2:\\$meta_key:string},${3:\\$meta_value:mixed} )",
                "description": "Removes metadata matching criteria from a user."
        },
        "ƒ:delete_user_option": {
                "prefix": [
                        "delete_user_option",
                        "duo"
                ],
                "body": "delete_user_option(${1:\\$user_id:integer},${2:\\$option_name:string},${3:\\$global:boolean} )",
                "description": "Deletes user option with global blog capability."
        },
        "ƒ:delete_user_setting": {
                "prefix": [
                        "delete_user_setting",
                        "dus"
                ],
                "body": "delete_user_setting(${1:\\$names:string} )",
                "description": "Deletes user interface settings."
        },
        "ƒ:delete_usermeta": {
                "prefix": [
                        "delete_usermeta",
                        "du"
                ],
                "body": "delete_usermeta(${1:\\$user_id:integer},${2:\\$meta_key:string},${3:\\$meta_value:mixed} )",
                "description": "Remove user meta data."
        },
        "ƒ:delete_users_add_js": {
                "prefix": [
                        "delete_users_add_js",
                        "duaj"
                ],
                "body": "delete_users_add_js()",
                "description": ""
        },
        "ƒ:deslash": {
                "prefix": [
                        "deslash"
                ],
                "body": "deslash(${1:\\$content:string} )",
                "description": "Filters for content to remove unnecessary slashes."
        },
        "ƒ:determine_locale": {
                "prefix": [
                        "determine_locale",
                        "dl"
                ],
                "body": "determine_locale()",
                "description": "Determine the current locale desired for the request."
        },
        "ƒ:did_action": {
                "prefix": [
                        "did_action",
                        "da"
                ],
                "body": "did_action(${1:\\$hook_name:string} )",
                "description": "Retrieves the number of times an action has been fired during the current request."
        },
        "ƒ:disabled": {
                "prefix": [
                        "disabled"
                ],
                "body": "disabled(${1:\\$disabled:mixed},${2:\\$current:mixed},${3:\\$echo:boolean} )",
                "description": "Outputs the HTML disabled attribute."
        },
        "ƒ:discard_sidebar_being_rendered": {
                "prefix": [
                        "discard_sidebar_being_rendered",
                        "dsbr"
                ],
                "body": "discard_sidebar_being_rendered()",
                "description": "Clear whatever we set in note_sidebar_being_rendered() after WordPress finishes rendering a sidebar."
        },
        "ƒ:discover_pingback_server_uri": {
                "prefix": [
                        "discover_pingback_server_uri",
                        "dpsu"
                ],
                "body": "discover_pingback_server_uri(${1:\\$url:string},${2:\\$deprecated:string} )",
                "description": "Finds a pingback server URI based on the given URL."
        },
        "ƒ:dismiss_core_update": {
                "prefix": [
                        "dismiss_core_update",
                        "dcu"
                ],
                "body": "dismiss_core_update(${1:\\$update:object} )",
                "description": "Dismisses core update."
        },
        "ƒ:dismissed_updates": {
                "prefix": [
                        "dismissed_updates",
                        "du"
                ],
                "body": "dismissed_updates()",
                "description": "Display dismissed updates."
        },
        "ƒ:display_header": {
                "prefix": [
                        "display_header",
                        "dh"
                ],
                "body": "display_header(${1:\\$body_classes:string} )",
                "description": "Display installation header."
        },
        "ƒ:display_header_text": {
                "prefix": [
                        "display_header_text",
                        "dht"
                ],
                "body": "display_header_text()",
                "description": "Whether to display the header text."
        },
        "ƒ:display_plugins_table": {
                "prefix": [
                        "display_plugins_table",
                        "dpt"
                ],
                "body": "display_plugins_table()",
                "description": "Displays plugin content based on plugin list."
        },
        "ƒ:display_setup_form": {
                "prefix": [
                        "display_setup_form",
                        "dsf"
                ],
                "body": "display_setup_form(${1:\\$error:string|null} )",
                "description": "Display installer setup form."
        },
        "ƒ:display_space_usage": {
                "prefix": [
                        "display_space_usage",
                        "dsu"
                ],
                "body": "display_space_usage()",
                "description": "Displays the amount of disk space used by the current site. Not used in core."
        },
        "ƒ:display_theme": {
                "prefix": [
                        "display_theme",
                        "dt"
                ],
                "body": "display_theme(${1:\\$theme:object} )",
                "description": "Prints a theme on the Install Themes pages."
        },
        "ƒ:display_themes": {
                "prefix": [
                        "display_themes",
                        "dt"
                ],
                "body": "display_themes()",
                "description": "Displays theme content based on theme list."
        },
        "ƒ:do_accordion_sections": {
                "prefix": [
                        "do_accordion_sections",
                        "das"
                ],
                "body": "do_accordion_sections(${1:\\$screen:string|object},${2:\\$context:string},${3:\\$data_object:mixed} )",
                "description": "Meta Box Accordion Template Function."
        },
        "ƒ:do_action": {
                "prefix": [
                        "do_action",
                        "da"
                ],
                "body": "do_action(${1:\\$hook_name:string},${2:\\$arg:mixed} )",
                "description": "Calls the callback functions that have been added to an action hook."
        },
        "ƒ:do_action_deprecated": {
                "prefix": [
                        "do_action_deprecated",
                        "dad"
                ],
                "body": "do_action_deprecated(${1:\\$hook_name:string},${2:\\$args:array},${3:\\$version:string},${4:\\$replacement:string},${5:\\$message:string} )",
                "description": "Fires functions attached to a deprecated action hook."
        },
        "ƒ:do_action_ref_array": {
                "prefix": [
                        "do_action_ref_array",
                        "dara"
                ],
                "body": "do_action_ref_array(${1:\\$hook_name:string},${2:\\$args:array} )",
                "description": "Calls the callback functions that have been added to an action hook, specifying arguments in an array."
        },
        "ƒ:do_activate_header": {
                "prefix": [
                        "do_activate_header",
                        "dah"
                ],
                "body": "do_activate_header()",
                "description": "Adds an action hook specific to this page."
        },
        "ƒ:do_all_enclosures": {
                "prefix": [
                        "do_all_enclosures",
                        "dae"
                ],
                "body": "do_all_enclosures()",
                "description": "Performs all enclosures."
        },
        "ƒ:do_all_pingbacks": {
                "prefix": [
                        "do_all_pingbacks",
                        "dap"
                ],
                "body": "do_all_pingbacks()",
                "description": "Performs all pingbacks."
        },
        "ƒ:do_all_pings": {
                "prefix": [
                        "do_all_pings",
                        "dap"
                ],
                "body": "do_all_pings()",
                "description": "Performs all pingbacks, enclosures, trackbacks, and sends to pingback services."
        },
        "ƒ:do_all_trackbacks": {
                "prefix": [
                        "do_all_trackbacks",
                        "dat"
                ],
                "body": "do_all_trackbacks()",
                "description": "Performs all trackbacks."
        },
        "ƒ:do_block_editor_incompatible_meta_box": {
                "prefix": [
                        "do_block_editor_incompatible_meta_box",
                        "dbeimb"
                ],
                "body": "do_block_editor_incompatible_meta_box(${1:\\$data_object:mixed},${2:\\$box:array} )",
                "description": "Renders a &quot;fake&quot; meta box with an information message, shown on the block editor, when an incompatible meta box is found."
        },
        "ƒ:do_blocks": {
                "prefix": [
                        "do_blocks",
                        "db"
                ],
                "body": "do_blocks(${1:\\$content:string} )",
                "description": "Parses dynamic blocks out of `post_content` and re-renders them."
        },
        "ƒ:do_core_upgrade": {
                "prefix": [
                        "do_core_upgrade",
                        "dcu"
                ],
                "body": "do_core_upgrade(${1:\\$reinstall:boolean} )",
                "description": "Upgrade WordPress core display."
        },
        "ƒ:do_dismiss_core_update": {
                "prefix": [
                        "do_dismiss_core_update",
                        "ddcu"
                ],
                "body": "do_dismiss_core_update()",
                "description": "Dismiss a core update."
        },
        "ƒ:do_enclose": {
                "prefix": [
                        "do_enclose",
                        "de"
                ],
                "body": "do_enclose(${1:\\$content:string|null},${2:\\$post:integer|WP_Post} )",
                "description": "Check content for video and audio links to add as enclosures."
        },
        "ƒ:do_favicon": {
                "prefix": [
                        "do_favicon",
                        "df"
                ],
                "body": "do_favicon()",
                "description": "Display the favicon.ico file content."
        },
        "ƒ:do_feed": {
                "prefix": [
                        "do_feed",
                        "df"
                ],
                "body": "do_feed()",
                "description": "Load the feed template from the use of an action hook."
        },
        "ƒ:do_feed_atom": {
                "prefix": [
                        "do_feed_atom",
                        "dfa"
                ],
                "body": "do_feed_atom(${1:\\$for_comments:boolean} )",
                "description": "Load either Atom comment feed or Atom posts feed."
        },
        "ƒ:do_feed_rdf": {
                "prefix": [
                        "do_feed_rdf",
                        "dfr"
                ],
                "body": "do_feed_rdf()",
                "description": "Load the RDF RSS 0.91 Feed template."
        },
        "ƒ:do_feed_rss": {
                "prefix": [
                        "do_feed_rss",
                        "dfr"
                ],
                "body": "do_feed_rss()",
                "description": "Load the RSS 1.0 Feed Template."
        },
        "ƒ:do_feed_rss2": {
                "prefix": [
                        "do_feed_rss2",
                        "dfr"
                ],
                "body": "do_feed_rss2(${1:\\$for_comments:boolean} )",
                "description": "Load either the RSS2 comment feed or the RSS2 posts feed."
        },
        "ƒ:do_meta_boxes": {
                "prefix": [
                        "do_meta_boxes",
                        "dmb"
                ],
                "body": "do_meta_boxes(${1:\\$screen:string|WP_Screen},${2:\\$context:string},${3:\\$data_object:mixed} )",
                "description": "Meta-Box template function."
        },
        "ƒ:do_robots": {
                "prefix": [
                        "do_robots",
                        "dr"
                ],
                "body": "do_robots()",
                "description": "Displays the default robots.txt file content."
        },
        "ƒ:do_settings_fields": {
                "prefix": [
                        "do_settings_fields",
                        "dsf"
                ],
                "body": "do_settings_fields(${1:\\$page:string},${2:\\$section:string} )",
                "description": "Prints out the settings fields for a particular settings section."
        },
        "ƒ:do_settings_sections": {
                "prefix": [
                        "do_settings_sections",
                        "dss"
                ],
                "body": "do_settings_sections(${1:\\$page:string} )",
                "description": "Prints out all settings sections added to a particular settings page"
        },
        "ƒ:do_shortcode": {
                "prefix": [
                        "do_shortcode",
                        "ds"
                ],
                "body": "do_shortcode(${1:\\$content:string},${2:\\$ignore_html:boolean} )",
                "description": "Search content for shortcodes and filter shortcodes through their hooks."
        },
        "ƒ:do_shortcode_tag": {
                "prefix": [
                        "do_shortcode_tag",
                        "dst"
                ],
                "body": "do_shortcode_tag(${1:\\$m:array} )",
                "description": "Regular Expression callable for do_shortcode() for calling shortcode hook."
        },
        "ƒ:do_shortcodes_in_html_tags": {
                "prefix": [
                        "do_shortcodes_in_html_tags",
                        "dsiht"
                ],
                "body": "do_shortcodes_in_html_tags(${1:\\$content:string},${2:\\$ignore_html:boolean},${3:\\$tagnames:array} )",
                "description": "Search only inside HTML elements for shortcodes and process them."
        },
        "ƒ:do_signup_header": {
                "prefix": [
                        "do_signup_header",
                        "dsh"
                ],
                "body": "do_signup_header()",
                "description": "Prints signup_header via wp_head."
        },
        "ƒ:do_trackbacks": {
                "prefix": [
                        "do_trackbacks",
                        "dt"
                ],
                "body": "do_trackbacks(${1:\\$post_id:integer|WP_Post} )",
                "description": "Performs trackbacks."
        },
        "ƒ:do_undismiss_core_update": {
                "prefix": [
                        "do_undismiss_core_update",
                        "ducu"
                ],
                "body": "do_undismiss_core_update()",
                "description": "Undismiss a core update."
        },
        "ƒ:documentation_link": {
                "prefix": [
                        "documentation_link",
                        "dl"
                ],
                "body": "documentation_link()",
                "description": "Unused Admin function."
        },
        "ƒ:doing_action": {
                "prefix": [
                        "doing_action",
                        "da"
                ],
                "body": "doing_action(${1:\\$hook_name:string|null} )",
                "description": "Returns whether or not an action hook is currently being processed."
        },
        "ƒ:doing_filter": {
                "prefix": [
                        "doing_filter",
                        "df"
                ],
                "body": "doing_filter(${1:\\$hook_name:null|string} )",
                "description": "Returns whether or not a filter hook is currently being processed."
        },
        "ƒ:domain_exists": {
                "prefix": [
                        "domain_exists",
                        "de"
                ],
                "body": "domain_exists(${1:\\$domain:string},${2:\\$path:string},${3:\\$network_id:integer} )",
                "description": "Checks whether a site name is already taken."
        },
        "ƒ:download_url": {
                "prefix": [
                        "download_url",
                        "du"
                ],
                "body": "download_url(${1:\\$url:string},${2:\\$timeout:integer},${3:\\$signature_verification:boolean} )",
                "description": "Downloads a URL to a local temporary file using the WordPress HTTP API."
        },
        "ƒ:drop_index": {
                "prefix": [
                        "drop_index",
                        "di"
                ],
                "body": "drop_index(${1:\\$table:string},${2:\\$index:string} )",
                "description": "Drops a specified index from a table."
        },
        "ƒ:dropdown_categories": {
                "prefix": [
                        "dropdown_categories",
                        "dc"
                ],
                "body": "dropdown_categories(${1:\\$default_category:integer},${2:\\$category_parent:integer},${3:\\$popular_ids:array} )",
                "description": "Legacy function used to generate the categories checklist control."
        },
        "ƒ:dropdown_cats": {
                "prefix": [
                        "dropdown_cats",
                        "dc"
                ],
                "body": "dropdown_cats(${1:\\$optionall:integer},${2:\\$all:string},${3:\\$orderby:string},${4:\\$order:string},${5:\\$show_last_update:integer},${6:\\$show_count:integer},${7:\\$hide_empty:integer},${8:\\$optionnone:boolean},${9:\\$selected:integer},${10:\\$exclude:integer} )",
                "description": "Deprecated method for generating a drop-down of categories."
        },
        "ƒ:dropdown_link_categories": {
                "prefix": [
                        "dropdown_link_categories",
                        "dlc"
                ],
                "body": "dropdown_link_categories(${1:\\$default_link_category:integer} )",
                "description": "Legacy function used to generate a link categories checklist control."
        },
        "ƒ:dynamic_sidebar": {
                "prefix": [
                        "dynamic_sidebar",
                        "ds"
                ],
                "body": "dynamic_sidebar(${1:\\$index:integer|string} )",
                "description": "Display dynamic sidebar."
        },
        "ƒ:edit_bookmark_link": {
                "prefix": [
                        "edit_bookmark_link",
                        "ebl"
                ],
                "body": "edit_bookmark_link(${1:\\$link:string},${2:\\$before:string},${3:\\$after:string},${4:\\$bookmark:integer|null} )",
                "description": "Displays the edit bookmark link anchor content."
        },
        "ƒ:edit_comment": {
                "prefix": [
                        "edit_comment",
                        "ec"
                ],
                "body": "edit_comment()",
                "description": "Update a comment with values provided in $_POST."
        },
        "ƒ:edit_comment_link": {
                "prefix": [
                        "edit_comment_link",
                        "ecl"
                ],
                "body": "edit_comment_link(${1:\\$text:string|null},${2:\\$before:string},${3:\\$after:string} )",
                "description": "Displays the edit comment link with formatting."
        },
        "ƒ:edit_form_image_editor": {
                "prefix": [
                        "edit_form_image_editor",
                        "efie"
                ],
                "body": "edit_form_image_editor(${1:\\$post:WP_Post} )",
                "description": "Displays the image and editor in the post editor"
        },
        "ƒ:edit_link": {
                "prefix": [
                        "edit_link",
                        "el"
                ],
                "body": "edit_link(${1:\\$link_id:integer} )",
                "description": "Updates or inserts a link using values provided in $_POST."
        },
        "ƒ:edit_post": {
                "prefix": [
                        "edit_post",
                        "ep"
                ],
                "body": "edit_post(${1:\\$post_data:array|null} )",
                "description": "Updates an existing post with values provided in `$_POST`."
        },
        "ƒ:edit_post_link": {
                "prefix": [
                        "edit_post_link",
                        "epl"
                ],
                "body": "edit_post_link(${1:\\$text:string|null},${2:\\$before:string},${3:\\$after:string},${4:\\$id:integer|WP_Post},${5:\\$class:string} )",
                "description": "Displays the edit post link for post."
        },
        "ƒ:edit_tag_link": {
                "prefix": [
                        "edit_tag_link",
                        "etl"
                ],
                "body": "edit_tag_link(${1:\\$link:string},${2:\\$before:string},${3:\\$after:string},${4:\\$tag:WP_Term|null} )",
                "description": "Displays or retrieves the edit link for a tag with formatting."
        },
        "ƒ:edit_term_link": {
                "prefix": [
                        "edit_term_link",
                        "etl"
                ],
                "body": "edit_term_link(${1:\\$link:string},${2:\\$before:string},${3:\\$after:string},${4:\\$term:integer|WP_Term|null},${5:\\$echo:boolean} )",
                "description": "Displays or retrieves the edit term link with formatting."
        },
        "ƒ:edit_user": {
                "prefix": [
                        "edit_user",
                        "eu"
                ],
                "body": "edit_user(${1:\\$user_id:integer} )",
                "description": "Edit user settings based on contents of $_POST"
        },
        "ƒ:email_exists": {
                "prefix": [
                        "email_exists",
                        "ee"
                ],
                "body": "email_exists(${1:\\$email:string} )",
                "description": "Determines whether the given email exists."
        },
        "ƒ:endElement": {
                "prefix": [
                        "endElement"
                ],
                "body": "endElement(${1:\\$parser:resource},${2:\\$tag_name:string} )",
                "description": "XML callback function that is called at the end of a XML tag."
        },
        "ƒ:enqueue_block_styles_assets": {
                "prefix": [
                        "enqueue_block_styles_assets",
                        "ebsa"
                ],
                "body": "enqueue_block_styles_assets()",
                "description": "Function responsible for enqueuing the styles required for block styles functionality on the editor and on the frontend."
        },
        "ƒ:enqueue_comment_hotkeys_js": {
                "prefix": [
                        "enqueue_comment_hotkeys_js",
                        "echj"
                ],
                "body": "enqueue_comment_hotkeys_js()",
                "description": ""
        },
        "ƒ:enqueue_editor_block_styles_assets": {
                "prefix": [
                        "enqueue_editor_block_styles_assets",
                        "eebsa"
                ],
                "body": "enqueue_editor_block_styles_assets()",
                "description": "Function responsible for enqueuing the assets required for block styles functionality on the editor."
        },
        "ƒ:enqueue_embed_scripts": {
                "prefix": [
                        "enqueue_embed_scripts",
                        "ees"
                ],
                "body": "enqueue_embed_scripts()",
                "description": "Enqueues embed iframe default CSS and JS."
        },
        "ƒ:ent2ncr": {
                "prefix": [
                        "ent2ncr"
                ],
                "body": "ent2ncr(${1:\\$text:string} )",
                "description": "Converts named entities into numbered entities."
        },
        "ƒ:esc_attr": {
                "prefix": [
                        "esc_attr",
                        "ea"
                ],
                "body": "esc_attr(${1:\\$text:string} )",
                "description": "Escaping for HTML attributes."
        },
        "ƒ:esc_attr__": {
                "prefix": [
                        "esc_attr__",
                        "ea"
                ],
                "body": "esc_attr__(${1:\\$text:string},${2:\\$domain:string} )",
                "description": "Retrieve the translation of $text and escapes it for safe use in an attribute."
        },
        "ƒ:esc_attr_e": {
                "prefix": [
                        "esc_attr_e",
                        "eae"
                ],
                "body": "esc_attr_e(${1:\\$text:string},${2:\\$domain:string} )",
                "description": "Display translated text that has been escaped for safe use in an attribute."
        },
        "ƒ:esc_attr_x": {
                "prefix": [
                        "esc_attr_x",
                        "eax"
                ],
                "body": "esc_attr_x(${1:\\$text:string},${2:\\$context:string},${3:\\$domain:string} )",
                "description": "Translate string with gettext context, and escapes it for safe use in an attribute."
        },
        "ƒ:esc_html": {
                "prefix": [
                        "esc_html",
                        "eh"
                ],
                "body": "esc_html(${1:\\$text:string} )",
                "description": "Escaping for HTML blocks."
        },
        "ƒ:esc_html__": {
                "prefix": [
                        "esc_html__",
                        "eh"
                ],
                "body": "esc_html__(${1:\\$text:string},${2:\\$domain:string} )",
                "description": "Retrieve the translation of $text and escapes it for safe use in HTML output."
        },
        "ƒ:esc_html_e": {
                "prefix": [
                        "esc_html_e",
                        "ehe"
                ],
                "body": "esc_html_e(${1:\\$text:string},${2:\\$domain:string} )",
                "description": "Display translated text that has been escaped for safe use in HTML output."
        },
        "ƒ:esc_html_x": {
                "prefix": [
                        "esc_html_x",
                        "ehx"
                ],
                "body": "esc_html_x(${1:\\$text:string},${2:\\$context:string},${3:\\$domain:string} )",
                "description": "Translate string with gettext context, and escapes it for safe use in HTML output."
        },
        "ƒ:esc_js": {
                "prefix": [
                        "esc_js",
                        "ej"
                ],
                "body": "esc_js(${1:\\$text:string} )",
                "description": "Escapes single quotes, `&quot;`, `&lt;`, `&gt;`, `&amp;`, and fixes line endings."
        },
        "ƒ:esc_sql": {
                "prefix": [
                        "esc_sql",
                        "es"
                ],
                "body": "esc_sql(${1:\\$data:string|array} )",
                "description": "Escapes data for use in a MySQL query."
        },
        "ƒ:esc_textarea": {
                "prefix": [
                        "esc_textarea",
                        "et"
                ],
                "body": "esc_textarea(${1:\\$text:string} )",
                "description": "Escaping for textarea values."
        },
        "ƒ:esc_url": {
                "prefix": [
                        "esc_url",
                        "eu"
                ],
                "body": "esc_url(${1:\\$url:string},${2:\\$protocols:array|null},${3:\\$_context:string} )",
                "description": "Checks and cleans a URL."
        },
        "ƒ:esc_url_raw": {
                "prefix": [
                        "esc_url_raw",
                        "eur"
                ],
                "body": "esc_url_raw(${1:\\$url:string},${2:\\$protocols:array|null} )",
                "description": "Performs esc_url() for database or redirect usage."
        },
        "ƒ:esc_xml": {
                "prefix": [
                        "esc_xml",
                        "ex"
                ],
                "body": "esc_xml(${1:\\$text:string} )",
                "description": "Escaping for XML blocks."
        },
        "ƒ:excerpt_remove_blocks": {
                "prefix": [
                        "excerpt_remove_blocks",
                        "erb"
                ],
                "body": "excerpt_remove_blocks(${1:\\$content:string} )",
                "description": "Parses blocks out of a content string, and renders those appropriate for the excerpt."
        },
        "ƒ:export_add_js": {
                "prefix": [
                        "export_add_js",
                        "eaj"
                ],
                "body": "export_add_js()",
                "description": "Display JavaScript on the page."
        },
        "ƒ:export_date_options": {
                "prefix": [
                        "export_date_options",
                        "edo"
                ],
                "body": "export_date_options(${1:\\$post_type:string} )",
                "description": "Create the date options fields for exporting a given post type."
        },
        "ƒ:export_wp": {
                "prefix": [
                        "export_wp",
                        "ew"
                ],
                "body": "export_wp(${1:\\$args:array} )",
                "description": "Generates the WXR export file for download."
        },
        "ƒ:extract_from_markers": {
                "prefix": [
                        "extract_from_markers",
                        "efm"
                ],
                "body": "extract_from_markers(${1:\\$filename:string},${2:\\$marker:string} )",
                "description": "Extracts strings from between the BEGIN and END markers in the .htaccess file."
        },
        "ƒ:favorite_actions": {
                "prefix": [
                        "favorite_actions",
                        "fa"
                ],
                "body": "favorite_actions()",
                "description": "Favorite actions were deprecated in version 3.2. Use the admin bar instead."
        },
        "ƒ:feed_content_type": {
                "prefix": [
                        "feed_content_type",
                        "fct"
                ],
                "body": "feed_content_type(${1:\\$type:string} )",
                "description": "Return the content type for specified feed type."
        },
        "ƒ:feed_links": {
                "prefix": [
                        "feed_links",
                        "fl"
                ],
                "body": "feed_links(${1:\\$args:array} )",
                "description": "Display the links to the general feeds."
        },
        "ƒ:feed_links_extra": {
                "prefix": [
                        "feed_links_extra",
                        "fle"
                ],
                "body": "feed_links_extra(${1:\\$args:array} )",
                "description": "Display the links to the extra feeds such as category feeds."
        },
        "ƒ:fetch_feed": {
                "prefix": [
                        "fetch_feed",
                        "ff"
                ],
                "body": "fetch_feed(${1:\\$url:string|array} )",
                "description": "Build SimplePie object based on RSS or Atom feed from URL."
        },
        "ƒ:fetch_rss": {
                "prefix": [
                        "fetch_rss",
                        "fr"
                ],
                "body": "fetch_rss(${1:\\$url:string} )",
                "description": "Build Magpie object based on RSS from URL."
        },
        "ƒ:file_is_displayable_image": {
                "prefix": [
                        "file_is_displayable_image",
                        "fidi"
                ],
                "body": "file_is_displayable_image(${1:\\$path:string} )",
                "description": "Validate that file is suitable for displaying within a web page."
        },
        "ƒ:file_is_valid_image": {
                "prefix": [
                        "file_is_valid_image",
                        "fivi"
                ],
                "body": "file_is_valid_image(${1:\\$path:string} )",
                "description": "Validate that file is an image."
        },
        "ƒ:filter_block_content": {
                "prefix": [
                        "filter_block_content",
                        "fbc"
                ],
                "body": "filter_block_content(${1:\\$text:string},${2:\\$allowed_html:array|string},${3:\\$allowed_protocols:array} )",
                "description": "Filters and sanitizes block content to remove non-allowable HTML from parsed block attribute values."
        },
        "ƒ:filter_block_kses": {
                "prefix": [
                        "filter_block_kses",
                        "fbk"
                ],
                "body": "filter_block_kses(${1:\\$block:WP_Block_Parser_Block},${2:\\$allowed_html:array|string},${3:\\$allowed_protocols:array} )",
                "description": "Filters and sanitizes a parsed block to remove non-allowable HTML from block attribute values."
        },
        "ƒ:filter_block_kses_value": {
                "prefix": [
                        "filter_block_kses_value",
                        "fbkv"
                ],
                "body": "filter_block_kses_value(${1:\\$value:array|string},${2:\\$allowed_html:array|string},${3:\\$allowed_protocols:array} )",
                "description": "Filters and sanitizes a parsed block attribute value to remove non-allowable HTML."
        },
        "ƒ:filter_default_metadata": {
                "prefix": [
                        "filter_default_metadata",
                        "fdm"
                ],
                "body": "filter_default_metadata(${1:\\$value:mixed},${2:\\$object_id:integer},${3:\\$meta_key:string},${4:\\$single:boolean},${5:\\$meta_type:string} )",
                "description": "Filters into default_{$object_type}_metadata and adds in default value."
        },
        "ƒ:filter_default_option": {
                "prefix": [
                        "filter_default_option",
                        "fdo"
                ],
                "body": "filter_default_option(${1:\\$default:mixed},${2:\\$option:string},${3:\\$passed_default:boolean} )",
                "description": "Filters the default value for the option."
        },
        "ƒ:filter_SSL": {
                "prefix": [
                        "filter_SSL",
                        "fS"
                ],
                "body": "filter_SSL(${1:\\$url:string} )",
                "description": "Formats a URL to use https."
        },
        "ƒ:find_core_auto_update": {
                "prefix": [
                        "find_core_auto_update",
                        "fcau"
                ],
                "body": "find_core_auto_update()",
                "description": "Gets the best available (and enabled) Auto-Update for WordPress core."
        },
        "ƒ:find_core_update": {
                "prefix": [
                        "find_core_update",
                        "fcu"
                ],
                "body": "find_core_update(${1:\\$version:string},${2:\\$locale:string} )",
                "description": "Finds the available update for WordPress core."
        },
        "ƒ:find_posts_div": {
                "prefix": [
                        "find_posts_div",
                        "fpd"
                ],
                "body": "find_posts_div(${1:\\$found_action:string} )",
                "description": "Outputs the modal window used for attaching media to posts or pages in the media-listing screen."
        },
        "ƒ:fix_import_form_size": {
                "prefix": [
                        "fix_import_form_size",
                        "fifs"
                ],
                "body": "fix_import_form_size(${1:\\$size:integer} )",
                "description": "Get the remaining upload space for this site."
        },
        "ƒ:fix_phpmailer_messageid": {
                "prefix": [
                        "fix_phpmailer_messageid",
                        "fpm"
                ],
                "body": "fix_phpmailer_messageid(${1:\\$phpmailer:PHPMailer} )",
                "description": "Corrects From host on outgoing mail to match the site domain"
        },
        "ƒ:floated_admin_avatar": {
                "prefix": [
                        "floated_admin_avatar",
                        "faa"
                ],
                "body": "floated_admin_avatar(${1:\\$name:string} )",
                "description": "Adds avatars to relevant places in admin."
        },
        "ƒ:flush_rewrite_rules": {
                "prefix": [
                        "flush_rewrite_rules",
                        "frr"
                ],
                "body": "flush_rewrite_rules(${1:\\$hard:boolean} )",
                "description": "Removes rewrite rules and then recreate rewrite rules."
        },
        "ƒ:force_ssl_admin": {
                "prefix": [
                        "force_ssl_admin",
                        "fsa"
                ],
                "body": "force_ssl_admin(${1:\\$force:string|boolean|null} )",
                "description": "Whether to force SSL used for the Administration Screens."
        },
        "ƒ:force_ssl_content": {
                "prefix": [
                        "force_ssl_content",
                        "fsc"
                ],
                "body": "force_ssl_content(${1:\\$force:boolean} )",
                "description": "Determines whether to force SSL on content."
        },
        "ƒ:force_ssl_login": {
                "prefix": [
                        "force_ssl_login",
                        "fsl"
                ],
                "body": "force_ssl_login(${1:\\$force:string|boolean|null} )",
                "description": "Whether SSL login should be forced."
        },
        "ƒ:form_option": {
                "prefix": [
                        "form_option",
                        "fo"
                ],
                "body": "form_option(${1:\\$option:string} )",
                "description": "Prints option value after sanitizing for forms."
        },
        "ƒ:format_code_lang": {
                "prefix": [
                        "format_code_lang",
                        "fcl"
                ],
                "body": "format_code_lang(${1:\\$code:string} )",
                "description": "Returns the language for a language code."
        },
        "ƒ:format_for_editor": {
                "prefix": [
                        "format_for_editor",
                        "ffe"
                ],
                "body": "format_for_editor(${1:\\$text:string},${2:\\$default_editor:string|null} )",
                "description": "Formats text for the editor."
        },
        "ƒ:format_to_edit": {
                "prefix": [
                        "format_to_edit",
                        "fte"
                ],
                "body": "format_to_edit(${1:\\$content:string},${2:\\$rich_text:boolean} )",
                "description": "Acts on text which is about to be edited."
        },
        "ƒ:format_to_post": {
                "prefix": [
                        "format_to_post",
                        "ftp"
                ],
                "body": "format_to_post(${1:\\$content:string} )",
                "description": "Formerly used to escape strings before inserting into the DB."
        },
        "ƒ:funky_javascript_callback": {
                "prefix": [
                        "funky_javascript_callback",
                        "fjc"
                ],
                "body": "funky_javascript_callback(${1:\\$matches:array} )",
                "description": "Callback used to change %uXXXX to &amp;#YYY; syntax"
        },
        "ƒ:funky_javascript_fix": {
                "prefix": [
                        "funky_javascript_fix",
                        "fjf"
                ],
                "body": "funky_javascript_fix(${1:\\$text:string} )",
                "description": "Fixes JavaScript bugs in browsers."
        },
        "ƒ:gallery_shortcode": {
                "prefix": [
                        "gallery_shortcode",
                        "gs"
                ],
                "body": "gallery_shortcode(${1:\\$attr:array} )",
                "description": "Builds the Gallery shortcode output."
        },
        "ƒ:gd_edit_image_support": {
                "prefix": [
                        "gd_edit_image_support",
                        "geis"
                ],
                "body": "gd_edit_image_support(${1:\\$mime_type:string} )",
                "description": "Check if the installed version of GD supports particular image type"
        },
        "ƒ:generate_block_asset_handle": {
                "prefix": [
                        "generate_block_asset_handle",
                        "gbah"
                ],
                "body": "generate_block_asset_handle(${1:\\$block_name:string},${2:\\$field_name:string} )",
                "description": "Generates the name for an asset based on the name of the block and the field name provided."
        },
        "ƒ:generate_postdata": {
                "prefix": [
                        "generate_postdata",
                        "gp"
                ],
                "body": "generate_postdata(${1:\\$post:WP_Post|object|integer} )",
                "description": "Generates post data."
        },
        "ƒ:generate_random_password": {
                "prefix": [
                        "generate_random_password",
                        "grp"
                ],
                "body": "generate_random_password(${1:\\$len:integer} )",
                "description": "Generates a random password."
        },
        "ƒ:generic_ping": {
                "prefix": [
                        "generic_ping",
                        "gp"
                ],
                "body": "generic_ping(${1:\\$post_id:integer} )",
                "description": "Sends pings to all of the ping site services."
        },
        "ƒ:get_404_template": {
                "prefix": [
                        "get_404_template",
                        "g4t"
                ],
                "body": "get_404_template()",
                "description": "Retrieve path of 404 template in current or parent template."
        },
        "ƒ:get_active_blog_for_user": {
                "prefix": [
                        "get_active_blog_for_user",
                        "gabfu"
                ],
                "body": "get_active_blog_for_user(${1:\\$user_id:integer} )",
                "description": "Gets one of a user&#039;s active blogs."
        },
        "ƒ:get_adjacent_image_link": {
                "prefix": [
                        "get_adjacent_image_link",
                        "gail"
                ],
                "body": "get_adjacent_image_link(${1:\\$prev:boolean},${2:\\$size:string|array},${3:\\$text:boolean} )",
                "description": "Gets the next or previous image link that has the same post parent."
        },
        "ƒ:get_adjacent_post": {
                "prefix": [
                        "get_adjacent_post",
                        "gap"
                ],
                "body": "get_adjacent_post(${1:\\$in_same_term:boolean},${2:\\$excluded_terms:array|string},${3:\\$previous:boolean},${4:\\$taxonomy:string} )",
                "description": "Retrieves the adjacent post."
        },
        "ƒ:get_adjacent_post_link": {
                "prefix": [
                        "get_adjacent_post_link",
                        "gapl"
                ],
                "body": "get_adjacent_post_link(${1:\\$format:string},${2:\\$link:string},${3:\\$in_same_term:boolean},${4:\\$excluded_terms:array|string},${5:\\$previous:boolean},${6:\\$taxonomy:string} )",
                "description": "Retrieves the adjacent post link."
        },
        "ƒ:get_adjacent_post_rel_link": {
                "prefix": [
                        "get_adjacent_post_rel_link",
                        "gaprl"
                ],
                "body": "get_adjacent_post_rel_link(${1:\\$title:string},${2:\\$in_same_term:boolean},${3:\\$excluded_terms:array|string},${4:\\$previous:boolean},${5:\\$taxonomy:string} )",
                "description": "Retrieves the adjacent post relational link."
        },
        "ƒ:get_admin_page_parent": {
                "prefix": [
                        "get_admin_page_parent",
                        "gapp"
                ],
                "body": "get_admin_page_parent(${1:\\$parent_page:string} )",
                "description": "Gets the parent file of the current admin page."
        },
        "ƒ:get_admin_page_title": {
                "prefix": [
                        "get_admin_page_title",
                        "gapt"
                ],
                "body": "get_admin_page_title()",
                "description": "Gets the title of the current admin page."
        },
        "ƒ:get_admin_url": {
                "prefix": [
                        "get_admin_url",
                        "gau"
                ],
                "body": "get_admin_url(${1:\\$blog_id:integer|null},${2:\\$path:string},${3:\\$scheme:string} )",
                "description": "Retrieves the URL to the admin area for a given site."
        },
        "ƒ:get_admin_users_for_domain": {
                "prefix": [
                        "get_admin_users_for_domain",
                        "gaufd"
                ],
                "body": "get_admin_users_for_domain(${1:\\$domain:string},${2:\\$path:string} )",
                "description": "Get the admin for a domain/path combination."
        },
        "ƒ:get_all_category_ids": {
                "prefix": [
                        "get_all_category_ids",
                        "gaci"
                ],
                "body": "get_all_category_ids()",
                "description": "Retrieves all category IDs."
        },
        "ƒ:get_all_page_ids": {
                "prefix": [
                        "get_all_page_ids",
                        "gapi"
                ],
                "body": "get_all_page_ids()",
                "description": "Get a list of page IDs."
        },
        "ƒ:get_all_post_type_supports": {
                "prefix": [
                        "get_all_post_type_supports",
                        "gapts"
                ],
                "body": "get_all_post_type_supports(${1:\\$post_type:string} )",
                "description": "Get all the post type features"
        },
        "ƒ:get_all_user_settings": {
                "prefix": [
                        "get_all_user_settings",
                        "gaus"
                ],
                "body": "get_all_user_settings()",
                "description": "Retrieves all user interface settings."
        },
        "ƒ:get_alloptions": {
                "prefix": [
                        "get_alloptions",
                        "ga"
                ],
                "body": "get_alloptions()",
                "description": "Retrieve all autoload options, or all options if no autoloaded ones exist."
        },
        "ƒ:get_alloptions_110": {
                "prefix": [
                        "get_alloptions_110",
                        "ga1"
                ],
                "body": "get_alloptions_110()",
                "description": "Retrieve all options as it was for 1.2."
        },
        "ƒ:get_allowed_block_template_part_areas": {
                "prefix": [
                        "get_allowed_block_template_part_areas",
                        "gabtpa"
                ],
                "body": "get_allowed_block_template_part_areas()",
                "description": "Returns a filtered list of allowed area values for template parts."
        },
        "ƒ:get_allowed_block_types": {
                "prefix": [
                        "get_allowed_block_types",
                        "gabt"
                ],
                "body": "get_allowed_block_types(${1:\\$block_editor_context:WP_Block_Editor_Context} )",
                "description": "Gets the list of allowed block types to use in the block editor."
        },
        "ƒ:get_allowed_http_origins": {
                "prefix": [
                        "get_allowed_http_origins",
                        "gaho"
                ],
                "body": "get_allowed_http_origins()",
                "description": "Retrieve list of allowed HTTP origins."
        },
        "ƒ:get_allowed_mime_types": {
                "prefix": [
                        "get_allowed_mime_types",
                        "gamt"
                ],
                "body": "get_allowed_mime_types(${1:\\$user:integer|WP_User|null} )",
                "description": "Retrieve list of allowed mime types and file extensions."
        },
        "ƒ:get_allowed_themes": {
                "prefix": [
                        "get_allowed_themes",
                        "gat"
                ],
                "body": "get_allowed_themes()",
                "description": "Get the allowed themes for the current site."
        },
        "ƒ:get_ancestors": {
                "prefix": [
                        "get_ancestors",
                        "ga"
                ],
                "body": "get_ancestors(${1:\\$object_id:integer},${2:\\$object_type:string},${3:\\$resource_type:string} )",
                "description": "Gets an array of ancestor IDs for a given object."
        },
        "ƒ:get_approved_comments": {
                "prefix": [
                        "get_approved_comments",
                        "gac"
                ],
                "body": "get_approved_comments(${1:\\$post_id:integer},${2:\\$args:array} )",
                "description": "Retrieves the approved comments for post $post_id."
        },
        "ƒ:get_archive_template": {
                "prefix": [
                        "get_archive_template",
                        "gat"
                ],
                "body": "get_archive_template()",
                "description": "Retrieve path of archive template in current or parent template."
        },
        "ƒ:get_archives": {
                "prefix": [
                        "get_archives",
                        "ga"
                ],
                "body": "get_archives(${1:\\$type:string},${2:\\$limit:string},${3:\\$format:string},${4:\\$before:string},${5:\\$after:string},${6:\\$show_post_count:boolean} )",
                "description": "Retrieves a list of archives."
        },
        "ƒ:get_archives_link": {
                "prefix": [
                        "get_archives_link",
                        "gal"
                ],
                "body": "get_archives_link(${1:\\$url:string},${2:\\$text:string},${3:\\$format:string},${4:\\$before:string},${5:\\$after:string},${6:\\$selected:boolean} )",
                "description": "Retrieve archive link content based on predefined or custom code."
        },
        "ƒ:get_attached_file": {
                "prefix": [
                        "get_attached_file",
                        "gaf"
                ],
                "body": "get_attached_file(${1:\\$attachment_id:integer},${2:\\$unfiltered:boolean} )",
                "description": "Retrieve attached file path based on attachment ID."
        },
        "ƒ:get_attached_media": {
                "prefix": [
                        "get_attached_media",
                        "gam"
                ],
                "body": "get_attached_media(${1:\\$type:string},${2:\\$post:integer|WP_Post} )",
                "description": "Retrieves media attached to the passed post."
        },
        "ƒ:get_attachment_fields_to_edit": {
                "prefix": [
                        "get_attachment_fields_to_edit",
                        "gafte"
                ],
                "body": "get_attachment_fields_to_edit(${1:\\$post:WP_Post},${2:\\$errors:array|null} )",
                "description": "Retrieves the attachment fields to edit form fields."
        },
        "ƒ:get_attachment_icon": {
                "prefix": [
                        "get_attachment_icon",
                        "gai"
                ],
                "body": "get_attachment_icon(${1:\\$id:integer},${2:\\$fullsize:boolean},${3:\\$max_dims:array} )",
                "description": "Retrieve HTML content of icon attachment image element."
        },
        "ƒ:get_attachment_icon_src": {
                "prefix": [
                        "get_attachment_icon_src",
                        "gais"
                ],
                "body": "get_attachment_icon_src(${1:\\$id:integer},${2:\\$fullsize:boolean} )",
                "description": "Retrieve icon URL and Path."
        },
        "ƒ:get_attachment_innerHTML": {
                "prefix": [
                        "get_attachment_innerHTML",
                        "gai"
                ],
                "body": "get_attachment_innerHTML(${1:\\$id:integer},${2:\\$fullsize:boolean},${3:\\$max_dims:array} )",
                "description": "Retrieve HTML content of image element."
        },
        "ƒ:get_attachment_link": {
                "prefix": [
                        "get_attachment_link",
                        "gal"
                ],
                "body": "get_attachment_link(${1:\\$post:integer|object|null},${2:\\$leavename:boolean} )",
                "description": "Retrieves the permalink for an attachment."
        },
        "ƒ:get_attachment_taxonomies": {
                "prefix": [
                        "get_attachment_taxonomies",
                        "gat"
                ],
                "body": "get_attachment_taxonomies(${1:\\$attachment:integer|array|object},${2:\\$output:string} )",
                "description": "Retrieves taxonomies attached to given the attachment."
        },
        "ƒ:get_attachment_template": {
                "prefix": [
                        "get_attachment_template",
                        "gat"
                ],
                "body": "get_attachment_template()",
                "description": "Retrieve path of attachment template in current or parent template."
        },
        "ƒ:get_author_feed_link": {
                "prefix": [
                        "get_author_feed_link",
                        "gafl"
                ],
                "body": "get_author_feed_link(${1:\\$author_id:integer},${2:\\$feed:string} )",
                "description": "Retrieves the feed link for a given author."
        },
        "ƒ:get_author_link": {
                "prefix": [
                        "get_author_link",
                        "gal"
                ],
                "body": "get_author_link(${1:\\$display:boolean},${2:\\$author_id:integer},${3:\\$author_nicename:string} )",
                "description": "Returns or Prints link to the author&#039;s posts."
        },
        "ƒ:get_author_name": {
                "prefix": [
                        "get_author_name",
                        "gan"
                ],
                "body": "get_author_name(${1:\\$auth_id:integer} )",
                "description": "Retrieve the specified author&#039;s preferred display name."
        },
        "ƒ:get_author_posts_url": {
                "prefix": [
                        "get_author_posts_url",
                        "gapu"
                ],
                "body": "get_author_posts_url(${1:\\$author_id:integer},${2:\\$author_nicename:string} )",
                "description": "Retrieves the URL to the author page for the user with the ID provided."
        },
        "ƒ:get_author_rss_link": {
                "prefix": [
                        "get_author_rss_link",
                        "garl"
                ],
                "body": "get_author_rss_link(${1:\\$display:boolean},${2:\\$author_id:integer} )",
                "description": "Print/Return link to author RSS feed."
        },
        "ƒ:get_author_template": {
                "prefix": [
                        "get_author_template",
                        "gat"
                ],
                "body": "get_author_template()",
                "description": "Retrieve path of author template in current or parent template."
        },
        "ƒ:get_author_user_ids": {
                "prefix": [
                        "get_author_user_ids",
                        "gaui"
                ],
                "body": "get_author_user_ids()",
                "description": "Get all user IDs."
        },
        "ƒ:get_autotoggle": {
                "prefix": [
                        "get_autotoggle",
                        "ga"
                ],
                "body": "get_autotoggle(${1:\\$id:integer} )",
                "description": "Gets the auto_toggle setting."
        },
        "ƒ:get_available_languages": {
                "prefix": [
                        "get_available_languages",
                        "gal"
                ],
                "body": "get_available_languages(${1:\\$dir:string|null} )",
                "description": "Get all available languages based on the presence of *.mo files in a given directory."
        },
        "ƒ:get_available_post_mime_types": {
                "prefix": [
                        "get_available_post_mime_types",
                        "gapmt"
                ],
                "body": "get_available_post_mime_types(${1:\\$type:string} )",
                "description": "Get all available post MIME types for a given post type."
        },
        "ƒ:get_available_post_statuses": {
                "prefix": [
                        "get_available_post_statuses",
                        "gaps"
                ],
                "body": "get_available_post_statuses(${1:\\$type:string} )",
                "description": "Returns all the possible statuses for a post type."
        },
        "ƒ:get_avatar": {
                "prefix": [
                        "get_avatar",
                        "ga"
                ],
                "body": "get_avatar(${1:\\$id_or_email:mixed},${2:\\$size:integer},${3:\\$default:string},${4:\\$alt:string},${5:\\$args:array|null} )",
                "description": "Retrieve the avatar `&lt;img&gt;` tag for a user, email address, MD5 hash, comment, or post."
        },
        "ƒ:get_avatar_data": {
                "prefix": [
                        "get_avatar_data",
                        "gad"
                ],
                "body": "get_avatar_data(${1:\\$id_or_email:mixed},${2:\\$args:array|null} )",
                "description": "Retrieves default data about the avatar."
        },
        "ƒ:get_avatar_url": {
                "prefix": [
                        "get_avatar_url",
                        "gau"
                ],
                "body": "get_avatar_url(${1:\\$id_or_email:mixed},${2:\\$args:array|null} )",
                "description": "Retrieves the avatar URL."
        },
        "ƒ:get_background_color": {
                "prefix": [
                        "get_background_color",
                        "gbc"
                ],
                "body": "get_background_color()",
                "description": "Retrieves value for custom background color."
        },
        "ƒ:get_background_image": {
                "prefix": [
                        "get_background_image",
                        "gbi"
                ],
                "body": "get_background_image()",
                "description": "Retrieves background image for custom background."
        },
        "ƒ:get_block_categories": {
                "prefix": [
                        "get_block_categories",
                        "gbc"
                ],
                "body": "get_block_categories(${1:\\$post_or_block_editor_context:WP_Post|WP_Block_Editor_Context} )",
                "description": "Returns all the categories for block types that will be shown in the block editor."
        },
        "ƒ:get_block_editor_server_block_settings": {
                "prefix": [
                        "get_block_editor_server_block_settings",
                        "gbesbs"
                ],
                "body": "get_block_editor_server_block_settings()",
                "description": "Prepares server-registered blocks for the block editor."
        },
        "ƒ:get_block_editor_settings": {
                "prefix": [
                        "get_block_editor_settings",
                        "gbes"
                ],
                "body": "get_block_editor_settings(${1:\\$custom_settings:array},${2:\\$block_editor_context:WP_Block_Editor_Context} )",
                "description": "Returns the contextualized block editor settings for a selected editor context."
        },
        "ƒ:get_block_editor_theme_styles": {
                "prefix": [
                        "get_block_editor_theme_styles",
                        "gbets"
                ],
                "body": "get_block_editor_theme_styles()",
                "description": "Creates an array of theme styles to load into the block editor."
        },
        "ƒ:get_block_file_template": {
                "prefix": [
                        "get_block_file_template",
                        "gbft"
                ],
                "body": "get_block_file_template(${1:\\$id:string},${2:\\$template_type:string} )",
                "description": "Retrieves a single unified template object using its id."
        },
        "ƒ:get_block_metadata_i18n_schema": {
                "prefix": [
                        "get_block_metadata_i18n_schema",
                        "gbmis"
                ],
                "body": "get_block_metadata_i18n_schema()",
                "description": "Gets i18n schema for block&#039;s metadata read from `block.json` file."
        },
        "ƒ:get_block_template": {
                "prefix": [
                        "get_block_template",
                        "gbt"
                ],
                "body": "get_block_template(${1:\\$id:string},${2:\\$template_type:string} )",
                "description": "Retrieves a single unified template object using its id."
        },
        "ƒ:get_block_templates": {
                "prefix": [
                        "get_block_templates",
                        "gbt"
                ],
                "body": "get_block_templates(${1:\\$query:array},${2:\\$template_type:string} )",
                "description": "Retrieves a list of unified template objects based on a query."
        },
        "ƒ:get_block_theme_folders": {
                "prefix": [
                        "get_block_theme_folders",
                        "gbtf"
                ],
                "body": "get_block_theme_folders(${1:\\$theme_stylesheet:string|null} )",
                "description": "For backward compatibility reasons, block themes might be using block-templates or block-template-parts, this function ensures we fallback to these folders properly."
        },
        "ƒ:get_block_wrapper_attributes": {
                "prefix": [
                        "get_block_wrapper_attributes",
                        "gbwa"
                ],
                "body": "get_block_wrapper_attributes(${1:\\$extra_attributes:array} )",
                "description": "Generates a string of attributes by applying to the current block being rendered all of the features that the block supports."
        },
        "ƒ:get_blog_count": {
                "prefix": [
                        "get_blog_count",
                        "gbc"
                ],
                "body": "get_blog_count(${1:\\$network_id:integer|null} )",
                "description": "Gets the number of active sites on the installation."
        },
        "ƒ:get_blog_details": {
                "prefix": [
                        "get_blog_details",
                        "gbd"
                ],
                "body": "get_blog_details(${1:\\$fields:integer|string|array|null},${2:\\$get_all:boolean} )",
                "description": "Retrieve the details for a blog from the blogs table and blog options."
        },
        "ƒ:get_blog_id_from_url": {
                "prefix": [
                        "get_blog_id_from_url",
                        "gbifu"
                ],
                "body": "get_blog_id_from_url(${1:\\$domain:string},${2:\\$path:string} )",
                "description": "Gets a blog&#039;s numeric ID from its URL."
        },
        "ƒ:get_blog_list": {
                "prefix": [
                        "get_blog_list",
                        "gbl"
                ],
                "body": "get_blog_list(${1:\\$start:integer},${2:\\$num:integer},${3:\\$deprecated:string} )",
                "description": "Deprecated functionality to retrieve a list of all sites."
        },
        "ƒ:get_blog_option": {
                "prefix": [
                        "get_blog_option",
                        "gbo"
                ],
                "body": "get_blog_option(${1:\\$id:integer},${2:\\$option:string},${3:\\$default:mixed} )",
                "description": "Retrieve option value for a given blog id based on name of option."
        },
        "ƒ:get_blog_permalink": {
                "prefix": [
                        "get_blog_permalink",
                        "gbp"
                ],
                "body": "get_blog_permalink(${1:\\$blog_id:integer},${2:\\$post_id:integer} )",
                "description": "Gets the permalink for a post on another blog."
        },
        "ƒ:get_blog_post": {
                "prefix": [
                        "get_blog_post",
                        "gbp"
                ],
                "body": "get_blog_post(${1:\\$blog_id:integer},${2:\\$post_id:integer} )",
                "description": "Gets a blog post from any site on the network."
        },
        "ƒ:get_blog_status": {
                "prefix": [
                        "get_blog_status",
                        "gbs"
                ],
                "body": "get_blog_status(${1:\\$id:integer},${2:\\$pref:string} )",
                "description": "Get a blog details field."
        },
        "ƒ:get_blogaddress_by_domain": {
                "prefix": [
                        "get_blogaddress_by_domain",
                        "gbbd"
                ],
                "body": "get_blogaddress_by_domain(${1:\\$domain:string},${2:\\$path:string} )",
                "description": "Get a full blog URL, given a domain and a path."
        },
        "ƒ:get_blogaddress_by_id": {
                "prefix": [
                        "get_blogaddress_by_id",
                        "gbbi"
                ],
                "body": "get_blogaddress_by_id(${1:\\$blog_id:integer} )",
                "description": "Get a full blog URL, given a blog ID."
        },
        "ƒ:get_blogaddress_by_name": {
                "prefix": [
                        "get_blogaddress_by_name",
                        "gbbn"
                ],
                "body": "get_blogaddress_by_name(${1:\\$blogname:string} )",
                "description": "Get a full blog URL, given a blog name."
        },
        "ƒ:get_bloginfo": {
                "prefix": [
                        "get_bloginfo",
                        "gb"
                ],
                "body": "get_bloginfo(${1:\\$show:string},${2:\\$filter:string} )",
                "description": "Retrieves information about the current site."
        },
        "ƒ:get_bloginfo_rss": {
                "prefix": [
                        "get_bloginfo_rss",
                        "gbr"
                ],
                "body": "get_bloginfo_rss(${1:\\$show:string} )",
                "description": "RSS container for the bloginfo function."
        },
        "ƒ:get_blogs_of_user": {
                "prefix": [
                        "get_blogs_of_user",
                        "gbou"
                ],
                "body": "get_blogs_of_user(${1:\\$user_id:integer},${2:\\$all:boolean} )",
                "description": "Gets the sites a user belongs to."
        },
        "ƒ:get_body_class": {
                "prefix": [
                        "get_body_class",
                        "gbc"
                ],
                "body": "get_body_class(${1:\\$class:string|array} )",
                "description": "Retrieves an array of the class names for the body element."
        },
        "ƒ:get_bookmark": {
                "prefix": [
                        "get_bookmark",
                        "gb"
                ],
                "body": "get_bookmark(${1:\\$bookmark:integer|stdClass},${2:\\$output:string},${3:\\$filter:string} )",
                "description": "Retrieve Bookmark data"
        },
        "ƒ:get_bookmark_field": {
                "prefix": [
                        "get_bookmark_field",
                        "gbf"
                ],
                "body": "get_bookmark_field(${1:\\$field:string},${2:\\$bookmark:integer},${3:\\$context:string} )",
                "description": "Retrieve single bookmark data item or field."
        },
        "ƒ:get_bookmarks": {
                "prefix": [
                        "get_bookmarks",
                        "gb"
                ],
                "body": "get_bookmarks(${1:\\$args:string|array} )",
                "description": "Retrieves the list of bookmarks"
        },
        "ƒ:get_border_color_classes_for_block_core_search": {
                "prefix": [
                        "get_border_color_classes_for_block_core_search",
                        "gbccfbcs"
                ],
                "body": "get_border_color_classes_for_block_core_search(${1:\\$attributes:array} )",
                "description": "Returns border color classnames depending on whether there are named or custom border colors."
        },
        "ƒ:get_boundary_post": {
                "prefix": [
                        "get_boundary_post",
                        "gbp"
                ],
                "body": "get_boundary_post(${1:\\$in_same_term:boolean},${2:\\$excluded_terms:array|string},${3:\\$start:boolean},${4:\\$taxonomy:string} )",
                "description": "Retrieves the boundary post."
        },
        "ƒ:get_boundary_post_rel_link": {
                "prefix": [
                        "get_boundary_post_rel_link",
                        "gbprl"
                ],
                "body": "get_boundary_post_rel_link(${1:\\$title:string},${2:\\$in_same_cat:boolean},${3:\\$excluded_categories:string},${4:\\$start:boolean} )",
                "description": "Get boundary post relational link."
        },
        "ƒ:get_broken_themes": {
                "prefix": [
                        "get_broken_themes",
                        "gbt"
                ],
                "body": "get_broken_themes()",
                "description": "Retrieves a list of broken themes."
        },
        "ƒ:get_calendar": {
                "prefix": [
                        "get_calendar",
                        "gc"
                ],
                "body": "get_calendar(${1:\\$initial:boolean},${2:\\$echo:boolean} )",
                "description": "Display calendar with days that have posts as links."
        },
        "ƒ:get_cancel_comment_reply_link": {
                "prefix": [
                        "get_cancel_comment_reply_link",
                        "gccrl"
                ],
                "body": "get_cancel_comment_reply_link(${1:\\$text:string} )",
                "description": "Retrieves HTML content for cancel comment reply link."
        },
        "ƒ:get_cat_ID": {
                "prefix": [
                        "get_cat_ID",
                        "gcI"
                ],
                "body": "get_cat_ID(${1:\\$cat_name:string} )",
                "description": "Retrieves the ID of a category from its name."
        },
        "ƒ:get_cat_name": {
                "prefix": [
                        "get_cat_name",
                        "gcn"
                ],
                "body": "get_cat_name(${1:\\$cat_id:integer} )",
                "description": "Retrieves the name of a category from its ID."
        },
        "ƒ:get_categories": {
                "prefix": [
                        "get_categories",
                        "gc"
                ],
                "body": "get_categories(${1:\\$args:string|array} )",
                "description": "Retrieves a list of category objects."
        },
        "ƒ:get_category": {
                "prefix": [
                        "get_category",
                        "gc"
                ],
                "body": "get_category(${1:\\$category:integer|object},${2:\\$output:string},${3:\\$filter:string} )",
                "description": "Retrieves category data given a category ID or category object."
        },
        "ƒ:get_category_by_path": {
                "prefix": [
                        "get_category_by_path",
                        "gcbp"
                ],
                "body": "get_category_by_path(${1:\\$category_path:string},${2:\\$full_match:boolean},${3:\\$output:string} )",
                "description": "Retrieves a category based on URL containing the category slug."
        },
        "ƒ:get_category_by_slug": {
                "prefix": [
                        "get_category_by_slug",
                        "gcbs"
                ],
                "body": "get_category_by_slug(${1:\\$slug:string} )",
                "description": "Retrieves a category object by category slug."
        },
        "ƒ:get_category_children": {
                "prefix": [
                        "get_category_children",
                        "gcc"
                ],
                "body": "get_category_children(${1:\\$id:integer},${2:\\$before:string},${3:\\$after:string},${4:\\$visited:array} )",
                "description": "Retrieve category children list separated before and after the term IDs."
        },
        "ƒ:get_category_feed_link": {
                "prefix": [
                        "get_category_feed_link",
                        "gcfl"
                ],
                "body": "get_category_feed_link(${1:\\$cat:integer|WP_Term|object},${2:\\$feed:string} )",
                "description": "Retrieves the feed link for a category."
        },
        "ƒ:get_category_link": {
                "prefix": [
                        "get_category_link",
                        "gcl"
                ],
                "body": "get_category_link(${1:\\$category:integer|object} )",
                "description": "Retrieves category link URL."
        },
        "ƒ:get_category_parents": {
                "prefix": [
                        "get_category_parents",
                        "gcp"
                ],
                "body": "get_category_parents(${1:\\$category_id:integer},${2:\\$link:boolean},${3:\\$separator:string},${4:\\$nicename:boolean},${5:\\$deprecated:array} )",
                "description": "Retrieves category parents with separator."
        },
        "ƒ:get_category_rss_link": {
                "prefix": [
                        "get_category_rss_link",
                        "gcrl"
                ],
                "body": "get_category_rss_link(${1:\\$display:boolean},${2:\\$cat_ID:integer} )",
                "description": "Print/Return link to category RSS2 feed."
        },
        "ƒ:get_category_template": {
                "prefix": [
                        "get_category_template",
                        "gct"
                ],
                "body": "get_category_template()",
                "description": "Retrieve path of category template in current or parent template."
        },
        "ƒ:get_category_to_edit": {
                "prefix": [
                        "get_category_to_edit",
                        "gcte"
                ],
                "body": "get_category_to_edit(${1:\\$id:integer} )",
                "description": "Get category object for given ID and &#039;edit&#039; filter context."
        },
        "ƒ:get_catname": {
                "prefix": [
                        "get_catname",
                        "gc"
                ],
                "body": "get_catname(${1:\\$cat_ID:integer} )",
                "description": "Retrieve the category name by the category ID."
        },
        "ƒ:get_children": {
                "prefix": [
                        "get_children",
                        "gc"
                ],
                "body": "get_children(${1:\\$args:mixed},${2:\\$output:string} )",
                "description": "Retrieve all children of the post parent ID."
        },
        "ƒ:get_clean_basedomain": {
                "prefix": [
                        "get_clean_basedomain",
                        "gcb"
                ],
                "body": "get_clean_basedomain()",
                "description": "Get base domain of network."
        },
        "ƒ:get_cli_args": {
                "prefix": [
                        "get_cli_args",
                        "gca"
                ],
                "body": "get_cli_args(${1:\\$param:string},${2:\\$required:boolean} )",
                "description": "Returns value of command line params."
        },
        "ƒ:get_color_classes_for_block_core_search": {
                "prefix": [
                        "get_color_classes_for_block_core_search",
                        "gccfbcs"
                ],
                "body": "get_color_classes_for_block_core_search(${1:\\$attributes:array} )",
                "description": "Returns color classnames depending on whether there are named or custom text and background colors."
        },
        "ƒ:get_column_headers": {
                "prefix": [
                        "get_column_headers",
                        "gch"
                ],
                "body": "get_column_headers(${1:\\$screen:string|WP_Screen} )",
                "description": "Get the column headers for a screen"
        },
        "ƒ:get_comment": {
                "prefix": [
                        "get_comment",
                        "gc"
                ],
                "body": "get_comment(${1:\\$comment:WP_Comment|string|integer|null},${2:\\$output:string} )",
                "description": "Retrieves comment data given a comment ID or comment object."
        },
        "ƒ:get_comment_author": {
                "prefix": [
                        "get_comment_author",
                        "gca"
                ],
                "body": "get_comment_author(${1:\\$comment_ID:integer|WP_Comment} )",
                "description": "Retrieves the author of the current comment."
        },
        "ƒ:get_comment_author_email": {
                "prefix": [
                        "get_comment_author_email",
                        "gcae"
                ],
                "body": "get_comment_author_email(${1:\\$comment_ID:integer|WP_Comment} )",
                "description": "Retrieves the email of the author of the current comment."
        },
        "ƒ:get_comment_author_email_link": {
                "prefix": [
                        "get_comment_author_email_link",
                        "gcael"
                ],
                "body": "get_comment_author_email_link(${1:\\$linktext:string},${2:\\$before:string},${3:\\$after:string},${4:\\$comment:integer|WP_Comment|null} )",
                "description": "Returns the HTML email link to the author of the current comment."
        },
        "ƒ:get_comment_author_IP": {
                "prefix": [
                        "get_comment_author_IP",
                        "gcaI"
                ],
                "body": "get_comment_author_IP(${1:\\$comment_ID:integer|WP_Comment} )",
                "description": "Retrieves the IP address of the author of the current comment."
        },
        "ƒ:get_comment_author_link": {
                "prefix": [
                        "get_comment_author_link",
                        "gcal"
                ],
                "body": "get_comment_author_link(${1:\\$comment_ID:integer|WP_Comment} )",
                "description": "Retrieves the HTML link to the URL of the author of the current comment."
        },
        "ƒ:get_comment_author_rss": {
                "prefix": [
                        "get_comment_author_rss",
                        "gcar"
                ],
                "body": "get_comment_author_rss()",
                "description": "Retrieve the current comment author for use in the feeds."
        },
        "ƒ:get_comment_author_url": {
                "prefix": [
                        "get_comment_author_url",
                        "gcau"
                ],
                "body": "get_comment_author_url(${1:\\$comment_ID:integer|WP_Comment} )",
                "description": "Retrieves the URL of the author of the current comment, not linked."
        },
        "ƒ:get_comment_author_url_link": {
                "prefix": [
                        "get_comment_author_url_link",
                        "gcaul"
                ],
                "body": "get_comment_author_url_link(${1:\\$linktext:string},${2:\\$before:string},${3:\\$after:string},${4:\\$comment:integer|WP_Comment} )",
                "description": "Retrieves the HTML link of the URL of the author of the current comment."
        },
        "ƒ:get_comment_class": {
                "prefix": [
                        "get_comment_class",
                        "gcc"
                ],
                "body": "get_comment_class(${1:\\$css_class:string|array},${2:\\$comment_id:integer|WP_Comment|null},${3:\\$post_id:integer|WP_Post|null} )",
                "description": "Returns the classes for the comment div as an array."
        },
        "ƒ:get_comment_count": {
                "prefix": [
                        "get_comment_count",
                        "gcc"
                ],
                "body": "get_comment_count(${1:\\$post_id:integer} )",
                "description": "Retrieves the total comment counts for the whole site or a single post."
        },
        "ƒ:get_comment_date": {
                "prefix": [
                        "get_comment_date",
                        "gcd"
                ],
                "body": "get_comment_date(${1:\\$format:string},${2:\\$comment_ID:integer|WP_Comment} )",
                "description": "Retrieves the comment date of the current comment."
        },
        "ƒ:get_comment_delimited_block_content": {
                "prefix": [
                        "get_comment_delimited_block_content",
                        "gcdbc"
                ],
                "body": "get_comment_delimited_block_content(${1:\\$block_name:string|null},${2:\\$block_attributes:array},${3:\\$block_content:string} )",
                "description": "Returns the content of a block, including comment delimiters."
        },
        "ƒ:get_comment_excerpt": {
                "prefix": [
                        "get_comment_excerpt",
                        "gce"
                ],
                "body": "get_comment_excerpt(${1:\\$comment_ID:integer|WP_Comment} )",
                "description": "Retrieves the excerpt of the given comment."
        },
        "ƒ:get_comment_guid": {
                "prefix": [
                        "get_comment_guid",
                        "gcg"
                ],
                "body": "get_comment_guid(${1:\\$comment_id:integer|WP_Comment|null} )",
                "description": "Retrieve the feed GUID for the current comment."
        },
        "ƒ:get_comment_ID": {
                "prefix": [
                        "get_comment_ID",
                        "gcI"
                ],
                "body": "get_comment_ID()",
                "description": "Retrieves the comment ID of the current comment."
        },
        "ƒ:get_comment_id_fields": {
                "prefix": [
                        "get_comment_id_fields",
                        "gcif"
                ],
                "body": "get_comment_id_fields(${1:\\$post_id:integer} )",
                "description": "Retrieves hidden input HTML for replying to comments."
        },
        "ƒ:get_comment_link": {
                "prefix": [
                        "get_comment_link",
                        "gcl"
                ],
                "body": "get_comment_link(${1:\\$comment:WP_Comment|integer|null},${2:\\$args:array} )",
                "description": "Retrieves the link to a given comment."
        },
        "ƒ:get_comment_meta": {
                "prefix": [
                        "get_comment_meta",
                        "gcm"
                ],
                "body": "get_comment_meta(${1:\\$comment_id:integer},${2:\\$key:string},${3:\\$single:boolean} )",
                "description": "Retrieves comment meta field for a comment."
        },
        "ƒ:get_comment_pages_count": {
                "prefix": [
                        "get_comment_pages_count",
                        "gcpc"
                ],
                "body": "get_comment_pages_count(${1:\\$comments:array|null},${2:\\$per_page:integer|null},${3:\\$threaded:boolean|null} )",
                "description": "Calculates the total number of comment pages."
        },
        "ƒ:get_comment_reply_link": {
                "prefix": [
                        "get_comment_reply_link",
                        "gcrl"
                ],
                "body": "get_comment_reply_link(${1:\\$args:array},${2:\\$comment:integer|WP_Comment|null},${3:\\$post:integer|WP_Post|null} )",
                "description": "Retrieves HTML content for reply to comment link."
        },
        "ƒ:get_comment_statuses": {
                "prefix": [
                        "get_comment_statuses",
                        "gcs"
                ],
                "body": "get_comment_statuses()",
                "description": "Retrieves all of the WordPress supported comment statuses."
        },
        "ƒ:get_comment_text": {
                "prefix": [
                        "get_comment_text",
                        "gct"
                ],
                "body": "get_comment_text(${1:\\$comment_ID:integer|WP_Comment},${2:\\$args:array} )",
                "description": "Retrieves the text of the current comment."
        },
        "ƒ:get_comment_time": {
                "prefix": [
                        "get_comment_time",
                        "gct"
                ],
                "body": "get_comment_time(${1:\\$format:string},${2:\\$gmt:boolean},${3:\\$translate:boolean} )",
                "description": "Retrieves the comment time of the current comment."
        },
        "ƒ:get_comment_to_edit": {
                "prefix": [
                        "get_comment_to_edit",
                        "gcte"
                ],
                "body": "get_comment_to_edit(${1:\\$id:integer} )",
                "description": "Returns a WP_Comment object based on comment ID."
        },
        "ƒ:get_comment_type": {
                "prefix": [
                        "get_comment_type",
                        "gct"
                ],
                "body": "get_comment_type(${1:\\$comment_ID:integer|WP_Comment} )",
                "description": "Retrieves the comment type of the current comment."
        },
        "ƒ:get_commentdata": {
                "prefix": [
                        "get_commentdata",
                        "gc"
                ],
                "body": "get_commentdata(${1:\\$comment_ID:integer},${2:\\$no_cache:integer},${3:\\$include_unapproved:boolean} )",
                "description": "Retrieve an array of comment data about comment $comment_ID."
        },
        "ƒ:get_comments": {
                "prefix": [
                        "get_comments",
                        "gc"
                ],
                "body": "get_comments(${1:\\$args:string|array} )",
                "description": "Retrieves a list of comments."
        },
        "ƒ:get_comments_link": {
                "prefix": [
                        "get_comments_link",
                        "gcl"
                ],
                "body": "get_comments_link(${1:\\$post_id:integer|WP_Post} )",
                "description": "Retrieves the link to the current post comments."
        },
        "ƒ:get_comments_number": {
                "prefix": [
                        "get_comments_number",
                        "gcn"
                ],
                "body": "get_comments_number(${1:\\$post_id:integer|WP_Post} )",
                "description": "Retrieves the amount of comments a post has."
        },
        "ƒ:get_comments_number_text": {
                "prefix": [
                        "get_comments_number_text",
                        "gcnt"
                ],
                "body": "get_comments_number_text(${1:\\$zero:string},${2:\\$one:string},${3:\\$more:string},${4:\\$post_id:integer|WP_Post} )",
                "description": "Displays the language string for the number of comments the current post has."
        },
        "ƒ:get_comments_pagenum_link": {
                "prefix": [
                        "get_comments_pagenum_link",
                        "gcpl"
                ],
                "body": "get_comments_pagenum_link(${1:\\$pagenum:integer},${2:\\$max_page:integer} )",
                "description": "Retrieves the comments page number link."
        },
        "ƒ:get_comments_pagination_arrow": {
                "prefix": [
                        "get_comments_pagination_arrow",
                        "gcpa"
                ],
                "body": "get_comments_pagination_arrow(${1:\\$block:WP_Block},${2:\\$pagination_type:string} )",
                "description": "Helper function that returns the proper pagination arrow HTML for `CommentsPaginationNext` and `CommentsPaginationPrevious` blocks based on the provided `paginationArrow` from `CommentsPagination` context."
        },
        "ƒ:get_comments_popup_template": {
                "prefix": [
                        "get_comments_popup_template",
                        "gcpt"
                ],
                "body": "get_comments_popup_template()",
                "description": "Retrieve path of comment popup template in current or parent template."
        },
        "ƒ:get_compat_media_markup": {
                "prefix": [
                        "get_compat_media_markup",
                        "gcmm"
                ],
                "body": "get_compat_media_markup(${1:\\$attachment_id:integer},${2:\\$args:array|null} )",
                "description": ""
        },
        "ƒ:get_core_checksums": {
                "prefix": [
                        "get_core_checksums",
                        "gcc"
                ],
                "body": "get_core_checksums(${1:\\$version:string},${2:\\$locale:string} )",
                "description": "Gets and caches the checksums for the given version of WordPress."
        },
        "ƒ:get_core_updates": {
                "prefix": [
                        "get_core_updates",
                        "gcu"
                ],
                "body": "get_core_updates(${1:\\$options:array} )",
                "description": "Gets available core updates."
        },
        "ƒ:get_current_blog_id": {
                "prefix": [
                        "get_current_blog_id",
                        "gcbi"
                ],
                "body": "get_current_blog_id()",
                "description": "Retrieve the current site ID."
        },
        "ƒ:get_current_network_id": {
                "prefix": [
                        "get_current_network_id",
                        "gcni"
                ],
                "body": "get_current_network_id()",
                "description": "Retrieves the current network ID."
        },
        "ƒ:get_current_screen": {
                "prefix": [
                        "get_current_screen",
                        "gcs"
                ],
                "body": "get_current_screen()",
                "description": "Get the current screen object"
        },
        "ƒ:get_current_site": {
                "prefix": [
                        "get_current_site",
                        "gcs"
                ],
                "body": "get_current_site()",
                "description": "Gets the current network."
        },
        "ƒ:get_current_site_name": {
                "prefix": [
                        "get_current_site_name",
                        "gcsn"
                ],
                "body": "get_current_site_name(${1:\\$current_site:WP_Network} )",
                "description": "This deprecated function formerly set the site_name property of the $current_site object."
        },
        "ƒ:get_current_theme": {
                "prefix": [
                        "get_current_theme",
                        "gct"
                ],
                "body": "get_current_theme()",
                "description": "Retrieve current theme name."
        },
        "ƒ:get_current_user_id": {
                "prefix": [
                        "get_current_user_id",
                        "gcui"
                ],
                "body": "get_current_user_id()",
                "description": "Gets the current user&#039;s ID."
        },
        "ƒ:get_currentuserinfo": {
                "prefix": [
                        "get_currentuserinfo",
                        "gc"
                ],
                "body": "get_currentuserinfo()",
                "description": "Populate global variables with information about the currently logged in user."
        },
        "ƒ:get_custom_header": {
                "prefix": [
                        "get_custom_header",
                        "gch"
                ],
                "body": "get_custom_header()",
                "description": "Gets the header image data."
        },
        "ƒ:get_custom_header_markup": {
                "prefix": [
                        "get_custom_header_markup",
                        "gchm"
                ],
                "body": "get_custom_header_markup()",
                "description": "Retrieves the markup for a custom header."
        },
        "ƒ:get_custom_logo": {
                "prefix": [
                        "get_custom_logo",
                        "gcl"
                ],
                "body": "get_custom_logo(${1:\\$blog_id:integer} )",
                "description": "Returns a custom logo, linked to home unless the theme supports removing the link on the home page."
        },
        "ƒ:get_dashboard_blog": {
                "prefix": [
                        "get_dashboard_blog",
                        "gdb"
                ],
                "body": "get_dashboard_blog()",
                "description": "Get the &quot;dashboard blog&quot;, the blog where users without a blog edit their profile data."
        },
        "ƒ:get_dashboard_url": {
                "prefix": [
                        "get_dashboard_url",
                        "gdu"
                ],
                "body": "get_dashboard_url(${1:\\$user_id:integer},${2:\\$path:string},${3:\\$scheme:string} )",
                "description": "Retrieves the URL to the user&#039;s dashboard."
        },
        "ƒ:get_date_from_gmt": {
                "prefix": [
                        "get_date_from_gmt",
                        "gdfg"
                ],
                "body": "get_date_from_gmt(${1:\\$string:string},${2:\\$format:string} )",
                "description": "Given a date in UTC or GMT timezone, returns that date in the timezone of the site."
        },
        "ƒ:get_date_template": {
                "prefix": [
                        "get_date_template",
                        "gdt"
                ],
                "body": "get_date_template()",
                "description": "Retrieve path of date template in current or parent template."
        },
        "ƒ:get_day_link": {
                "prefix": [
                        "get_day_link",
                        "gdl"
                ],
                "body": "get_day_link(${1:\\$year:integer|false},${2:\\$month:integer|false},${3:\\$day:integer|false} )",
                "description": "Retrieves the permalink for the day archives with year and month."
        },
        "ƒ:get_default_block_categories": {
                "prefix": [
                        "get_default_block_categories",
                        "gdbc"
                ],
                "body": "get_default_block_categories()",
                "description": "Returns the list of default categories for block types."
        },
        "ƒ:get_default_block_editor_settings": {
                "prefix": [
                        "get_default_block_editor_settings",
                        "gdbes"
                ],
                "body": "get_default_block_editor_settings()",
                "description": "Returns the default block editor settings."
        },
        "ƒ:get_default_block_template_types": {
                "prefix": [
                        "get_default_block_template_types",
                        "gdbtt"
                ],
                "body": "get_default_block_template_types()",
                "description": "Returns a filtered list of default template types, containing their localized titles and descriptions."
        },
        "ƒ:get_default_comment_status": {
                "prefix": [
                        "get_default_comment_status",
                        "gdcs"
                ],
                "body": "get_default_comment_status(${1:\\$post_type:string},${2:\\$comment_type:string} )",
                "description": "Gets the default comment status for a post type."
        },
        "ƒ:get_default_feed": {
                "prefix": [
                        "get_default_feed",
                        "gdf"
                ],
                "body": "get_default_feed()",
                "description": "Retrieve the default feed."
        },
        "ƒ:get_default_link_to_edit": {
                "prefix": [
                        "get_default_link_to_edit",
                        "gdlte"
                ],
                "body": "get_default_link_to_edit()",
                "description": "Retrieves the default link for editing."
        },
        "ƒ:get_default_page_to_edit": {
                "prefix": [
                        "get_default_page_to_edit",
                        "gdpte"
                ],
                "body": "get_default_page_to_edit()",
                "description": "Gets the default page information to use."
        },
        "ƒ:get_default_post_to_edit": {
                "prefix": [
                        "get_default_post_to_edit",
                        "gdpte"
                ],
                "body": "get_default_post_to_edit(${1:\\$post_type:string},${2:\\$create_in_db:boolean} )",
                "description": "Returns default post information to use when populating the &quot;Write Post&quot; form."
        },
        "ƒ:get_delete_post_link": {
                "prefix": [
                        "get_delete_post_link",
                        "gdpl"
                ],
                "body": "get_delete_post_link(${1:\\$id:integer|WP_Post},${2:\\$deprecated:string},${3:\\$force_delete:boolean} )",
                "description": "Retrieves the delete posts link for post."
        },
        "ƒ:get_dirsize": {
                "prefix": [
                        "get_dirsize",
                        "gd"
                ],
                "body": "get_dirsize(${1:\\$directory:string},${2:\\$max_execution_time:integer|null} )",
                "description": "Get the size of a directory."
        },
        "ƒ:get_dropins": {
                "prefix": [
                        "get_dropins",
                        "gd"
                ],
                "body": "get_dropins()",
                "description": "Checks the wp-content directory and retrieve all drop-ins with any plugin data."
        },
        "ƒ:get_dynamic_block_names": {
                "prefix": [
                        "get_dynamic_block_names",
                        "gdbn"
                ],
                "body": "get_dynamic_block_names()",
                "description": "Returns an array of the names of all registered dynamic block types."
        },
        "ƒ:get_edit_bookmark_link": {
                "prefix": [
                        "get_edit_bookmark_link",
                        "gebl"
                ],
                "body": "get_edit_bookmark_link(${1:\\$link:integer|stdClass} )",
                "description": "Displays the edit bookmark link."
        },
        "ƒ:get_edit_comment_link": {
                "prefix": [
                        "get_edit_comment_link",
                        "gecl"
                ],
                "body": "get_edit_comment_link(${1:\\$comment_id:integer|WP_Comment} )",
                "description": "Retrieves the edit comment link."
        },
        "ƒ:get_edit_post_link": {
                "prefix": [
                        "get_edit_post_link",
                        "gepl"
                ],
                "body": "get_edit_post_link(${1:\\$id:integer|WP_Post},${2:\\$context:string} )",
                "description": "Retrieves the edit post link for post."
        },
        "ƒ:get_edit_profile_url": {
                "prefix": [
                        "get_edit_profile_url",
                        "gepu"
                ],
                "body": "get_edit_profile_url(${1:\\$user_id:integer},${2:\\$scheme:string} )",
                "description": "Retrieves the URL to the user&#039;s profile editor."
        },
        "ƒ:get_edit_tag_link": {
                "prefix": [
                        "get_edit_tag_link",
                        "getl"
                ],
                "body": "get_edit_tag_link(${1:\\$tag:integer|WP_Term|object},${2:\\$taxonomy:string} )",
                "description": "Retrieves the edit link for a tag."
        },
        "ƒ:get_edit_term_link": {
                "prefix": [
                        "get_edit_term_link",
                        "getl"
                ],
                "body": "get_edit_term_link(${1:\\$term:integer|WP_Term|object},${2:\\$taxonomy:string},${3:\\$object_type:string} )",
                "description": "Retrieves the URL for editing a given term."
        },
        "ƒ:get_edit_user_link": {
                "prefix": [
                        "get_edit_user_link",
                        "geul"
                ],
                "body": "get_edit_user_link(${1:\\$user_id:integer|null} )",
                "description": "Retrieves the edit user link."
        },
        "ƒ:get_editable_authors": {
                "prefix": [
                        "get_editable_authors",
                        "gea"
                ],
                "body": "get_editable_authors(${1:\\$user_id:integer} )",
                "description": "Gets author users who can edit posts."
        },
        "ƒ:get_editable_roles": {
                "prefix": [
                        "get_editable_roles",
                        "ger"
                ],
                "body": "get_editable_roles()",
                "description": "Fetch a filtered list of user roles that the current user is allowed to edit."
        },
        "ƒ:get_editable_user_ids": {
                "prefix": [
                        "get_editable_user_ids",
                        "geui"
                ],
                "body": "get_editable_user_ids(${1:\\$user_id:integer},${2:\\$exclude_zeros:boolean},${3:\\$post_type:} )",
                "description": "Gets the IDs of any users who can edit posts."
        },
        "ƒ:get_editor_stylesheets": {
                "prefix": [
                        "get_editor_stylesheets",
                        "ges"
                ],
                "body": "get_editor_stylesheets()",
                "description": "Retrieves any registered editor stylesheet URLs."
        },
        "ƒ:get_embed_template": {
                "prefix": [
                        "get_embed_template",
                        "get"
                ],
                "body": "get_embed_template()",
                "description": "Retrieves an embed template path in the current or parent template."
        },
        "ƒ:get_enclosed": {
                "prefix": [
                        "get_enclosed",
                        "ge"
                ],
                "body": "get_enclosed(${1:\\$post_id:integer} )",
                "description": "Retrieve enclosures already enclosed for a post."
        },
        "ƒ:get_extended": {
                "prefix": [
                        "get_extended",
                        "ge"
                ],
                "body": "get_extended(${1:\\$post:string} )",
                "description": "Get extended entry info (&lt;!--more--&gt;)."
        },
        "ƒ:get_feed_build_date": {
                "prefix": [
                        "get_feed_build_date",
                        "gfbd"
                ],
                "body": "get_feed_build_date(${1:\\$format:string} )",
                "description": "Get the UTC time of the most recently modified post from WP_Query."
        },
        "ƒ:get_feed_link": {
                "prefix": [
                        "get_feed_link",
                        "gfl"
                ],
                "body": "get_feed_link(${1:\\$feed:string} )",
                "description": "Retrieves the permalink for the feed type."
        },
        "ƒ:get_file": {
                "prefix": [
                        "get_file",
                        "gf"
                ],
                "body": "get_file(${1:\\$path:} )",
                "description": ""
        },
        "ƒ:get_file_data": {
                "prefix": [
                        "get_file_data",
                        "gfd"
                ],
                "body": "get_file_data(${1:\\$file:string},${2:\\$default_headers:array},${3:\\$context:string} )",
                "description": "Retrieve metadata from a file."
        },
        "ƒ:get_file_description": {
                "prefix": [
                        "get_file_description",
                        "gfd"
                ],
                "body": "get_file_description(${1:\\$file:string} )",
                "description": "Gets the description for standard WordPress theme files."
        },
        "ƒ:get_filesystem_method": {
                "prefix": [
                        "get_filesystem_method",
                        "gfm"
                ],
                "body": "get_filesystem_method(${1:\\$args:array},${2:\\$context:string},${3:\\$allow_relaxed_file_ownership:boolean} )",
                "description": "Determines which method to use for reading, writing, modifying, or deleting files on the filesystem."
        },
        "ƒ:get_footer": {
                "prefix": [
                        "get_footer",
                        "gf"
                ],
                "body": "get_footer(${1:\\$name:string|null},${2:\\$args:array} )",
                "description": "Load footer template."
        },
        "ƒ:get_front_page_template": {
                "prefix": [
                        "get_front_page_template",
                        "gfpt"
                ],
                "body": "get_front_page_template()",
                "description": "Retrieve path of front page template in current or parent template."
        },
        "ƒ:get_gmt_from_date": {
                "prefix": [
                        "get_gmt_from_date",
                        "ggfd"
                ],
                "body": "get_gmt_from_date(${1:\\$string:string},${2:\\$format:string} )",
                "description": "Given a date in the timezone of the site, returns that date in UTC."
        },
        "ƒ:get_header": {
                "prefix": [
                        "get_header",
                        "gh"
                ],
                "body": "get_header(${1:\\$name:string|null},${2:\\$args:array} )",
                "description": "Load header template."
        },
        "ƒ:get_header_image": {
                "prefix": [
                        "get_header_image",
                        "ghi"
                ],
                "body": "get_header_image()",
                "description": "Retrieves header image for custom header."
        },
        "ƒ:get_header_image_tag": {
                "prefix": [
                        "get_header_image_tag",
                        "ghit"
                ],
                "body": "get_header_image_tag(${1:\\$attr:array} )",
                "description": "Creates image tag markup for a custom header image."
        },
        "ƒ:get_header_textcolor": {
                "prefix": [
                        "get_header_textcolor",
                        "ght"
                ],
                "body": "get_header_textcolor()",
                "description": "Retrieves the custom header text color in 3- or 6-digit hexadecimal form."
        },
        "ƒ:get_header_video_settings": {
                "prefix": [
                        "get_header_video_settings",
                        "ghvs"
                ],
                "body": "get_header_video_settings()",
                "description": "Retrieves header video settings."
        },
        "ƒ:get_header_video_url": {
                "prefix": [
                        "get_header_video_url",
                        "ghvu"
                ],
                "body": "get_header_video_url()",
                "description": "Retrieves header video URL for custom header."
        },
        "ƒ:get_hidden_columns": {
                "prefix": [
                        "get_hidden_columns",
                        "ghc"
                ],
                "body": "get_hidden_columns(${1:\\$screen:string|WP_Screen} )",
                "description": "Get a list of hidden columns."
        },
        "ƒ:get_hidden_meta_boxes": {
                "prefix": [
                        "get_hidden_meta_boxes",
                        "ghmb"
                ],
                "body": "get_hidden_meta_boxes(${1:\\$screen:string|WP_Screen} )",
                "description": "Gets an array of IDs of hidden meta boxes."
        },
        "ƒ:get_home_path": {
                "prefix": [
                        "get_home_path",
                        "ghp"
                ],
                "body": "get_home_path()",
                "description": "Gets the absolute filesystem path to the root of the WordPress installation."
        },
        "ƒ:get_home_template": {
                "prefix": [
                        "get_home_template",
                        "ght"
                ],
                "body": "get_home_template()",
                "description": "Retrieve path of home template in current or parent template."
        },
        "ƒ:get_home_url": {
                "prefix": [
                        "get_home_url",
                        "ghu"
                ],
                "body": "get_home_url(${1:\\$blog_id:integer|null},${2:\\$path:string},${3:\\$scheme:string|null} )",
                "description": "Retrieves the URL for a given site where the front end is accessible."
        },
        "ƒ:get_html_split_regex": {
                "prefix": [
                        "get_html_split_regex",
                        "ghsr"
                ],
                "body": "get_html_split_regex()",
                "description": "Retrieves the regular expression for an HTML element."
        },
        "ƒ:get_http_origin": {
                "prefix": [
                        "get_http_origin",
                        "gho"
                ],
                "body": "get_http_origin()",
                "description": "Get the HTTP Origin of the current request."
        },
        "ƒ:get_id_from_blogname": {
                "prefix": [
                        "get_id_from_blogname",
                        "gifb"
                ],
                "body": "get_id_from_blogname(${1:\\$slug:string} )",
                "description": "Retrieves a sites ID given its (subdomain or directory) slug."
        },
        "ƒ:get_image_send_to_editor": {
                "prefix": [
                        "get_image_send_to_editor",
                        "giste"
                ],
                "body": "get_image_send_to_editor(${1:\\$id:integer},${2:\\$caption:string},${3:\\$title:string},${4:\\$align:string},${5:\\$url:string},${6:\\$rel:boolean|string},${7:\\$size:string|array},${8:\\$alt:string} )",
                "description": "Retrieves the image HTML to send to the editor."
        },
        "ƒ:get_image_tag": {
                "prefix": [
                        "get_image_tag",
                        "git"
                ],
                "body": "get_image_tag(${1:\\$id:integer},${2:\\$alt:string},${3:\\$title:string},${4:\\$align:string},${5:\\$size:string|array} )",
                "description": "Gets an img tag for an image attachment, scaling it down if requested."
        },
        "ƒ:get_importers": {
                "prefix": [
                        "get_importers",
                        "gi"
                ],
                "body": "get_importers()",
                "description": "Retrieve list of importers."
        },
        "ƒ:get_index_rel_link": {
                "prefix": [
                        "get_index_rel_link",
                        "girl"
                ],
                "body": "get_index_rel_link()",
                "description": "Get site index relational link."
        },
        "ƒ:get_index_template": {
                "prefix": [
                        "get_index_template",
                        "git"
                ],
                "body": "get_index_template()",
                "description": "Retrieve path of index template in current or parent template."
        },
        "ƒ:get_inline_data": {
                "prefix": [
                        "get_inline_data",
                        "gid"
                ],
                "body": "get_inline_data(${1:\\$post:WP_Post} )",
                "description": "Adds hidden fields with the data for use in the inline editor for posts and pages."
        },
        "ƒ:get_intermediate_image_sizes": {
                "prefix": [
                        "get_intermediate_image_sizes",
                        "giis"
                ],
                "body": "get_intermediate_image_sizes()",
                "description": "Gets the available intermediate image size names."
        },
        "ƒ:get_language_attributes": {
                "prefix": [
                        "get_language_attributes",
                        "gla"
                ],
                "body": "get_language_attributes(${1:\\$doctype:string} )",
                "description": "Gets the language attributes for the &#039;html&#039; tag."
        },
        "ƒ:get_last_updated": {
                "prefix": [
                        "get_last_updated",
                        "glu"
                ],
                "body": "get_last_updated(${1:\\$deprecated:mixed},${2:\\$start:integer},${3:\\$quantity:integer} )",
                "description": "Get a list of most recently updated blogs."
        },
        "ƒ:get_lastcommentmodified": {
                "prefix": [
                        "get_lastcommentmodified",
                        "gl"
                ],
                "body": "get_lastcommentmodified(${1:\\$timezone:string} )",
                "description": "Retrieves the date the last comment was modified."
        },
        "ƒ:get_lastpostdate": {
                "prefix": [
                        "get_lastpostdate",
                        "gl"
                ],
                "body": "get_lastpostdate(${1:\\$timezone:string},${2:\\$post_type:string} )",
                "description": "Retrieves the most recent time that a post on the site was published."
        },
        "ƒ:get_lastpostmodified": {
                "prefix": [
                        "get_lastpostmodified",
                        "gl"
                ],
                "body": "get_lastpostmodified(${1:\\$timezone:string},${2:\\$post_type:string} )",
                "description": "Get the most recent time that a post on the site was modified."
        },
        "ƒ:get_legacy_widget_block_editor_settings": {
                "prefix": [
                        "get_legacy_widget_block_editor_settings",
                        "glwbes"
                ],
                "body": "get_legacy_widget_block_editor_settings()",
                "description": "Returns the block editor settings needed to use the Legacy Widget block which is not registered by default."
        },
        "ƒ:get_link": {
                "prefix": [
                        "get_link",
                        "gl"
                ],
                "body": "get_link(${1:\\$bookmark_id:integer},${2:\\$output:string},${3:\\$filter:string} )",
                "description": "Retrieves bookmark data based on ID."
        },
        "ƒ:get_link_to_edit": {
                "prefix": [
                        "get_link_to_edit",
                        "glte"
                ],
                "body": "get_link_to_edit(${1:\\$link:integer|stdClass} )",
                "description": "Retrieves link data based on its ID."
        },
        "ƒ:get_linkcatname": {
                "prefix": [
                        "get_linkcatname",
                        "gl"
                ],
                "body": "get_linkcatname(${1:\\$id:integer} )",
                "description": "Gets the name of category by ID."
        },
        "ƒ:get_linkobjects": {
                "prefix": [
                        "get_linkobjects",
                        "gl"
                ],
                "body": "get_linkobjects(${1:\\$category:integer},${2:\\$orderby:string},${3:\\$limit:integer} )",
                "description": "Gets an array of link objects associated with category n."
        },
        "ƒ:get_linkobjectsbyname": {
                "prefix": [
                        "get_linkobjectsbyname",
                        "gl"
                ],
                "body": "get_linkobjectsbyname(${1:\\$cat_name:string},${2:\\$orderby:string},${3:\\$limit:integer} )",
                "description": "Gets an array of link objects associated with category $cat_name."
        },
        "ƒ:get_linkrating": {
                "prefix": [
                        "get_linkrating",
                        "gl"
                ],
                "body": "get_linkrating(${1:\\$link:object} )",
                "description": "Legacy function that retrieved the value of a link&#039;s link_rating field."
        },
        "ƒ:get_links": {
                "prefix": [
                        "get_links",
                        "gl"
                ],
                "body": "get_links(${1:\\$category:integer},${2:\\$before:string},${3:\\$after:string},${4:\\$between:string},${5:\\$show_images:boolean},${6:\\$orderby:string},${7:\\$show_description:boolean},${8:\\$show_rating:boolean},${9:\\$limit:integer},${10:\\$show_updated:integer},${11:\\$display:boolean} )",
                "description": "Gets the links associated with category by ID."
        },
        "ƒ:get_links_list": {
                "prefix": [
                        "get_links_list",
                        "gll"
                ],
                "body": "get_links_list(${1:\\$order:string} )",
                "description": "Output entire list of links by category."
        },
        "ƒ:get_links_withrating": {
                "prefix": [
                        "get_links_withrating",
                        "glw"
                ],
                "body": "get_links_withrating(${1:\\$category:integer},${2:\\$before:string},${3:\\$after:string},${4:\\$between:string},${5:\\$show_images:boolean},${6:\\$orderby:string},${7:\\$show_description:boolean},${8:\\$limit:integer},${9:\\$show_updated:integer} )",
                "description": "Gets the links associated with category n and display rating stars/chars."
        },
        "ƒ:get_linksbyname": {
                "prefix": [
                        "get_linksbyname",
                        "gl"
                ],
                "body": "get_linksbyname(${1:\\$cat_name:string},${2:\\$before:string},${3:\\$after:string},${4:\\$between:string},${5:\\$show_images:boolean},${6:\\$orderby:string},${7:\\$show_description:boolean},${8:\\$show_rating:boolean},${9:\\$limit:integer},${10:\\$show_updated:integer} )",
                "description": "Gets the links associated with category $cat_name."
        },
        "ƒ:get_linksbyname_withrating": {
                "prefix": [
                        "get_linksbyname_withrating",
                        "glw"
                ],
                "body": "get_linksbyname_withrating(${1:\\$cat_name:string},${2:\\$before:string},${3:\\$after:string},${4:\\$between:string},${5:\\$show_images:boolean},${6:\\$orderby:string},${7:\\$show_description:boolean},${8:\\$limit:integer},${9:\\$show_updated:integer} )",
                "description": "Gets the links associated with category &#039;cat_name&#039; and display rating stars/chars."
        },
        "ƒ:get_locale": {
                "prefix": [
                        "get_locale",
                        "gl"
                ],
                "body": "get_locale()",
                "description": "Retrieves the current locale."
        },
        "ƒ:get_locale_stylesheet_uri": {
                "prefix": [
                        "get_locale_stylesheet_uri",
                        "glsu"
                ],
                "body": "get_locale_stylesheet_uri()",
                "description": "Retrieves the localized stylesheet URI."
        },
        "ƒ:get_main_network_id": {
                "prefix": [
                        "get_main_network_id",
                        "gmni"
                ],
                "body": "get_main_network_id()",
                "description": "Get the main network ID."
        },
        "ƒ:get_main_site_id": {
                "prefix": [
                        "get_main_site_id",
                        "gmsi"
                ],
                "body": "get_main_site_id(${1:\\$network_id:integer|null} )",
                "description": "Gets the main site ID."
        },
        "ƒ:get_media_embedded_in_content": {
                "prefix": [
                        "get_media_embedded_in_content",
                        "gmeic"
                ],
                "body": "get_media_embedded_in_content(${1:\\$content:string},${2:\\$types:array|null} )",
                "description": "Check the content HTML for a audio, video, object, embed, or iframe tags."
        },
        "ƒ:get_media_item": {
                "prefix": [
                        "get_media_item",
                        "gmi"
                ],
                "body": "get_media_item(${1:\\$attachment_id:integer},${2:\\$args:string|array|null} )",
                "description": "Retrieves HTML form for modifying the image attachment."
        },
        "ƒ:get_media_items": {
                "prefix": [
                        "get_media_items",
                        "gmi"
                ],
                "body": "get_media_items(${1:\\$post_id:integer},${2:\\$errors:array} )",
                "description": "Retrieves HTML for media items of post gallery."
        },
        "ƒ:get_media_states": {
                "prefix": [
                        "get_media_states",
                        "gms"
                ],
                "body": "get_media_states(${1:\\$post:WP_Post} )",
                "description": "Retrieves an array of media states from an attachment."
        },
        "ƒ:get_meta_keys": {
                "prefix": [
                        "get_meta_keys",
                        "gmk"
                ],
                "body": "get_meta_keys()",
                "description": "Returns a list of previously defined keys."
        },
        "ƒ:get_meta_sql": {
                "prefix": [
                        "get_meta_sql",
                        "gms"
                ],
                "body": "get_meta_sql(${1:\\$meta_query:array},${2:\\$type:string},${3:\\$primary_table:string},${4:\\$primary_id_column:string},${5:\\$context:object|null} )",
                "description": "Given a meta query, generates SQL clauses to be appended to a main query."
        },
        "ƒ:get_metadata": {
                "prefix": [
                        "get_metadata",
                        "gm"
                ],
                "body": "get_metadata(${1:\\$meta_type:string},${2:\\$object_id:integer},${3:\\$meta_key:string},${4:\\$single:boolean} )",
                "description": "Retrieves the value of a metadata field for the specified object type and ID."
        },
        "ƒ:get_metadata_by_mid": {
                "prefix": [
                        "get_metadata_by_mid",
                        "gmbm"
                ],
                "body": "get_metadata_by_mid(${1:\\$meta_type:string},${2:\\$meta_id:integer} )",
                "description": "Retrieves metadata by meta ID."
        },
        "ƒ:get_metadata_default": {
                "prefix": [
                        "get_metadata_default",
                        "gmd"
                ],
                "body": "get_metadata_default(${1:\\$meta_type:string},${2:\\$object_id:integer},${3:\\$meta_key:string},${4:\\$single:boolean} )",
                "description": "Retrieves default metadata value for the specified meta key and object."
        },
        "ƒ:get_metadata_raw": {
                "prefix": [
                        "get_metadata_raw",
                        "gmr"
                ],
                "body": "get_metadata_raw(${1:\\$meta_type:string},${2:\\$object_id:integer},${3:\\$meta_key:string},${4:\\$single:boolean} )",
                "description": "Retrieves raw metadata value for the specified object."
        },
        "ƒ:get_month_link": {
                "prefix": [
                        "get_month_link",
                        "gml"
                ],
                "body": "get_month_link(${1:\\$year:integer|false},${2:\\$month:integer|false} )",
                "description": "Retrieves the permalink for the month archives with year."
        },
        "ƒ:get_most_active_blogs": {
                "prefix": [
                        "get_most_active_blogs",
                        "gmab"
                ],
                "body": "get_most_active_blogs(${1:\\$num:integer},${2:\\$display:boolean} )",
                "description": "Deprecated functionality to retrieve a list of the most active sites."
        },
        "ƒ:get_most_recent_post_of_user": {
                "prefix": [
                        "get_most_recent_post_of_user",
                        "gmrpou"
                ],
                "body": "get_most_recent_post_of_user(${1:\\$user_id:integer} )",
                "description": "Gets a user&#039;s most recent post."
        },
        "ƒ:get_mu_plugins": {
                "prefix": [
                        "get_mu_plugins",
                        "gmp"
                ],
                "body": "get_mu_plugins()",
                "description": "Checks the mu-plugins directory and retrieve all mu-plugin files with any plugin data."
        },
        "ƒ:get_nav_menu_locations": {
                "prefix": [
                        "get_nav_menu_locations",
                        "gnml"
                ],
                "body": "get_nav_menu_locations()",
                "description": "Retrieves all registered navigation menu locations and the menus assigned to them."
        },
        "ƒ:get_network": {
                "prefix": [
                        "get_network",
                        "gn"
                ],
                "body": "get_network(${1:\\$network:WP_Network|integer|null} )",
                "description": "Retrieves network data given a network ID or network object."
        },
        "ƒ:get_network_option": {
                "prefix": [
                        "get_network_option",
                        "gno"
                ],
                "body": "get_network_option(${1:\\$network_id:integer},${2:\\$option:string},${3:\\$default:mixed} )",
                "description": "Retrieves a network&#039;s option value based on the option name."
        },
        "ƒ:get_networks": {
                "prefix": [
                        "get_networks",
                        "gn"
                ],
                "body": "get_networks(${1:\\$args:string|array} )",
                "description": "Retrieves a list of networks."
        },
        "ƒ:get_next_comments_link": {
                "prefix": [
                        "get_next_comments_link",
                        "gncl"
                ],
                "body": "get_next_comments_link(${1:\\$label:string},${2:\\$max_page:integer} )",
                "description": "Retrieves the link to the next comments page."
        },
        "ƒ:get_next_image_link": {
                "prefix": [
                        "get_next_image_link",
                        "gnil"
                ],
                "body": "get_next_image_link(${1:\\$size:string|array},${2:\\$text:string|false} )",
                "description": "Gets the next image link that has the same post parent."
        },
        "ƒ:get_next_post": {
                "prefix": [
                        "get_next_post",
                        "gnp"
                ],
                "body": "get_next_post(${1:\\$in_same_term:boolean},${2:\\$excluded_terms:array|string},${3:\\$taxonomy:string} )",
                "description": "Retrieves the next post that is adjacent to the current post."
        },
        "ƒ:get_next_post_link": {
                "prefix": [
                        "get_next_post_link",
                        "gnpl"
                ],
                "body": "get_next_post_link(${1:\\$format:string},${2:\\$link:string},${3:\\$in_same_term:boolean},${4:\\$excluded_terms:array|string},${5:\\$taxonomy:string} )",
                "description": "Retrieves the next post link that is adjacent to the current post."
        },
        "ƒ:get_next_posts_link": {
                "prefix": [
                        "get_next_posts_link",
                        "gnpl"
                ],
                "body": "get_next_posts_link(${1:\\$label:string|null},${2:\\$max_page:integer} )",
                "description": "Retrieves the next posts page link."
        },
        "ƒ:get_next_posts_page_link": {
                "prefix": [
                        "get_next_posts_page_link",
                        "gnppl"
                ],
                "body": "get_next_posts_page_link(${1:\\$max_page:integer} )",
                "description": "Retrieves the next posts page link."
        },
        "ƒ:get_nonauthor_user_ids": {
                "prefix": [
                        "get_nonauthor_user_ids",
                        "gnui"
                ],
                "body": "get_nonauthor_user_ids()",
                "description": "Gets all users who are not authors."
        },
        "ƒ:get_num_queries": {
                "prefix": [
                        "get_num_queries",
                        "gnq"
                ],
                "body": "get_num_queries()",
                "description": "Retrieve the number of database queries during the WordPress execution."
        },
        "ƒ:get_object_subtype": {
                "prefix": [
                        "get_object_subtype",
                        "gos"
                ],
                "body": "get_object_subtype(${1:\\$object_type:string},${2:\\$object_id:integer} )",
                "description": "Returns the object subtype for a given object ID of a specific type."
        },
        "ƒ:get_object_taxonomies": {
                "prefix": [
                        "get_object_taxonomies",
                        "got"
                ],
                "body": "get_object_taxonomies(${1:\\$object:string|array|WP_Post},${2:\\$output:string} )",
                "description": "Returns the names or objects of the taxonomies which are registered for the requested object or object type, such as a post object or post type name."
        },
        "ƒ:get_object_term_cache": {
                "prefix": [
                        "get_object_term_cache",
                        "gotc"
                ],
                "body": "get_object_term_cache(${1:\\$id:integer},${2:\\$taxonomy:string} )",
                "description": "Retrieves the cached term objects for the given object ID."
        },
        "ƒ:get_objects_in_term": {
                "prefix": [
                        "get_objects_in_term",
                        "goit"
                ],
                "body": "get_objects_in_term(${1:\\$term_ids:integer|array},${2:\\$taxonomies:string|array},${3:\\$args:array|string} )",
                "description": "Retrieves object IDs of valid taxonomy and term."
        },
        "ƒ:get_oembed_endpoint_url": {
                "prefix": [
                        "get_oembed_endpoint_url",
                        "goeu"
                ],
                "body": "get_oembed_endpoint_url(${1:\\$permalink:string},${2:\\$format:string} )",
                "description": "Retrieves the oEmbed endpoint URL for a given permalink."
        },
        "ƒ:get_oembed_response_data": {
                "prefix": [
                        "get_oembed_response_data",
                        "gord"
                ],
                "body": "get_oembed_response_data(${1:\\$post:WP_Post|integer},${2:\\$width:integer} )",
                "description": "Retrieves the oEmbed response data for a given post."
        },
        "ƒ:get_oembed_response_data_for_url": {
                "prefix": [
                        "get_oembed_response_data_for_url",
                        "gordfu"
                ],
                "body": "get_oembed_response_data_for_url(${1:\\$url:string},${2:\\$args:array} )",
                "description": "Retrieves the oEmbed response data for a given URL."
        },
        "ƒ:get_oembed_response_data_rich": {
                "prefix": [
                        "get_oembed_response_data_rich",
                        "gordr"
                ],
                "body": "get_oembed_response_data_rich(${1:\\$data:array},${2:\\$post:WP_Post},${3:\\$width:integer},${4:\\$height:integer} )",
                "description": "Filters the oEmbed response data to return an iframe embed code."
        },
        "ƒ:get_option": {
                "prefix": [
                        "get_option",
                        "go"
                ],
                "body": "get_option(${1:\\$option:string},${2:\\$default:mixed} )",
                "description": "Retrieves an option value based on an option name."
        },
        "ƒ:get_others_drafts": {
                "prefix": [
                        "get_others_drafts",
                        "god"
                ],
                "body": "get_others_drafts(${1:\\$user_id:integer} )",
                "description": "Retrieve drafts from other users."
        },
        "ƒ:get_others_pending": {
                "prefix": [
                        "get_others_pending",
                        "gop"
                ],
                "body": "get_others_pending(${1:\\$user_id:integer} )",
                "description": "Retrieve pending review posts from other users."
        },
        "ƒ:get_others_unpublished_posts": {
                "prefix": [
                        "get_others_unpublished_posts",
                        "goup"
                ],
                "body": "get_others_unpublished_posts(${1:\\$user_id:integer},${2:\\$type:string} )",
                "description": "Retrieves editable posts from other users."
        },
        "ƒ:get_page": {
                "prefix": [
                        "get_page",
                        "gp"
                ],
                "body": "get_page(${1:\\$page:integer|WP_Post},${2:\\$output:string},${3:\\$filter:string} )",
                "description": "Retrieves page data given a page ID or page object."
        },
        "ƒ:get_page_by_path": {
                "prefix": [
                        "get_page_by_path",
                        "gpbp"
                ],
                "body": "get_page_by_path(${1:\\$page_path:string},${2:\\$output:string},${3:\\$post_type:string|array} )",
                "description": "Retrieves a page given its path."
        },
        "ƒ:get_page_by_title": {
                "prefix": [
                        "get_page_by_title",
                        "gpbt"
                ],
                "body": "get_page_by_title(${1:\\$page_title:string},${2:\\$output:string},${3:\\$post_type:string|array} )",
                "description": "Retrieve a page given its title."
        },
        "ƒ:get_page_children": {
                "prefix": [
                        "get_page_children",
                        "gpc"
                ],
                "body": "get_page_children(${1:\\$page_id:integer},${2:\\$pages:array} )",
                "description": "Identify descendants of a given page ID in a list of page objects."
        },
        "ƒ:get_page_hierarchy": {
                "prefix": [
                        "get_page_hierarchy",
                        "gph"
                ],
                "body": "get_page_hierarchy(${1:\\$pages:array},${2:\\$page_id:integer} )",
                "description": "Order the pages with children under parents in a flat list."
        },
        "ƒ:get_page_link": {
                "prefix": [
                        "get_page_link",
                        "gpl"
                ],
                "body": "get_page_link(${1:\\$post:integer|WP_Post},${2:\\$leavename:boolean},${3:\\$sample:boolean} )",
                "description": "Retrieves the permalink for the current page or page ID."
        },
        "ƒ:get_page_of_comment": {
                "prefix": [
                        "get_page_of_comment",
                        "gpoc"
                ],
                "body": "get_page_of_comment(${1:\\$comment_ID:integer},${2:\\$args:array} )",
                "description": "Calculates what page number a comment will appear on for comment paging."
        },
        "ƒ:get_page_statuses": {
                "prefix": [
                        "get_page_statuses",
                        "gps"
                ],
                "body": "get_page_statuses()",
                "description": "Retrieve all of the WordPress support page statuses."
        },
        "ƒ:get_page_template": {
                "prefix": [
                        "get_page_template",
                        "gpt"
                ],
                "body": "get_page_template()",
                "description": "Retrieve path of page template in current or parent template."
        },
        "ƒ:get_page_template_slug": {
                "prefix": [
                        "get_page_template_slug",
                        "gpts"
                ],
                "body": "get_page_template_slug(${1:\\$post:integer|WP_Post|null} )",
                "description": "Gets the specific template filename for a given post."
        },
        "ƒ:get_page_templates": {
                "prefix": [
                        "get_page_templates",
                        "gpt"
                ],
                "body": "get_page_templates(${1:\\$post:WP_Post|null},${2:\\$post_type:string} )",
                "description": "Gets the page templates available in this theme."
        },
        "ƒ:get_page_uri": {
                "prefix": [
                        "get_page_uri",
                        "gpu"
                ],
                "body": "get_page_uri(${1:\\$page:WP_Post|object|integer} )",
                "description": "Build the URI path for a page."
        },
        "ƒ:get_paged_template": {
                "prefix": [
                        "get_paged_template",
                        "gpt"
                ],
                "body": "get_paged_template()",
                "description": "Retrieve path of paged template in current or parent template."
        },
        "ƒ:get_pagenum_link": {
                "prefix": [
                        "get_pagenum_link",
                        "gpl"
                ],
                "body": "get_pagenum_link(${1:\\$pagenum:integer},${2:\\$escape:boolean} )",
                "description": "Retrieves the link for a page number."
        },
        "ƒ:get_pages": {
                "prefix": [
                        "get_pages",
                        "gp"
                ],
                "body": "get_pages(${1:\\$args:array|string} )",
                "description": "Retrieve an array of pages (or hierarchical post type items)."
        },
        "ƒ:get_parent_post_rel_link": {
                "prefix": [
                        "get_parent_post_rel_link",
                        "gpprl"
                ],
                "body": "get_parent_post_rel_link(${1:\\$title:string} )",
                "description": "Get parent post relational link."
        },
        "ƒ:get_parent_theme_file_path": {
                "prefix": [
                        "get_parent_theme_file_path",
                        "gptfp"
                ],
                "body": "get_parent_theme_file_path(${1:\\$file:string} )",
                "description": "Retrieves the path of a file in the parent theme."
        },
        "ƒ:get_parent_theme_file_uri": {
                "prefix": [
                        "get_parent_theme_file_uri",
                        "gptfu"
                ],
                "body": "get_parent_theme_file_uri(${1:\\$file:string} )",
                "description": "Retrieves the URL of a file in the parent theme."
        },
        "ƒ:get_password_reset_key": {
                "prefix": [
                        "get_password_reset_key",
                        "gprk"
                ],
                "body": "get_password_reset_key(${1:\\$user:WP_User} )",
                "description": "Creates, stores, then returns a password reset key for user."
        },
        "ƒ:get_pending_comments_num": {
                "prefix": [
                        "get_pending_comments_num",
                        "gpcn"
                ],
                "body": "get_pending_comments_num(${1:\\$post_id:integer|array} )",
                "description": "Get the number of pending comments on a post or posts"
        },
        "ƒ:get_permalink": {
                "prefix": [
                        "get_permalink",
                        "gp"
                ],
                "body": "get_permalink(${1:\\$post:integer|WP_Post},${2:\\$leavename:boolean} )",
                "description": "Retrieves the full permalink for the current post or post ID."
        },
        "ƒ:get_plugin_data": {
                "prefix": [
                        "get_plugin_data",
                        "gpd"
                ],
                "body": "get_plugin_data(${1:\\$plugin_file:string},${2:\\$markup:boolean},${3:\\$translate:boolean} )",
                "description": "Parses the plugin contents to retrieve plugin&#039;s metadata."
        },
        "ƒ:get_plugin_files": {
                "prefix": [
                        "get_plugin_files",
                        "gpf"
                ],
                "body": "get_plugin_files(${1:\\$plugin:string} )",
                "description": "Gets a list of a plugin&#039;s files."
        },
        "ƒ:get_plugin_page_hook": {
                "prefix": [
                        "get_plugin_page_hook",
                        "gpph"
                ],
                "body": "get_plugin_page_hook(${1:\\$plugin_page:string},${2:\\$parent_page:string} )",
                "description": "Gets the hook attached to the administrative page of a plugin."
        },
        "ƒ:get_plugin_page_hookname": {
                "prefix": [
                        "get_plugin_page_hookname",
                        "gpph"
                ],
                "body": "get_plugin_page_hookname(${1:\\$plugin_page:string},${2:\\$parent_page:string} )",
                "description": "Gets the hook name for the administrative page of a plugin."
        },
        "ƒ:get_plugin_updates": {
                "prefix": [
                        "get_plugin_updates",
                        "gpu"
                ],
                "body": "get_plugin_updates()",
                "description": ""
        },
        "ƒ:get_plugins": {
                "prefix": [
                        "get_plugins",
                        "gp"
                ],
                "body": "get_plugins(${1:\\$plugin_folder:string} )",
                "description": "Checks the plugins directory and retrieve all plugin files with plugin data."
        },
        "ƒ:get_post": {
                "prefix": [
                        "get_post",
                        "gp"
                ],
                "body": "get_post(${1:\\$post:integer|WP_Post|null},${2:\\$output:string},${3:\\$filter:string} )",
                "description": "Retrieves post data given a post ID or post object."
        },
        "ƒ:get_post_ancestors": {
                "prefix": [
                        "get_post_ancestors",
                        "gpa"
                ],
                "body": "get_post_ancestors(${1:\\$post:integer|WP_Post} )",
                "description": "Retrieves the IDs of the ancestors of a post."
        },
        "ƒ:get_post_class": {
                "prefix": [
                        "get_post_class",
                        "gpc"
                ],
                "body": "get_post_class(${1:\\$class:string|array},${2:\\$post_id:integer|WP_Post|null} )",
                "description": "Retrieves an array of the class names for the post container element."
        },
        "ƒ:get_post_comments_feed_link": {
                "prefix": [
                        "get_post_comments_feed_link",
                        "gpcfl"
                ],
                "body": "get_post_comments_feed_link(${1:\\$post_id:integer},${2:\\$feed:string} )",
                "description": "Retrieves the permalink for the post comments feed."
        },
        "ƒ:get_post_custom": {
                "prefix": [
                        "get_post_custom",
                        "gpc"
                ],
                "body": "get_post_custom(${1:\\$post_id:integer} )",
                "description": "Retrieve post meta fields, based on post ID."
        },
        "ƒ:get_post_custom_keys": {
                "prefix": [
                        "get_post_custom_keys",
                        "gpck"
                ],
                "body": "get_post_custom_keys(${1:\\$post_id:integer} )",
                "description": "Retrieve meta field names for a post."
        },
        "ƒ:get_post_custom_values": {
                "prefix": [
                        "get_post_custom_values",
                        "gpcv"
                ],
                "body": "get_post_custom_values(${1:\\$key:string},${2:\\$post_id:integer} )",
                "description": "Retrieve values for a custom post field."
        },
        "ƒ:get_post_datetime": {
                "prefix": [
                        "get_post_datetime",
                        "gpd"
                ],
                "body": "get_post_datetime(${1:\\$post:integer|WP_Post|null},${2:\\$field:string},${3:\\$source:string} )",
                "description": "Retrieve post published or modified time as a `DateTimeImmutable` object instance."
        },
        "ƒ:get_post_embed_html": {
                "prefix": [
                        "get_post_embed_html",
                        "gpeh"
                ],
                "body": "get_post_embed_html(${1:\\$width:integer},${2:\\$height:integer},${3:\\$post:integer|WP_Post|null} )",
                "description": "Retrieves the embed code for a specific post."
        },
        "ƒ:get_post_embed_url": {
                "prefix": [
                        "get_post_embed_url",
                        "gpeu"
                ],
                "body": "get_post_embed_url(${1:\\$post:integer|WP_Post|null} )",
                "description": "Retrieves the URL to embed a specific post in an iframe."
        },
        "ƒ:get_post_field": {
                "prefix": [
                        "get_post_field",
                        "gpf"
                ],
                "body": "get_post_field(${1:\\$field:string},${2:\\$post:integer|WP_Post|null},${3:\\$context:string} )",
                "description": "Retrieve data from a post field based on Post ID."
        },
        "ƒ:get_post_format": {
                "prefix": [
                        "get_post_format",
                        "gpf"
                ],
                "body": "get_post_format(${1:\\$post:integer|WP_Post|null} )",
                "description": "Retrieve the format slug for a post"
        },
        "ƒ:get_post_format_link": {
                "prefix": [
                        "get_post_format_link",
                        "gpfl"
                ],
                "body": "get_post_format_link(${1:\\$format:string} )",
                "description": "Returns a link to a post format index."
        },
        "ƒ:get_post_format_slugs": {
                "prefix": [
                        "get_post_format_slugs",
                        "gpfs"
                ],
                "body": "get_post_format_slugs()",
                "description": "Retrieves the array of post format slugs."
        },
        "ƒ:get_post_format_string": {
                "prefix": [
                        "get_post_format_string",
                        "gpfs"
                ],
                "body": "get_post_format_string(${1:\\$slug:string} )",
                "description": "Returns a pretty, translated version of a post format slug"
        },
        "ƒ:get_post_format_strings": {
                "prefix": [
                        "get_post_format_strings",
                        "gpfs"
                ],
                "body": "get_post_format_strings()",
                "description": "Returns an array of post format slugs to their translated and pretty display versions"
        },
        "ƒ:get_post_galleries": {
                "prefix": [
                        "get_post_galleries",
                        "gpg"
                ],
                "body": "get_post_galleries(${1:\\$post:integer|WP_Post},${2:\\$html:boolean} )",
                "description": "Retrieves galleries from the passed post&#039;s content."
        },
        "ƒ:get_post_galleries_images": {
                "prefix": [
                        "get_post_galleries_images",
                        "gpgi"
                ],
                "body": "get_post_galleries_images(${1:\\$post:integer|WP_Post} )",
                "description": "Retrieve the image srcs from galleries from a post&#039;s content, if present"
        },
        "ƒ:get_post_gallery": {
                "prefix": [
                        "get_post_gallery",
                        "gpg"
                ],
                "body": "get_post_gallery(${1:\\$post:integer|WP_Post},${2:\\$html:boolean} )",
                "description": "Check a specified post&#039;s content for gallery and, if present, return the first"
        },
        "ƒ:get_post_gallery_images": {
                "prefix": [
                        "get_post_gallery_images",
                        "gpgi"
                ],
                "body": "get_post_gallery_images(${1:\\$post:integer|WP_Post} )",
                "description": "Checks a post&#039;s content for galleries and return the image srcs for the first found gallery"
        },
        "ƒ:get_post_meta": {
                "prefix": [
                        "get_post_meta",
                        "gpm"
                ],
                "body": "get_post_meta(${1:\\$post_id:integer},${2:\\$key:string},${3:\\$single:boolean} )",
                "description": "Retrieves a post meta field for the given post ID."
        },
        "ƒ:get_post_meta_by_id": {
                "prefix": [
                        "get_post_meta_by_id",
                        "gpmbi"
                ],
                "body": "get_post_meta_by_id(${1:\\$mid:integer} )",
                "description": "Returns post meta data by meta ID."
        },
        "ƒ:get_post_mime_type": {
                "prefix": [
                        "get_post_mime_type",
                        "gpmt"
                ],
                "body": "get_post_mime_type(${1:\\$post:integer|WP_Post|null} )",
                "description": "Retrieve the mime type of an attachment based on the ID."
        },
        "ƒ:get_post_mime_types": {
                "prefix": [
                        "get_post_mime_types",
                        "gpmt"
                ],
                "body": "get_post_mime_types()",
                "description": "Get default post mime types."
        },
        "ƒ:get_post_modified_time": {
                "prefix": [
                        "get_post_modified_time",
                        "gpmt"
                ],
                "body": "get_post_modified_time(${1:\\$format:string},${2:\\$gmt:boolean},${3:\\$post:integer|WP_Post|null},${4:\\$translate:boolean} )",
                "description": "Retrieve the time at which the post was last modified."
        },
        "ƒ:get_post_parent": {
                "prefix": [
                        "get_post_parent",
                        "gpp"
                ],
                "body": "get_post_parent(${1:\\$post:integer|WP_Post|null} )",
                "description": "Retrieves the parent post object for the given post."
        },
        "ƒ:get_post_permalink": {
                "prefix": [
                        "get_post_permalink",
                        "gpp"
                ],
                "body": "get_post_permalink(${1:\\$id:integer|WP_Post},${2:\\$leavename:boolean},${3:\\$sample:boolean} )",
                "description": "Retrieves the permalink for a post of a custom post type."
        },
        "ƒ:get_post_reply_link": {
                "prefix": [
                        "get_post_reply_link",
                        "gprl"
                ],
                "body": "get_post_reply_link(${1:\\$args:array},${2:\\$post:integer|WP_Post|null} )",
                "description": "Retrieves HTML content for reply to post link."
        },
        "ƒ:get_post_states": {
                "prefix": [
                        "get_post_states",
                        "gps"
                ],
                "body": "get_post_states(${1:\\$post:WP_Post} )",
                "description": "Retrieves an array of post states from a post."
        },
        "ƒ:get_post_stati": {
                "prefix": [
                        "get_post_stati",
                        "gps"
                ],
                "body": "get_post_stati(${1:\\$args:array|string},${2:\\$output:string},${3:\\$operator:string} )",
                "description": "Get a list of post statuses."
        },
        "ƒ:get_post_status": {
                "prefix": [
                        "get_post_status",
                        "gps"
                ],
                "body": "get_post_status(${1:\\$post:integer|WP_Post|null} )",
                "description": "Retrieve the post status based on the post ID."
        },
        "ƒ:get_post_status_object": {
                "prefix": [
                        "get_post_status_object",
                        "gpso"
                ],
                "body": "get_post_status_object(${1:\\$post_status:string} )",
                "description": "Retrieve a post status object by name."
        },
        "ƒ:get_post_statuses": {
                "prefix": [
                        "get_post_statuses",
                        "gps"
                ],
                "body": "get_post_statuses()",
                "description": "Retrieve all of the WordPress supported post statuses."
        },
        "ƒ:get_post_taxonomies": {
                "prefix": [
                        "get_post_taxonomies",
                        "gpt"
                ],
                "body": "get_post_taxonomies(${1:\\$post:integer|WP_Post} )",
                "description": "Retrieves all taxonomy names for the given post."
        },
        "ƒ:get_post_thumbnail_id": {
                "prefix": [
                        "get_post_thumbnail_id",
                        "gpti"
                ],
                "body": "get_post_thumbnail_id(${1:\\$post:integer|WP_Post|null} )",
                "description": "Retrieves the post thumbnail ID."
        },
        "ƒ:get_post_time": {
                "prefix": [
                        "get_post_time",
                        "gpt"
                ],
                "body": "get_post_time(${1:\\$format:string},${2:\\$gmt:boolean},${3:\\$post:integer|WP_Post|null},${4:\\$translate:boolean} )",
                "description": "Retrieve the time at which the post was written."
        },
        "ƒ:get_post_timestamp": {
                "prefix": [
                        "get_post_timestamp",
                        "gpt"
                ],
                "body": "get_post_timestamp(${1:\\$post:integer|WP_Post|null},${2:\\$field:string} )",
                "description": "Retrieve post published or modified time as a Unix timestamp."
        },
        "ƒ:get_post_to_edit": {
                "prefix": [
                        "get_post_to_edit",
                        "gpte"
                ],
                "body": "get_post_to_edit(${1:\\$id:integer} )",
                "description": "Gets an existing post and format it for editing."
        },
        "ƒ:get_post_type": {
                "prefix": [
                        "get_post_type",
                        "gpt"
                ],
                "body": "get_post_type(${1:\\$post:integer|WP_Post|null} )",
                "description": "Retrieves the post type of the current post or of a given post."
        },
        "ƒ:get_post_type_archive_feed_link": {
                "prefix": [
                        "get_post_type_archive_feed_link",
                        "gptafl"
                ],
                "body": "get_post_type_archive_feed_link(${1:\\$post_type:string},${2:\\$feed:string} )",
                "description": "Retrieves the permalink for a post type archive feed."
        },
        "ƒ:get_post_type_archive_link": {
                "prefix": [
                        "get_post_type_archive_link",
                        "gptal"
                ],
                "body": "get_post_type_archive_link(${1:\\$post_type:string} )",
                "description": "Retrieves the permalink for a post type archive."
        },
        "ƒ:get_post_type_archive_template": {
                "prefix": [
                        "get_post_type_archive_template",
                        "gptat"
                ],
                "body": "get_post_type_archive_template()",
                "description": "Retrieve path of post type archive template in current or parent template."
        },
        "ƒ:get_post_type_capabilities": {
                "prefix": [
                        "get_post_type_capabilities",
                        "gptc"
                ],
                "body": "get_post_type_capabilities(${1:\\$args:object} )",
                "description": "Build an object with all post type capabilities out of a post type object"
        },
        "ƒ:get_post_type_labels": {
                "prefix": [
                        "get_post_type_labels",
                        "gptl"
                ],
                "body": "get_post_type_labels(${1:\\$post_type_object:object|WP_Post_Type} )",
                "description": "Builds an object with all post type labels out of a post type object."
        },
        "ƒ:get_post_type_object": {
                "prefix": [
                        "get_post_type_object",
                        "gpto"
                ],
                "body": "get_post_type_object(${1:\\$post_type:string} )",
                "description": "Retrieves a post type object by name."
        },
        "ƒ:get_post_types": {
                "prefix": [
                        "get_post_types",
                        "gpt"
                ],
                "body": "get_post_types(${1:\\$args:array|string},${2:\\$output:string},${3:\\$operator:string} )",
                "description": "Get a list of all registered post type objects."
        },
        "ƒ:get_post_types_by_support": {
                "prefix": [
                        "get_post_types_by_support",
                        "gptbs"
                ],
                "body": "get_post_types_by_support(${1:\\$feature:array|string},${2:\\$operator:string} )",
                "description": "Retrieves a list of post type names that support a specific feature."
        },
        "ƒ:get_postdata": {
                "prefix": [
                        "get_postdata",
                        "gp"
                ],
                "body": "get_postdata(${1:\\$postid:integer} )",
                "description": "Retrieves all post data for a given post."
        },
        "ƒ:get_posts": {
                "prefix": [
                        "get_posts",
                        "gp"
                ],
                "body": "get_posts(${1:\\$args:array|null} )",
                "description": "Retrieves an array of the latest posts, or posts matching the given criteria."
        },
        "ƒ:get_posts_by_author_sql": {
                "prefix": [
                        "get_posts_by_author_sql",
                        "gpbas"
                ],
                "body": "get_posts_by_author_sql(${1:\\$post_type:string|array},${2:\\$full:boolean},${3:\\$post_author:integer|null},${4:\\$public_only:boolean} )",
                "description": "Retrieve the post SQL based on capability, author, and type."
        },
        "ƒ:get_posts_nav_link": {
                "prefix": [
                        "get_posts_nav_link",
                        "gpnl"
                ],
                "body": "get_posts_nav_link(${1:\\$args:string|array} )",
                "description": "Retrieves the post pages link navigation for previous and next pages."
        },
        "ƒ:get_preferred_from_update_core": {
                "prefix": [
                        "get_preferred_from_update_core",
                        "gpfuc"
                ],
                "body": "get_preferred_from_update_core()",
                "description": "Selects the first update version from the update_core option."
        },
        "ƒ:get_preview_post_link": {
                "prefix": [
                        "get_preview_post_link",
                        "gppl"
                ],
                "body": "get_preview_post_link(${1:\\$post:integer|WP_Post|null},${2:\\$query_args:array},${3:\\$preview_link:string} )",
                "description": "Retrieves the URL used for the post preview."
        },
        "ƒ:get_previous_comments_link": {
                "prefix": [
                        "get_previous_comments_link",
                        "gpcl"
                ],
                "body": "get_previous_comments_link(${1:\\$label:string} )",
                "description": "Retrieves the link to the previous comments page."
        },
        "ƒ:get_previous_image_link": {
                "prefix": [
                        "get_previous_image_link",
                        "gpil"
                ],
                "body": "get_previous_image_link(${1:\\$size:string|array},${2:\\$text:string|false} )",
                "description": "Gets the previous image link that has the same post parent."
        },
        "ƒ:get_previous_post": {
                "prefix": [
                        "get_previous_post",
                        "gpp"
                ],
                "body": "get_previous_post(${1:\\$in_same_term:boolean},${2:\\$excluded_terms:array|string},${3:\\$taxonomy:string} )",
                "description": "Retrieves the previous post that is adjacent to the current post."
        },
        "ƒ:get_previous_post_link": {
                "prefix": [
                        "get_previous_post_link",
                        "gppl"
                ],
                "body": "get_previous_post_link(${1:\\$format:string},${2:\\$link:string},${3:\\$in_same_term:boolean},${4:\\$excluded_terms:array|string},${5:\\$taxonomy:string} )",
                "description": "Retrieves the previous post link that is adjacent to the current post."
        },
        "ƒ:get_previous_posts_link": {
                "prefix": [
                        "get_previous_posts_link",
                        "gppl"
                ],
                "body": "get_previous_posts_link(${1:\\$label:string|null} )",
                "description": "Retrieves the previous posts page link."
        },
        "ƒ:get_previous_posts_page_link": {
                "prefix": [
                        "get_previous_posts_page_link",
                        "gpppl"
                ],
                "body": "get_previous_posts_page_link()",
                "description": "Retrieves the previous posts page link."
        },
        "ƒ:get_privacy_policy_template": {
                "prefix": [
                        "get_privacy_policy_template",
                        "gppt"
                ],
                "body": "get_privacy_policy_template()",
                "description": "Retrieve path of Privacy Policy page template in current or parent template."
        },
        "ƒ:get_privacy_policy_url": {
                "prefix": [
                        "get_privacy_policy_url",
                        "gppu"
                ],
                "body": "get_privacy_policy_url()",
                "description": "Retrieves the URL to the privacy policy page."
        },
        "ƒ:get_private_posts_cap_sql": {
                "prefix": [
                        "get_private_posts_cap_sql",
                        "gppcs"
                ],
                "body": "get_private_posts_cap_sql(${1:\\$post_type:string|array} )",
                "description": "Retrieve the private post SQL based on capability."
        },
        "ƒ:get_profile": {
                "prefix": [
                        "get_profile",
                        "gp"
                ],
                "body": "get_profile(${1:\\$field:string},${2:\\$user:false|integer} )",
                "description": "Retrieve user data based on field."
        },
        "ƒ:get_pung": {
                "prefix": [
                        "get_pung",
                        "gp"
                ],
                "body": "get_pung(${1:\\$post_id:integer|WP_Post} )",
                "description": "Retrieve URLs already pinged for a post."
        },
        "ƒ:get_queried_object": {
                "prefix": [
                        "get_queried_object",
                        "gqo"
                ],
                "body": "get_queried_object()",
                "description": "Retrieves the currently queried object."
        },
        "ƒ:get_queried_object_id": {
                "prefix": [
                        "get_queried_object_id",
                        "gqoi"
                ],
                "body": "get_queried_object_id()",
                "description": "Retrieves the ID of the currently queried object."
        },
        "ƒ:get_query_pagination_arrow": {
                "prefix": [
                        "get_query_pagination_arrow",
                        "gqpa"
                ],
                "body": "get_query_pagination_arrow(${1:\\$block:WP_Block},${2:\\$is_next:boolean} )",
                "description": "Helper function that returns the proper pagination arrow HTML for `QueryPaginationNext` and `QueryPaginationPrevious` blocks based on the provided `paginationArrow` from `QueryPagination` context."
        },
        "ƒ:get_query_template": {
                "prefix": [
                        "get_query_template",
                        "gqt"
                ],
                "body": "get_query_template(${1:\\$type:string},${2:\\$templates:array} )",
                "description": "Retrieve path to a template"
        },
        "ƒ:get_query_var": {
                "prefix": [
                        "get_query_var",
                        "gqv"
                ],
                "body": "get_query_var(${1:\\$var:string},${2:\\$default:mixed} )",
                "description": "Retrieves the value of a query variable in the WP_Query class."
        },
        "ƒ:get_random_header_image": {
                "prefix": [
                        "get_random_header_image",
                        "grhi"
                ],
                "body": "get_random_header_image()",
                "description": "Gets random header image URL from registered images in theme."
        },
        "ƒ:get_raw_theme_root": {
                "prefix": [
                        "get_raw_theme_root",
                        "grtr"
                ],
                "body": "get_raw_theme_root(${1:\\$stylesheet_or_template:string},${2:\\$skip_cache:boolean} )",
                "description": "Gets the raw theme root relative to the content directory with no filters applied."
        },
        "ƒ:get_real_file_to_edit": {
                "prefix": [
                        "get_real_file_to_edit",
                        "grfte"
                ],
                "body": "get_real_file_to_edit(${1:\\$file:string} )",
                "description": "Get the real filesystem path to a file to edit within the admin."
        },
        "ƒ:get_registered_meta_keys": {
                "prefix": [
                        "get_registered_meta_keys",
                        "grmk"
                ],
                "body": "get_registered_meta_keys(${1:\\$object_type:string},${2:\\$object_subtype:string} )",
                "description": "Retrieves a list of registered meta keys for an object type."
        },
        "ƒ:get_registered_metadata": {
                "prefix": [
                        "get_registered_metadata",
                        "grm"
                ],
                "body": "get_registered_metadata(${1:\\$object_type:string},${2:\\$object_id:integer},${3:\\$meta_key:string} )",
                "description": "Retrieves registered metadata for a specified object."
        },
        "ƒ:get_registered_nav_menus": {
                "prefix": [
                        "get_registered_nav_menus",
                        "grnm"
                ],
                "body": "get_registered_nav_menus()",
                "description": "Retrieves all registered navigation menu locations in a theme."
        },
        "ƒ:get_registered_settings": {
                "prefix": [
                        "get_registered_settings",
                        "grs"
                ],
                "body": "get_registered_settings()",
                "description": "Retrieves an array of registered settings."
        },
        "ƒ:get_registered_theme_feature": {
                "prefix": [
                        "get_registered_theme_feature",
                        "grtf"
                ],
                "body": "get_registered_theme_feature(${1:\\$feature:string} )",
                "description": "Gets the registration config for a theme feature."
        },
        "ƒ:get_registered_theme_features": {
                "prefix": [
                        "get_registered_theme_features",
                        "grtf"
                ],
                "body": "get_registered_theme_features()",
                "description": "Gets the list of registered theme features."
        },
        "ƒ:get_rest_url": {
                "prefix": [
                        "get_rest_url",
                        "gru"
                ],
                "body": "get_rest_url(${1:\\$blog_id:integer|null},${2:\\$path:string},${3:\\$scheme:string} )",
                "description": "Retrieves the URL to a REST endpoint on a site."
        },
        "ƒ:get_role": {
                "prefix": [
                        "get_role",
                        "gr"
                ],
                "body": "get_role(${1:\\$role:string} )",
                "description": "Retrieves role object."
        },
        "ƒ:get_rss": {
                "prefix": [
                        "get_rss",
                        "gr"
                ],
                "body": "get_rss(${1:\\$url:string},${2:\\$num_items:integer} )",
                "description": "Display RSS items in HTML list items."
        },
        "ƒ:get_sample_permalink": {
                "prefix": [
                        "get_sample_permalink",
                        "gsp"
                ],
                "body": "get_sample_permalink(${1:\\$id:integer|WP_Post},${2:\\$title:string|null},${3:\\$name:string|null} )",
                "description": "Returns a sample permalink based on the post name."
        },
        "ƒ:get_sample_permalink_html": {
                "prefix": [
                        "get_sample_permalink_html",
                        "gsph"
                ],
                "body": "get_sample_permalink_html(${1:\\$id:integer|WP_Post},${2:\\$new_title:string|null},${3:\\$new_slug:string|null} )",
                "description": "Returns the HTML of the sample permalink slug editor."
        },
        "ƒ:get_screen_icon": {
                "prefix": [
                        "get_screen_icon",
                        "gsi"
                ],
                "body": "get_screen_icon()",
                "description": "Retrieves the screen icon (no longer used in 3.8+)."
        },
        "ƒ:get_search_comments_feed_link": {
                "prefix": [
                        "get_search_comments_feed_link",
                        "gscfl"
                ],
                "body": "get_search_comments_feed_link(${1:\\$search_query:string},${2:\\$feed:string} )",
                "description": "Retrieves the permalink for the search results comments feed."
        },
        "ƒ:get_search_feed_link": {
                "prefix": [
                        "get_search_feed_link",
                        "gsfl"
                ],
                "body": "get_search_feed_link(${1:\\$search_query:string},${2:\\$feed:string} )",
                "description": "Retrieves the permalink for the search results feed."
        },
        "ƒ:get_search_form": {
                "prefix": [
                        "get_search_form",
                        "gsf"
                ],
                "body": "get_search_form(${1:\\$args:array} )",
                "description": "Display search form."
        },
        "ƒ:get_search_link": {
                "prefix": [
                        "get_search_link",
                        "gsl"
                ],
                "body": "get_search_link(${1:\\$query:string} )",
                "description": "Retrieves the permalink for a search."
        },
        "ƒ:get_search_query": {
                "prefix": [
                        "get_search_query",
                        "gsq"
                ],
                "body": "get_search_query(${1:\\$escaped:boolean} )",
                "description": "Retrieves the contents of the search WordPress query variable."
        },
        "ƒ:get_search_template": {
                "prefix": [
                        "get_search_template",
                        "gst"
                ],
                "body": "get_search_template()",
                "description": "Retrieve path of search template in current or parent template."
        },
        "ƒ:get_self_link": {
                "prefix": [
                        "get_self_link",
                        "gsl"
                ],
                "body": "get_self_link()",
                "description": "Returns the link for the currently displayed feed."
        },
        "ƒ:get_settings": {
                "prefix": [
                        "get_settings",
                        "gs"
                ],
                "body": "get_settings(${1:\\$option:string} )",
                "description": "Get value based on option."
        },
        "ƒ:get_settings_errors": {
                "prefix": [
                        "get_settings_errors",
                        "gse"
                ],
                "body": "get_settings_errors(${1:\\$setting:string},${2:\\$sanitize:boolean} )",
                "description": "Fetches settings errors registered by add_settings_error()."
        },
        "ƒ:get_shortcode_atts_regex": {
                "prefix": [
                        "get_shortcode_atts_regex",
                        "gsar"
                ],
                "body": "get_shortcode_atts_regex()",
                "description": "Retrieve the shortcode attributes regex."
        },
        "ƒ:get_shortcode_regex": {
                "prefix": [
                        "get_shortcode_regex",
                        "gsr"
                ],
                "body": "get_shortcode_regex(${1:\\$tagnames:array|null} )",
                "description": "Retrieve the shortcode regular expression for searching."
        },
        "ƒ:get_shortcut_link": {
                "prefix": [
                        "get_shortcut_link",
                        "gsl"
                ],
                "body": "get_shortcut_link()",
                "description": "Retrieves the Press This bookmarklet link."
        },
        "ƒ:get_sidebar": {
                "prefix": [
                        "get_sidebar",
                        "gs"
                ],
                "body": "get_sidebar(${1:\\$name:string|null},${2:\\$args:array} )",
                "description": "Load sidebar template."
        },
        "ƒ:get_single_template": {
                "prefix": [
                        "get_single_template",
                        "gst"
                ],
                "body": "get_single_template()",
                "description": "Retrieve path of single template in current or parent template. Applies to single Posts, single Attachments, and single custom post types."
        },
        "ƒ:get_singular_template": {
                "prefix": [
                        "get_singular_template",
                        "gst"
                ],
                "body": "get_singular_template()",
                "description": "Retrieves the path of the singular template in current or parent template."
        },
        "ƒ:get_site": {
                "prefix": [
                        "get_site",
                        "gs"
                ],
                "body": "get_site(${1:\\$site:WP_Site|integer|null} )",
                "description": "Retrieves site data given a site ID or site object."
        },
        "ƒ:get_site_allowed_themes": {
                "prefix": [
                        "get_site_allowed_themes",
                        "gsat"
                ],
                "body": "get_site_allowed_themes()",
                "description": "Deprecated functionality for getting themes network-enabled themes."
        },
        "ƒ:get_site_by_path": {
                "prefix": [
                        "get_site_by_path",
                        "gsbp"
                ],
                "body": "get_site_by_path(${1:\\$domain:string},${2:\\$path:string},${3:\\$segments:integer|null} )",
                "description": "Retrieves the closest matching site object by its domain and path."
        },
        "ƒ:get_site_icon_url": {
                "prefix": [
                        "get_site_icon_url",
                        "gsiu"
                ],
                "body": "get_site_icon_url(${1:\\$size:integer},${2:\\$url:string},${3:\\$blog_id:integer} )",
                "description": "Returns the Site Icon URL."
        },
        "ƒ:get_site_meta": {
                "prefix": [
                        "get_site_meta",
                        "gsm"
                ],
                "body": "get_site_meta(${1:\\$site_id:integer},${2:\\$key:string},${3:\\$single:boolean} )",
                "description": "Retrieves metadata for a site."
        },
        "ƒ:get_site_option": {
                "prefix": [
                        "get_site_option",
                        "gso"
                ],
                "body": "get_site_option(${1:\\$option:string},${2:\\$default:mixed},${3:\\$deprecated:boolean} )",
                "description": "Retrieve an option value for the current network based on name of option."
        },
        "ƒ:get_site_screen_help_sidebar_content": {
                "prefix": [
                        "get_site_screen_help_sidebar_content",
                        "gsshsc"
                ],
                "body": "get_site_screen_help_sidebar_content()",
                "description": "Returns the content for the help sidebar on the Edit Site screens."
        },
        "ƒ:get_site_screen_help_tab_args": {
                "prefix": [
                        "get_site_screen_help_tab_args",
                        "gsshta"
                ],
                "body": "get_site_screen_help_tab_args()",
                "description": "Returns the arguments for the help tab on the Edit Site screens."
        },
        "ƒ:get_site_transient": {
                "prefix": [
                        "get_site_transient",
                        "gst"
                ],
                "body": "get_site_transient(${1:\\$transient:string} )",
                "description": "Retrieves the value of a site transient."
        },
        "ƒ:get_site_url": {
                "prefix": [
                        "get_site_url",
                        "gsu"
                ],
                "body": "get_site_url(${1:\\$blog_id:integer|null},${2:\\$path:string},${3:\\$scheme:string|null} )",
                "description": "Retrieves the URL for a given site where WordPress application files (e.g. wp-blog-header.php or the wp-admin/ folder) are accessible."
        },
        "ƒ:get_sitemap_url": {
                "prefix": [
                        "get_sitemap_url",
                        "gsu"
                ],
                "body": "get_sitemap_url(${1:\\$name:string},${2:\\$subtype_name:string},${3:\\$page:integer} )",
                "description": "Retrieves the full URL for a sitemap."
        },
        "ƒ:get_sites": {
                "prefix": [
                        "get_sites",
                        "gs"
                ],
                "body": "get_sites(${1:\\$args:string|array} )",
                "description": "Retrieves a list of sites matching requested arguments."
        },
        "ƒ:get_sitestats": {
                "prefix": [
                        "get_sitestats",
                        "gs"
                ],
                "body": "get_sitestats()",
                "description": "Gets the network&#039;s site and user counts."
        },
        "ƒ:get_space_allowed": {
                "prefix": [
                        "get_space_allowed",
                        "gsa"
                ],
                "body": "get_space_allowed()",
                "description": "Returns the upload quota for the current blog."
        },
        "ƒ:get_space_used": {
                "prefix": [
                        "get_space_used",
                        "gsu"
                ],
                "body": "get_space_used()",
                "description": "Returns the space used by the current site."
        },
        "ƒ:get_status_header_desc": {
                "prefix": [
                        "get_status_header_desc",
                        "gshd"
                ],
                "body": "get_status_header_desc(${1:\\$code:integer} )",
                "description": "Retrieve the description for the HTTP status."
        },
        "ƒ:get_stylesheet": {
                "prefix": [
                        "get_stylesheet",
                        "gs"
                ],
                "body": "get_stylesheet()",
                "description": "Retrieves name of the current stylesheet."
        },
        "ƒ:get_stylesheet_directory": {
                "prefix": [
                        "get_stylesheet_directory",
                        "gsd"
                ],
                "body": "get_stylesheet_directory()",
                "description": "Retrieves stylesheet directory path for the active theme."
        },
        "ƒ:get_stylesheet_directory_uri": {
                "prefix": [
                        "get_stylesheet_directory_uri",
                        "gsdu"
                ],
                "body": "get_stylesheet_directory_uri()",
                "description": "Retrieves stylesheet directory URI for the active theme."
        },
        "ƒ:get_stylesheet_uri": {
                "prefix": [
                        "get_stylesheet_uri",
                        "gsu"
                ],
                "body": "get_stylesheet_uri()",
                "description": "Retrieves stylesheet URI for the active theme."
        },
        "ƒ:get_subdirectory_reserved_names": {
                "prefix": [
                        "get_subdirectory_reserved_names",
                        "gsrn"
                ],
                "body": "get_subdirectory_reserved_names()",
                "description": "Retrieves a list of reserved site on a sub-directory Multisite installation."
        },
        "ƒ:get_submit_button": {
                "prefix": [
                        "get_submit_button",
                        "gsb"
                ],
                "body": "get_submit_button(${1:\\$text:string},${2:\\$type:string},${3:\\$name:string},${4:\\$wrap:boolean},${5:\\$other_attributes:array|string} )",
                "description": "Returns a submit button, with provided text and appropriate class."
        },
        "ƒ:get_super_admins": {
                "prefix": [
                        "get_super_admins",
                        "gsa"
                ],
                "body": "get_super_admins()",
                "description": "Retrieves a list of super admins."
        },
        "ƒ:get_tag": {
                "prefix": [
                        "get_tag",
                        "gt"
                ],
                "body": "get_tag(${1:\\$tag:integer|WP_Term|object},${2:\\$output:string},${3:\\$filter:string} )",
                "description": "Retrieves a post tag by tag ID or tag object."
        },
        "ƒ:get_tag_feed_link": {
                "prefix": [
                        "get_tag_feed_link",
                        "gtfl"
                ],
                "body": "get_tag_feed_link(${1:\\$tag:integer|WP_Term|object},${2:\\$feed:string} )",
                "description": "Retrieves the permalink for a tag feed."
        },
        "ƒ:get_tag_link": {
                "prefix": [
                        "get_tag_link",
                        "gtl"
                ],
                "body": "get_tag_link(${1:\\$tag:integer|object} )",
                "description": "Retrieves the link to the tag."
        },
        "ƒ:get_tag_regex": {
                "prefix": [
                        "get_tag_regex",
                        "gtr"
                ],
                "body": "get_tag_regex(${1:\\$tag:string} )",
                "description": "Return RegEx body to liberally match an opening HTML tag."
        },
        "ƒ:get_tag_template": {
                "prefix": [
                        "get_tag_template",
                        "gtt"
                ],
                "body": "get_tag_template()",
                "description": "Retrieve path of tag template in current or parent template."
        },
        "ƒ:get_tags": {
                "prefix": [
                        "get_tags",
                        "gt"
                ],
                "body": "get_tags(${1:\\$args:string|array} )",
                "description": "Retrieves all post tags."
        },
        "ƒ:get_tags_to_edit": {
                "prefix": [
                        "get_tags_to_edit",
                        "gtte"
                ],
                "body": "get_tags_to_edit(${1:\\$post_id:integer},${2:\\$taxonomy:string} )",
                "description": "Get comma-separated list of tags available to edit."
        },
        "ƒ:get_tax_sql": {
                "prefix": [
                        "get_tax_sql",
                        "gts"
                ],
                "body": "get_tax_sql(${1:\\$tax_query:array},${2:\\$primary_table:string},${3:\\$primary_id_column:string} )",
                "description": "Given a taxonomy query, generates SQL to be appended to a main query."
        },
        "ƒ:get_taxonomies": {
                "prefix": [
                        "get_taxonomies",
                        "gt"
                ],
                "body": "get_taxonomies(${1:\\$args:array},${2:\\$output:string},${3:\\$operator:string} )",
                "description": "Retrieves a list of registered taxonomy names or objects."
        },
        "ƒ:get_taxonomies_for_attachments": {
                "prefix": [
                        "get_taxonomies_for_attachments",
                        "gtfa"
                ],
                "body": "get_taxonomies_for_attachments(${1:\\$output:string} )",
                "description": "Retrieves all of the taxonomies that are registered for attachments."
        },
        "ƒ:get_taxonomy": {
                "prefix": [
                        "get_taxonomy",
                        "gt"
                ],
                "body": "get_taxonomy(${1:\\$taxonomy:string} )",
                "description": "Retrieves the taxonomy object of $taxonomy."
        },
        "ƒ:get_taxonomy_labels": {
                "prefix": [
                        "get_taxonomy_labels",
                        "gtl"
                ],
                "body": "get_taxonomy_labels(${1:\\$tax:WP_Taxonomy} )",
                "description": "Builds an object with all taxonomy labels out of a taxonomy object."
        },
        "ƒ:get_taxonomy_template": {
                "prefix": [
                        "get_taxonomy_template",
                        "gtt"
                ],
                "body": "get_taxonomy_template()",
                "description": "Retrieve path of custom taxonomy term template in current or parent template."
        },
        "ƒ:get_temp_dir": {
                "prefix": [
                        "get_temp_dir",
                        "gtd"
                ],
                "body": "get_temp_dir()",
                "description": "Determine a writable directory for temporary files."
        },
        "ƒ:get_template": {
                "prefix": [
                        "get_template",
                        "gt"
                ],
                "body": "get_template()",
                "description": "Retrieves name of the active theme."
        },
        "ƒ:get_template_directory": {
                "prefix": [
                        "get_template_directory",
                        "gtd"
                ],
                "body": "get_template_directory()",
                "description": "Retrieves template directory path for the active theme."
        },
        "ƒ:get_template_directory_uri": {
                "prefix": [
                        "get_template_directory_uri",
                        "gtdu"
                ],
                "body": "get_template_directory_uri()",
                "description": "Retrieves template directory URI for the active theme."
        },
        "ƒ:get_template_part": {
                "prefix": [
                        "get_template_part",
                        "gtp"
                ],
                "body": "get_template_part(${1:\\$slug:string},${2:\\$name:string|null},${3:\\$args:array} )",
                "description": "Loads a template part into a template."
        },
        "ƒ:get_term": {
                "prefix": [
                        "get_term",
                        "gt"
                ],
                "body": "get_term(${1:\\$term:integer|WP_Term|object},${2:\\$taxonomy:string},${3:\\$output:string},${4:\\$filter:string} )",
                "description": "Gets all term data from database by term ID."
        },
        "ƒ:get_term_by": {
                "prefix": [
                        "get_term_by",
                        "gtb"
                ],
                "body": "get_term_by(${1:\\$field:string},${2:\\$value:string|integer},${3:\\$taxonomy:string},${4:\\$output:string},${5:\\$filter:string} )",
                "description": "Gets all term data from database by term field and data."
        },
        "ƒ:get_term_children": {
                "prefix": [
                        "get_term_children",
                        "gtc"
                ],
                "body": "get_term_children(${1:\\$term_id:integer},${2:\\$taxonomy:string} )",
                "description": "Merges all term children into a single array of their IDs."
        },
        "ƒ:get_term_feed_link": {
                "prefix": [
                        "get_term_feed_link",
                        "gtfl"
                ],
                "body": "get_term_feed_link(${1:\\$term:integer|WP_Term|object},${2:\\$taxonomy:string},${3:\\$feed:string} )",
                "description": "Retrieves the feed link for a term."
        },
        "ƒ:get_term_field": {
                "prefix": [
                        "get_term_field",
                        "gtf"
                ],
                "body": "get_term_field(${1:\\$field:string},${2:\\$term:integer|WP_Term},${3:\\$taxonomy:string},${4:\\$context:string} )",
                "description": "Gets sanitized term field."
        },
        "ƒ:get_term_link": {
                "prefix": [
                        "get_term_link",
                        "gtl"
                ],
                "body": "get_term_link(${1:\\$term:WP_Term|integer|string},${2:\\$taxonomy:string} )",
                "description": "Generates a permalink for a taxonomy term archive."
        },
        "ƒ:get_term_meta": {
                "prefix": [
                        "get_term_meta",
                        "gtm"
                ],
                "body": "get_term_meta(${1:\\$term_id:integer},${2:\\$key:string},${3:\\$single:boolean} )",
                "description": "Retrieves metadata for a term."
        },
        "ƒ:get_term_parents_list": {
                "prefix": [
                        "get_term_parents_list",
                        "gtpl"
                ],
                "body": "get_term_parents_list(${1:\\$term_id:integer},${2:\\$taxonomy:string},${3:\\$args:string|array} )",
                "description": "Retrieves term parents with separator."
        },
        "ƒ:get_term_to_edit": {
                "prefix": [
                        "get_term_to_edit",
                        "gtte"
                ],
                "body": "get_term_to_edit(${1:\\$id:integer|object},${2:\\$taxonomy:string} )",
                "description": "Sanitizes term for editing."
        },
        "ƒ:get_terms_to_edit": {
                "prefix": [
                        "get_terms_to_edit",
                        "gtte"
                ],
                "body": "get_terms_to_edit(${1:\\$post_id:integer},${2:\\$taxonomy:string} )",
                "description": "Get comma-separated list of terms available to edit for the given post ID."
        },
        "ƒ:get_the_archive_description": {
                "prefix": [
                        "get_the_archive_description",
                        "gtad"
                ],
                "body": "get_the_archive_description()",
                "description": "Retrieves the description for an author, post type, or term archive."
        },
        "ƒ:get_the_archive_title": {
                "prefix": [
                        "get_the_archive_title",
                        "gtat"
                ],
                "body": "get_the_archive_title()",
                "description": "Retrieve the archive title based on the queried object."
        },
        "ƒ:get_the_attachment_link": {
                "prefix": [
                        "get_the_attachment_link",
                        "gtal"
                ],
                "body": "get_the_attachment_link(${1:\\$id:integer},${2:\\$fullsize:boolean},${3:\\$max_dims:array},${4:\\$permalink:boolean} )",
                "description": "Retrieve HTML content of attachment image with link."
        },
        "ƒ:get_the_author": {
                "prefix": [
                        "get_the_author",
                        "gta"
                ],
                "body": "get_the_author(${1:\\$deprecated:string} )",
                "description": "Retrieves the author of the current post."
        },
        "ƒ:get_the_author_aim": {
                "prefix": [
                        "get_the_author_aim",
                        "gtaa"
                ],
                "body": "get_the_author_aim()",
                "description": "Retrieve the AIM address of the author of the current post."
        },
        "ƒ:get_the_author_description": {
                "prefix": [
                        "get_the_author_description",
                        "gtad"
                ],
                "body": "get_the_author_description()",
                "description": "Retrieve the description of the author of the current post."
        },
        "ƒ:get_the_author_email": {
                "prefix": [
                        "get_the_author_email",
                        "gtae"
                ],
                "body": "get_the_author_email()",
                "description": "Retrieve the email of the author of the current post."
        },
        "ƒ:get_the_author_firstname": {
                "prefix": [
                        "get_the_author_firstname",
                        "gtaf"
                ],
                "body": "get_the_author_firstname()",
                "description": "Retrieve the first name of the author of the current post."
        },
        "ƒ:get_the_author_icq": {
                "prefix": [
                        "get_the_author_icq",
                        "gtai"
                ],
                "body": "get_the_author_icq()",
                "description": "Retrieve the ICQ number of the author of the current post."
        },
        "ƒ:get_the_author_ID": {
                "prefix": [
                        "get_the_author_ID",
                        "gtaI"
                ],
                "body": "get_the_author_ID()",
                "description": "Retrieve the ID of the author of the current post."
        },
        "ƒ:get_the_author_lastname": {
                "prefix": [
                        "get_the_author_lastname",
                        "gtal"
                ],
                "body": "get_the_author_lastname()",
                "description": "Retrieve the last name of the author of the current post."
        },
        "ƒ:get_the_author_link": {
                "prefix": [
                        "get_the_author_link",
                        "gtal"
                ],
                "body": "get_the_author_link()",
                "description": "Retrieves either author&#039;s link or author&#039;s name."
        },
        "ƒ:get_the_author_login": {
                "prefix": [
                        "get_the_author_login",
                        "gtal"
                ],
                "body": "get_the_author_login()",
                "description": "Retrieve the login name of the author of the current post."
        },
        "ƒ:get_the_author_meta": {
                "prefix": [
                        "get_the_author_meta",
                        "gtam"
                ],
                "body": "get_the_author_meta(${1:\\$field:string},${2:\\$user_id:integer|false} )",
                "description": "Retrieves the requested data of the author of the current post."
        },
        "ƒ:get_the_author_msn": {
                "prefix": [
                        "get_the_author_msn",
                        "gtam"
                ],
                "body": "get_the_author_msn()",
                "description": "Retrieve the MSN address of the author of the current post."
        },
        "ƒ:get_the_author_nickname": {
                "prefix": [
                        "get_the_author_nickname",
                        "gtan"
                ],
                "body": "get_the_author_nickname()",
                "description": "Retrieve the nickname of the author of the current post."
        },
        "ƒ:get_the_author_posts": {
                "prefix": [
                        "get_the_author_posts",
                        "gtap"
                ],
                "body": "get_the_author_posts()",
                "description": "Retrieves the number of posts by the author of the current post."
        },
        "ƒ:get_the_author_posts_link": {
                "prefix": [
                        "get_the_author_posts_link",
                        "gtapl"
                ],
                "body": "get_the_author_posts_link()",
                "description": "Retrieves an HTML link to the author page of the current post&#039;s author."
        },
        "ƒ:get_the_author_url": {
                "prefix": [
                        "get_the_author_url",
                        "gtau"
                ],
                "body": "get_the_author_url()",
                "description": "Retrieve the URL to the home page of the author of the current post."
        },
        "ƒ:get_the_author_yim": {
                "prefix": [
                        "get_the_author_yim",
                        "gtay"
                ],
                "body": "get_the_author_yim()",
                "description": "Retrieve the Yahoo! IM name of the author of the current post."
        },
        "ƒ:get_the_block_template_html": {
                "prefix": [
                        "get_the_block_template_html",
                        "gtbth"
                ],
                "body": "get_the_block_template_html()",
                "description": "Returns the markup for the current template."
        },
        "ƒ:get_the_category": {
                "prefix": [
                        "get_the_category",
                        "gtc"
                ],
                "body": "get_the_category(${1:\\$post_id:integer} )",
                "description": "Retrieves post categories."
        },
        "ƒ:get_the_category_by_ID": {
                "prefix": [
                        "get_the_category_by_ID",
                        "gtcbI"
                ],
                "body": "get_the_category_by_ID(${1:\\$cat_id:integer} )",
                "description": "Retrieves category name based on category ID."
        },
        "ƒ:get_the_category_list": {
                "prefix": [
                        "get_the_category_list",
                        "gtcl"
                ],
                "body": "get_the_category_list(${1:\\$separator:string},${2:\\$parents:string},${3:\\$post_id:integer} )",
                "description": "Retrieves category list for a post in either HTML list or custom format."
        },
        "ƒ:get_the_category_rss": {
                "prefix": [
                        "get_the_category_rss",
                        "gtcr"
                ],
                "body": "get_the_category_rss(${1:\\$type:string|null} )",
                "description": "Retrieve all of the post categories, formatted for use in feeds."
        },
        "ƒ:get_the_comments_navigation": {
                "prefix": [
                        "get_the_comments_navigation",
                        "gtcn"
                ],
                "body": "get_the_comments_navigation(${1:\\$args:array} )",
                "description": "Retrieves navigation to next/previous set of comments, when applicable."
        },
        "ƒ:get_the_comments_pagination": {
                "prefix": [
                        "get_the_comments_pagination",
                        "gtcp"
                ],
                "body": "get_the_comments_pagination(${1:\\$args:array} )",
                "description": "Retrieves a paginated navigation to next/previous set of comments, when applicable."
        },
        "ƒ:get_the_content": {
                "prefix": [
                        "get_the_content",
                        "gtc"
                ],
                "body": "get_the_content(${1:\\$more_link_text:string|null},${2:\\$strip_teaser:boolean},${3:\\$post:WP_Post|object|integer|null} )",
                "description": "Retrieves the post content."
        },
        "ƒ:get_the_content_feed": {
                "prefix": [
                        "get_the_content_feed",
                        "gtcf"
                ],
                "body": "get_the_content_feed(${1:\\$feed_type:string|null} )",
                "description": "Retrieve the post content for feeds."
        },
        "ƒ:get_the_date": {
                "prefix": [
                        "get_the_date",
                        "gtd"
                ],
                "body": "get_the_date(${1:\\$format:string},${2:\\$post:integer|WP_Post|null} )",
                "description": "Retrieve the date on which the post was written."
        },
        "ƒ:get_the_excerpt": {
                "prefix": [
                        "get_the_excerpt",
                        "gte"
                ],
                "body": "get_the_excerpt(${1:\\$post:integer|WP_Post|null} )",
                "description": "Retrieves the post excerpt."
        },
        "ƒ:get_the_generator": {
                "prefix": [
                        "get_the_generator",
                        "gtg"
                ],
                "body": "get_the_generator(${1:\\$type:string} )",
                "description": "Creates the generator XML or Comment for RSS, ATOM, etc."
        },
        "ƒ:get_the_guid": {
                "prefix": [
                        "get_the_guid",
                        "gtg"
                ],
                "body": "get_the_guid(${1:\\$post:integer|WP_Post} )",
                "description": "Retrieves the Post Global Unique Identifier (guid)."
        },
        "ƒ:get_the_ID": {
                "prefix": [
                        "get_the_ID",
                        "gtI"
                ],
                "body": "get_the_ID()",
                "description": "Retrieves the ID of the current item in the WordPress Loop."
        },
        "ƒ:get_the_modified_author": {
                "prefix": [
                        "get_the_modified_author",
                        "gtma"
                ],
                "body": "get_the_modified_author()",
                "description": "Retrieves the author who last edited the current post."
        },
        "ƒ:get_the_modified_date": {
                "prefix": [
                        "get_the_modified_date",
                        "gtmd"
                ],
                "body": "get_the_modified_date(${1:\\$format:string},${2:\\$post:integer|WP_Post|null} )",
                "description": "Retrieve the date on which the post was last modified."
        },
        "ƒ:get_the_modified_time": {
                "prefix": [
                        "get_the_modified_time",
                        "gtmt"
                ],
                "body": "get_the_modified_time(${1:\\$format:string},${2:\\$post:integer|WP_Post|null} )",
                "description": "Retrieve the time at which the post was last modified."
        },
        "ƒ:get_the_password_form": {
                "prefix": [
                        "get_the_password_form",
                        "gtpf"
                ],
                "body": "get_the_password_form(${1:\\$post:integer|WP_Post} )",
                "description": "Retrieves protected post password form content."
        },
        "ƒ:get_the_permalink": {
                "prefix": [
                        "get_the_permalink",
                        "gtp"
                ],
                "body": "get_the_permalink(${1:\\$post:integer|WP_Post},${2:\\$leavename:boolean} )",
                "description": "Retrieves the full permalink for the current post or post ID."
        },
        "ƒ:get_the_post_navigation": {
                "prefix": [
                        "get_the_post_navigation",
                        "gtpn"
                ],
                "body": "get_the_post_navigation(${1:\\$args:array} )",
                "description": "Retrieves the navigation to next/previous post, when applicable."
        },
        "ƒ:get_the_post_thumbnail": {
                "prefix": [
                        "get_the_post_thumbnail",
                        "gtpt"
                ],
                "body": "get_the_post_thumbnail(${1:\\$post:integer|WP_Post|null},${2:\\$size:string|array},${3:\\$attr:string|array} )",
                "description": "Retrieves the post thumbnail."
        },
        "ƒ:get_the_post_thumbnail_caption": {
                "prefix": [
                        "get_the_post_thumbnail_caption",
                        "gtptc"
                ],
                "body": "get_the_post_thumbnail_caption(${1:\\$post:integer|WP_Post|null} )",
                "description": "Returns the post thumbnail caption."
        },
        "ƒ:get_the_post_thumbnail_url": {
                "prefix": [
                        "get_the_post_thumbnail_url",
                        "gtptu"
                ],
                "body": "get_the_post_thumbnail_url(${1:\\$post:integer|WP_Post|null},${2:\\$size:string|array} )",
                "description": "Returns the post thumbnail URL."
        },
        "ƒ:get_the_post_type_description": {
                "prefix": [
                        "get_the_post_type_description",
                        "gtptd"
                ],
                "body": "get_the_post_type_description()",
                "description": "Retrieves the description for a post type archive."
        },
        "ƒ:get_the_posts_navigation": {
                "prefix": [
                        "get_the_posts_navigation",
                        "gtpn"
                ],
                "body": "get_the_posts_navigation(${1:\\$args:array} )",
                "description": "Returns the navigation to next/previous set of posts, when applicable."
        },
        "ƒ:get_the_posts_pagination": {
                "prefix": [
                        "get_the_posts_pagination",
                        "gtpp"
                ],
                "body": "get_the_posts_pagination(${1:\\$args:array} )",
                "description": "Retrieves a paginated navigation to next/previous set of posts, when applicable."
        },
        "ƒ:get_the_privacy_policy_link": {
                "prefix": [
                        "get_the_privacy_policy_link",
                        "gtppl"
                ],
                "body": "get_the_privacy_policy_link(${1:\\$before:string},${2:\\$after:string} )",
                "description": "Returns the privacy policy link with formatting, when applicable."
        },
        "ƒ:get_the_tag_list": {
                "prefix": [
                        "get_the_tag_list",
                        "gttl"
                ],
                "body": "get_the_tag_list(${1:\\$before:string},${2:\\$sep:string},${3:\\$after:string},${4:\\$post_id:integer} )",
                "description": "Retrieves the tags for a post formatted as a string."
        },
        "ƒ:get_the_tags": {
                "prefix": [
                        "get_the_tags",
                        "gtt"
                ],
                "body": "get_the_tags(${1:\\$post_id:integer|WP_Post} )",
                "description": "Retrieves the tags for a post."
        },
        "ƒ:get_the_taxonomies": {
                "prefix": [
                        "get_the_taxonomies",
                        "gtt"
                ],
                "body": "get_the_taxonomies(${1:\\$post:integer|WP_Post},${2:\\$args:array} )",
                "description": "Retrieves all taxonomies associated with a post."
        },
        "ƒ:get_the_term_list": {
                "prefix": [
                        "get_the_term_list",
                        "gttl"
                ],
                "body": "get_the_term_list(${1:\\$post_id:integer},${2:\\$taxonomy:string},${3:\\$before:string},${4:\\$sep:string},${5:\\$after:string} )",
                "description": "Retrieves a post&#039;s terms as a list with specified format."
        },
        "ƒ:get_the_terms": {
                "prefix": [
                        "get_the_terms",
                        "gtt"
                ],
                "body": "get_the_terms(${1:\\$post:integer|WP_Post},${2:\\$taxonomy:string} )",
                "description": "Retrieves the terms of the taxonomy that are attached to the post."
        },
        "ƒ:get_the_time": {
                "prefix": [
                        "get_the_time",
                        "gtt"
                ],
                "body": "get_the_time(${1:\\$format:string},${2:\\$post:integer|WP_Post|null} )",
                "description": "Retrieve the time at which the post was written."
        },
        "ƒ:get_the_title": {
                "prefix": [
                        "get_the_title",
                        "gtt"
                ],
                "body": "get_the_title(${1:\\$post:integer|WP_Post} )",
                "description": "Retrieves the post title."
        },
        "ƒ:get_the_title_rss": {
                "prefix": [
                        "get_the_title_rss",
                        "gttr"
                ],
                "body": "get_the_title_rss()",
                "description": "Retrieve the current post title for the feed."
        },
        "ƒ:get_theme": {
                "prefix": [
                        "get_theme",
                        "gt"
                ],
                "body": "get_theme(${1:\\$theme:string} )",
                "description": "Retrieve theme data."
        },
        "ƒ:get_theme_data": {
                "prefix": [
                        "get_theme_data",
                        "gtd"
                ],
                "body": "get_theme_data(${1:\\$theme_file:string} )",
                "description": "Retrieve theme data from parsed theme file."
        },
        "ƒ:get_theme_feature_list": {
                "prefix": [
                        "get_theme_feature_list",
                        "gtfl"
                ],
                "body": "get_theme_feature_list(${1:\\$api:boolean} )",
                "description": "Retrieves list of WordPress theme features (aka theme tags)."
        },
        "ƒ:get_theme_file_path": {
                "prefix": [
                        "get_theme_file_path",
                        "gtfp"
                ],
                "body": "get_theme_file_path(${1:\\$file:string} )",
                "description": "Retrieves the path of a file in the theme."
        },
        "ƒ:get_theme_file_uri": {
                "prefix": [
                        "get_theme_file_uri",
                        "gtfu"
                ],
                "body": "get_theme_file_uri(${1:\\$file:string} )",
                "description": "Retrieves the URL of a file in the theme."
        },
        "ƒ:get_theme_mod": {
                "prefix": [
                        "get_theme_mod",
                        "gtm"
                ],
                "body": "get_theme_mod(${1:\\$name:string},${2:\\$default:mixed} )",
                "description": "Retrieves theme modification value for the active theme."
        },
        "ƒ:get_theme_mods": {
                "prefix": [
                        "get_theme_mods",
                        "gtm"
                ],
                "body": "get_theme_mods()",
                "description": "Retrieves all theme modifications."
        },
        "ƒ:get_theme_root": {
                "prefix": [
                        "get_theme_root",
                        "gtr"
                ],
                "body": "get_theme_root(${1:\\$stylesheet_or_template:string} )",
                "description": "Retrieves path to themes directory."
        },
        "ƒ:get_theme_root_uri": {
                "prefix": [
                        "get_theme_root_uri",
                        "gtru"
                ],
                "body": "get_theme_root_uri(${1:\\$stylesheet_or_template:string},${2:\\$theme_root:string} )",
                "description": "Retrieves URI for themes directory."
        },
        "ƒ:get_theme_roots": {
                "prefix": [
                        "get_theme_roots",
                        "gtr"
                ],
                "body": "get_theme_roots()",
                "description": "Retrieves theme roots."
        },
        "ƒ:get_theme_starter_content": {
                "prefix": [
                        "get_theme_starter_content",
                        "gtsc"
                ],
                "body": "get_theme_starter_content()",
                "description": "Expands a theme&#039;s starter content configuration using core-provided data."
        },
        "ƒ:get_theme_support": {
                "prefix": [
                        "get_theme_support",
                        "gts"
                ],
                "body": "get_theme_support(${1:\\$feature:string},${2:\\$args:mixed} )",
                "description": "Gets the theme support arguments passed when registering that support."
        },
        "ƒ:get_theme_update_available": {
                "prefix": [
                        "get_theme_update_available",
                        "gtua"
                ],
                "body": "get_theme_update_available(${1:\\$theme:WP_Theme} )",
                "description": "Retrieves the update link if there is a theme update available."
        },
        "ƒ:get_theme_updates": {
                "prefix": [
                        "get_theme_updates",
                        "gtu"
                ],
                "body": "get_theme_updates()",
                "description": ""
        },
        "ƒ:get_themes": {
                "prefix": [
                        "get_themes",
                        "gt"
                ],
                "body": "get_themes()",
                "description": "Retrieve list of themes with theme data in theme directory."
        },
        "ƒ:get_to_ping": {
                "prefix": [
                        "get_to_ping",
                        "gtp"
                ],
                "body": "get_to_ping(${1:\\$post_id:integer|WP_Post} )",
                "description": "Retrieve URLs that need to be pinged."
        },
        "ƒ:get_trackback_url": {
                "prefix": [
                        "get_trackback_url",
                        "gtu"
                ],
                "body": "get_trackback_url()",
                "description": "Retrieves the current post&#039;s trackback URL."
        },
        "ƒ:get_transient": {
                "prefix": [
                        "get_transient",
                        "gt"
                ],
                "body": "get_transient(${1:\\$transient:string} )",
                "description": "Retrieves the value of a transient."
        },
        "ƒ:get_translations_for_domain": {
                "prefix": [
                        "get_translations_for_domain",
                        "gtfd"
                ],
                "body": "get_translations_for_domain(${1:\\$domain:string} )",
                "description": "Return the Translations instance for a text domain."
        },
        "ƒ:get_udims": {
                "prefix": [
                        "get_udims",
                        "gu"
                ],
                "body": "get_udims(${1:\\$width:integer},${2:\\$height:integer} )",
                "description": "Calculated the new dimensions for a downsampled image."
        },
        "ƒ:get_upload_iframe_src": {
                "prefix": [
                        "get_upload_iframe_src",
                        "guis"
                ],
                "body": "get_upload_iframe_src(${1:\\$type:string|null},${2:\\$post_id:integer|null},${3:\\$tab:string|null} )",
                "description": ""
        },
        "ƒ:get_upload_space_available": {
                "prefix": [
                        "get_upload_space_available",
                        "gusa"
                ],
                "body": "get_upload_space_available()",
                "description": "Determines if there is any upload space left in the current blog&#039;s quota."
        },
        "ƒ:get_uploaded_header_images": {
                "prefix": [
                        "get_uploaded_header_images",
                        "guhi"
                ],
                "body": "get_uploaded_header_images()",
                "description": "Gets the header images uploaded for the active theme."
        },
        "ƒ:get_url_in_content": {
                "prefix": [
                        "get_url_in_content",
                        "guic"
                ],
                "body": "get_url_in_content(${1:\\$content:string} )",
                "description": "Extracts and returns the first URL from passed content."
        },
        "ƒ:get_user_by": {
                "prefix": [
                        "get_user_by",
                        "gub"
                ],
                "body": "get_user_by(${1:\\$field:string},${2:\\$value:integer|string} )",
                "description": "Retrieve user info by a given field"
        },
        "ƒ:get_user_by_email": {
                "prefix": [
                        "get_user_by_email",
                        "gube"
                ],
                "body": "get_user_by_email(${1:\\$email:string} )",
                "description": "Retrieve user info by email."
        },
        "ƒ:get_user_count": {
                "prefix": [
                        "get_user_count",
                        "guc"
                ],
                "body": "get_user_count(${1:\\$network_id:integer|null} )",
                "description": "Returns the number of active users in your installation."
        },
        "ƒ:get_user_details": {
                "prefix": [
                        "get_user_details",
                        "gud"
                ],
                "body": "get_user_details(${1:\\$username:string} )",
                "description": "Deprecated functionality to retrieve user information."
        },
        "ƒ:get_user_id_from_string": {
                "prefix": [
                        "get_user_id_from_string",
                        "guifs"
                ],
                "body": "get_user_id_from_string(${1:\\$string:string} )",
                "description": "Get a numeric user ID from either an email address or a login."
        },
        "ƒ:get_user_locale": {
                "prefix": [
                        "get_user_locale",
                        "gul"
                ],
                "body": "get_user_locale(${1:\\$user_id:integer|WP_User} )",
                "description": "Retrieves the locale of a user."
        },
        "ƒ:get_user_meta": {
                "prefix": [
                        "get_user_meta",
                        "gum"
                ],
                "body": "get_user_meta(${1:\\$user_id:integer},${2:\\$key:string},${3:\\$single:boolean} )",
                "description": "Retrieves user meta field for a user."
        },
        "ƒ:get_user_metavalues": {
                "prefix": [
                        "get_user_metavalues",
                        "gum"
                ],
                "body": "get_user_metavalues(${1:\\$ids:array} )",
                "description": "Perform the query to get the $metavalues array(s) needed by _fill_user and _fill_many_users"
        },
        "ƒ:get_user_option": {
                "prefix": [
                        "get_user_option",
                        "guo"
                ],
                "body": "get_user_option(${1:\\$option:string},${2:\\$user:integer},${3:\\$deprecated:string} )",
                "description": "Retrieves user option that can be either per Site or per Network."
        },
        "ƒ:get_user_setting": {
                "prefix": [
                        "get_user_setting",
                        "gus"
                ],
                "body": "get_user_setting(${1:\\$name:string},${2:\\$default:string|false} )",
                "description": "Retrieves user interface setting value based on setting name."
        },
        "ƒ:get_user_to_edit": {
                "prefix": [
                        "get_user_to_edit",
                        "gute"
                ],
                "body": "get_user_to_edit(${1:\\$user_id:integer} )",
                "description": "Retrieve user data and filter it."
        },
        "ƒ:get_userdata": {
                "prefix": [
                        "get_userdata",
                        "gu"
                ],
                "body": "get_userdata(${1:\\$user_id:integer} )",
                "description": "Retrieve user info by user ID."
        },
        "ƒ:get_userdatabylogin": {
                "prefix": [
                        "get_userdatabylogin",
                        "gu"
                ],
                "body": "get_userdatabylogin(${1:\\$user_login:string} )",
                "description": "Retrieve user info by login name."
        },
        "ƒ:get_usermeta": {
                "prefix": [
                        "get_usermeta",
                        "gu"
                ],
                "body": "get_usermeta(${1:\\$user_id:integer},${2:\\$meta_key:string} )",
                "description": "Retrieve user metadata."
        },
        "ƒ:get_usernumposts": {
                "prefix": [
                        "get_usernumposts",
                        "gu"
                ],
                "body": "get_usernumposts(${1:\\$userid:integer} )",
                "description": "Retrieves the number of posts a user has written."
        },
        "ƒ:get_users": {
                "prefix": [
                        "get_users",
                        "gu"
                ],
                "body": "get_users(${1:\\$args:array} )",
                "description": "Retrieves list of users matching criteria."
        },
        "ƒ:get_users_drafts": {
                "prefix": [
                        "get_users_drafts",
                        "gud"
                ],
                "body": "get_users_drafts(${1:\\$user_id:integer} )",
                "description": "Retrieve the user&#039;s drafts."
        },
        "ƒ:get_users_of_blog": {
                "prefix": [
                        "get_users_of_blog",
                        "guob"
                ],
                "body": "get_users_of_blog(${1:\\$id:integer} )",
                "description": "Get users for the site."
        },
        "ƒ:get_weekstartend": {
                "prefix": [
                        "get_weekstartend",
                        "gw"
                ],
                "body": "get_weekstartend(${1:\\$mysqlstring:string},${2:\\$start_of_week:integer|string} )",
                "description": "Get the week start and end from the datetime or date string from MySQL."
        },
        "ƒ:get_wp_title_rss": {
                "prefix": [
                        "get_wp_title_rss",
                        "gwtr"
                ],
                "body": "get_wp_title_rss(${1:\\$deprecated:string} )",
                "description": "Retrieve the blog title for the feed title."
        },
        "ƒ:get_year_link": {
                "prefix": [
                        "get_year_link",
                        "gyl"
                ],
                "body": "get_year_link(${1:\\$year:integer|false} )",
                "description": "Retrieves the permalink for the year archives."
        },
        "ƒ:global_terms": {
                "prefix": [
                        "global_terms",
                        "gt"
                ],
                "body": "global_terms(${1:\\$term_id:integer},${2:\\$deprecated:string} )",
                "description": "Maintains a canonical list of terms by syncing terms created for each blog with the global terms table."
        },
        "ƒ:global_terms_enabled": {
                "prefix": [
                        "global_terms_enabled",
                        "gte"
                ],
                "body": "global_terms_enabled()",
                "description": "Determine whether global terms are enabled."
        },
        "ƒ:got_mod_rewrite": {
                "prefix": [
                        "got_mod_rewrite",
                        "gmr"
                ],
                "body": "got_mod_rewrite()",
                "description": "Returns whether the server is running Apache with the mod_rewrite module loaded."
        },
        "ƒ:got_url_rewrite": {
                "prefix": [
                        "got_url_rewrite",
                        "gur"
                ],
                "body": "got_url_rewrite()",
                "description": "Returns whether the server supports URL rewriting."
        },
        "ƒ:graceful_fail": {
                "prefix": [
                        "graceful_fail",
                        "gf"
                ],
                "body": "graceful_fail(${1:\\$message:} )",
                "description": "Deprecated functionality to gracefully fail."
        },
        "ƒ:grant_super_admin": {
                "prefix": [
                        "grant_super_admin",
                        "gsa"
                ],
                "body": "grant_super_admin(${1:\\$user_id:integer} )",
                "description": "Grants Super Admin privileges."
        },
        "ƒ:gzip_compression": {
                "prefix": [
                        "gzip_compression",
                        "gc"
                ],
                "body": "gzip_compression()",
                "description": "Unused function."
        },
        "ƒ:handle_legacy_widget_preview_iframe": {
                "prefix": [
                        "handle_legacy_widget_preview_iframe",
                        "hlwpi"
                ],
                "body": "handle_legacy_widget_preview_iframe()",
                "description": "Intercepts any request with legacy-widget-preview in the query param and, if set, renders a page containing a preview of the requested Legacy Widget block."
        },
        "ƒ:has_action": {
                "prefix": [
                        "has_action",
                        "ha"
                ],
                "body": "has_action(${1:\\$hook_name:string},${2:\\$callback:callable|string|array|false} )",
                "description": "Checks if any action has been registered for a hook."
        },
        "ƒ:has_block": {
                "prefix": [
                        "has_block",
                        "hb"
                ],
                "body": "has_block(${1:\\$block_name:string},${2:\\$post:integer|string|WP_Post|null} )",
                "description": "Determines whether a $post or a string contains a specific block type."
        },
        "ƒ:has_blocks": {
                "prefix": [
                        "has_blocks",
                        "hb"
                ],
                "body": "has_blocks(${1:\\$post:integer|string|WP_Post|null} )",
                "description": "Determines whether a post or content string has blocks."
        },
        "ƒ:has_category": {
                "prefix": [
                        "has_category",
                        "hc"
                ],
                "body": "has_category(${1:\\$category:string|integer|array},${2:\\$post:integer|object|null} )",
                "description": "Checks if the current post has any of given category."
        },
        "ƒ:has_custom_header": {
                "prefix": [
                        "has_custom_header",
                        "hch"
                ],
                "body": "has_custom_header()",
                "description": "Checks whether a custom header is set or not."
        },
        "ƒ:has_custom_logo": {
                "prefix": [
                        "has_custom_logo",
                        "hcl"
                ],
                "body": "has_custom_logo(${1:\\$blog_id:integer} )",
                "description": "Determines whether the site has a custom logo."
        },
        "ƒ:has_excerpt": {
                "prefix": [
                        "has_excerpt",
                        "he"
                ],
                "body": "has_excerpt(${1:\\$post:integer|WP_Post} )",
                "description": "Determines whether the post has a custom excerpt."
        },
        "ƒ:has_filter": {
                "prefix": [
                        "has_filter",
                        "hf"
                ],
                "body": "has_filter(${1:\\$hook_name:string},${2:\\$callback:callable|string|array|false} )",
                "description": "Checks if any filter has been registered for a hook."
        },
        "ƒ:has_header_image": {
                "prefix": [
                        "has_header_image",
                        "hhi"
                ],
                "body": "has_header_image()",
                "description": "Checks whether a header image is set or not."
        },
        "ƒ:has_header_video": {
                "prefix": [
                        "has_header_video",
                        "hhv"
                ],
                "body": "has_header_video()",
                "description": "Checks whether a header video is set or not."
        },
        "ƒ:has_image_size": {
                "prefix": [
                        "has_image_size",
                        "his"
                ],
                "body": "has_image_size(${1:\\$name:string} )",
                "description": "Check if an image size exists."
        },
        "ƒ:has_meta": {
                "prefix": [
                        "has_meta",
                        "hm"
                ],
                "body": "has_meta(${1:\\$postid:integer} )",
                "description": "Returns meta data for the given post ID."
        },
        "ƒ:has_nav_menu": {
                "prefix": [
                        "has_nav_menu",
                        "hnm"
                ],
                "body": "has_nav_menu(${1:\\$location:string} )",
                "description": "Determines whether a registered nav menu location has a menu assigned to it."
        },
        "ƒ:has_post_format": {
                "prefix": [
                        "has_post_format",
                        "hpf"
                ],
                "body": "has_post_format(${1:\\$format:string|array},${2:\\$post:WP_Post|integer|null} )",
                "description": "Check if a post has any of the given formats, or any format."
        },
        "ƒ:has_post_parent": {
                "prefix": [
                        "has_post_parent",
                        "hpp"
                ],
                "body": "has_post_parent(${1:\\$post:integer|WP_Post|null} )",
                "description": "Returns whether the given post has a parent post."
        },
        "ƒ:has_post_thumbnail": {
                "prefix": [
                        "has_post_thumbnail",
                        "hpt"
                ],
                "body": "has_post_thumbnail(${1:\\$post:integer|WP_Post|null} )",
                "description": "Determines whether a post has an image attached."
        },
        "ƒ:has_shortcode": {
                "prefix": [
                        "has_shortcode",
                        "hs"
                ],
                "body": "has_shortcode(${1:\\$content:string},${2:\\$tag:string} )",
                "description": "Whether the passed content contains the specified shortcode"
        },
        "ƒ:has_site_icon": {
                "prefix": [
                        "has_site_icon",
                        "hsi"
                ],
                "body": "has_site_icon(${1:\\$blog_id:integer} )",
                "description": "Whether the site has a Site Icon."
        },
        "ƒ:has_tag": {
                "prefix": [
                        "has_tag",
                        "ht"
                ],
                "body": "has_tag(${1:\\$tag:string|integer|array},${2:\\$post:integer|object|null} )",
                "description": "Checks if the current post has any of given tags."
        },
        "ƒ:has_term": {
                "prefix": [
                        "has_term",
                        "ht"
                ],
                "body": "has_term(${1:\\$term:string|integer|array},${2:\\$taxonomy:string},${3:\\$post:integer|WP_Post|null} )",
                "description": "Checks if the current post has any of given terms."
        },
        "ƒ:has_term_meta": {
                "prefix": [
                        "has_term_meta",
                        "htm"
                ],
                "body": "has_term_meta(${1:\\$term_id:integer} )",
                "description": "Gets all meta data, including meta IDs, for the given term ID."
        },
        "ƒ:hash_equals": {
                "prefix": [
                        "hash_equals",
                        "he"
                ],
                "body": "hash_equals(${1:\\$a:string},${2:\\$b:string} )",
                "description": "Timing attack safe string comparison"
        },
        "ƒ:have_comments": {
                "prefix": [
                        "have_comments",
                        "hc"
                ],
                "body": "have_comments()",
                "description": "Determines whether current WordPress query has comments to loop over."
        },
        "ƒ:have_posts": {
                "prefix": [
                        "have_posts",
                        "hp"
                ],
                "body": "have_posts()",
                "description": "Determines whether current WordPress query has posts to loop over."
        },
        "ƒ:header_image": {
                "prefix": [
                        "header_image",
                        "hi"
                ],
                "body": "header_image()",
                "description": "Displays header image URL."
        },
        "ƒ:header_textcolor": {
                "prefix": [
                        "header_textcolor",
                        "ht"
                ],
                "body": "header_textcolor()",
                "description": "Displays the custom header text color in 3- or 6-digit hexadecimal form (minus the hash symbol)."
        },
        "ƒ:heartbeat_autosave": {
                "prefix": [
                        "heartbeat_autosave",
                        "ha"
                ],
                "body": "heartbeat_autosave(${1:\\$response:array},${2:\\$data:array} )",
                "description": "Performs autosave with heartbeat."
        },
        "ƒ:home_url": {
                "prefix": [
                        "home_url",
                        "hu"
                ],
                "body": "home_url(${1:\\$path:string},${2:\\$scheme:string|null} )",
                "description": "Retrieves the URL for the current site where the front end is accessible."
        },
        "ƒ:html_type_rss": {
                "prefix": [
                        "html_type_rss",
                        "htr"
                ],
                "body": "html_type_rss()",
                "description": "Display the HTML type based on the blog setting."
        },
        "ƒ:htmlentities2": {
                "prefix": [
                        "htmlentities2"
                ],
                "body": "htmlentities2(${1:\\$myHTML:string} )",
                "description": "Converts entities, while preserving already-encoded entities."
        },
        "ƒ:human_readable_duration": {
                "prefix": [
                        "human_readable_duration",
                        "hrd"
                ],
                "body": "human_readable_duration(${1:\\$duration:string} )",
                "description": "Convert a duration to human readable format."
        },
        "ƒ:human_time_diff": {
                "prefix": [
                        "human_time_diff",
                        "htd"
                ],
                "body": "human_time_diff(${1:\\$from:integer},${2:\\$to:integer} )",
                "description": "Determines the difference between two timestamps."
        },
        "ƒ:iframe_footer": {
                "prefix": [
                        "iframe_footer",
                        "if"
                ],
                "body": "iframe_footer()",
                "description": "Generic Iframe footer for use with Thickbox."
        },
        "ƒ:iframe_header": {
                "prefix": [
                        "iframe_header",
                        "ih"
                ],
                "body": "iframe_header(${1:\\$title:string},${2:\\$deprecated:boolean} )",
                "description": "Generic Iframe header for use with Thickbox."
        },
        "ƒ:iis7_add_rewrite_rule": {
                "prefix": [
                        "iis7_add_rewrite_rule",
                        "iarr"
                ],
                "body": "iis7_add_rewrite_rule(${1:\\$filename:string},${2:\\$rewrite_rule:string} )",
                "description": "Adds WordPress rewrite rule to the IIS 7+ configuration file."
        },
        "ƒ:iis7_delete_rewrite_rule": {
                "prefix": [
                        "iis7_delete_rewrite_rule",
                        "idrr"
                ],
                "body": "iis7_delete_rewrite_rule(${1:\\$filename:string} )",
                "description": "Deletes WordPress rewrite rule from web.config file if it exists there."
        },
        "ƒ:iis7_rewrite_rule_exists": {
                "prefix": [
                        "iis7_rewrite_rule_exists",
                        "irre"
                ],
                "body": "iis7_rewrite_rule_exists(${1:\\$filename:string} )",
                "description": "Checks if rewrite rule for WordPress already exists in the IIS 7+ configuration file."
        },
        "ƒ:iis7_save_url_rewrite_rules": {
                "prefix": [
                        "iis7_save_url_rewrite_rules",
                        "isurr"
                ],
                "body": "iis7_save_url_rewrite_rules()",
                "description": "Updates the IIS web.config file with the current rules if it is writable."
        },
        "ƒ:iis7_supports_permalinks": {
                "prefix": [
                        "iis7_supports_permalinks",
                        "isp"
                ],
                "body": "iis7_supports_permalinks()",
                "description": "Check if IIS 7+ supports pretty permalinks."
        },
        "ƒ:image_add_caption": {
                "prefix": [
                        "image_add_caption",
                        "iac"
                ],
                "body": "image_add_caption(${1:\\$html:string},${2:\\$id:integer},${3:\\$caption:string},${4:\\$title:string},${5:\\$align:string},${6:\\$url:string},${7:\\$size:string},${8:\\$alt:string} )",
                "description": "Adds image shortcode with caption to editor."
        },
        "ƒ:image_align_input_fields": {
                "prefix": [
                        "image_align_input_fields",
                        "iaif"
                ],
                "body": "image_align_input_fields(${1:\\$post:WP_Post},${2:\\$checked:string} )",
                "description": "Retrieves HTML for the image alignment radio buttons with the specified one checked."
        },
        "ƒ:image_attachment_fields_to_edit": {
                "prefix": [
                        "image_attachment_fields_to_edit",
                        "iafte"
                ],
                "body": "image_attachment_fields_to_edit(${1:\\$form_fields:array},${2:\\$post:object} )",
                "description": "Retrieves the image attachment fields to edit form fields."
        },
        "ƒ:image_attachment_fields_to_save": {
                "prefix": [
                        "image_attachment_fields_to_save",
                        "iafts"
                ],
                "body": "image_attachment_fields_to_save(${1:\\$post:array},${2:\\$attachment:array} )",
                "description": "Was used to filter input from media_upload_form_handler() and to assign a default post_title from the file name if none supplied."
        },
        "ƒ:image_constrain_size_for_editor": {
                "prefix": [
                        "image_constrain_size_for_editor",
                        "icsfe"
                ],
                "body": "image_constrain_size_for_editor(${1:\\$width:integer},${2:\\$height:integer},${3:\\$size:string|array},${4:\\$context:string|null} )",
                "description": "Scale down the default size of an image."
        },
        "ƒ:image_downsize": {
                "prefix": [
                        "image_downsize",
                        "id"
                ],
                "body": "image_downsize(${1:\\$id:integer},${2:\\$size:string|array} )",
                "description": "Scale an image to fit a particular size (such as &#039;thumb&#039; or &#039;medium&#039;)."
        },
        "ƒ:image_edit_apply_changes": {
                "prefix": [
                        "image_edit_apply_changes",
                        "ieac"
                ],
                "body": "image_edit_apply_changes(${1:\\$image:WP_Image_Editor},${2:\\$changes:array} )",
                "description": "Performs group of changes on Editor specified."
        },
        "ƒ:image_get_intermediate_size": {
                "prefix": [
                        "image_get_intermediate_size",
                        "igis"
                ],
                "body": "image_get_intermediate_size(${1:\\$post_id:integer},${2:\\$size:string|array} )",
                "description": "Retrieves the image&#039;s intermediate size (resized) path, width, and height."
        },
        "ƒ:image_hwstring": {
                "prefix": [
                        "image_hwstring",
                        "ih"
                ],
                "body": "image_hwstring(${1:\\$width:integer|string},${2:\\$height:integer|string} )",
                "description": "Retrieve width and height attributes using given width and height values."
        },
        "ƒ:image_link_input_fields": {
                "prefix": [
                        "image_link_input_fields",
                        "ilif"
                ],
                "body": "image_link_input_fields(${1:\\$post:WP_Post},${2:\\$url_type:string} )",
                "description": "Retrieves HTML for the Link URL buttons with the default link type as specified."
        },
        "ƒ:image_make_intermediate_size": {
                "prefix": [
                        "image_make_intermediate_size",
                        "imis"
                ],
                "body": "image_make_intermediate_size(${1:\\$file:string},${2:\\$width:integer},${3:\\$height:integer},${4:\\$crop:boolean} )",
                "description": "Resizes an image to make a thumbnail or intermediate size."
        },
        "ƒ:image_media_send_to_editor": {
                "prefix": [
                        "image_media_send_to_editor",
                        "imste"
                ],
                "body": "image_media_send_to_editor(${1:\\$html:string},${2:\\$attachment_id:integer},${3:\\$attachment:array} )",
                "description": "Retrieves the media element HTML to send to the editor."
        },
        "ƒ:image_resize": {
                "prefix": [
                        "image_resize",
                        "ir"
                ],
                "body": "image_resize(${1:\\$file:string},${2:\\$max_w:integer},${3:\\$max_h:integer},${4:\\$crop:boolean},${5:\\$suffix:string|null},${6:\\$dest_path:string|null},${7:\\$jpeg_quality:integer} )",
                "description": "Scale down an image to fit a particular size and save a new copy of the image."
        },
        "ƒ:image_resize_dimensions": {
                "prefix": [
                        "image_resize_dimensions",
                        "ird"
                ],
                "body": "image_resize_dimensions(${1:\\$orig_w:integer},${2:\\$orig_h:integer},${3:\\$dest_w:integer},${4:\\$dest_h:integer},${5:\\$crop:boolean|array} )",
                "description": "Retrieves calculated resize dimensions for use in WP_Image_Editor."
        },
        "ƒ:image_size_input_fields": {
                "prefix": [
                        "image_size_input_fields",
                        "isif"
                ],
                "body": "image_size_input_fields(${1:\\$post:WP_Post},${2:\\$check:boolean|string} )",
                "description": "Retrieves HTML for the size radio buttons with the specified one checked."
        },
        "ƒ:img_caption_shortcode": {
                "prefix": [
                        "img_caption_shortcode",
                        "ics"
                ],
                "body": "img_caption_shortcode(${1:\\$attr:array},${2:\\$content:string} )",
                "description": "Builds the Caption shortcode output."
        },
        "ƒ:in_category": {
                "prefix": [
                        "in_category",
                        "ic"
                ],
                "body": "in_category(${1:\\$category:integer|string|array|array},${2:\\$post:integer|object|null} )",
                "description": "Checks if the current post is within any of the given categories."
        },
        "ƒ:in_the_loop": {
                "prefix": [
                        "in_the_loop",
                        "itl"
                ],
                "body": "in_the_loop()",
                "description": "Determines whether the caller is in the Loop."
        },
        "ƒ:includes_url": {
                "prefix": [
                        "includes_url",
                        "iu"
                ],
                "body": "includes_url(${1:\\$path:string},${2:\\$scheme:string|null} )",
                "description": "Retrieves the URL to the includes directory."
        },
        "ƒ:index_rel_link": {
                "prefix": [
                        "index_rel_link",
                        "irl"
                ],
                "body": "index_rel_link()",
                "description": "Display relational link for the site index."
        },
        "ƒ:init": {
                "prefix": [
                        "init"
                ],
                "body": "init()",
                "description": "Set up constants with default values, unless user overrides."
        },
        "ƒ:insert_blog": {
                "prefix": [
                        "insert_blog",
                        "ib"
                ],
                "body": "insert_blog(${1:\\$domain:string},${2:\\$path:string},${3:\\$site_id:integer} )",
                "description": "Store basic site info in the blogs table."
        },
        "ƒ:insert_with_markers": {
                "prefix": [
                        "insert_with_markers",
                        "iwm"
                ],
                "body": "insert_with_markers(${1:\\$filename:string},${2:\\$marker:string},${3:\\$insertion:array|string} )",
                "description": "Inserts an array of strings into a file (.htaccess), placing it between BEGIN and END markers."
        },
        "ƒ:install_blog": {
                "prefix": [
                        "install_blog",
                        "ib"
                ],
                "body": "install_blog(${1:\\$blog_id:integer},${2:\\$blog_title:string} )",
                "description": "Install an empty blog."
        },
        "ƒ:install_blog_defaults": {
                "prefix": [
                        "install_blog_defaults",
                        "ibd"
                ],
                "body": "install_blog_defaults(${1:\\$blog_id:integer},${2:\\$user_id:integer} )",
                "description": "Set blog defaults."
        },
        "ƒ:install_dashboard": {
                "prefix": [
                        "install_dashboard",
                        "id"
                ],
                "body": "install_dashboard()",
                "description": "Displays the Featured tab of Add Plugins screen."
        },
        "ƒ:install_global_terms": {
                "prefix": [
                        "install_global_terms",
                        "igt"
                ],
                "body": "install_global_terms()",
                "description": "Install global terms."
        },
        "ƒ:install_network": {
                "prefix": [
                        "install_network",
                        "in"
                ],
                "body": "install_network()",
                "description": "Install Network."
        },
        "ƒ:install_plugin_information": {
                "prefix": [
                        "install_plugin_information",
                        "ipi"
                ],
                "body": "install_plugin_information()",
                "description": "Displays plugin information in dialog box form."
        },
        "ƒ:install_plugin_install_status": {
                "prefix": [
                        "install_plugin_install_status",
                        "ipis"
                ],
                "body": "install_plugin_install_status(${1:\\$api:array|object},${2:\\$loop:boolean} )",
                "description": "Determines the status we can perform on a plugin."
        },
        "ƒ:install_plugins_favorites_form": {
                "prefix": [
                        "install_plugins_favorites_form",
                        "ipff"
                ],
                "body": "install_plugins_favorites_form()",
                "description": "Shows a username form for the favorites page."
        },
        "ƒ:install_plugins_upload": {
                "prefix": [
                        "install_plugins_upload",
                        "ipu"
                ],
                "body": "install_plugins_upload()",
                "description": "Displays a form to upload plugins from zip files."
        },
        "ƒ:install_popular_tags": {
                "prefix": [
                        "install_popular_tags",
                        "ipt"
                ],
                "body": "install_popular_tags(${1:\\$args:array} )",
                "description": "Retrieves popular WordPress plugin tags."
        },
        "ƒ:install_search_form": {
                "prefix": [
                        "install_search_form",
                        "isf"
                ],
                "body": "install_search_form(${1:\\$deprecated:boolean} )",
                "description": "Displays a search form for searching plugins."
        },
        "ƒ:install_theme_information": {
                "prefix": [
                        "install_theme_information",
                        "iti"
                ],
                "body": "install_theme_information()",
                "description": "Displays theme information in dialog box form."
        },
        "ƒ:install_theme_search_form": {
                "prefix": [
                        "install_theme_search_form",
                        "itsf"
                ],
                "body": "install_theme_search_form(${1:\\$type_selector:boolean} )",
                "description": "Displays search form for searching themes."
        },
        "ƒ:install_themes_dashboard": {
                "prefix": [
                        "install_themes_dashboard",
                        "itd"
                ],
                "body": "install_themes_dashboard()",
                "description": "Displays tags filter for themes."
        },
        "ƒ:install_themes_feature_list": {
                "prefix": [
                        "install_themes_feature_list",
                        "itfl"
                ],
                "body": "install_themes_feature_list()",
                "description": "Retrieves the list of WordPress theme features (aka theme tags)."
        },
        "ƒ:install_themes_upload": {
                "prefix": [
                        "install_themes_upload",
                        "itu"
                ],
                "body": "install_themes_upload()",
                "description": ""
        },
        "ƒ:is_404": {
                "prefix": [
                        "is_404",
                        "i4"
                ],
                "body": "is_404()",
                "description": "Determines whether the query has resulted in a 404 (returns no results)."
        },
        "ƒ:is_active_sidebar": {
                "prefix": [
                        "is_active_sidebar",
                        "ias"
                ],
                "body": "is_active_sidebar(${1:\\$index:string|integer} )",
                "description": "Determines whether a sidebar contains widgets."
        },
        "ƒ:is_active_widget": {
                "prefix": [
                        "is_active_widget",
                        "iaw"
                ],
                "body": "is_active_widget(${1:\\$callback:callable|false},${2:\\$widget_id:string|false},${3:\\$id_base:string|false},${4:\\$skip_inactive:boolean} )",
                "description": "Determines whether a given widget is displayed on the front end."
        },
        "ƒ:is_admin": {
                "prefix": [
                        "is_admin",
                        "ia"
                ],
                "body": "is_admin()",
                "description": "Determines whether the current request is for an administrative interface page."
        },
        "ƒ:is_admin_bar_showing": {
                "prefix": [
                        "is_admin_bar_showing",
                        "iabs"
                ],
                "body": "is_admin_bar_showing()",
                "description": "Determines whether the admin bar should be showing."
        },
        "ƒ:is_allowed_http_origin": {
                "prefix": [
                        "is_allowed_http_origin",
                        "iaho"
                ],
                "body": "is_allowed_http_origin(${1:\\$origin:null|string} )",
                "description": "Determines if the HTTP origin is an authorized one."
        },
        "ƒ:is_archive": {
                "prefix": [
                        "is_archive",
                        "ia"
                ],
                "body": "is_archive()",
                "description": "Determines whether the query is for an existing archive page."
        },
        "ƒ:is_archived": {
                "prefix": [
                        "is_archived",
                        "ia"
                ],
                "body": "is_archived(${1:\\$id:integer} )",
                "description": "Check if a particular blog is archived."
        },
        "ƒ:is_attachment": {
                "prefix": [
                        "is_attachment",
                        "ia"
                ],
                "body": "is_attachment(${1:\\$attachment:integer|string|array|array} )",
                "description": "Determines whether the query is for an existing attachment page."
        },
        "ƒ:is_author": {
                "prefix": [
                        "is_author",
                        "ia"
                ],
                "body": "is_author(${1:\\$author:integer|string|array|array} )",
                "description": "Determines whether the query is for an existing author archive page."
        },
        "ƒ:is_avatar_comment_type": {
                "prefix": [
                        "is_avatar_comment_type",
                        "iact"
                ],
                "body": "is_avatar_comment_type(${1:\\$comment_type:string} )",
                "description": "Check if this comment type allows avatars to be retrieved."
        },
        "ƒ:is_blog_admin": {
                "prefix": [
                        "is_blog_admin",
                        "iba"
                ],
                "body": "is_blog_admin()",
                "description": "Whether the current request is for a site&#039;s administrative interface."
        },
        "ƒ:is_blog_installed": {
                "prefix": [
                        "is_blog_installed",
                        "ibi"
                ],
                "body": "is_blog_installed()",
                "description": "Determines whether WordPress is already installed."
        },
        "ƒ:is_blog_user": {
                "prefix": [
                        "is_blog_user",
                        "ibu"
                ],
                "body": "is_blog_user(${1:\\$blog_id:integer} )",
                "description": "Checks if the current user belong to a given site."
        },
        "ƒ:is_category": {
                "prefix": [
                        "is_category",
                        "ic"
                ],
                "body": "is_category(${1:\\$category:integer|string|array|array} )",
                "description": "Determines whether the query is for an existing category archive page."
        },
        "ƒ:is_child_theme": {
                "prefix": [
                        "is_child_theme",
                        "ict"
                ],
                "body": "is_child_theme()",
                "description": "Whether a child theme is in use."
        },
        "ƒ:is_client_error": {
                "prefix": [
                        "is_client_error",
                        "ice"
                ],
                "body": "is_client_error(${1:\\$sc:} )",
                "description": ""
        },
        "ƒ:is_comment_feed": {
                "prefix": [
                        "is_comment_feed",
                        "icf"
                ],
                "body": "is_comment_feed()",
                "description": "Is the query for a comments feed?"
        },
        "ƒ:is_comments_popup": {
                "prefix": [
                        "is_comments_popup",
                        "icp"
                ],
                "body": "is_comments_popup()",
                "description": "Determines whether the current URL is within the comments popup window."
        },
        "ƒ:is_countable": {
                "prefix": [
                        "is_countable",
                        "ic"
                ],
                "body": "is_countable(${1:\\$var:mixed} )",
                "description": "Polyfill for is_countable() function added in PHP 7.3."
        },
        "ƒ:is_customize_preview": {
                "prefix": [
                        "is_customize_preview",
                        "icp"
                ],
                "body": "is_customize_preview()",
                "description": "Whether the site is being previewed in the Customizer."
        },
        "ƒ:is_date": {
                "prefix": [
                        "is_date",
                        "id"
                ],
                "body": "is_date()",
                "description": "Determines whether the query is for an existing date archive."
        },
        "ƒ:is_day": {
                "prefix": [
                        "is_day",
                        "id"
                ],
                "body": "is_day()",
                "description": "Determines whether the query is for an existing day archive."
        },
        "ƒ:is_dynamic_sidebar": {
                "prefix": [
                        "is_dynamic_sidebar",
                        "ids"
                ],
                "body": "is_dynamic_sidebar()",
                "description": "Determines whether the dynamic sidebar is enabled and used by the theme."
        },
        "ƒ:is_email": {
                "prefix": [
                        "is_email",
                        "ie"
                ],
                "body": "is_email(${1:\\$email:string},${2:\\$deprecated:boolean} )",
                "description": "Verifies that an email is valid."
        },
        "ƒ:is_email_address_unsafe": {
                "prefix": [
                        "is_email_address_unsafe",
                        "ieau"
                ],
                "body": "is_email_address_unsafe(${1:\\$user_email:string} )",
                "description": "Checks an email address against a list of banned domains."
        },
        "ƒ:is_embed": {
                "prefix": [
                        "is_embed",
                        "ie"
                ],
                "body": "is_embed()",
                "description": "Is the query for an embedded post?"
        },
        "ƒ:is_error": {
                "prefix": [
                        "is_error",
                        "ie"
                ],
                "body": "is_error(${1:\\$sc:} )",
                "description": ""
        },
        "ƒ:is_favicon": {
                "prefix": [
                        "is_favicon",
                        "if"
                ],
                "body": "is_favicon()",
                "description": "Is the query for the favicon.ico file?"
        },
        "ƒ:is_feed": {
                "prefix": [
                        "is_feed",
                        "if"
                ],
                "body": "is_feed(${1:\\$feeds:string|array} )",
                "description": "Determines whether the query is for a feed."
        },
        "ƒ:is_front_page": {
                "prefix": [
                        "is_front_page",
                        "ifp"
                ],
                "body": "is_front_page()",
                "description": "Determines whether the query is for the front page of the site."
        },
        "ƒ:is_gd_image": {
                "prefix": [
                        "is_gd_image",
                        "igi"
                ],
                "body": "is_gd_image(${1:\\$image:resource|GdImage|false} )",
                "description": "Determines whether the value is an acceptable type for GD image functions."
        },
        "ƒ:is_header_video_active": {
                "prefix": [
                        "is_header_video_active",
                        "ihva"
                ],
                "body": "is_header_video_active()",
                "description": "Checks whether the custom header video is eligible to show on the current page."
        },
        "ƒ:is_home": {
                "prefix": [
                        "is_home",
                        "ih"
                ],
                "body": "is_home()",
                "description": "Determines whether the query is for the blog homepage."
        },
        "ƒ:is_info": {
                "prefix": [
                        "is_info",
                        "ii"
                ],
                "body": "is_info(${1:\\$sc:} )",
                "description": ""
        },
        "ƒ:is_iterable": {
                "prefix": [
                        "is_iterable",
                        "ii"
                ],
                "body": "is_iterable(${1:\\$var:mixed} )",
                "description": "Polyfill for is_iterable() function added in PHP 7.1."
        },
        "ƒ:is_lighttpd_before_150": {
                "prefix": [
                        "is_lighttpd_before_150",
                        "ilb1"
                ],
                "body": "is_lighttpd_before_150()",
                "description": "Is the server running earlier than 1.5.0 version of lighttpd?"
        },
        "ƒ:is_local_attachment": {
                "prefix": [
                        "is_local_attachment",
                        "ila"
                ],
                "body": "is_local_attachment(${1:\\$url:string} )",
                "description": "Determines whether an attachment URI is local and really an attachment."
        },
        "ƒ:is_locale_switched": {
                "prefix": [
                        "is_locale_switched",
                        "ils"
                ],
                "body": "is_locale_switched()",
                "description": "Whether switch_to_locale() is in effect."
        },
        "ƒ:is_main_blog": {
                "prefix": [
                        "is_main_blog",
                        "imb"
                ],
                "body": "is_main_blog()",
                "description": "Deprecated functionality to determin if the current site is the main site."
        },
        "ƒ:is_main_network": {
                "prefix": [
                        "is_main_network",
                        "imn"
                ],
                "body": "is_main_network(${1:\\$network_id:integer|null} )",
                "description": "Determine whether a network is the main network of the Multisite installation."
        },
        "ƒ:is_main_query": {
                "prefix": [
                        "is_main_query",
                        "imq"
                ],
                "body": "is_main_query()",
                "description": "Determines whether the query is the main query."
        },
        "ƒ:is_main_site": {
                "prefix": [
                        "is_main_site",
                        "ims"
                ],
                "body": "is_main_site(${1:\\$site_id:integer|null},${2:\\$network_id:integer|null} )",
                "description": "Determine whether a site is the main site of the current network."
        },
        "ƒ:is_month": {
                "prefix": [
                        "is_month",
                        "im"
                ],
                "body": "is_month()",
                "description": "Determines whether the query is for an existing month archive."
        },
        "ƒ:is_multi_author": {
                "prefix": [
                        "is_multi_author",
                        "ima"
                ],
                "body": "is_multi_author()",
                "description": "Determines whether this site has more than one author."
        },
        "ƒ:is_multisite": {
                "prefix": [
                        "is_multisite",
                        "im"
                ],
                "body": "is_multisite()",
                "description": "If Multisite is enabled."
        },
        "ƒ:is_nav_menu": {
                "prefix": [
                        "is_nav_menu",
                        "inm"
                ],
                "body": "is_nav_menu(${1:\\$menu:integer|string|WP_Term} )",
                "description": "Determines whether the given ID is a navigation menu."
        },
        "ƒ:is_nav_menu_item": {
                "prefix": [
                        "is_nav_menu_item",
                        "inmi"
                ],
                "body": "is_nav_menu_item(${1:\\$menu_item_id:integer} )",
                "description": "Determines whether the given ID is a nav menu item."
        },
        "ƒ:is_network_admin": {
                "prefix": [
                        "is_network_admin",
                        "ina"
                ],
                "body": "is_network_admin()",
                "description": "Whether the current request is for the network administrative interface."
        },
        "ƒ:is_network_only_plugin": {
                "prefix": [
                        "is_network_only_plugin",
                        "inop"
                ],
                "body": "is_network_only_plugin(${1:\\$plugin:string} )",
                "description": "Checks for &quot;Network: true&quot; in the plugin header to see if this should be activated only as a network wide plugin. The plugin would also work when Multisite is not enabled."
        },
        "ƒ:is_new_day": {
                "prefix": [
                        "is_new_day",
                        "ind"
                ],
                "body": "is_new_day()",
                "description": "Determines whether the publish date of the current post in the loop is different from the publish date of the previous post in the loop."
        },
        "ƒ:is_object_in_taxonomy": {
                "prefix": [
                        "is_object_in_taxonomy",
                        "ioit"
                ],
                "body": "is_object_in_taxonomy(${1:\\$object_type:string},${2:\\$taxonomy:string} )",
                "description": "Determines if the given object type is associated with the given taxonomy."
        },
        "ƒ:is_object_in_term": {
                "prefix": [
                        "is_object_in_term",
                        "ioit"
                ],
                "body": "is_object_in_term(${1:\\$object_id:integer},${2:\\$taxonomy:string},${3:\\$terms:integer|string|array|array|null} )",
                "description": "Determines if the given object is associated with any of the given terms."
        },
        "ƒ:is_page": {
                "prefix": [
                        "is_page",
                        "ip"
                ],
                "body": "is_page(${1:\\$page:integer|string|array|array} )",
                "description": "Determines whether the query is for an existing single page."
        },
        "ƒ:is_page_template": {
                "prefix": [
                        "is_page_template",
                        "ipt"
                ],
                "body": "is_page_template(${1:\\$template:string|array} )",
                "description": "Determines whether the current post uses a page template."
        },
        "ƒ:is_paged": {
                "prefix": [
                        "is_paged",
                        "ip"
                ],
                "body": "is_paged()",
                "description": "Determines whether the query is for a paged result and not for the first page."
        },
        "ƒ:is_php_version_compatible": {
                "prefix": [
                        "is_php_version_compatible",
                        "ipvc"
                ],
                "body": "is_php_version_compatible(${1:\\$required:string} )",
                "description": "Checks compatibility with the current PHP version."
        },
        "ƒ:is_plugin_active": {
                "prefix": [
                        "is_plugin_active",
                        "ipa"
                ],
                "body": "is_plugin_active(${1:\\$plugin:string} )",
                "description": "Determines whether a plugin is active."
        },
        "ƒ:is_plugin_active_for_network": {
                "prefix": [
                        "is_plugin_active_for_network",
                        "ipafn"
                ],
                "body": "is_plugin_active_for_network(${1:\\$plugin:string} )",
                "description": "Determines whether the plugin is active for the entire network."
        },
        "ƒ:is_plugin_inactive": {
                "prefix": [
                        "is_plugin_inactive",
                        "ipi"
                ],
                "body": "is_plugin_inactive(${1:\\$plugin:string} )",
                "description": "Determines whether the plugin is inactive."
        },
        "ƒ:is_plugin_page": {
                "prefix": [
                        "is_plugin_page",
                        "ipp"
                ],
                "body": "is_plugin_page()",
                "description": "Determines whether the current admin page is generated by a plugin."
        },
        "ƒ:is_plugin_paused": {
                "prefix": [
                        "is_plugin_paused",
                        "ipp"
                ],
                "body": "is_plugin_paused(${1:\\$plugin:string} )",
                "description": "Determines whether a plugin is technically active but was paused while loading."
        },
        "ƒ:is_post_publicly_viewable": {
                "prefix": [
                        "is_post_publicly_viewable",
                        "ippv"
                ],
                "body": "is_post_publicly_viewable(${1:\\$post:integer|WP_Post|null} )",
                "description": "Determine whether a post is publicly viewable."
        },
        "ƒ:is_post_status_viewable": {
                "prefix": [
                        "is_post_status_viewable",
                        "ipsv"
                ],
                "body": "is_post_status_viewable(${1:\\$post_status:string|stdClass} )",
                "description": "Determine whether a post status is considered &quot;viewable&quot;."
        },
        "ƒ:is_post_type_archive": {
                "prefix": [
                        "is_post_type_archive",
                        "ipta"
                ],
                "body": "is_post_type_archive(${1:\\$post_types:string|array} )",
                "description": "Determines whether the query is for an existing post type archive page."
        },
        "ƒ:is_post_type_hierarchical": {
                "prefix": [
                        "is_post_type_hierarchical",
                        "ipth"
                ],
                "body": "is_post_type_hierarchical(${1:\\$post_type:string} )",
                "description": "Whether the post type is hierarchical."
        },
        "ƒ:is_post_type_viewable": {
                "prefix": [
                        "is_post_type_viewable",
                        "iptv"
                ],
                "body": "is_post_type_viewable(${1:\\$post_type:string|WP_Post_Type} )",
                "description": "Determines whether a post type is considered &quot;viewable&quot;."
        },
        "ƒ:is_preview": {
                "prefix": [
                        "is_preview",
                        "ip"
                ],
                "body": "is_preview()",
                "description": "Determines whether the query is for a post or page preview."
        },
        "ƒ:is_privacy_policy": {
                "prefix": [
                        "is_privacy_policy",
                        "ipp"
                ],
                "body": "is_privacy_policy()",
                "description": "Determines whether the query is for the Privacy Policy page."
        },
        "ƒ:is_protected_ajax_action": {
                "prefix": [
                        "is_protected_ajax_action",
                        "ipaa"
                ],
                "body": "is_protected_ajax_action()",
                "description": "Determines whether we are currently handling an Ajax action that should be protected against WSODs."
        },
        "ƒ:is_protected_endpoint": {
                "prefix": [
                        "is_protected_endpoint",
                        "ipe"
                ],
                "body": "is_protected_endpoint()",
                "description": "Determines whether we are currently on an endpoint that should be protected against WSODs."
        },
        "ƒ:is_protected_meta": {
                "prefix": [
                        "is_protected_meta",
                        "ipm"
                ],
                "body": "is_protected_meta(${1:\\$meta_key:string},${2:\\$meta_type:string} )",
                "description": "Determines whether a meta key is considered protected."
        },
        "ƒ:is_random_header_image": {
                "prefix": [
                        "is_random_header_image",
                        "irhi"
                ],
                "body": "is_random_header_image(${1:\\$type:string} )",
                "description": "Checks if random header image is in use."
        },
        "ƒ:is_redirect": {
                "prefix": [
                        "is_redirect",
                        "ir"
                ],
                "body": "is_redirect(${1:\\$sc:} )",
                "description": ""
        },
        "ƒ:is_registered_sidebar": {
                "prefix": [
                        "is_registered_sidebar",
                        "irs"
                ],
                "body": "is_registered_sidebar(${1:\\$sidebar_id:string|integer} )",
                "description": "Checks if a sidebar is registered."
        },
        "ƒ:is_robots": {
                "prefix": [
                        "is_robots",
                        "ir"
                ],
                "body": "is_robots()",
                "description": "Is the query for the robots.txt file?"
        },
        "ƒ:is_rtl": {
                "prefix": [
                        "is_rtl",
                        "ir"
                ],
                "body": "is_rtl()",
                "description": "Determines whether the current locale is right-to-left (RTL)."
        },
        "ƒ:is_search": {
                "prefix": [
                        "is_search",
                        "is"
                ],
                "body": "is_search()",
                "description": "Determines whether the query is for a search."
        },
        "ƒ:is_serialized": {
                "prefix": [
                        "is_serialized",
                        "is"
                ],
                "body": "is_serialized(${1:\\$data:string},${2:\\$strict:boolean} )",
                "description": "Check value to find if it was serialized."
        },
        "ƒ:is_serialized_string": {
                "prefix": [
                        "is_serialized_string",
                        "iss"
                ],
                "body": "is_serialized_string(${1:\\$data:string} )",
                "description": "Check whether serialized data is of string type."
        },
        "ƒ:is_server_error": {
                "prefix": [
                        "is_server_error",
                        "ise"
                ],
                "body": "is_server_error(${1:\\$sc:} )",
                "description": ""
        },
        "ƒ:is_single": {
                "prefix": [
                        "is_single",
                        "is"
                ],
                "body": "is_single(${1:\\$post:integer|string|array|array} )",
                "description": "Determines whether the query is for an existing single post."
        },
        "ƒ:is_singular": {
                "prefix": [
                        "is_singular",
                        "is"
                ],
                "body": "is_singular(${1:\\$post_types:string|array} )",
                "description": "Determines whether the query is for an existing single post of any post type (post, attachment, page, custom post types)."
        },
        "ƒ:is_site_admin": {
                "prefix": [
                        "is_site_admin",
                        "isa"
                ],
                "body": "is_site_admin(${1:\\$user_login:string} )",
                "description": "Determine if user is a site admin."
        },
        "ƒ:is_site_meta_supported": {
                "prefix": [
                        "is_site_meta_supported",
                        "isms"
                ],
                "body": "is_site_meta_supported()",
                "description": "Determines whether site meta is enabled."
        },
        "ƒ:is_ssl": {
                "prefix": [
                        "is_ssl",
                        "is"
                ],
                "body": "is_ssl()",
                "description": "Determines if SSL is used."
        },
        "ƒ:is_sticky": {
                "prefix": [
                        "is_sticky",
                        "is"
                ],
                "body": "is_sticky(${1:\\$post_id:integer} )",
                "description": "Determines whether a post is sticky."
        },
        "ƒ:is_subdomain_install": {
                "prefix": [
                        "is_subdomain_install",
                        "isi"
                ],
                "body": "is_subdomain_install()",
                "description": "Whether a subdomain configuration is enabled."
        },
        "ƒ:is_success": {
                "prefix": [
                        "is_success",
                        "is"
                ],
                "body": "is_success(${1:\\$sc:} )",
                "description": ""
        },
        "ƒ:is_super_admin": {
                "prefix": [
                        "is_super_admin",
                        "isa"
                ],
                "body": "is_super_admin(${1:\\$user_id:integer|false} )",
                "description": "Determines whether user is a site admin."
        },
        "ƒ:is_tag": {
                "prefix": [
                        "is_tag",
                        "it"
                ],
                "body": "is_tag(${1:\\$tag:integer|string|array|array} )",
                "description": "Determines whether the query is for an existing tag archive page."
        },
        "ƒ:is_tax": {
                "prefix": [
                        "is_tax",
                        "it"
                ],
                "body": "is_tax(${1:\\$taxonomy:string|array},${2:\\$term:integer|string|array|array} )",
                "description": "Determines whether the query is for an existing custom taxonomy archive page."
        },
        "ƒ:is_taxonomy": {
                "prefix": [
                        "is_taxonomy",
                        "it"
                ],
                "body": "is_taxonomy(${1:\\$taxonomy:string} )",
                "description": "Checks that the taxonomy name exists."
        },
        "ƒ:is_taxonomy_hierarchical": {
                "prefix": [
                        "is_taxonomy_hierarchical",
                        "ith"
                ],
                "body": "is_taxonomy_hierarchical(${1:\\$taxonomy:string} )",
                "description": "Determines whether the taxonomy object is hierarchical."
        },
        "ƒ:is_taxonomy_viewable": {
                "prefix": [
                        "is_taxonomy_viewable",
                        "itv"
                ],
                "body": "is_taxonomy_viewable(${1:\\$taxonomy:string|WP_Taxonomy} )",
                "description": "Determines whether a taxonomy is considered &quot;viewable&quot;."
        },
        "ƒ:is_term": {
                "prefix": [
                        "is_term",
                        "it"
                ],
                "body": "is_term(${1:\\$term:integer|string},${2:\\$taxonomy:string},${3:\\$parent:integer} )",
                "description": "Check if Term exists."
        },
        "ƒ:is_textdomain_loaded": {
                "prefix": [
                        "is_textdomain_loaded",
                        "itl"
                ],
                "body": "is_textdomain_loaded(${1:\\$domain:string} )",
                "description": "Whether there are translations for the text domain."
        },
        "ƒ:is_theme_paused": {
                "prefix": [
                        "is_theme_paused",
                        "itp"
                ],
                "body": "is_theme_paused(${1:\\$theme:string} )",
                "description": "Determines whether a theme is technically active but was paused while loading."
        },
        "ƒ:is_time": {
                "prefix": [
                        "is_time",
                        "it"
                ],
                "body": "is_time()",
                "description": "Determines whether the query is for a specific time."
        },
        "ƒ:is_trackback": {
                "prefix": [
                        "is_trackback",
                        "it"
                ],
                "body": "is_trackback()",
                "description": "Determines whether the query is for a trackback endpoint call."
        },
        "ƒ:is_uninstallable_plugin": {
                "prefix": [
                        "is_uninstallable_plugin",
                        "iup"
                ],
                "body": "is_uninstallable_plugin(${1:\\$plugin:string} )",
                "description": "Determines whether the plugin can be uninstalled."
        },
        "ƒ:is_upload_space_available": {
                "prefix": [
                        "is_upload_space_available",
                        "iusa"
                ],
                "body": "is_upload_space_available()",
                "description": "Determines if there is any upload space left in the current blog&#039;s quota."
        },
        "ƒ:is_user_admin": {
                "prefix": [
                        "is_user_admin",
                        "iua"
                ],
                "body": "is_user_admin()",
                "description": "Whether the current request is for a user admin screen."
        },
        "ƒ:is_user_logged_in": {
                "prefix": [
                        "is_user_logged_in",
                        "iuli"
                ],
                "body": "is_user_logged_in()",
                "description": "Determines whether the current visitor is a logged in user."
        },
        "ƒ:is_user_member_of_blog": {
                "prefix": [
                        "is_user_member_of_blog",
                        "iumob"
                ],
                "body": "is_user_member_of_blog(${1:\\$user_id:integer},${2:\\$blog_id:integer} )",
                "description": "Finds out whether a user is a member of a given blog."
        },
        "ƒ:is_user_option_local": {
                "prefix": [
                        "is_user_option_local",
                        "iuol"
                ],
                "body": "is_user_option_local(${1:\\$key:string},${2:\\$user_id:integer},${3:\\$blog_id:integer} )",
                "description": "Check whether a usermeta key has to do with the current blog."
        },
        "ƒ:is_user_spammy": {
                "prefix": [
                        "is_user_spammy",
                        "ius"
                ],
                "body": "is_user_spammy(${1:\\$user:string|WP_User|null} )",
                "description": "Determines whether a user is marked as a spammer, based on user login."
        },
        "ƒ:is_wp_error": {
                "prefix": [
                        "is_wp_error",
                        "iwe"
                ],
                "body": "is_wp_error(${1:\\$thing:mixed} )",
                "description": "Checks whether the given variable is a WordPress Error."
        },
        "ƒ:is_wp_version_compatible": {
                "prefix": [
                        "is_wp_version_compatible",
                        "iwvc"
                ],
                "body": "is_wp_version_compatible(${1:\\$required:string} )",
                "description": "Checks compatibility with the current WordPress version."
        },
        "ƒ:is_wpmu_sitewide_plugin": {
                "prefix": [
                        "is_wpmu_sitewide_plugin",
                        "iwsp"
                ],
                "body": "is_wpmu_sitewide_plugin(${1:\\$file:} )",
                "description": "Deprecated functionality for determining if the current plugin is network-only."
        },
        "ƒ:is_year": {
                "prefix": [
                        "is_year",
                        "iy"
                ],
                "body": "is_year()",
                "description": "Determines whether the query is for an existing year archive."
        },
        "ƒ:iso8601_timezone_to_offset": {
                "prefix": [
                        "iso8601_timezone_to_offset",
                        "itto"
                ],
                "body": "iso8601_timezone_to_offset(${1:\\$timezone:string} )",
                "description": "Given an ISO 8601 timezone, returns its UTC offset in seconds."
        },
        "ƒ:iso8601_to_datetime": {
                "prefix": [
                        "iso8601_to_datetime",
                        "itd"
                ],
                "body": "iso8601_to_datetime(${1:\\$date_string:string},${2:\\$timezone:string} )",
                "description": "Given an ISO 8601 (YmdH:i:sO) date, returns a MySQL DateTime (Y-m-d H:i:s) format used by post_date[_gmt]."
        },
        "ƒ:js_escape": {
                "prefix": [
                        "js_escape",
                        "je"
                ],
                "body": "js_escape(${1:\\$text:string} )",
                "description": "Escape single quotes, specialchar double quotes, and fix line endings."
        },
        "ƒ:kses_init": {
                "prefix": [
                        "kses_init",
                        "ki"
                ],
                "body": "kses_init()",
                "description": "Sets up most of the KSES filters for input form content."
        },
        "ƒ:kses_init_filters": {
                "prefix": [
                        "kses_init_filters",
                        "kif"
                ],
                "body": "kses_init_filters()",
                "description": "Adds all KSES input form content filters."
        },
        "ƒ:kses_remove_filters": {
                "prefix": [
                        "kses_remove_filters",
                        "krf"
                ],
                "body": "kses_remove_filters()",
                "description": "Removes all KSES input form content filters."
        },
        "ƒ:language_attributes": {
                "prefix": [
                        "language_attributes",
                        "la"
                ],
                "body": "language_attributes(${1:\\$doctype:string} )",
                "description": "Displays the language attributes for the &#039;html&#039; tag."
        },
        "ƒ:like_escape": {
                "prefix": [
                        "like_escape",
                        "le"
                ],
                "body": "like_escape(${1:\\$text:string} )",
                "description": "Formerly used to escape strings before searching the DB. It was poorly documented and never worked as described."
        },
        "ƒ:link_advanced_meta_box": {
                "prefix": [
                        "link_advanced_meta_box",
                        "lamb"
                ],
                "body": "link_advanced_meta_box(${1:\\$link:object} )",
                "description": "Displays advanced link options form fields."
        },
        "ƒ:link_categories_meta_box": {
                "prefix": [
                        "link_categories_meta_box",
                        "lcmb"
                ],
                "body": "link_categories_meta_box(${1:\\$link:object} )",
                "description": "Displays link categories form fields."
        },
        "ƒ:link_pages": {
                "prefix": [
                        "link_pages",
                        "lp"
                ],
                "body": "link_pages(${1:\\$before:string},${2:\\$after:string},${3:\\$next_or_number:string},${4:\\$nextpagelink:string},${5:\\$previouspagelink:string},${6:\\$pagelink:string},${7:\\$more_file:string} )",
                "description": "Print list of pages based on arguments."
        },
        "ƒ:link_submit_meta_box": {
                "prefix": [
                        "link_submit_meta_box",
                        "lsmb"
                ],
                "body": "link_submit_meta_box(${1:\\$link:object} )",
                "description": "Displays link create form fields."
        },
        "ƒ:link_target_meta_box": {
                "prefix": [
                        "link_target_meta_box",
                        "ltmb"
                ],
                "body": "link_target_meta_box(${1:\\$link:object} )",
                "description": "Displays form fields for changing link target."
        },
        "ƒ:link_xfn_meta_box": {
                "prefix": [
                        "link_xfn_meta_box",
                        "lxmb"
                ],
                "body": "link_xfn_meta_box(${1:\\$link:object} )",
                "description": "Displays XFN form fields."
        },
        "ƒ:links_add_base_url": {
                "prefix": [
                        "links_add_base_url",
                        "labu"
                ],
                "body": "links_add_base_url(${1:\\$content:string},${2:\\$base:string},${3:\\$attrs:array} )",
                "description": "Adds a base URL to relative links in passed content."
        },
        "ƒ:links_add_target": {
                "prefix": [
                        "links_add_target",
                        "lat"
                ],
                "body": "links_add_target(${1:\\$content:string},${2:\\$target:string},${3:\\$tags:array} )",
                "description": "Adds a Target attribute to all links in passed content."
        },
        "ƒ:links_popup_script": {
                "prefix": [
                        "links_popup_script",
                        "lps"
                ],
                "body": "links_popup_script(${1:\\$text:string},${2:\\$width:integer},${3:\\$height:integer},${4:\\$file:string},${5:\\$count:boolean} )",
                "description": "Show the link to the links popup and the number of links."
        },
        "ƒ:list_authors": {
                "prefix": [
                        "list_authors",
                        "la"
                ],
                "body": "list_authors(${1:\\$optioncount:boolean},${2:\\$exclude_admin:boolean},${3:\\$show_fullname:boolean},${4:\\$hide_empty:boolean},${5:\\$feed:string},${6:\\$feed_image:string} )",
                "description": "Lists authors."
        },
        "ƒ:list_cats": {
                "prefix": [
                        "list_cats",
                        "lc"
                ],
                "body": "list_cats(${1:\\$optionall:integer},${2:\\$all:string},${3:\\$sort_column:string},${4:\\$sort_order:string},${5:\\$file:string},${6:\\$list:boolean},${7:\\$optiondates:integer},${8:\\$optioncount:integer},${9:\\$hide_empty:integer},${10:\\$use_desc_for_title:integer},${11:\\$children:boolean},${12:\\$child_of:integer},${13:\\$categories:integer},${14:\\$recurse:integer},${15:\\$feed:string},${16:\\$feed_image:string},${17:\\$exclude:string},${18:\\$hierarchical:boolean} )",
                "description": "Lists categories."
        },
        "ƒ:list_core_update": {
                "prefix": [
                        "list_core_update",
                        "lcu"
                ],
                "body": "list_core_update(${1:\\$update:object} )",
                "description": "Lists available core updates."
        },
        "ƒ:list_files": {
                "prefix": [
                        "list_files",
                        "lf"
                ],
                "body": "list_files(${1:\\$folder:string},${2:\\$levels:integer},${3:\\$exclusions:array} )",
                "description": "Returns a listing of all files in the specified folder and all subdirectories up to 100 levels deep."
        },
        "ƒ:list_meta": {
                "prefix": [
                        "list_meta",
                        "lm"
                ],
                "body": "list_meta(${1:\\$meta:array} )",
                "description": "Outputs a post&#039;s public meta data in the Custom Fields meta box."
        },
        "ƒ:list_plugin_updates": {
                "prefix": [
                        "list_plugin_updates",
                        "lpu"
                ],
                "body": "list_plugin_updates()",
                "description": "Display the upgrade plugins form."
        },
        "ƒ:list_theme_updates": {
                "prefix": [
                        "list_theme_updates",
                        "ltu"
                ],
                "body": "list_theme_updates()",
                "description": "Display the upgrade themes form."
        },
        "ƒ:list_translation_updates": {
                "prefix": [
                        "list_translation_updates",
                        "ltu"
                ],
                "body": "list_translation_updates()",
                "description": "Display the update translations form."
        },
        "ƒ:load_child_theme_textdomain": {
                "prefix": [
                        "load_child_theme_textdomain",
                        "lctt"
                ],
                "body": "load_child_theme_textdomain(${1:\\$domain:string},${2:\\$path:string|false} )",
                "description": "Load the child themes translated strings."
        },
        "ƒ:load_default_textdomain": {
                "prefix": [
                        "load_default_textdomain",
                        "ldt"
                ],
                "body": "load_default_textdomain(${1:\\$locale:string|null} )",
                "description": "Load default translated strings based on locale."
        },
        "ƒ:load_image_to_edit": {
                "prefix": [
                        "load_image_to_edit",
                        "lite"
                ],
                "body": "load_image_to_edit(${1:\\$attachment_id:integer},${2:\\$mime_type:string},${3:\\$size:string|array} )",
                "description": "Load an image resource for editing."
        },
        "ƒ:load_muplugin_textdomain": {
                "prefix": [
                        "load_muplugin_textdomain",
                        "lmt"
                ],
                "body": "load_muplugin_textdomain(${1:\\$domain:string},${2:\\$mu_plugin_rel_path:string} )",
                "description": "Load the translated strings for a plugin residing in the mu-plugins directory."
        },
        "ƒ:load_plugin_textdomain": {
                "prefix": [
                        "load_plugin_textdomain",
                        "lpt"
                ],
                "body": "load_plugin_textdomain(${1:\\$domain:string},${2:\\$deprecated:string|false},${3:\\$plugin_rel_path:string|false} )",
                "description": "Loads a plugin&#039;s translated strings."
        },
        "ƒ:load_script_textdomain": {
                "prefix": [
                        "load_script_textdomain",
                        "lst"
                ],
                "body": "load_script_textdomain(${1:\\$handle:string},${2:\\$domain:string},${3:\\$path:string|null} )",
                "description": "Loads the script translated strings."
        },
        "ƒ:load_script_translations": {
                "prefix": [
                        "load_script_translations",
                        "lst"
                ],
                "body": "load_script_translations(${1:\\$file:string|false},${2:\\$handle:string},${3:\\$domain:string} )",
                "description": "Loads the translation data for the given script handle and text domain."
        },
        "ƒ:load_template": {
                "prefix": [
                        "load_template",
                        "lt"
                ],
                "body": "load_template(${1:\\$_template_file:string},${2:\\$require_once:boolean},${3:\\$args:array} )",
                "description": "Require the template file with WordPress environment."
        },
        "ƒ:load_textdomain": {
                "prefix": [
                        "load_textdomain",
                        "lt"
                ],
                "body": "load_textdomain(${1:\\$domain:string},${2:\\$mofile:string} )",
                "description": "Load a .mo file into the text domain $domain."
        },
        "ƒ:load_theme_textdomain": {
                "prefix": [
                        "load_theme_textdomain",
                        "ltt"
                ],
                "body": "load_theme_textdomain(${1:\\$domain:string},${2:\\$path:string|false} )",
                "description": "Load the theme&#039;s translated strings."
        },
        "ƒ:locale_stylesheet": {
                "prefix": [
                        "locale_stylesheet",
                        "ls"
                ],
                "body": "locale_stylesheet()",
                "description": "Displays localized stylesheet link element."
        },
        "ƒ:locate_block_template": {
                "prefix": [
                        "locate_block_template",
                        "lbt"
                ],
                "body": "locate_block_template(${1:\\$template:string},${2:\\$type:string},${3:\\$templates:array} )",
                "description": "Find a block template with equal or higher specificity than a given PHP template file."
        },
        "ƒ:locate_template": {
                "prefix": [
                        "locate_template",
                        "lt"
                ],
                "body": "locate_template(${1:\\$template_names:string|array},${2:\\$load:boolean},${3:\\$require_once:boolean},${4:\\$args:array} )",
                "description": "Retrieve the name of the highest priority template file that exists."
        },
        "ƒ:login_footer": {
                "prefix": [
                        "login_footer",
                        "lf"
                ],
                "body": "login_footer(${1:\\$input_id:string} )",
                "description": "Outputs the footer for the login page."
        },
        "ƒ:login_header": {
                "prefix": [
                        "login_header",
                        "lh"
                ],
                "body": "login_header(${1:\\$title:string},${2:\\$message:string},${3:\\$wp_error:WP_Error|null} )",
                "description": "Output the login page header."
        },
        "ƒ:logIO": {
                "prefix": [
                        "logIO"
                ],
                "body": "logIO(${1:\\$io:string},${2:\\$msg:string} )",
                "description": "logIO() - Writes logging info to a file."
        },
        "ƒ:maintenance_nag": {
                "prefix": [
                        "maintenance_nag",
                        "mn"
                ],
                "body": "maintenance_nag()",
                "description": ""
        },
        "ƒ:make_clickable": {
                "prefix": [
                        "make_clickable",
                        "mc"
                ],
                "body": "make_clickable(${1:\\$text:string} )",
                "description": "Converts plaintext URI to HTML links."
        },
        "ƒ:make_db_current": {
                "prefix": [
                        "make_db_current",
                        "mdc"
                ],
                "body": "make_db_current(${1:\\$tables:string} )",
                "description": "Updates the database tables to a new schema."
        },
        "ƒ:make_db_current_silent": {
                "prefix": [
                        "make_db_current_silent",
                        "mdcs"
                ],
                "body": "make_db_current_silent(${1:\\$tables:string} )",
                "description": "Updates the database tables to a new schema, but without displaying results."
        },
        "ƒ:make_site_theme": {
                "prefix": [
                        "make_site_theme",
                        "mst"
                ],
                "body": "make_site_theme()",
                "description": "Creates a site theme."
        },
        "ƒ:make_site_theme_from_default": {
                "prefix": [
                        "make_site_theme_from_default",
                        "mstfd"
                ],
                "body": "make_site_theme_from_default(${1:\\$theme_name:string},${2:\\$template:string} )",
                "description": "Creates a site theme from the default theme."
        },
        "ƒ:make_site_theme_from_oldschool": {
                "prefix": [
                        "make_site_theme_from_oldschool",
                        "mstfo"
                ],
                "body": "make_site_theme_from_oldschool(${1:\\$theme_name:string},${2:\\$template:string} )",
                "description": "Creates a site theme from an existing theme."
        },
        "ƒ:make_url_footnote": {
                "prefix": [
                        "make_url_footnote",
                        "muf"
                ],
                "body": "make_url_footnote(${1:\\$content:string} )",
                "description": "Strip HTML and put links at the bottom of stripped content."
        },
        "ƒ:map_deep": {
                "prefix": [
                        "map_deep",
                        "md"
                ],
                "body": "map_deep(${1:\\$value:mixed},${2:\\$callback:callable} )",
                "description": "Maps a function to all non-iterable elements of an array or an object."
        },
        "ƒ:map_meta_cap": {
                "prefix": [
                        "map_meta_cap",
                        "mmc"
                ],
                "body": "map_meta_cap(${1:\\$cap:string},${2:\\$user_id:integer},${3:\\$args:mixed} )",
                "description": "Maps a capability to the primitive capabilities required of the given user to satisfy the capability being checked."
        },
        "ƒ:maybe_add_column": {
                "prefix": [
                        "maybe_add_column",
                        "mac"
                ],
                "body": "maybe_add_column(${1:\\$table_name:string},${2:\\$column_name:string},${3:\\$create_ddl:string} )",
                "description": "Adds column to a database table, if it doesn&#039;t already exist."
        },
        "ƒ:maybe_add_existing_user_to_blog": {
                "prefix": [
                        "maybe_add_existing_user_to_blog",
                        "maeutb"
                ],
                "body": "maybe_add_existing_user_to_blog()",
                "description": "Adds a new user to a blog by visiting /newbloguser/{key}/."
        },
        "ƒ:maybe_convert_table_to_utf8mb4": {
                "prefix": [
                        "maybe_convert_table_to_utf8mb4",
                        "mcttu"
                ],
                "body": "maybe_convert_table_to_utf8mb4(${1:\\$table:string} )",
                "description": "If a table only contains utf8 or utf8mb4 columns, convert it to utf8mb4."
        },
        "ƒ:maybe_create_table": {
                "prefix": [
                        "maybe_create_table",
                        "mct"
                ],
                "body": "maybe_create_table(${1:\\$table_name:string},${2:\\$create_ddl:string} )",
                "description": "Creates a table in the database, if it doesn&#039;t already exist."
        },
        "ƒ:maybe_disable_automattic_widgets": {
                "prefix": [
                        "maybe_disable_automattic_widgets",
                        "mdaw"
                ],
                "body": "maybe_disable_automattic_widgets()",
                "description": "Disables the Automattic widgets plugin, which was merged into core."
        },
        "ƒ:maybe_disable_link_manager": {
                "prefix": [
                        "maybe_disable_link_manager",
                        "mdlm"
                ],
                "body": "maybe_disable_link_manager()",
                "description": "Disables the Link Manager on upgrade if, at the time of upgrade, no links exist in the DB."
        },
        "ƒ:maybe_drop_column": {
                "prefix": [
                        "maybe_drop_column",
                        "mdc"
                ],
                "body": "maybe_drop_column(${1:\\$table_name:string},${2:\\$column_name:string},${3:\\$drop_ddl:string} )",
                "description": "Drops column from database table, if it exists."
        },
        "ƒ:maybe_hash_hex_color": {
                "prefix": [
                        "maybe_hash_hex_color",
                        "mhhc"
                ],
                "body": "maybe_hash_hex_color(${1:\\$color:string} )",
                "description": "Ensures that any hex color is properly hashed."
        },
        "ƒ:maybe_redirect_404": {
                "prefix": [
                        "maybe_redirect_404",
                        "mr4"
                ],
                "body": "maybe_redirect_404()",
                "description": "Corrects 404 redirects when NOBLOGREDIRECT is defined."
        },
        "ƒ:maybe_serialize": {
                "prefix": [
                        "maybe_serialize",
                        "ms"
                ],
                "body": "maybe_serialize(${1:\\$data:string|array|object} )",
                "description": "Serialize data, if needed."
        },
        "ƒ:maybe_unserialize": {
                "prefix": [
                        "maybe_unserialize",
                        "mu"
                ],
                "body": "maybe_unserialize(${1:\\$data:string} )",
                "description": "Unserialize data only if it was serialized."
        },
        "ƒ:mbstring_binary_safe_encoding": {
                "prefix": [
                        "mbstring_binary_safe_encoding",
                        "mbse"
                ],
                "body": "mbstring_binary_safe_encoding(${1:\\$reset:boolean} )",
                "description": "Set the mbstring internal encoding to a binary safe encoding when func_overload is enabled."
        },
        "ƒ:media_buttons": {
                "prefix": [
                        "media_buttons",
                        "mb"
                ],
                "body": "media_buttons(${1:\\$editor_id:string} )",
                "description": "Adds the media button to the editor."
        },
        "ƒ:media_handle_sideload": {
                "prefix": [
                        "media_handle_sideload",
                        "mhs"
                ],
                "body": "media_handle_sideload(${1:\\$file_array:array},${2:\\$post_id:integer},${3:\\$desc:string|null},${4:\\$post_data:array} )",
                "description": "Handles a side-loaded file in the same way as an uploaded file is handled by media_handle_upload()."
        },
        "ƒ:media_handle_upload": {
                "prefix": [
                        "media_handle_upload",
                        "mhu"
                ],
                "body": "media_handle_upload(${1:\\$file_id:string},${2:\\$post_id:integer},${3:\\$post_data:array},${4:\\$overrides:array} )",
                "description": "Saves a file submitted from a POST request and create an attachment post for it."
        },
        "ƒ:media_post_single_attachment_fields_to_edit": {
                "prefix": [
                        "media_post_single_attachment_fields_to_edit",
                        "mpsafte"
                ],
                "body": "media_post_single_attachment_fields_to_edit(${1:\\$form_fields:array},${2:\\$post:WP_Post} )",
                "description": "Retrieves the post non-image attachment fields to edit form fields."
        },
        "ƒ:media_send_to_editor": {
                "prefix": [
                        "media_send_to_editor",
                        "mste"
                ],
                "body": "media_send_to_editor(${1:\\$html:string} )",
                "description": "Adds image HTML to editor."
        },
        "ƒ:media_sideload_image": {
                "prefix": [
                        "media_sideload_image",
                        "msi"
                ],
                "body": "media_sideload_image(${1:\\$file:string},${2:\\$post_id:integer},${3:\\$desc:string|null},${4:\\$return_type:string} )",
                "description": "Downloads an image from the specified URL, saves it as an attachment, and optionally attaches it to a post."
        },
        "ƒ:media_single_attachment_fields_to_edit": {
                "prefix": [
                        "media_single_attachment_fields_to_edit",
                        "msafte"
                ],
                "body": "media_single_attachment_fields_to_edit(${1:\\$form_fields:array},${2:\\$post:WP_Post} )",
                "description": "Retrieves the single non-image attachment fields to edit form fields."
        },
        "ƒ:media_upload_audio": {
                "prefix": [
                        "media_upload_audio",
                        "mua"
                ],
                "body": "media_upload_audio()",
                "description": "Handles uploading an audio file."
        },
        "ƒ:media_upload_file": {
                "prefix": [
                        "media_upload_file",
                        "muf"
                ],
                "body": "media_upload_file()",
                "description": "Handles uploading a generic file."
        },
        "ƒ:media_upload_flash_bypass": {
                "prefix": [
                        "media_upload_flash_bypass",
                        "mufb"
                ],
                "body": "media_upload_flash_bypass()",
                "description": "Displays the multi-file uploader message."
        },
        "ƒ:media_upload_form": {
                "prefix": [
                        "media_upload_form",
                        "muf"
                ],
                "body": "media_upload_form(${1:\\$errors:array|null} )",
                "description": "Outputs the legacy media upload form."
        },
        "ƒ:media_upload_form_handler": {
                "prefix": [
                        "media_upload_form_handler",
                        "mufh"
                ],
                "body": "media_upload_form_handler()",
                "description": "Handles form submissions for the legacy media uploader."
        },
        "ƒ:media_upload_gallery": {
                "prefix": [
                        "media_upload_gallery",
                        "mug"
                ],
                "body": "media_upload_gallery()",
                "description": "Retrieves the legacy media uploader form in an iframe."
        },
        "ƒ:media_upload_gallery_form": {
                "prefix": [
                        "media_upload_gallery_form",
                        "mugf"
                ],
                "body": "media_upload_gallery_form(${1:\\$errors:array} )",
                "description": "Adds gallery form to upload iframe."
        },
        "ƒ:media_upload_header": {
                "prefix": [
                        "media_upload_header",
                        "muh"
                ],
                "body": "media_upload_header()",
                "description": "Outputs the legacy media upload header."
        },
        "ƒ:media_upload_html_bypass": {
                "prefix": [
                        "media_upload_html_bypass",
                        "muhb"
                ],
                "body": "media_upload_html_bypass()",
                "description": "Displays the browser&#039;s built-in uploader message."
        },
        "ƒ:media_upload_image": {
                "prefix": [
                        "media_upload_image",
                        "mui"
                ],
                "body": "media_upload_image()",
                "description": "Handles uploading an image."
        },
        "ƒ:media_upload_library": {
                "prefix": [
                        "media_upload_library",
                        "mul"
                ],
                "body": "media_upload_library()",
                "description": "Retrieves the legacy media library form in an iframe."
        },
        "ƒ:media_upload_library_form": {
                "prefix": [
                        "media_upload_library_form",
                        "mulf"
                ],
                "body": "media_upload_library_form(${1:\\$errors:array} )",
                "description": "Outputs the legacy media upload form for the media library."
        },
        "ƒ:media_upload_max_image_resize": {
                "prefix": [
                        "media_upload_max_image_resize",
                        "mumir"
                ],
                "body": "media_upload_max_image_resize()",
                "description": "Displays the checkbox to scale images."
        },
        "ƒ:media_upload_tabs": {
                "prefix": [
                        "media_upload_tabs",
                        "mut"
                ],
                "body": "media_upload_tabs()",
                "description": "Defines the default media upload tabs."
        },
        "ƒ:media_upload_text_after": {
                "prefix": [
                        "media_upload_text_after",
                        "muta"
                ],
                "body": "media_upload_text_after()",
                "description": "Used to display a &quot;After a file has been uploaded."
        },
        "ƒ:media_upload_type_form": {
                "prefix": [
                        "media_upload_type_form",
                        "mutf"
                ],
                "body": "media_upload_type_form(${1:\\$type:string},${2:\\$errors:array|null},${3:\\$id:integer|WP_Error|null} )",
                "description": "Outputs the legacy media upload form for a given media type."
        },
        "ƒ:media_upload_type_url_form": {
                "prefix": [
                        "media_upload_type_url_form",
                        "mutuf"
                ],
                "body": "media_upload_type_url_form(${1:\\$type:string|null},${2:\\$errors:object|null},${3:\\$id:integer|null} )",
                "description": "Outputs the legacy media upload form for external media."
        },
        "ƒ:media_upload_video": {
                "prefix": [
                        "media_upload_video",
                        "muv"
                ],
                "body": "media_upload_video()",
                "description": "Handles uploading a video file."
        },
        "ƒ:menu_page_url": {
                "prefix": [
                        "menu_page_url",
                        "mpu"
                ],
                "body": "menu_page_url(${1:\\$menu_slug:string},${2:\\$display:boolean} )",
                "description": "Gets the URL to access a particular menu page based on the slug it was registered with."
        },
        "ƒ:meta_box_prefs": {
                "prefix": [
                        "meta_box_prefs",
                        "mbp"
                ],
                "body": "meta_box_prefs(${1:\\$screen:WP_Screen} )",
                "description": "Prints the meta box preferences for screen meta."
        },
        "ƒ:meta_form": {
                "prefix": [
                        "meta_form",
                        "mf"
                ],
                "body": "meta_form(${1:\\$post:WP_Post|null} )",
                "description": "Prints the form in the Custom Fields meta box."
        },
        "ƒ:metadata_exists": {
                "prefix": [
                        "metadata_exists",
                        "me"
                ],
                "body": "metadata_exists(${1:\\$meta_type:string},${2:\\$object_id:integer},${3:\\$meta_key:string} )",
                "description": "Determines if a meta field with the given key exists for the given object ID."
        },
        "ƒ:ms_allowed_http_request_hosts": {
                "prefix": [
                        "ms_allowed_http_request_hosts",
                        "mahrh"
                ],
                "body": "ms_allowed_http_request_hosts(${1:\\$is_external:boolean},${2:\\$host:string} )",
                "description": "Adds any domain in a multisite installation for safe HTTP requests to the allowed list."
        },
        "ƒ:ms_cookie_constants": {
                "prefix": [
                        "ms_cookie_constants",
                        "mcc"
                ],
                "body": "ms_cookie_constants()",
                "description": "Defines Multisite cookie constants."
        },
        "ƒ:ms_deprecated_blogs_file": {
                "prefix": [
                        "ms_deprecated_blogs_file",
                        "mdbf"
                ],
                "body": "ms_deprecated_blogs_file()",
                "description": "Deprecated functionality for determining whether a file is deprecated."
        },
        "ƒ:ms_file_constants": {
                "prefix": [
                        "ms_file_constants",
                        "mfc"
                ],
                "body": "ms_file_constants()",
                "description": "Defines Multisite file constants."
        },
        "ƒ:ms_is_switched": {
                "prefix": [
                        "ms_is_switched",
                        "mis"
                ],
                "body": "ms_is_switched()",
                "description": "Determines if switch_to_blog() is in effect"
        },
        "ƒ:ms_load_current_site_and_network": {
                "prefix": [
                        "ms_load_current_site_and_network",
                        "mlcsan"
                ],
                "body": "ms_load_current_site_and_network(${1:\\$domain:string},${2:\\$path:string},${3:\\$subdomain:boolean} )",
                "description": "Identifies the network and site of a requested domain and path and populates the corresponding network and site global objects as part of the multisite bootstrap process."
        },
        "ƒ:ms_not_installed": {
                "prefix": [
                        "ms_not_installed",
                        "mni"
                ],
                "body": "ms_not_installed(${1:\\$domain:string},${2:\\$path:string} )",
                "description": "Displays a failure message."
        },
        "ƒ:ms_site_check": {
                "prefix": [
                        "ms_site_check",
                        "msc"
                ],
                "body": "ms_site_check()",
                "description": "Checks status of current blog."
        },
        "ƒ:ms_subdomain_constants": {
                "prefix": [
                        "ms_subdomain_constants",
                        "msc"
                ],
                "body": "ms_subdomain_constants()",
                "description": "Defines Multisite subdomain constants and handles warnings and notices."
        },
        "ƒ:ms_upload_constants": {
                "prefix": [
                        "ms_upload_constants",
                        "muc"
                ],
                "body": "ms_upload_constants()",
                "description": "Defines Multisite upload constants."
        },
        "ƒ:mu_dropdown_languages": {
                "prefix": [
                        "mu_dropdown_languages",
                        "mdl"
                ],
                "body": "mu_dropdown_languages(${1:\\$lang_files:array},${2:\\$current:string} )",
                "description": "Generates and displays a drop-down of available languages."
        },
        "ƒ:mu_options": {
                "prefix": [
                        "mu_options",
                        "mo"
                ],
                "body": "mu_options(${1:\\$options:} )",
                "description": "WPMU options."
        },
        "ƒ:multisite_over_quota_message": {
                "prefix": [
                        "multisite_over_quota_message",
                        "moqm"
                ],
                "body": "multisite_over_quota_message()",
                "description": "Displays the out of storage quota message in Multisite."
        },
        "ƒ:mysql2date": {
                "prefix": [
                        "mysql2date"
                ],
                "body": "mysql2date(${1:\\$format:string},${2:\\$date:string},${3:\\$translate:boolean} )",
                "description": "Convert given MySQL date string into a different format."
        },
        "ƒ:mysql_to_rfc3339": {
                "prefix": [
                        "mysql_to_rfc3339",
                        "mtr"
                ],
                "body": "mysql_to_rfc3339(${1:\\$date_string:string} )",
                "description": "Parses and formats a MySQL datetime (Y-m-d H:i:s) for ISO8601 (Y-m-dH:i:s)."
        },
        "ƒ:network_admin_url": {
                "prefix": [
                        "network_admin_url",
                        "nau"
                ],
                "body": "network_admin_url(${1:\\$path:string},${2:\\$scheme:string} )",
                "description": "Retrieves the URL to the admin area for the network."
        },
        "ƒ:network_domain_check": {
                "prefix": [
                        "network_domain_check",
                        "ndc"
                ],
                "body": "network_domain_check()",
                "description": "Check for an existing network."
        },
        "ƒ:network_edit_site_nav": {
                "prefix": [
                        "network_edit_site_nav",
                        "nesn"
                ],
                "body": "network_edit_site_nav(${1:\\$args:array} )",
                "description": "Outputs the HTML for a network&#039;s &quot;Edit Site&quot; tabular interface."
        },
        "ƒ:network_home_url": {
                "prefix": [
                        "network_home_url",
                        "nhu"
                ],
                "body": "network_home_url(${1:\\$path:string},${2:\\$scheme:string|null} )",
                "description": "Retrieves the home URL for the current network."
        },
        "ƒ:network_settings_add_js": {
                "prefix": [
                        "network_settings_add_js",
                        "nsaj"
                ],
                "body": "network_settings_add_js()",
                "description": "Print JavaScript in the header on the Network Settings screen."
        },
        "ƒ:network_site_url": {
                "prefix": [
                        "network_site_url",
                        "nsu"
                ],
                "body": "network_site_url(${1:\\$path:string},${2:\\$scheme:string|null} )",
                "description": "Retrieves the site URL for the current network."
        },
        "ƒ:network_step1": {
                "prefix": [
                        "network_step1",
                        "ns"
                ],
                "body": "network_step1(${1:\\$errors:false|WP_Error} )",
                "description": "Prints step 1 for Network installation process."
        },
        "ƒ:network_step2": {
                "prefix": [
                        "network_step2",
                        "ns"
                ],
                "body": "network_step2(${1:\\$errors:false|WP_Error} )",
                "description": "Prints step 2 for Network installation process."
        },
        "ƒ:new_user_email_admin_notice": {
                "prefix": [
                        "new_user_email_admin_notice",
                        "nuean"
                ],
                "body": "new_user_email_admin_notice()",
                "description": "Adds an admin notice alerting the user to check for confirmation request email after email address change."
        },
        "ƒ:newblog_notify_siteadmin": {
                "prefix": [
                        "newblog_notify_siteadmin",
                        "nns"
                ],
                "body": "newblog_notify_siteadmin(${1:\\$blog_id:WP_Site|integer},${2:\\$deprecated:string} )",
                "description": "Notifies the network admin that a new site has been activated."
        },
        "ƒ:newuser_notify_siteadmin": {
                "prefix": [
                        "newuser_notify_siteadmin",
                        "nns"
                ],
                "body": "newuser_notify_siteadmin(${1:\\$user_id:integer} )",
                "description": "Notifies the network admin that a new user has been activated."
        },
        "ƒ:next_comments_link": {
                "prefix": [
                        "next_comments_link",
                        "ncl"
                ],
                "body": "next_comments_link(${1:\\$label:string},${2:\\$max_page:integer} )",
                "description": "Displays the link to the next comments page."
        },
        "ƒ:next_image_link": {
                "prefix": [
                        "next_image_link",
                        "nil"
                ],
                "body": "next_image_link(${1:\\$size:string|array},${2:\\$text:string|false} )",
                "description": "Displays next image link that has the same post parent."
        },
        "ƒ:next_post": {
                "prefix": [
                        "next_post",
                        "np"
                ],
                "body": "next_post(${1:\\$format:string},${2:\\$next:string},${3:\\$title:string},${4:\\$in_same_cat:string},${5:\\$limitnext:integer},${6:\\$excluded_categories:string} )",
                "description": "Prints link to the next post."
        },
        "ƒ:next_post_link": {
                "prefix": [
                        "next_post_link",
                        "npl"
                ],
                "body": "next_post_link(${1:\\$format:string},${2:\\$link:string},${3:\\$in_same_term:boolean},${4:\\$excluded_terms:array|string},${5:\\$taxonomy:string} )",
                "description": "Displays the next post link that is adjacent to the current post."
        },
        "ƒ:next_post_rel_link": {
                "prefix": [
                        "next_post_rel_link",
                        "nprl"
                ],
                "body": "next_post_rel_link(${1:\\$title:string},${2:\\$in_same_term:boolean},${3:\\$excluded_terms:array|string},${4:\\$taxonomy:string} )",
                "description": "Displays the relational link for the next post adjacent to the current post."
        },
        "ƒ:next_posts": {
                "prefix": [
                        "next_posts",
                        "np"
                ],
                "body": "next_posts(${1:\\$max_page:integer},${2:\\$echo:boolean} )",
                "description": "Displays or retrieves the next posts page link."
        },
        "ƒ:next_posts_link": {
                "prefix": [
                        "next_posts_link",
                        "npl"
                ],
                "body": "next_posts_link(${1:\\$label:string|null},${2:\\$max_page:integer} )",
                "description": "Displays the next posts page link."
        },
        "ƒ:next_widget_id_number": {
                "prefix": [
                        "next_widget_id_number",
                        "nwin"
                ],
                "body": "next_widget_id_number(${1:\\$id_base:string} )",
                "description": ""
        },
        "ƒ:nocache_headers": {
                "prefix": [
                        "nocache_headers",
                        "nh"
                ],
                "body": "nocache_headers()",
                "description": "Set the headers to prevent caching for the different browsers."
        },
        "ƒ:noindex": {
                "prefix": [
                        "noindex"
                ],
                "body": "noindex()",
                "description": "Displays a `noindex` meta tag if required by the blog configuration."
        },
        "ƒ:normalize_whitespace": {
                "prefix": [
                        "normalize_whitespace",
                        "nw"
                ],
                "body": "normalize_whitespace(${1:\\$str:string} )",
                "description": "Normalizes EOL characters and strips duplicate whitespace."
        },
        "ƒ:note_sidebar_being_rendered": {
                "prefix": [
                        "note_sidebar_being_rendered",
                        "nsbr"
                ],
                "body": "note_sidebar_being_rendered(${1:\\$index:integer|string} )",
                "description": "Make a note of the sidebar being rendered before WordPress starts rendering it. This lets us get to the current sidebar in render_block_core_widget_group()."
        },
        "ƒ:number_format_i18n": {
                "prefix": [
                        "number_format_i18n",
                        "nfi"
                ],
                "body": "number_format_i18n(${1:\\$number:float},${2:\\$decimals:integer} )",
                "description": "Convert float number to format based on the locale."
        },
        "ƒ:option_update_filter": {
                "prefix": [
                        "option_update_filter",
                        "ouf"
                ],
                "body": "option_update_filter(${1:\\$options:array} )",
                "description": "Refreshes the value of the allowed options list available via the &#039;allowed_options&#039; hook."
        },
        "ƒ:options_discussion_add_js": {
                "prefix": [
                        "options_discussion_add_js",
                        "odaj"
                ],
                "body": "options_discussion_add_js()",
                "description": "Output JavaScript to toggle display of additional settings if avatars are disabled."
        },
        "ƒ:options_general_add_js": {
                "prefix": [
                        "options_general_add_js",
                        "ogaj"
                ],
                "body": "options_general_add_js()",
                "description": "Display JavaScript on the page."
        },
        "ƒ:options_permalink_add_js": {
                "prefix": [
                        "options_permalink_add_js",
                        "opaj"
                ],
                "body": "options_permalink_add_js()",
                "description": "Display JavaScript on the page."
        },
        "ƒ:options_reading_add_js": {
                "prefix": [
                        "options_reading_add_js",
                        "oraj"
                ],
                "body": "options_reading_add_js()",
                "description": "Display JavaScript on the page."
        },
        "ƒ:options_reading_blog_charset": {
                "prefix": [
                        "options_reading_blog_charset",
                        "orbc"
                ],
                "body": "options_reading_blog_charset()",
                "description": "Render the site charset setting."
        },
        "ƒ:page_attributes_meta_box": {
                "prefix": [
                        "page_attributes_meta_box",
                        "pamb"
                ],
                "body": "page_attributes_meta_box(${1:\\$post:WP_Post} )",
                "description": "Displays page attributes form fields."
        },
        "ƒ:page_template_dropdown": {
                "prefix": [
                        "page_template_dropdown",
                        "ptd"
                ],
                "body": "page_template_dropdown(${1:\\$default_template:string},${2:\\$post_type:string} )",
                "description": "Prints out option HTML elements for the page templates drop-down."
        },
        "ƒ:paginate_comments_links": {
                "prefix": [
                        "paginate_comments_links",
                        "pcl"
                ],
                "body": "paginate_comments_links(${1:\\$args:string|array} )",
                "description": "Displays or retrieves pagination links for the comments on the current post."
        },
        "ƒ:paginate_links": {
                "prefix": [
                        "paginate_links",
                        "pl"
                ],
                "body": "paginate_links(${1:\\$args:string|array} )",
                "description": "Retrieves paginated links for archive post pages."
        },
        "ƒ:parent_dropdown": {
                "prefix": [
                        "parent_dropdown",
                        "pd"
                ],
                "body": "parent_dropdown(${1:\\$default_page:integer},${2:\\$parent:integer},${3:\\$level:integer},${4:\\$post:integer|WP_Post|null} )",
                "description": "Prints out option HTML elements for the page parents drop-down."
        },
        "ƒ:parent_post_rel_link": {
                "prefix": [
                        "parent_post_rel_link",
                        "pprl"
                ],
                "body": "parent_post_rel_link(${1:\\$title:string} )",
                "description": "Display relational link for parent item"
        },
        "ƒ:parse_blocks": {
                "prefix": [
                        "parse_blocks",
                        "pb"
                ],
                "body": "parse_blocks(${1:\\$content:string} )",
                "description": "Parses blocks out of a content string."
        },
        "ƒ:parse_w3cdtf": {
                "prefix": [
                        "parse_w3cdtf",
                        "pw"
                ],
                "body": "parse_w3cdtf(${1:\\$date_str:} )",
                "description": ""
        },
        "ƒ:path_is_absolute": {
                "prefix": [
                        "path_is_absolute",
                        "pia"
                ],
                "body": "path_is_absolute(${1:\\$path:string} )",
                "description": "Test if a given filesystem path is absolute."
        },
        "ƒ:path_join": {
                "prefix": [
                        "path_join",
                        "pj"
                ],
                "body": "path_join(${1:\\$base:string},${2:\\$path:string} )",
                "description": "Join two filesystem paths together."
        },
        "ƒ:paused_plugins_notice": {
                "prefix": [
                        "paused_plugins_notice",
                        "ppn"
                ],
                "body": "paused_plugins_notice()",
                "description": "Renders an admin notice in case some plugins have been paused due to errors."
        },
        "ƒ:paused_themes_notice": {
                "prefix": [
                        "paused_themes_notice",
                        "ptn"
                ],
                "body": "paused_themes_notice()",
                "description": "Renders an admin notice in case some themes have been paused due to errors."
        },
        "ƒ:PclZipUtilCopyBlock": {
                "prefix": [
                        "PclZipUtilCopyBlock"
                ],
                "body": "PclZipUtilCopyBlock(${1:\\$p_src:},${2:\\$p_dest:},${3:\\$p_size:},${4:\\$p_mode:} )",
                "description": ""
        },
        "ƒ:PclZipUtilOptionText": {
                "prefix": [
                        "PclZipUtilOptionText"
                ],
                "body": "PclZipUtilOptionText(${1:\\$p_option:} )",
                "description": ""
        },
        "ƒ:PclZipUtilPathInclusion": {
                "prefix": [
                        "PclZipUtilPathInclusion"
                ],
                "body": "PclZipUtilPathInclusion(${1:\\$p_dir:},${2:\\$p_path:} )",
                "description": ""
        },
        "ƒ:PclZipUtilPathReduction": {
                "prefix": [
                        "PclZipUtilPathReduction"
                ],
                "body": "PclZipUtilPathReduction(${1:\\$p_dir:} )",
                "description": ""
        },
        "ƒ:PclZipUtilRename": {
                "prefix": [
                        "PclZipUtilRename"
                ],
                "body": "PclZipUtilRename(${1:\\$p_src:},${2:\\$p_dest:} )",
                "description": ""
        },
        "ƒ:PclZipUtilTranslateWinPath": {
                "prefix": [
                        "PclZipUtilTranslateWinPath"
                ],
                "body": "PclZipUtilTranslateWinPath(${1:\\$p_path:},${2:\\$p_remove_disk_letter:} )",
                "description": ""
        },
        "ƒ:permalink_anchor": {
                "prefix": [
                        "permalink_anchor",
                        "pa"
                ],
                "body": "permalink_anchor(${1:\\$mode:string} )",
                "description": "Displays the permalink anchor for the current post."
        },
        "ƒ:permalink_link": {
                "prefix": [
                        "permalink_link",
                        "pl"
                ],
                "body": "permalink_link()",
                "description": "Print the permalink of the current post in the loop."
        },
        "ƒ:permalink_single_rss": {
                "prefix": [
                        "permalink_single_rss",
                        "psr"
                ],
                "body": "permalink_single_rss(${1:\\$deprecated:string} )",
                "description": "Print the permalink to the RSS feed."
        },
        "ƒ:pingback": {
                "prefix": [
                        "pingback"
                ],
                "body": "pingback(${1:\\$content:string},${2:\\$post_id:integer|WP_Post} )",
                "description": "Pings back the links found in a post."
        },
        "ƒ:pingback_ping_source_uri": {
                "prefix": [
                        "pingback_ping_source_uri",
                        "ppsu"
                ],
                "body": "pingback_ping_source_uri(${1:\\$source_uri:string} )",
                "description": "Default filter attached to pingback_ping_source_uri to validate the pingback&#039;s Source URI."
        },
        "ƒ:pings_open": {
                "prefix": [
                        "pings_open",
                        "po"
                ],
                "body": "pings_open(${1:\\$post_id:integer|WP_Post|null} )",
                "description": "Determines whether the current post is open for pings."
        },
        "ƒ:plugin_basename": {
                "prefix": [
                        "plugin_basename",
                        "pb"
                ],
                "body": "plugin_basename(${1:\\$file:string} )",
                "description": "Gets the basename of a plugin."
        },
        "ƒ:plugin_dir_path": {
                "prefix": [
                        "plugin_dir_path",
                        "pdp"
                ],
                "body": "plugin_dir_path(${1:\\$file:string} )",
                "description": "Get the filesystem directory path (with trailing slash) for the plugin __FILE__ passed in."
        },
        "ƒ:plugin_dir_url": {
                "prefix": [
                        "plugin_dir_url",
                        "pdu"
                ],
                "body": "plugin_dir_url(${1:\\$file:string} )",
                "description": "Get the URL directory path (with trailing slash) for the plugin __FILE__ passed in."
        },
        "ƒ:plugin_sandbox_scrape": {
                "prefix": [
                        "plugin_sandbox_scrape",
                        "pss"
                ],
                "body": "plugin_sandbox_scrape(${1:\\$plugin:string} )",
                "description": "Loads a given plugin attempt to generate errors."
        },
        "ƒ:plugins_api": {
                "prefix": [
                        "plugins_api",
                        "pa"
                ],
                "body": "plugins_api(${1:\\$action:string},${2:\\$args:array|object} )",
                "description": "Retrieves plugin installer pages from the WordPress.org Plugins API."
        },
        "ƒ:plugins_url": {
                "prefix": [
                        "plugins_url",
                        "pu"
                ],
                "body": "plugins_url(${1:\\$path:string},${2:\\$plugin:string} )",
                "description": "Retrieves a URL within the plugins or mu-plugins directory."
        },
        "ƒ:populate_network": {
                "prefix": [
                        "populate_network",
                        "pn"
                ],
                "body": "populate_network(${1:\\$network_id:integer},${2:\\$domain:string},${3:\\$email:string},${4:\\$site_name:string},${5:\\$path:string},${6:\\$subdomain_install:boolean} )",
                "description": "Populate network settings."
        },
        "ƒ:populate_network_meta": {
                "prefix": [
                        "populate_network_meta",
                        "pnm"
                ],
                "body": "populate_network_meta(${1:\\$network_id:integer},${2:\\$meta:array} )",
                "description": "Creates WordPress network meta and sets the default values."
        },
        "ƒ:populate_options": {
                "prefix": [
                        "populate_options",
                        "po"
                ],
                "body": "populate_options(${1:\\$options:array} )",
                "description": "Create WordPress options and set the default values."
        },
        "ƒ:populate_roles": {
                "prefix": [
                        "populate_roles",
                        "pr"
                ],
                "body": "populate_roles()",
                "description": "Execute WordPress role creation for the various WordPress versions."
        },
        "ƒ:populate_roles_160": {
                "prefix": [
                        "populate_roles_160",
                        "pr1"
                ],
                "body": "populate_roles_160()",
                "description": "Create the roles for WordPress 2.0"
        },
        "ƒ:populate_roles_210": {
                "prefix": [
                        "populate_roles_210",
                        "pr2"
                ],
                "body": "populate_roles_210()",
                "description": "Create and modify WordPress roles for WordPress 2.1."
        },
        "ƒ:populate_roles_230": {
                "prefix": [
                        "populate_roles_230",
                        "pr2"
                ],
                "body": "populate_roles_230()",
                "description": "Create and modify WordPress roles for WordPress 2.3."
        },
        "ƒ:populate_roles_250": {
                "prefix": [
                        "populate_roles_250",
                        "pr2"
                ],
                "body": "populate_roles_250()",
                "description": "Create and modify WordPress roles for WordPress 2.5."
        },
        "ƒ:populate_roles_260": {
                "prefix": [
                        "populate_roles_260",
                        "pr2"
                ],
                "body": "populate_roles_260()",
                "description": "Create and modify WordPress roles for WordPress 2.6."
        },
        "ƒ:populate_roles_270": {
                "prefix": [
                        "populate_roles_270",
                        "pr2"
                ],
                "body": "populate_roles_270()",
                "description": "Create and modify WordPress roles for WordPress 2.7."
        },
        "ƒ:populate_roles_280": {
                "prefix": [
                        "populate_roles_280",
                        "pr2"
                ],
                "body": "populate_roles_280()",
                "description": "Create and modify WordPress roles for WordPress 2.8."
        },
        "ƒ:populate_roles_300": {
                "prefix": [
                        "populate_roles_300",
                        "pr3"
                ],
                "body": "populate_roles_300()",
                "description": "Create and modify WordPress roles for WordPress 3.0."
        },
        "ƒ:populate_site_meta": {
                "prefix": [
                        "populate_site_meta",
                        "psm"
                ],
                "body": "populate_site_meta(${1:\\$site_id:integer},${2:\\$meta:array} )",
                "description": "Creates WordPress site meta and sets the default values."
        },
        "ƒ:popuplinks": {
                "prefix": [
                        "popuplinks"
                ],
                "body": "popuplinks(${1:\\$text:string} )",
                "description": "Adds element attributes to open links in new tabs."
        },
        "ƒ:post_author_meta_box": {
                "prefix": [
                        "post_author_meta_box",
                        "pamb"
                ],
                "body": "post_author_meta_box(${1:\\$post:WP_Post} )",
                "description": "Displays form field with list of authors."
        },
        "ƒ:post_categories_meta_box": {
                "prefix": [
                        "post_categories_meta_box",
                        "pcmb"
                ],
                "body": "post_categories_meta_box(${1:\\$post:WP_Post},${2:\\$box:array} )",
                "description": "Displays post categories form fields."
        },
        "ƒ:post_class": {
                "prefix": [
                        "post_class",
                        "pc"
                ],
                "body": "post_class(${1:\\$class:string|array},${2:\\$post_id:integer|WP_Post|null} )",
                "description": "Displays the classes for the post container element."
        },
        "ƒ:post_comment_meta_box": {
                "prefix": [
                        "post_comment_meta_box",
                        "pcmb"
                ],
                "body": "post_comment_meta_box(${1:\\$post:WP_Post} )",
                "description": "Displays comments for post."
        },
        "ƒ:post_comment_meta_box_thead": {
                "prefix": [
                        "post_comment_meta_box_thead",
                        "pcmbt"
                ],
                "body": "post_comment_meta_box_thead(${1:\\$result:array} )",
                "description": "Displays comments for post table header"
        },
        "ƒ:post_comment_status_meta_box": {
                "prefix": [
                        "post_comment_status_meta_box",
                        "pcsmb"
                ],
                "body": "post_comment_status_meta_box(${1:\\$post:WP_Post} )",
                "description": "Displays comments status form fields."
        },
        "ƒ:post_comments_block_form_defaults": {
                "prefix": [
                        "post_comments_block_form_defaults",
                        "pcbfd"
                ],
                "body": "post_comments_block_form_defaults(${1:\\$fields:array} )",
                "description": "Use the button block classes for the form-submit button."
        },
        "ƒ:post_comments_feed_link": {
                "prefix": [
                        "post_comments_feed_link",
                        "pcfl"
                ],
                "body": "post_comments_feed_link(${1:\\$link_text:string},${2:\\$post_id:integer},${3:\\$feed:string} )",
                "description": "Displays the comment feed link for a post."
        },
        "ƒ:post_comments_form_block_form_defaults": {
                "prefix": [
                        "post_comments_form_block_form_defaults",
                        "pcfbfd"
                ],
                "body": "post_comments_form_block_form_defaults(${1:\\$fields:array} )",
                "description": "Use the button block classes for the form-submit button."
        },
        "ƒ:post_custom": {
                "prefix": [
                        "post_custom",
                        "pc"
                ],
                "body": "post_custom(${1:\\$key:string} )",
                "description": "Retrieves post custom meta data field."
        },
        "ƒ:post_custom_meta_box": {
                "prefix": [
                        "post_custom_meta_box",
                        "pcmb"
                ],
                "body": "post_custom_meta_box(${1:\\$post:WP_Post} )",
                "description": "Displays custom fields form fields."
        },
        "ƒ:post_excerpt_meta_box": {
                "prefix": [
                        "post_excerpt_meta_box",
                        "pemb"
                ],
                "body": "post_excerpt_meta_box(${1:\\$post:WP_Post} )",
                "description": "Displays post excerpt form fields."
        },
        "ƒ:post_exists": {
                "prefix": [
                        "post_exists",
                        "pe"
                ],
                "body": "post_exists(${1:\\$title:string},${2:\\$content:string},${3:\\$date:string},${4:\\$type:string},${5:\\$status:string} )",
                "description": "Determines if a post exists based on title, content, date and type."
        },
        "ƒ:post_form_autocomplete_off": {
                "prefix": [
                        "post_form_autocomplete_off",
                        "pfao"
                ],
                "body": "post_form_autocomplete_off()",
                "description": "Disables autocomplete on the &#039;post&#039; form (Add/Edit Post screens) for WebKit browsers, as they disregard the autocomplete setting on the editor textarea. That can break the editor when the user navigates to it with the browser&#039;s Back button. See #28037"
        },
        "ƒ:post_format_meta_box": {
                "prefix": [
                        "post_format_meta_box",
                        "pfmb"
                ],
                "body": "post_format_meta_box(${1:\\$post:WP_Post},${2:\\$box:array} )",
                "description": "Displays post format form elements."
        },
        "ƒ:post_password_required": {
                "prefix": [
                        "post_password_required",
                        "ppr"
                ],
                "body": "post_password_required(${1:\\$post:integer|WP_Post|null} )",
                "description": "Determines whether the post requires password and whether a correct password has been provided."
        },
        "ƒ:post_permalink": {
                "prefix": [
                        "post_permalink",
                        "pp"
                ],
                "body": "post_permalink(${1:\\$post_id:integer|WP_Post} )",
                "description": "Retrieve permalink from post ID."
        },
        "ƒ:post_preview": {
                "prefix": [
                        "post_preview",
                        "pp"
                ],
                "body": "post_preview()",
                "description": "Saves a draft or manually autosaves for the purpose of showing a post preview."
        },
        "ƒ:post_reply_link": {
                "prefix": [
                        "post_reply_link",
                        "prl"
                ],
                "body": "post_reply_link(${1:\\$args:array},${2:\\$post:integer|WP_Post|null} )",
                "description": "Displays the HTML content for reply to post link."
        },
        "ƒ:post_revisions_meta_box": {
                "prefix": [
                        "post_revisions_meta_box",
                        "prmb"
                ],
                "body": "post_revisions_meta_box(${1:\\$post:WP_Post} )",
                "description": "Displays list of revisions."
        },
        "ƒ:post_slug_meta_box": {
                "prefix": [
                        "post_slug_meta_box",
                        "psmb"
                ],
                "body": "post_slug_meta_box(${1:\\$post:WP_Post} )",
                "description": "Displays slug form fields."
        },
        "ƒ:post_submit_meta_box": {
                "prefix": [
                        "post_submit_meta_box",
                        "psmb"
                ],
                "body": "post_submit_meta_box(${1:\\$post:WP_Post},${2:\\$args:array} )",
                "description": "Displays post submit form fields."
        },
        "ƒ:post_tags_meta_box": {
                "prefix": [
                        "post_tags_meta_box",
                        "ptmb"
                ],
                "body": "post_tags_meta_box(${1:\\$post:WP_Post},${2:\\$box:array} )",
                "description": "Displays post tags form fields."
        },
        "ƒ:post_thumbnail_meta_box": {
                "prefix": [
                        "post_thumbnail_meta_box",
                        "ptmb"
                ],
                "body": "post_thumbnail_meta_box(${1:\\$post:WP_Post} )",
                "description": "Displays post thumbnail meta box."
        },
        "ƒ:post_trackback_meta_box": {
                "prefix": [
                        "post_trackback_meta_box",
                        "ptmb"
                ],
                "body": "post_trackback_meta_box(${1:\\$post:WP_Post} )",
                "description": "Displays trackback links form fields."
        },
        "ƒ:post_type_archive_title": {
                "prefix": [
                        "post_type_archive_title",
                        "ptat"
                ],
                "body": "post_type_archive_title(${1:\\$prefix:string},${2:\\$display:boolean} )",
                "description": "Display or retrieve title for a post type archive."
        },
        "ƒ:post_type_exists": {
                "prefix": [
                        "post_type_exists",
                        "pte"
                ],
                "body": "post_type_exists(${1:\\$post_type:string} )",
                "description": "Determines whether a post type is registered."
        },
        "ƒ:post_type_supports": {
                "prefix": [
                        "post_type_supports",
                        "pts"
                ],
                "body": "post_type_supports(${1:\\$post_type:string},${2:\\$feature:string} )",
                "description": "Check a post type&#039;s support for a given feature."
        },
        "ƒ:postbox_classes": {
                "prefix": [
                        "postbox_classes",
                        "pc"
                ],
                "body": "postbox_classes(${1:\\$box_id:string},${2:\\$screen_id:string} )",
                "description": "Returns the list of classes to be used by a meta box."
        },
        "ƒ:posts_nav_link": {
                "prefix": [
                        "posts_nav_link",
                        "pnl"
                ],
                "body": "posts_nav_link(${1:\\$sep:string},${2:\\$prelabel:string},${3:\\$nxtlabel:string} )",
                "description": "Displays the post pages link navigation for previous and next pages."
        },
        "ƒ:pre_schema_upgrade": {
                "prefix": [
                        "pre_schema_upgrade",
                        "psu"
                ],
                "body": "pre_schema_upgrade()",
                "description": "Runs before the schema is upgraded."
        },
        "ƒ:prep_atom_text_construct": {
                "prefix": [
                        "prep_atom_text_construct",
                        "patc"
                ],
                "body": "prep_atom_text_construct(${1:\\$data:string} )",
                "description": "Determine the type of a string of data with the data formatted."
        },
        "ƒ:prepend_attachment": {
                "prefix": [
                        "prepend_attachment",
                        "pa"
                ],
                "body": "prepend_attachment(${1:\\$content:string} )",
                "description": "Wraps attachment in paragraph tag before content."
        },
        "ƒ:prev_post_rel_link": {
                "prefix": [
                        "prev_post_rel_link",
                        "pprl"
                ],
                "body": "prev_post_rel_link(${1:\\$title:string},${2:\\$in_same_term:boolean},${3:\\$excluded_terms:array|string},${4:\\$taxonomy:string} )",
                "description": "Displays the relational link for the previous post adjacent to the current post."
        },
        "ƒ:preview_theme": {
                "prefix": [
                        "preview_theme",
                        "pt"
                ],
                "body": "preview_theme()",
                "description": "Start preview theme output buffer."
        },
        "ƒ:preview_theme_ob_filter": {
                "prefix": [
                        "preview_theme_ob_filter",
                        "ptof"
                ],
                "body": "preview_theme_ob_filter(${1:\\$content:string} )",
                "description": "Callback function for ob_start() to capture all links in the theme."
        },
        "ƒ:preview_theme_ob_filter_callback": {
                "prefix": [
                        "preview_theme_ob_filter_callback",
                        "ptofc"
                ],
                "body": "preview_theme_ob_filter_callback(${1:\\$matches:array} )",
                "description": "Manipulates preview theme links in order to control and maintain location."
        },
        "ƒ:previous_comments_link": {
                "prefix": [
                        "previous_comments_link",
                        "pcl"
                ],
                "body": "previous_comments_link(${1:\\$label:string} )",
                "description": "Displays the link to the previous comments page."
        },
        "ƒ:previous_image_link": {
                "prefix": [
                        "previous_image_link",
                        "pil"
                ],
                "body": "previous_image_link(${1:\\$size:string|array},${2:\\$text:string|false} )",
                "description": "Displays previous image link that has the same post parent."
        },
        "ƒ:previous_post": {
                "prefix": [
                        "previous_post",
                        "pp"
                ],
                "body": "previous_post(${1:\\$format:string},${2:\\$previous:string},${3:\\$title:string},${4:\\$in_same_cat:string},${5:\\$limitprev:integer},${6:\\$excluded_categories:string} )",
                "description": "Prints a link to the previous post."
        },
        "ƒ:previous_post_link": {
                "prefix": [
                        "previous_post_link",
                        "ppl"
                ],
                "body": "previous_post_link(${1:\\$format:string},${2:\\$link:string},${3:\\$in_same_term:boolean},${4:\\$excluded_terms:array|string},${5:\\$taxonomy:string} )",
                "description": "Displays the previous post link that is adjacent to the current post."
        },
        "ƒ:previous_posts": {
                "prefix": [
                        "previous_posts",
                        "pp"
                ],
                "body": "previous_posts(${1:\\$echo:boolean} )",
                "description": "Displays or retrieves the previous posts page link."
        },
        "ƒ:previous_posts_link": {
                "prefix": [
                        "previous_posts_link",
                        "ppl"
                ],
                "body": "previous_posts_link(${1:\\$label:string|null} )",
                "description": "Displays the previous posts page link."
        },
        "ƒ:print_admin_styles": {
                "prefix": [
                        "print_admin_styles",
                        "pas"
                ],
                "body": "print_admin_styles()",
                "description": "Prints the styles queue in the HTML head on admin pages."
        },
        "ƒ:print_column_headers": {
                "prefix": [
                        "print_column_headers",
                        "pch"
                ],
                "body": "print_column_headers(${1:\\$screen:string|WP_Screen},${2:\\$with_id:boolean} )",
                "description": "Prints column headers for a particular screen."
        },
        "ƒ:print_embed_comments_button": {
                "prefix": [
                        "print_embed_comments_button",
                        "pecb"
                ],
                "body": "print_embed_comments_button()",
                "description": "Prints the necessary markup for the embed comments button."
        },
        "ƒ:print_embed_scripts": {
                "prefix": [
                        "print_embed_scripts",
                        "pes"
                ],
                "body": "print_embed_scripts()",
                "description": "Prints the JavaScript in the embed iframe header."
        },
        "ƒ:print_embed_sharing_button": {
                "prefix": [
                        "print_embed_sharing_button",
                        "pesb"
                ],
                "body": "print_embed_sharing_button()",
                "description": "Prints the necessary markup for the embed sharing button."
        },
        "ƒ:print_embed_sharing_dialog": {
                "prefix": [
                        "print_embed_sharing_dialog",
                        "pesd"
                ],
                "body": "print_embed_sharing_dialog()",
                "description": "Prints the necessary markup for the embed sharing dialog."
        },
        "ƒ:print_embed_styles": {
                "prefix": [
                        "print_embed_styles",
                        "pes"
                ],
                "body": "print_embed_styles()",
                "description": "Prints the CSS in the embed iframe header."
        },
        "ƒ:print_emoji_detection_script": {
                "prefix": [
                        "print_emoji_detection_script",
                        "peds"
                ],
                "body": "print_emoji_detection_script()",
                "description": "Prints the inline Emoji detection script if it is not already printed."
        },
        "ƒ:print_emoji_styles": {
                "prefix": [
                        "print_emoji_styles",
                        "pes"
                ],
                "body": "print_emoji_styles()",
                "description": "Prints the important emoji-related styles."
        },
        "ƒ:print_footer_scripts": {
                "prefix": [
                        "print_footer_scripts",
                        "pfs"
                ],
                "body": "print_footer_scripts()",
                "description": "Prints the scripts that were queued for the footer or too late for the HTML head."
        },
        "ƒ:print_head_scripts": {
                "prefix": [
                        "print_head_scripts",
                        "phs"
                ],
                "body": "print_head_scripts()",
                "description": "Prints the script queue in the HTML head on admin pages."
        },
        "ƒ:print_late_styles": {
                "prefix": [
                        "print_late_styles",
                        "pls"
                ],
                "body": "print_late_styles()",
                "description": "Prints the styles that were queued too late for the HTML head."
        },
        "ƒ:privacy_ping_filter": {
                "prefix": [
                        "privacy_ping_filter",
                        "ppf"
                ],
                "body": "privacy_ping_filter(${1:\\$sites:mixed} )",
                "description": "Checks whether blog is public before returning sites."
        },
        "ƒ:query_posts": {
                "prefix": [
                        "query_posts",
                        "qp"
                ],
                "body": "query_posts(${1:\\$query:array|string} )",
                "description": "Sets up The Loop with query parameters."
        },
        "ƒ:random_bytes": {
                "prefix": [
                        "random_bytes",
                        "rb"
                ],
                "body": "random_bytes(${1:\\$bytes:integer} )",
                "description": "If the libsodium PHP extension is loaded, we&#039;ll use it above any other solution."
        },
        "ƒ:random_int": {
                "prefix": [
                        "random_int",
                        "ri"
                ],
                "body": "random_int(${1:\\$min:integer},${2:\\$max:integer} )",
                "description": "Fetch a random integer between $min and $max inclusive"
        },
        "ƒ:RandomCompat_intval": {
                "prefix": [
                        "RandomCompat_intval",
                        "Ri"
                ],
                "body": "RandomCompat_intval(${1:\\$number:integer|float},${2:\\$fail_open:boolean} )",
                "description": "Cast to an integer if we can, safely."
        },
        "ƒ:RandomCompat_strlen": {
                "prefix": [
                        "RandomCompat_strlen",
                        "Rs"
                ],
                "body": "RandomCompat_strlen(${1:\\$binary_string:string} )",
                "description": "strlen() implementation that isn&#039;t brittle to mbstring.func_overload"
        },
        "ƒ:RandomCompat_substr": {
                "prefix": [
                        "RandomCompat_substr",
                        "Rs"
                ],
                "body": "RandomCompat_substr(${1:\\$binary_string:string},${2:\\$start:integer},${3:\\$length:integer|null} )",
                "description": "substr() implementation that isn&#039;t brittle to mbstring.func_overload"
        },
        "ƒ:rawurlencode_deep": {
                "prefix": [
                        "rawurlencode_deep",
                        "rd"
                ],
                "body": "rawurlencode_deep(${1:\\$value:mixed} )",
                "description": "Navigates through an array, object, or scalar, and raw-encodes the values to be used in a URL."
        },
        "ƒ:readonly": {
                "prefix": [
                        "readonly"
                ],
                "body": "readonly(${1:\\$readonly:mixed},${2:\\$current:mixed},${3:\\$echo:boolean} )",
                "description": "Outputs the HTML readonly attribute."
        },
        "ƒ:recurse_dirsize": {
                "prefix": [
                        "recurse_dirsize",
                        "rd"
                ],
                "body": "recurse_dirsize(${1:\\$directory:string},${2:\\$exclude:string|array|null},${3:\\$max_execution_time:integer|null},${4:\\$directory_cache:array|null} )",
                "description": "Get the size of a directory recursively."
        },
        "ƒ:redirect_canonical": {
                "prefix": [
                        "redirect_canonical",
                        "rc"
                ],
                "body": "redirect_canonical(${1:\\$requested_url:string|null},${2:\\$do_redirect:boolean} )",
                "description": "Redirects incoming links to the proper URL based on the site url."
        },
        "ƒ:redirect_guess_404_permalink": {
                "prefix": [
                        "redirect_guess_404_permalink",
                        "rg4p"
                ],
                "body": "redirect_guess_404_permalink()",
                "description": "Attempts to guess the correct URL for a 404 request based on query vars."
        },
        "ƒ:redirect_post": {
                "prefix": [
                        "redirect_post",
                        "rp"
                ],
                "body": "redirect_post(${1:\\$post_id:integer} )",
                "description": "Redirects to previous page."
        },
        "ƒ:redirect_this_site": {
                "prefix": [
                        "redirect_this_site",
                        "rts"
                ],
                "body": "redirect_this_site(${1:\\$deprecated:array|string} )",
                "description": "Ensures that the current site&#039;s domain is listed in the allowed redirect host list."
        },
        "ƒ:refresh_blog_details": {
                "prefix": [
                        "refresh_blog_details",
                        "rbd"
                ],
                "body": "refresh_blog_details(${1:\\$blog_id:integer} )",
                "description": "Clear the blog details cache."
        },
        "ƒ:refresh_user_details": {
                "prefix": [
                        "refresh_user_details",
                        "rud"
                ],
                "body": "refresh_user_details(${1:\\$id:integer} )",
                "description": "Cleans the user cache for a specific user."
        },
        "ƒ:register_activation_hook": {
                "prefix": [
                        "register_activation_hook",
                        "rah"
                ],
                "body": "register_activation_hook(${1:\\$file:string},${2:\\$callback:callable} )",
                "description": "Set the activation hook for a plugin."
        },
        "ƒ:register_admin_color_schemes": {
                "prefix": [
                        "register_admin_color_schemes",
                        "racs"
                ],
                "body": "register_admin_color_schemes()",
                "description": "Registers the default admin color schemes."
        },
        "ƒ:register_and_do_post_meta_boxes": {
                "prefix": [
                        "register_and_do_post_meta_boxes",
                        "radpmb"
                ],
                "body": "register_and_do_post_meta_boxes(${1:\\$post:WP_Post} )",
                "description": "Registers the default post meta boxes, and runs the `do_meta_boxes` actions."
        },
        "ƒ:register_block_core_archives": {
                "prefix": [
                        "register_block_core_archives",
                        "rbca"
                ],
                "body": "register_block_core_archives()",
                "description": "Register archives block."
        },
        "ƒ:register_block_core_avatar": {
                "prefix": [
                        "register_block_core_avatar",
                        "rbca"
                ],
                "body": "register_block_core_avatar()",
                "description": "Registers the `core/avatar` block on the server."
        },
        "ƒ:register_block_core_block": {
                "prefix": [
                        "register_block_core_block",
                        "rbcb"
                ],
                "body": "register_block_core_block()",
                "description": "Registers the `core/block` block."
        },
        "ƒ:register_block_core_calendar": {
                "prefix": [
                        "register_block_core_calendar",
                        "rbcc"
                ],
                "body": "register_block_core_calendar()",
                "description": "Registers the `core/calendar` block on server."
        },
        "ƒ:register_block_core_categories": {
                "prefix": [
                        "register_block_core_categories",
                        "rbcc"
                ],
                "body": "register_block_core_categories()",
                "description": "Registers the `core/categories` block on server."
        },
        "ƒ:register_block_core_comment_author_name": {
                "prefix": [
                        "register_block_core_comment_author_name",
                        "rbccan"
                ],
                "body": "register_block_core_comment_author_name()",
                "description": "Registers the `core/comment-author-name` block on the server."
        },
        "ƒ:register_block_core_comment_content": {
                "prefix": [
                        "register_block_core_comment_content",
                        "rbccc"
                ],
                "body": "register_block_core_comment_content()",
                "description": "Registers the `core/comment-content` block on the server."
        },
        "ƒ:register_block_core_comment_date": {
                "prefix": [
                        "register_block_core_comment_date",
                        "rbccd"
                ],
                "body": "register_block_core_comment_date()",
                "description": "Registers the `core/comment-date` block on the server."
        },
        "ƒ:register_block_core_comment_edit_link": {
                "prefix": [
                        "register_block_core_comment_edit_link",
                        "rbccel"
                ],
                "body": "register_block_core_comment_edit_link()",
                "description": "Registers the `core/comment-edit-link` block on the server."
        },
        "ƒ:register_block_core_comment_reply_link": {
                "prefix": [
                        "register_block_core_comment_reply_link",
                        "rbccrl"
                ],
                "body": "register_block_core_comment_reply_link()",
                "description": "Registers the `core/comment-reply-link` block on the server."
        },
        "ƒ:register_block_core_comment_template": {
                "prefix": [
                        "register_block_core_comment_template",
                        "rbcct"
                ],
                "body": "register_block_core_comment_template()",
                "description": "Registers the `core/comment-template` block on the server."
        },
        "ƒ:register_block_core_comments_pagination": {
                "prefix": [
                        "register_block_core_comments_pagination",
                        "rbccp"
                ],
                "body": "register_block_core_comments_pagination()",
                "description": "Registers the `core/comments-pagination` block on the server."
        },
        "ƒ:register_block_core_comments_pagination_next": {
                "prefix": [
                        "register_block_core_comments_pagination_next",
                        "rbccpn"
                ],
                "body": "register_block_core_comments_pagination_next()",
                "description": "Registers the `core/comments-pagination-next` block on the server."
        },
        "ƒ:register_block_core_comments_pagination_numbers": {
                "prefix": [
                        "register_block_core_comments_pagination_numbers",
                        "rbccpn"
                ],
                "body": "register_block_core_comments_pagination_numbers()",
                "description": "Registers the `core/comments-pagination-numbers` block on the server."
        },
        "ƒ:register_block_core_comments_pagination_previous": {
                "prefix": [
                        "register_block_core_comments_pagination_previous",
                        "rbccpp"
                ],
                "body": "register_block_core_comments_pagination_previous()",
                "description": "Registers the `core/comments-pagination-previous` block on the server."
        },
        "ƒ:register_block_core_comments_title": {
                "prefix": [
                        "register_block_core_comments_title",
                        "rbcct"
                ],
                "body": "register_block_core_comments_title()",
                "description": "Registers the `core/comments-title` block on the server."
        },
        "ƒ:register_block_core_cover": {
                "prefix": [
                        "register_block_core_cover",
                        "rbcc"
                ],
                "body": "register_block_core_cover()",
                "description": "Registers the `core/cover` block renderer on server."
        },
        "ƒ:register_block_core_file": {
                "prefix": [
                        "register_block_core_file",
                        "rbcf"
                ],
                "body": "register_block_core_file()",
                "description": "Registers the `core/file` block on server."
        },
        "ƒ:register_block_core_gallery": {
                "prefix": [
                        "register_block_core_gallery",
                        "rbcg"
                ],
                "body": "register_block_core_gallery()",
                "description": "Registers the `core/gallery` block on server."
        },
        "ƒ:register_block_core_home_link": {
                "prefix": [
                        "register_block_core_home_link",
                        "rbchl"
                ],
                "body": "register_block_core_home_link()",
                "description": "Register the home block"
        },
        "ƒ:register_block_core_image": {
                "prefix": [
                        "register_block_core_image",
                        "rbci"
                ],
                "body": "register_block_core_image()",
                "description": "Registers the `core/image` block on server."
        },
        "ƒ:register_block_core_latest_comments": {
                "prefix": [
                        "register_block_core_latest_comments",
                        "rbclc"
                ],
                "body": "register_block_core_latest_comments()",
                "description": "Registers the `core/latest-comments` block."
        },
        "ƒ:register_block_core_latest_posts": {
                "prefix": [
                        "register_block_core_latest_posts",
                        "rbclp"
                ],
                "body": "register_block_core_latest_posts()",
                "description": "Registers the `core/latest-posts` block on server."
        },
        "ƒ:register_block_core_legacy_widget": {
                "prefix": [
                        "register_block_core_legacy_widget",
                        "rbclw"
                ],
                "body": "register_block_core_legacy_widget()",
                "description": "Registers the &#039;core/legacy-widget&#039; block."
        },
        "ƒ:register_block_core_loginout": {
                "prefix": [
                        "register_block_core_loginout",
                        "rbcl"
                ],
                "body": "register_block_core_loginout()",
                "description": "Registers the `core/loginout` block on server."
        },
        "ƒ:register_block_core_navigation": {
                "prefix": [
                        "register_block_core_navigation",
                        "rbcn"
                ],
                "body": "register_block_core_navigation()",
                "description": "Register the navigation block."
        },
        "ƒ:register_block_core_navigation_link": {
                "prefix": [
                        "register_block_core_navigation_link",
                        "rbcnl"
                ],
                "body": "register_block_core_navigation_link()",
                "description": "Register the navigation link block."
        },
        "ƒ:register_block_core_navigation_submenu": {
                "prefix": [
                        "register_block_core_navigation_submenu",
                        "rbcns"
                ],
                "body": "register_block_core_navigation_submenu()",
                "description": "Register the navigation submenu block."
        },
        "ƒ:register_block_core_page_list": {
                "prefix": [
                        "register_block_core_page_list",
                        "rbcpl"
                ],
                "body": "register_block_core_page_list()",
                "description": "Registers the `core/pages` block on server."
        },
        "ƒ:register_block_core_pattern": {
                "prefix": [
                        "register_block_core_pattern",
                        "rbcp"
                ],
                "body": "register_block_core_pattern()",
                "description": "Registers the `core/pattern` block on the server."
        },
        "ƒ:register_block_core_post_author": {
                "prefix": [
                        "register_block_core_post_author",
                        "rbcpa"
                ],
                "body": "register_block_core_post_author()",
                "description": "Registers the `core/post-author` block on the server."
        },
        "ƒ:register_block_core_post_author_biography": {
                "prefix": [
                        "register_block_core_post_author_biography",
                        "rbcpab"
                ],
                "body": "register_block_core_post_author_biography()",
                "description": "Registers the `core/post-author-biography` block on the server."
        },
        "ƒ:register_block_core_post_comments": {
                "prefix": [
                        "register_block_core_post_comments",
                        "rbcpc"
                ],
                "body": "register_block_core_post_comments()",
                "description": "Registers the `core/post-comments` block on the server."
        },
        "ƒ:register_block_core_post_comments_form": {
                "prefix": [
                        "register_block_core_post_comments_form",
                        "rbcpcf"
                ],
                "body": "register_block_core_post_comments_form()",
                "description": "Registers the `core/post-comments-form` block on the server."
        },
        "ƒ:register_block_core_post_content": {
                "prefix": [
                        "register_block_core_post_content",
                        "rbcpc"
                ],
                "body": "register_block_core_post_content()",
                "description": "Registers the `core/post-content` block on the server."
        },
        "ƒ:register_block_core_post_date": {
                "prefix": [
                        "register_block_core_post_date",
                        "rbcpd"
                ],
                "body": "register_block_core_post_date()",
                "description": "Registers the `core/post-date` block on the server."
        },
        "ƒ:register_block_core_post_excerpt": {
                "prefix": [
                        "register_block_core_post_excerpt",
                        "rbcpe"
                ],
                "body": "register_block_core_post_excerpt()",
                "description": "Registers the `core/post-excerpt` block on the server."
        },
        "ƒ:register_block_core_post_featured_image": {
                "prefix": [
                        "register_block_core_post_featured_image",
                        "rbcpfi"
                ],
                "body": "register_block_core_post_featured_image()",
                "description": "Registers the `core/post-featured-image` block on the server."
        },
        "ƒ:register_block_core_post_navigation_link": {
                "prefix": [
                        "register_block_core_post_navigation_link",
                        "rbcpnl"
                ],
                "body": "register_block_core_post_navigation_link()",
                "description": "Registers the `core/post-navigation-link` block on the server."
        },
        "ƒ:register_block_core_post_template": {
                "prefix": [
                        "register_block_core_post_template",
                        "rbcpt"
                ],
                "body": "register_block_core_post_template()",
                "description": "Registers the `core/post-template` block on the server."
        },
        "ƒ:register_block_core_post_terms": {
                "prefix": [
                        "register_block_core_post_terms",
                        "rbcpt"
                ],
                "body": "register_block_core_post_terms()",
                "description": "Registers the `core/post-terms` block on the server."
        },
        "ƒ:register_block_core_post_title": {
                "prefix": [
                        "register_block_core_post_title",
                        "rbcpt"
                ],
                "body": "register_block_core_post_title()",
                "description": "Registers the `core/post-title` block on the server."
        },
        "ƒ:register_block_core_query": {
                "prefix": [
                        "register_block_core_query",
                        "rbcq"
                ],
                "body": "register_block_core_query()",
                "description": "Registers the `core/query` block on the server."
        },
        "ƒ:register_block_core_query_no_results": {
                "prefix": [
                        "register_block_core_query_no_results",
                        "rbcqnr"
                ],
                "body": "register_block_core_query_no_results()",
                "description": "Registers the `core/query-no-results` block on the server."
        },
        "ƒ:register_block_core_query_pagination": {
                "prefix": [
                        "register_block_core_query_pagination",
                        "rbcqp"
                ],
                "body": "register_block_core_query_pagination()",
                "description": "Registers the `core/query-pagination` block on the server."
        },
        "ƒ:register_block_core_query_pagination_next": {
                "prefix": [
                        "register_block_core_query_pagination_next",
                        "rbcqpn"
                ],
                "body": "register_block_core_query_pagination_next()",
                "description": "Registers the `core/query-pagination-next` block on the server."
        },
        "ƒ:register_block_core_query_pagination_numbers": {
                "prefix": [
                        "register_block_core_query_pagination_numbers",
                        "rbcqpn"
                ],
                "body": "register_block_core_query_pagination_numbers()",
                "description": "Registers the `core/query-pagination-numbers` block on the server."
        },
        "ƒ:register_block_core_query_pagination_previous": {
                "prefix": [
                        "register_block_core_query_pagination_previous",
                        "rbcqpp"
                ],
                "body": "register_block_core_query_pagination_previous()",
                "description": "Registers the `core/query-pagination-previous` block on the server."
        },
        "ƒ:register_block_core_query_title": {
                "prefix": [
                        "register_block_core_query_title",
                        "rbcqt"
                ],
                "body": "register_block_core_query_title()",
                "description": "Registers the `core/query-title` block on the server."
        },
        "ƒ:register_block_core_read_more": {
                "prefix": [
                        "register_block_core_read_more",
                        "rbcrm"
                ],
                "body": "register_block_core_read_more()",
                "description": "Registers the `core/read-more` block on the server."
        },
        "ƒ:register_block_core_rss": {
                "prefix": [
                        "register_block_core_rss",
                        "rbcr"
                ],
                "body": "register_block_core_rss()",
                "description": "Registers the `core/rss` block on server."
        },
        "ƒ:register_block_core_search": {
                "prefix": [
                        "register_block_core_search",
                        "rbcs"
                ],
                "body": "register_block_core_search()",
                "description": "Registers the `core/search` block on the server."
        },
        "ƒ:register_block_core_shortcode": {
                "prefix": [
                        "register_block_core_shortcode",
                        "rbcs"
                ],
                "body": "register_block_core_shortcode()",
                "description": "Registers the `core/shortcode` block on server."
        },
        "ƒ:register_block_core_site_icon_setting": {
                "prefix": [
                        "register_block_core_site_icon_setting",
                        "rbcsis"
                ],
                "body": "register_block_core_site_icon_setting()",
                "description": "Register a core site setting for a site icon"
        },
        "ƒ:register_block_core_site_logo": {
                "prefix": [
                        "register_block_core_site_logo",
                        "rbcsl"
                ],
                "body": "register_block_core_site_logo()",
                "description": "Registers the `core/site-logo` block on the server."
        },
        "ƒ:register_block_core_site_logo_setting": {
                "prefix": [
                        "register_block_core_site_logo_setting",
                        "rbcsls"
                ],
                "body": "register_block_core_site_logo_setting()",
                "description": "Register a core site setting for a site logo"
        },
        "ƒ:register_block_core_site_tagline": {
                "prefix": [
                        "register_block_core_site_tagline",
                        "rbcst"
                ],
                "body": "register_block_core_site_tagline()",
                "description": "Registers the `core/site-tagline` block on the server."
        },
        "ƒ:register_block_core_site_title": {
                "prefix": [
                        "register_block_core_site_title",
                        "rbcst"
                ],
                "body": "register_block_core_site_title()",
                "description": "Registers the `core/site-title` block on the server."
        },
        "ƒ:register_block_core_social_link": {
                "prefix": [
                        "register_block_core_social_link",
                        "rbcsl"
                ],
                "body": "register_block_core_social_link()",
                "description": "Registers the `core/social-link` blocks."
        },
        "ƒ:register_block_core_tag_cloud": {
                "prefix": [
                        "register_block_core_tag_cloud",
                        "rbctc"
                ],
                "body": "register_block_core_tag_cloud()",
                "description": "Registers the `core/tag-cloud` block on server."
        },
        "ƒ:register_block_core_template_part": {
                "prefix": [
                        "register_block_core_template_part",
                        "rbctp"
                ],
                "body": "register_block_core_template_part()",
                "description": "Registers the `core/template-part` block on the server."
        },
        "ƒ:register_block_core_term_description": {
                "prefix": [
                        "register_block_core_term_description",
                        "rbctd"
                ],
                "body": "register_block_core_term_description()",
                "description": "Registers the `core/term-description` block on the server."
        },
        "ƒ:register_block_core_widget_group": {
                "prefix": [
                        "register_block_core_widget_group",
                        "rbcwg"
                ],
                "body": "register_block_core_widget_group()",
                "description": "Registers the &#039;core/widget-group&#039; block."
        },
        "ƒ:register_block_pattern": {
                "prefix": [
                        "register_block_pattern",
                        "rbp"
                ],
                "body": "register_block_pattern(${1:\\$pattern_name:string},${2:\\$pattern_properties:array} )",
                "description": "Registers a new block pattern."
        },
        "ƒ:register_block_pattern_category": {
                "prefix": [
                        "register_block_pattern_category",
                        "rbpc"
                ],
                "body": "register_block_pattern_category(${1:\\$category_name:string},${2:\\$category_properties:array} )",
                "description": "Registers a new pattern category."
        },
        "ƒ:register_block_script_handle": {
                "prefix": [
                        "register_block_script_handle",
                        "rbsh"
                ],
                "body": "register_block_script_handle(${1:\\$metadata:array},${2:\\$field_name:string} )",
                "description": "Finds a script handle for the selected block metadata field. It detects when a path to file was provided and finds a corresponding asset file with details necessary to register the script under automatically generated handle name. It returns unprocessed script handle otherwise."
        },
        "ƒ:register_block_style": {
                "prefix": [
                        "register_block_style",
                        "rbs"
                ],
                "body": "register_block_style(${1:\\$block_name:string},${2:\\$style_properties:array} )",
                "description": "Registers a new block style."
        },
        "ƒ:register_block_style_handle": {
                "prefix": [
                        "register_block_style_handle",
                        "rbsh"
                ],
                "body": "register_block_style_handle(${1:\\$metadata:array},${2:\\$field_name:string} )",
                "description": "Finds a style handle for the block metadata field. It detects when a path to file was provided and registers the style under automatically generated handle name. It returns unprocessed style handle otherwise."
        },
        "ƒ:register_block_type": {
                "prefix": [
                        "register_block_type",
                        "rbt"
                ],
                "body": "register_block_type(${1:\\$block_type:string|WP_Block_Type},${2:\\$args:array} )",
                "description": "Registers a block type. The recommended way is to register a block type using the metadata stored in the `block.json` file."
        },
        "ƒ:register_block_type_from_metadata": {
                "prefix": [
                        "register_block_type_from_metadata",
                        "rbtfm"
                ],
                "body": "register_block_type_from_metadata(${1:\\$file_or_folder:string},${2:\\$args:array} )",
                "description": "Registers a block type from the metadata stored in the `block.json` file."
        },
        "ƒ:register_column_headers": {
                "prefix": [
                        "register_column_headers",
                        "rch"
                ],
                "body": "register_column_headers(${1:\\$screen:string},${2:\\$columns:array} )",
                "description": "Register column headers for a particular screen."
        },
        "ƒ:register_core_block_types_from_metadata": {
                "prefix": [
                        "register_core_block_types_from_metadata",
                        "rcbtfm"
                ],
                "body": "register_core_block_types_from_metadata()",
                "description": "Registers core block types using metadata files."
        },
        "ƒ:register_deactivation_hook": {
                "prefix": [
                        "register_deactivation_hook",
                        "rdh"
                ],
                "body": "register_deactivation_hook(${1:\\$file:string},${2:\\$callback:callable} )",
                "description": "Sets the deactivation hook for a plugin."
        },
        "ƒ:register_default_headers": {
                "prefix": [
                        "register_default_headers",
                        "rdh"
                ],
                "body": "register_default_headers(${1:\\$headers:array} )",
                "description": "Registers a selection of default headers to be displayed by the custom header admin UI."
        },
        "ƒ:register_importer": {
                "prefix": [
                        "register_importer",
                        "ri"
                ],
                "body": "register_importer(${1:\\$id:string},${2:\\$name:string},${3:\\$description:string},${4:\\$callback:callable} )",
                "description": "Register importer for WordPress."
        },
        "ƒ:register_initial_settings": {
                "prefix": [
                        "register_initial_settings",
                        "ris"
                ],
                "body": "register_initial_settings()",
                "description": "Registers default settings available in WordPress."
        },
        "ƒ:register_meta": {
                "prefix": [
                        "register_meta",
                        "rm"
                ],
                "body": "register_meta(${1:\\$object_type:string},${2:\\$meta_key:string},${3:\\$args:array},${4:\\$deprecated:string|array|null} )",
                "description": "Registers a meta key."
        },
        "ƒ:register_nav_menu": {
                "prefix": [
                        "register_nav_menu",
                        "rnm"
                ],
                "body": "register_nav_menu(${1:\\$location:string},${2:\\$description:string} )",
                "description": "Registers a navigation menu location for a theme."
        },
        "ƒ:register_nav_menus": {
                "prefix": [
                        "register_nav_menus",
                        "rnm"
                ],
                "body": "register_nav_menus(${1:\\$locations:array} )",
                "description": "Registers navigation menu locations for a theme."
        },
        "ƒ:register_new_user": {
                "prefix": [
                        "register_new_user",
                        "rnu"
                ],
                "body": "register_new_user(${1:\\$user_login:string},${2:\\$user_email:string} )",
                "description": "Handles registering a new user."
        },
        "ƒ:register_post_meta": {
                "prefix": [
                        "register_post_meta",
                        "rpm"
                ],
                "body": "register_post_meta(${1:\\$post_type:string},${2:\\$meta_key:string},${3:\\$args:array} )",
                "description": "Registers a meta key for posts."
        },
        "ƒ:register_post_status": {
                "prefix": [
                        "register_post_status",
                        "rps"
                ],
                "body": "register_post_status(${1:\\$post_status:string},${2:\\$args:array|string} )",
                "description": "Register a post status. Do not use before init."
        },
        "ƒ:register_post_type": {
                "prefix": [
                        "register_post_type",
                        "rpt"
                ],
                "body": "register_post_type(${1:\\$post_type:string},${2:\\$args:array|string} )",
                "description": "Registers a post type."
        },
        "ƒ:register_rest_field": {
                "prefix": [
                        "register_rest_field",
                        "rrf"
                ],
                "body": "register_rest_field(${1:\\$object_type:string|array},${2:\\$attribute:string},${3:\\$args:array} )",
                "description": "Registers a new field on an existing WordPress object type."
        },
        "ƒ:register_rest_route": {
                "prefix": [
                        "register_rest_route",
                        "rrr"
                ],
                "body": "register_rest_route(${1:\\$namespace:string},${2:\\$route:string},${3:\\$args:array},${4:\\$override:boolean} )",
                "description": "Registers a REST API route."
        },
        "ƒ:register_setting": {
                "prefix": [
                        "register_setting",
                        "rs"
                ],
                "body": "register_setting(${1:\\$option_group:string},${2:\\$option_name:string},${3:\\$args:array} )",
                "description": "Registers a setting and its data."
        },
        "ƒ:register_sidebar": {
                "prefix": [
                        "register_sidebar",
                        "rs"
                ],
                "body": "register_sidebar(${1:\\$args:array|string} )",
                "description": "Builds the definition for a single sidebar and returns the ID."
        },
        "ƒ:register_sidebar_widget": {
                "prefix": [
                        "register_sidebar_widget",
                        "rsw"
                ],
                "body": "register_sidebar_widget(${1:\\$name:string|integer},${2:\\$output_callback:callable},${3:\\$classname:string},${4:\\$params:mixed} )",
                "description": "Register widget for sidebar with backward compatibility."
        },
        "ƒ:register_sidebars": {
                "prefix": [
                        "register_sidebars",
                        "rs"
                ],
                "body": "register_sidebars(${1:\\$number:integer},${2:\\$args:array|string} )",
                "description": "Creates multiple sidebars."
        },
        "ƒ:register_taxonomy": {
                "prefix": [
                        "register_taxonomy",
                        "rt"
                ],
                "body": "register_taxonomy(${1:\\$taxonomy:string},${2:\\$object_type:array|string},${3:\\$args:array|string} )",
                "description": "Creates or modifies a taxonomy object."
        },
        "ƒ:register_taxonomy_for_object_type": {
                "prefix": [
                        "register_taxonomy_for_object_type",
                        "rtfot"
                ],
                "body": "register_taxonomy_for_object_type(${1:\\$taxonomy:string},${2:\\$object_type:string} )",
                "description": "Adds an already registered taxonomy to an object type."
        },
        "ƒ:register_term_meta": {
                "prefix": [
                        "register_term_meta",
                        "rtm"
                ],
                "body": "register_term_meta(${1:\\$taxonomy:string},${2:\\$meta_key:string},${3:\\$args:array} )",
                "description": "Registers a meta key for terms."
        },
        "ƒ:register_theme_directory": {
                "prefix": [
                        "register_theme_directory",
                        "rtd"
                ],
                "body": "register_theme_directory(${1:\\$directory:string} )",
                "description": "Registers a directory that contains themes."
        },
        "ƒ:register_theme_feature": {
                "prefix": [
                        "register_theme_feature",
                        "rtf"
                ],
                "body": "register_theme_feature(${1:\\$feature:string},${2:\\$args:array} )",
                "description": "Registers a theme feature for use in add_theme_support()."
        },
        "ƒ:register_uninstall_hook": {
                "prefix": [
                        "register_uninstall_hook",
                        "ruh"
                ],
                "body": "register_uninstall_hook(${1:\\$file:string},${2:\\$callback:callable} )",
                "description": "Sets the uninstallation hook for a plugin."
        },
        "ƒ:register_widget": {
                "prefix": [
                        "register_widget",
                        "rw"
                ],
                "body": "register_widget(${1:\\$widget:string|WP_Widget} )",
                "description": "Register a widget"
        },
        "ƒ:register_widget_control": {
                "prefix": [
                        "register_widget_control",
                        "rwc"
                ],
                "body": "register_widget_control(${1:\\$name:integer|string},${2:\\$control_callback:callable},${3:\\$width:integer},${4:\\$height:integer},${5:\\$params:mixed} )",
                "description": "Registers widget control callback for customizing options."
        },
        "ƒ:registered_meta_key_exists": {
                "prefix": [
                        "registered_meta_key_exists",
                        "rmke"
                ],
                "body": "registered_meta_key_exists(${1:\\$object_type:string},${2:\\$meta_key:string},${3:\\$object_subtype:string} )",
                "description": "Checks if a meta key is registered."
        },
        "ƒ:rel_canonical": {
                "prefix": [
                        "rel_canonical",
                        "rc"
                ],
                "body": "rel_canonical()",
                "description": "Outputs rel=canonical for singular queries."
        },
        "ƒ:remove_accents": {
                "prefix": [
                        "remove_accents",
                        "ra"
                ],
                "body": "remove_accents(${1:\\$string:string},${2:\\$locale:string} )",
                "description": "Converts all accent characters to ASCII characters."
        },
        "ƒ:remove_action": {
                "prefix": [
                        "remove_action",
                        "ra"
                ],
                "body": "remove_action(${1:\\$hook_name:string},${2:\\$callback:callable|string|array},${3:\\$priority:integer} )",
                "description": "Removes a callback function from an action hook."
        },
        "ƒ:remove_all_actions": {
                "prefix": [
                        "remove_all_actions",
                        "raa"
                ],
                "body": "remove_all_actions(${1:\\$hook_name:string},${2:\\$priority:integer|false} )",
                "description": "Removes all of the callback functions from an action hook."
        },
        "ƒ:remove_all_filters": {
                "prefix": [
                        "remove_all_filters",
                        "raf"
                ],
                "body": "remove_all_filters(${1:\\$hook_name:string},${2:\\$priority:integer|false} )",
                "description": "Removes all of the callback functions from a filter hook."
        },
        "ƒ:remove_all_shortcodes": {
                "prefix": [
                        "remove_all_shortcodes",
                        "ras"
                ],
                "body": "remove_all_shortcodes()",
                "description": "Clear all shortcodes."
        },
        "ƒ:remove_allowed_options": {
                "prefix": [
                        "remove_allowed_options",
                        "rao"
                ],
                "body": "remove_allowed_options(${1:\\$del_options:array},${2:\\$options:string|array} )",
                "description": "Removes a list of options from the allowed options list."
        },
        "ƒ:remove_block_asset_path_prefix": {
                "prefix": [
                        "remove_block_asset_path_prefix",
                        "rbapp"
                ],
                "body": "remove_block_asset_path_prefix(${1:\\$asset_handle_or_path:string} )",
                "description": "Removes the block asset&#039;s path prefix if provided."
        },
        "ƒ:remove_custom_background": {
                "prefix": [
                        "remove_custom_background",
                        "rcb"
                ],
                "body": "remove_custom_background()",
                "description": "Remove custom background support."
        },
        "ƒ:remove_custom_image_header": {
                "prefix": [
                        "remove_custom_image_header",
                        "rcih"
                ],
                "body": "remove_custom_image_header()",
                "description": "Remove image header support."
        },
        "ƒ:remove_editor_styles": {
                "prefix": [
                        "remove_editor_styles",
                        "res"
                ],
                "body": "remove_editor_styles()",
                "description": "Removes all visual editor stylesheets."
        },
        "ƒ:remove_filter": {
                "prefix": [
                        "remove_filter",
                        "rf"
                ],
                "body": "remove_filter(${1:\\$hook_name:string},${2:\\$callback:callable|string|array},${3:\\$priority:integer} )",
                "description": "Removes a callback function from a filter hook."
        },
        "ƒ:remove_image_size": {
                "prefix": [
                        "remove_image_size",
                        "ris"
                ],
                "body": "remove_image_size(${1:\\$name:string} )",
                "description": "Remove a new image size."
        },
        "ƒ:remove_menu_page": {
                "prefix": [
                        "remove_menu_page",
                        "rmp"
                ],
                "body": "remove_menu_page(${1:\\$menu_slug:string} )",
                "description": "Removes a top-level admin menu."
        },
        "ƒ:remove_meta_box": {
                "prefix": [
                        "remove_meta_box",
                        "rmb"
                ],
                "body": "remove_meta_box(${1:\\$id:string},${2:\\$screen:string|array|WP_Screen},${3:\\$context:string} )",
                "description": "Removes a meta box from one or more screens."
        },
        "ƒ:remove_option_update_handler": {
                "prefix": [
                        "remove_option_update_handler",
                        "rouh"
                ],
                "body": "remove_option_update_handler(${1:\\$option_group:string},${2:\\$option_name:string},${3:\\$sanitize_callback:callable} )",
                "description": "Unregister a setting"
        },
        "ƒ:remove_option_whitelist": {
                "prefix": [
                        "remove_option_whitelist",
                        "row"
                ],
                "body": "remove_option_whitelist(${1:\\$del_options:array},${2:\\$options:string|array} )",
                "description": "Removes a list of options from the allowed options list."
        },
        "ƒ:remove_permastruct": {
                "prefix": [
                        "remove_permastruct",
                        "rp"
                ],
                "body": "remove_permastruct(${1:\\$name:string} )",
                "description": "Removes a permalink structure."
        },
        "ƒ:remove_post_type_support": {
                "prefix": [
                        "remove_post_type_support",
                        "rpts"
                ],
                "body": "remove_post_type_support(${1:\\$post_type:string},${2:\\$feature:string} )",
                "description": "Remove support for a feature from a post type."
        },
        "ƒ:remove_query_arg": {
                "prefix": [
                        "remove_query_arg",
                        "rqa"
                ],
                "body": "remove_query_arg(${1:\\$key:string|array},${2:\\$query:false|string} )",
                "description": "Removes an item or items from a query string."
        },
        "ƒ:remove_rewrite_tag": {
                "prefix": [
                        "remove_rewrite_tag",
                        "rrt"
                ],
                "body": "remove_rewrite_tag(${1:\\$tag:string} )",
                "description": "Removes an existing rewrite tag (like %postname%)."
        },
        "ƒ:remove_role": {
                "prefix": [
                        "remove_role",
                        "rr"
                ],
                "body": "remove_role(${1:\\$role:string} )",
                "description": "Removes a role, if it exists."
        },
        "ƒ:remove_shortcode": {
                "prefix": [
                        "remove_shortcode",
                        "rs"
                ],
                "body": "remove_shortcode(${1:\\$tag:string} )",
                "description": "Removes hook for shortcode."
        },
        "ƒ:remove_submenu_page": {
                "prefix": [
                        "remove_submenu_page",
                        "rsp"
                ],
                "body": "remove_submenu_page(${1:\\$menu_slug:string},${2:\\$submenu_slug:string} )",
                "description": "Removes an admin submenu."
        },
        "ƒ:remove_theme_mod": {
                "prefix": [
                        "remove_theme_mod",
                        "rtm"
                ],
                "body": "remove_theme_mod(${1:\\$name:string} )",
                "description": "Removes theme modification name from active theme list."
        },
        "ƒ:remove_theme_mods": {
                "prefix": [
                        "remove_theme_mods",
                        "rtm"
                ],
                "body": "remove_theme_mods()",
                "description": "Removes theme modifications option for the active theme."
        },
        "ƒ:remove_theme_support": {
                "prefix": [
                        "remove_theme_support",
                        "rts"
                ],
                "body": "remove_theme_support(${1:\\$feature:string} )",
                "description": "Allows a theme to de-register its support of a certain feature"
        },
        "ƒ:remove_user_from_blog": {
                "prefix": [
                        "remove_user_from_blog",
                        "rufb"
                ],
                "body": "remove_user_from_blog(${1:\\$user_id:integer},${2:\\$blog_id:integer},${3:\\$reassign:integer} )",
                "description": "Removes a user from a blog."
        },
        "ƒ:render_block": {
                "prefix": [
                        "render_block",
                        "rb"
                ],
                "body": "render_block(${1:\\$parsed_block:array} )",
                "description": "Renders a single block into a HTML string."
        },
        "ƒ:render_block_core_archives": {
                "prefix": [
                        "render_block_core_archives",
                        "rbca"
                ],
                "body": "render_block_core_archives(${1:\\$attributes:array} )",
                "description": "Renders the `core/archives` block on server."
        },
        "ƒ:render_block_core_avatar": {
                "prefix": [
                        "render_block_core_avatar",
                        "rbca"
                ],
                "body": "render_block_core_avatar(${1:\\$attributes:array},${2:\\$content:string},${3:\\$block:WP_Block} )",
                "description": "Renders the `core/avatar` block on the server."
        },
        "ƒ:render_block_core_block": {
                "prefix": [
                        "render_block_core_block",
                        "rbcb"
                ],
                "body": "render_block_core_block(${1:\\$attributes:array} )",
                "description": "Renders the `core/block` block on server."
        },
        "ƒ:render_block_core_calendar": {
                "prefix": [
                        "render_block_core_calendar",
                        "rbcc"
                ],
                "body": "render_block_core_calendar(${1:\\$attributes:array} )",
                "description": "Renders the `core/calendar` block on server."
        },
        "ƒ:render_block_core_categories": {
                "prefix": [
                        "render_block_core_categories",
                        "rbcc"
                ],
                "body": "render_block_core_categories(${1:\\$attributes:array} )",
                "description": "Renders the `core/categories` block on server."
        },
        "ƒ:render_block_core_comment_author_name": {
                "prefix": [
                        "render_block_core_comment_author_name",
                        "rbccan"
                ],
                "body": "render_block_core_comment_author_name(${1:\\$attributes:array},${2:\\$content:string},${3:\\$block:WP_Block} )",
                "description": "Renders the `core/comment-author-name` block on the server."
        },
        "ƒ:render_block_core_comment_content": {
                "prefix": [
                        "render_block_core_comment_content",
                        "rbccc"
                ],
                "body": "render_block_core_comment_content(${1:\\$attributes:array},${2:\\$content:string},${3:\\$block:WP_Block} )",
                "description": "Renders the `core/comment-content` block on the server."
        },
        "ƒ:render_block_core_comment_date": {
                "prefix": [
                        "render_block_core_comment_date",
                        "rbccd"
                ],
                "body": "render_block_core_comment_date(${1:\\$attributes:array},${2:\\$content:string},${3:\\$block:WP_Block} )",
                "description": "Renders the `core/comment-date` block on the server."
        },
        "ƒ:render_block_core_comment_edit_link": {
                "prefix": [
                        "render_block_core_comment_edit_link",
                        "rbccel"
                ],
                "body": "render_block_core_comment_edit_link(${1:\\$attributes:array},${2:\\$content:string},${3:\\$block:WP_Block} )",
                "description": "Renders the `core/comment-edit-link` block on the server."
        },
        "ƒ:render_block_core_comment_reply_link": {
                "prefix": [
                        "render_block_core_comment_reply_link",
                        "rbccrl"
                ],
                "body": "render_block_core_comment_reply_link(${1:\\$attributes:array},${2:\\$content:string},${3:\\$block:WP_Block} )",
                "description": "Renders the `core/comment-reply-link` block on the server."
        },
        "ƒ:render_block_core_comment_template": {
                "prefix": [
                        "render_block_core_comment_template",
                        "rbcct"
                ],
                "body": "render_block_core_comment_template(${1:\\$attributes:array},${2:\\$content:string},${3:\\$block:WP_Block} )",
                "description": "Renders the `core/comment-template` block on the server."
        },
        "ƒ:render_block_core_comments_pagination": {
                "prefix": [
                        "render_block_core_comments_pagination",
                        "rbccp"
                ],
                "body": "render_block_core_comments_pagination(${1:\\$attributes:array},${2:\\$content:string} )",
                "description": "Renders the `core/comments-pagination` block on the server."
        },
        "ƒ:render_block_core_comments_pagination_next": {
                "prefix": [
                        "render_block_core_comments_pagination_next",
                        "rbccpn"
                ],
                "body": "render_block_core_comments_pagination_next(${1:\\$attributes:array},${2:\\$content:string},${3:\\$block:WP_Block} )",
                "description": "Renders the `core/comments-pagination-next` block on the server."
        },
        "ƒ:render_block_core_comments_pagination_numbers": {
                "prefix": [
                        "render_block_core_comments_pagination_numbers",
                        "rbccpn"
                ],
                "body": "render_block_core_comments_pagination_numbers(${1:\\$attributes:array},${2:\\$content:string},${3:\\$block:WP_Block} )",
                "description": "Renders the `core/comments-pagination-numbers` block on the server."
        },
        "ƒ:render_block_core_comments_pagination_previous": {
                "prefix": [
                        "render_block_core_comments_pagination_previous",
                        "rbccpp"
                ],
                "body": "render_block_core_comments_pagination_previous(${1:\\$attributes:array},${2:\\$content:string},${3:\\$block:WP_Block} )",
                "description": "Renders the `core/comments-pagination-previous` block on the server."
        },
        "ƒ:render_block_core_comments_title": {
                "prefix": [
                        "render_block_core_comments_title",
                        "rbcct"
                ],
                "body": "render_block_core_comments_title(${1:\\$attributes:array} )",
                "description": "Renders the `core/comments-title` block on the server."
        },
        "ƒ:render_block_core_cover": {
                "prefix": [
                        "render_block_core_cover",
                        "rbcc"
                ],
                "body": "render_block_core_cover(${1:\\$attributes:array},${2:\\$content:array} )",
                "description": "Renders the `core/cover` block on server."
        },
        "ƒ:render_block_core_file": {
                "prefix": [
                        "render_block_core_file",
                        "rbcf"
                ],
                "body": "render_block_core_file(${1:\\$attributes:array},${2:\\$content:string} )",
                "description": "When the `core/file` block is rendering, check if we need to enqueue the `&#039;wp-block-file-view` script."
        },
        "ƒ:render_block_core_home_link": {
                "prefix": [
                        "render_block_core_home_link",
                        "rbchl"
                ],
                "body": "render_block_core_home_link(${1:\\$attributes:array},${2:\\$content:string},${3:\\$block:WP_Block} )",
                "description": "Renders the `core/home-link` block."
        },
        "ƒ:render_block_core_image": {
                "prefix": [
                        "render_block_core_image",
                        "rbci"
                ],
                "body": "render_block_core_image(${1:\\$attributes:array},${2:\\$content:string} )",
                "description": "Renders the `core/image` block on the server, adding a data-id attribute to the element if core/gallery has added on pre-render."
        },
        "ƒ:render_block_core_latest_comments": {
                "prefix": [
                        "render_block_core_latest_comments",
                        "rbclc"
                ],
                "body": "render_block_core_latest_comments(${1:\\$attributes:array} )",
                "description": "Renders the `core/latest-comments` block on server."
        },
        "ƒ:render_block_core_latest_posts": {
                "prefix": [
                        "render_block_core_latest_posts",
                        "rbclp"
                ],
                "body": "render_block_core_latest_posts(${1:\\$attributes:array} )",
                "description": "Renders the `core/latest-posts` block on server."
        },
        "ƒ:render_block_core_legacy_widget": {
                "prefix": [
                        "render_block_core_legacy_widget",
                        "rbclw"
                ],
                "body": "render_block_core_legacy_widget(${1:\\$attributes:array} )",
                "description": "Renders the &#039;core/legacy-widget&#039; block."
        },
        "ƒ:render_block_core_loginout": {
                "prefix": [
                        "render_block_core_loginout",
                        "rbcl"
                ],
                "body": "render_block_core_loginout(${1:\\$attributes:array} )",
                "description": "Renders the `core/loginout` block on server."
        },
        "ƒ:render_block_core_navigation": {
                "prefix": [
                        "render_block_core_navigation",
                        "rbcn"
                ],
                "body": "render_block_core_navigation(${1:\\$attributes:array},${2:\\$content:string},${3:\\$block:WP_Block} )",
                "description": "Renders the `core/navigation` block on server."
        },
        "ƒ:render_block_core_navigation_link": {
                "prefix": [
                        "render_block_core_navigation_link",
                        "rbcnl"
                ],
                "body": "render_block_core_navigation_link(${1:\\$attributes:array},${2:\\$content:string},${3:\\$block:WP_Block} )",
                "description": "Renders the `core/navigation-link` block."
        },
        "ƒ:render_block_core_navigation_submenu": {
                "prefix": [
                        "render_block_core_navigation_submenu",
                        "rbcns"
                ],
                "body": "render_block_core_navigation_submenu(${1:\\$attributes:array},${2:\\$content:string},${3:\\$block:WP_Block} )",
                "description": "Renders the `core/navigation-submenu` block."
        },
        "ƒ:render_block_core_page_list": {
                "prefix": [
                        "render_block_core_page_list",
                        "rbcpl"
                ],
                "body": "render_block_core_page_list(${1:\\$attributes:array},${2:\\$content:string},${3:\\$block:WP_Block} )",
                "description": "Renders the `core/page-list` block on server."
        },
        "ƒ:render_block_core_pattern": {
                "prefix": [
                        "render_block_core_pattern",
                        "rbcp"
                ],
                "body": "render_block_core_pattern(${1:\\$attributes:array} )",
                "description": "Renders the `core/pattern` block on the server."
        },
        "ƒ:render_block_core_post_author": {
                "prefix": [
                        "render_block_core_post_author",
                        "rbcpa"
                ],
                "body": "render_block_core_post_author(${1:\\$attributes:array},${2:\\$content:string},${3:\\$block:WP_Block} )",
                "description": "Renders the `core/post-author` block on the server."
        },
        "ƒ:render_block_core_post_author_biography": {
                "prefix": [
                        "render_block_core_post_author_biography",
                        "rbcpab"
                ],
                "body": "render_block_core_post_author_biography(${1:\\$attributes:array},${2:\\$content:string},${3:\\$block:WP_Block} )",
                "description": "Renders the `core/post-author-biography` block on the server."
        },
        "ƒ:render_block_core_post_comments": {
                "prefix": [
                        "render_block_core_post_comments",
                        "rbcpc"
                ],
                "body": "render_block_core_post_comments(${1:\\$attributes:array},${2:\\$content:string},${3:\\$block:WP_Block} )",
                "description": "Renders the `core/post-comments` block on the server."
        },
        "ƒ:render_block_core_post_comments_form": {
                "prefix": [
                        "render_block_core_post_comments_form",
                        "rbcpcf"
                ],
                "body": "render_block_core_post_comments_form(${1:\\$attributes:array},${2:\\$content:string},${3:\\$block:WP_Block} )",
                "description": "Renders the `core/post-comments-form` block on the server."
        },
        "ƒ:render_block_core_post_content": {
                "prefix": [
                        "render_block_core_post_content",
                        "rbcpc"
                ],
                "body": "render_block_core_post_content(${1:\\$attributes:array},${2:\\$content:string},${3:\\$block:WP_Block} )",
                "description": "Renders the `core/post-content` block on the server."
        },
        "ƒ:render_block_core_post_date": {
                "prefix": [
                        "render_block_core_post_date",
                        "rbcpd"
                ],
                "body": "render_block_core_post_date(${1:\\$attributes:array},${2:\\$content:string},${3:\\$block:WP_Block} )",
                "description": "Renders the `core/post-date` block on the server."
        },
        "ƒ:render_block_core_post_excerpt": {
                "prefix": [
                        "render_block_core_post_excerpt",
                        "rbcpe"
                ],
                "body": "render_block_core_post_excerpt(${1:\\$attributes:array},${2:\\$content:string},${3:\\$block:WP_Block} )",
                "description": "Renders the `core/post-excerpt` block on the server."
        },
        "ƒ:render_block_core_post_featured_image": {
                "prefix": [
                        "render_block_core_post_featured_image",
                        "rbcpfi"
                ],
                "body": "render_block_core_post_featured_image(${1:\\$attributes:array},${2:\\$content:string},${3:\\$block:WP_Block} )",
                "description": "Renders the `core/post-featured-image` block on the server."
        },
        "ƒ:render_block_core_post_navigation_link": {
                "prefix": [
                        "render_block_core_post_navigation_link",
                        "rbcpnl"
                ],
                "body": "render_block_core_post_navigation_link(${1:\\$attributes:array},${2:\\$content:string} )",
                "description": "Renders the `core/post-navigation-link` block on the server."
        },
        "ƒ:render_block_core_post_template": {
                "prefix": [
                        "render_block_core_post_template",
                        "rbcpt"
                ],
                "body": "render_block_core_post_template(${1:\\$attributes:array},${2:\\$content:string},${3:\\$block:WP_Block} )",
                "description": "Renders the `core/post-template` block on the server."
        },
        "ƒ:render_block_core_post_terms": {
                "prefix": [
                        "render_block_core_post_terms",
                        "rbcpt"
                ],
                "body": "render_block_core_post_terms(${1:\\$attributes:array},${2:\\$content:string},${3:\\$block:WP_Block} )",
                "description": "Renders the `core/post-terms` block on the server."
        },
        "ƒ:render_block_core_post_title": {
                "prefix": [
                        "render_block_core_post_title",
                        "rbcpt"
                ],
                "body": "render_block_core_post_title(${1:\\$attributes:array},${2:\\$content:string},${3:\\$block:WP_Block} )",
                "description": "Renders the `core/post-title` block on the server."
        },
        "ƒ:render_block_core_query_no_results": {
                "prefix": [
                        "render_block_core_query_no_results",
                        "rbcqnr"
                ],
                "body": "render_block_core_query_no_results(${1:\\$attributes:array},${2:\\$content:string},${3:\\$block:WP_Block} )",
                "description": "Renders the `core/query-no-results` block on the server."
        },
        "ƒ:render_block_core_query_pagination": {
                "prefix": [
                        "render_block_core_query_pagination",
                        "rbcqp"
                ],
                "body": "render_block_core_query_pagination(${1:\\$attributes:array},${2:\\$content:string} )",
                "description": "Renders the `core/query-pagination` block on the server."
        },
        "ƒ:render_block_core_query_pagination_next": {
                "prefix": [
                        "render_block_core_query_pagination_next",
                        "rbcqpn"
                ],
                "body": "render_block_core_query_pagination_next(${1:\\$attributes:array},${2:\\$content:string},${3:\\$block:WP_Block} )",
                "description": "Renders the `core/query-pagination-next` block on the server."
        },
        "ƒ:render_block_core_query_pagination_numbers": {
                "prefix": [
                        "render_block_core_query_pagination_numbers",
                        "rbcqpn"
                ],
                "body": "render_block_core_query_pagination_numbers(${1:\\$attributes:array},${2:\\$content:string},${3:\\$block:WP_Block} )",
                "description": "Renders the `core/query-pagination-numbers` block on the server."
        },
        "ƒ:render_block_core_query_pagination_previous": {
                "prefix": [
                        "render_block_core_query_pagination_previous",
                        "rbcqpp"
                ],
                "body": "render_block_core_query_pagination_previous(${1:\\$attributes:array},${2:\\$content:string},${3:\\$block:WP_Block} )",
                "description": "Renders the `core/query-pagination-previous` block on the server."
        },
        "ƒ:render_block_core_query_title": {
                "prefix": [
                        "render_block_core_query_title",
                        "rbcqt"
                ],
                "body": "render_block_core_query_title(${1:\\$attributes:array} )",
                "description": "Renders the `core/query-title` block on the server."
        },
        "ƒ:render_block_core_read_more": {
                "prefix": [
                        "render_block_core_read_more",
                        "rbcrm"
                ],
                "body": "render_block_core_read_more(${1:\\$attributes:array},${2:\\$content:string},${3:\\$block:WP_Block} )",
                "description": "Renders the `core/read-more` block on the server."
        },
        "ƒ:render_block_core_rss": {
                "prefix": [
                        "render_block_core_rss",
                        "rbcr"
                ],
                "body": "render_block_core_rss(${1:\\$attributes:array} )",
                "description": "Renders the `core/rss` block on server."
        },
        "ƒ:render_block_core_search": {
                "prefix": [
                        "render_block_core_search",
                        "rbcs"
                ],
                "body": "render_block_core_search(${1:\\$attributes:array} )",
                "description": "Dynamically renders the `core/search` block."
        },
        "ƒ:render_block_core_shortcode": {
                "prefix": [
                        "render_block_core_shortcode",
                        "rbcs"
                ],
                "body": "render_block_core_shortcode(${1:\\$attributes:array},${2:\\$content:string} )",
                "description": "Performs wpautop() on the shortcode block content."
        },
        "ƒ:render_block_core_site_logo": {
                "prefix": [
                        "render_block_core_site_logo",
                        "rbcsl"
                ],
                "body": "render_block_core_site_logo(${1:\\$attributes:array} )",
                "description": "Renders the `core/site-logo` block on the server."
        },
        "ƒ:render_block_core_site_tagline": {
                "prefix": [
                        "render_block_core_site_tagline",
                        "rbcst"
                ],
                "body": "render_block_core_site_tagline(${1:\\$attributes:array} )",
                "description": "Renders the `core/site-tagline` block on the server."
        },
        "ƒ:render_block_core_site_title": {
                "prefix": [
                        "render_block_core_site_title",
                        "rbcst"
                ],
                "body": "render_block_core_site_title(${1:\\$attributes:array} )",
                "description": "Renders the `core/site-title` block on the server."
        },
        "ƒ:render_block_core_social_link": {
                "prefix": [
                        "render_block_core_social_link",
                        "rbcsl"
                ],
                "body": "render_block_core_social_link(${1:\\$attributes:Array},${2:\\$content:String},${3:\\$block:WP_Block} )",
                "description": "Renders the `core/social-link` block on server."
        },
        "ƒ:render_block_core_tag_cloud": {
                "prefix": [
                        "render_block_core_tag_cloud",
                        "rbctc"
                ],
                "body": "render_block_core_tag_cloud(${1:\\$attributes:array} )",
                "description": "Renders the `core/tag-cloud` block on server."
        },
        "ƒ:render_block_core_template_part": {
                "prefix": [
                        "render_block_core_template_part",
                        "rbctp"
                ],
                "body": "render_block_core_template_part(${1:\\$attributes:array} )",
                "description": "Renders the `core/template-part` block on the server."
        },
        "ƒ:render_block_core_term_description": {
                "prefix": [
                        "render_block_core_term_description",
                        "rbctd"
                ],
                "body": "render_block_core_term_description(${1:\\$attributes:array} )",
                "description": "Renders the `core/term-description` block on the server."
        },
        "ƒ:render_block_core_widget_group": {
                "prefix": [
                        "render_block_core_widget_group",
                        "rbcwg"
                ],
                "body": "render_block_core_widget_group(${1:\\$attributes:array},${2:\\$content:string},${3:\\$block:WP_Block} )",
                "description": "Renders the &#039;core/widget-group&#039; block."
        },
        "ƒ:request_filesystem_credentials": {
                "prefix": [
                        "request_filesystem_credentials",
                        "rfc"
                ],
                "body": "request_filesystem_credentials(${1:\\$form_post:string},${2:\\$type:string},${3:\\$error:boolean|WP_Error},${4:\\$context:string},${5:\\$extra_fields:array|null},${6:\\$allow_relaxed_file_ownership:boolean} )",
                "description": "Displays a form to the user to request for their FTP/SSH details in order to connect to the filesystem."
        },
        "ƒ:require_if_theme_supports": {
                "prefix": [
                        "require_if_theme_supports",
                        "rits"
                ],
                "body": "require_if_theme_supports(${1:\\$feature:string},${2:\\$include:string} )",
                "description": "Checks a theme&#039;s support for a given feature before loading the functions which implement it."
        },
        "ƒ:require_wp_db": {
                "prefix": [
                        "require_wp_db",
                        "rwd"
                ],
                "body": "require_wp_db()",
                "description": "Load the database class file and instantiate the `$wpdb` global."
        },
        "ƒ:reset_mbstring_encoding": {
                "prefix": [
                        "reset_mbstring_encoding",
                        "rme"
                ],
                "body": "reset_mbstring_encoding()",
                "description": "Reset the mbstring internal encoding to a users previously set encoding."
        },
        "ƒ:reset_password": {
                "prefix": [
                        "reset_password",
                        "rp"
                ],
                "body": "reset_password(${1:\\$user:WP_User},${2:\\$new_pass:string} )",
                "description": "Handles resetting the user&#039;s password."
        },
        "ƒ:resolve_block_template": {
                "prefix": [
                        "resolve_block_template",
                        "rbt"
                ],
                "body": "resolve_block_template(${1:\\$template_type:string},${2:\\$template_hierarchy:array},${3:\\$fallback_template:string} )",
                "description": "Return the correct &#039;wp_template&#039; to render for the request template type."
        },
        "ƒ:rest_add_application_passwords_to_index": {
                "prefix": [
                        "rest_add_application_passwords_to_index",
                        "raapti"
                ],
                "body": "rest_add_application_passwords_to_index(${1:\\$response:WP_REST_Response} )",
                "description": "Adds Application Passwords info to the REST API index."
        },
        "ƒ:rest_api_default_filters": {
                "prefix": [
                        "rest_api_default_filters",
                        "radf"
                ],
                "body": "rest_api_default_filters()",
                "description": "Registers the default REST API filters."
        },
        "ƒ:rest_api_init": {
                "prefix": [
                        "rest_api_init",
                        "rai"
                ],
                "body": "rest_api_init()",
                "description": "Registers rewrite rules for the REST API."
        },
        "ƒ:rest_api_loaded": {
                "prefix": [
                        "rest_api_loaded",
                        "ral"
                ],
                "body": "rest_api_loaded()",
                "description": "Loads the REST API."
        },
        "ƒ:rest_api_register_rewrites": {
                "prefix": [
                        "rest_api_register_rewrites",
                        "rarr"
                ],
                "body": "rest_api_register_rewrites()",
                "description": "Adds REST rewrite rules."
        },
        "ƒ:rest_application_password_check_errors": {
                "prefix": [
                        "rest_application_password_check_errors",
                        "rapce"
                ],
                "body": "rest_application_password_check_errors(${1:\\$result:WP_Error|null|true} )",
                "description": "Checks for errors when using application password-based authentication."
        },
        "ƒ:rest_application_password_collect_status": {
                "prefix": [
                        "rest_application_password_collect_status",
                        "rapcs"
                ],
                "body": "rest_application_password_collect_status(${1:\\$user_or_error:WP_Error},${2:\\$app_password:array} )",
                "description": "Collects the status of authenticating with an application password."
        },
        "ƒ:rest_are_values_equal": {
                "prefix": [
                        "rest_are_values_equal",
                        "rave"
                ],
                "body": "rest_are_values_equal(${1:\\$value1:mixed},${2:\\$value2:mixed} )",
                "description": "Checks the equality of two values, following JSON Schema semantics."
        },
        "ƒ:rest_authorization_required_code": {
                "prefix": [
                        "rest_authorization_required_code",
                        "rarc"
                ],
                "body": "rest_authorization_required_code()",
                "description": "Returns a contextual HTTP error code for authorization failure."
        },
        "ƒ:rest_convert_error_to_response": {
                "prefix": [
                        "rest_convert_error_to_response",
                        "rcetr"
                ],
                "body": "rest_convert_error_to_response(${1:\\$error:WP_Error} )",
                "description": "Converts an error to a response object."
        },
        "ƒ:rest_cookie_check_errors": {
                "prefix": [
                        "rest_cookie_check_errors",
                        "rcce"
                ],
                "body": "rest_cookie_check_errors(${1:\\$result:WP_Error|mixed} )",
                "description": "Checks for errors when using cookie-based authentication."
        },
        "ƒ:rest_cookie_collect_status": {
                "prefix": [
                        "rest_cookie_collect_status",
                        "rccs"
                ],
                "body": "rest_cookie_collect_status()",
                "description": "Collects cookie authentication status."
        },
        "ƒ:rest_default_additional_properties_to_false": {
                "prefix": [
                        "rest_default_additional_properties_to_false",
                        "rdaptf"
                ],
                "body": "rest_default_additional_properties_to_false(${1:\\$schema:array} )",
                "description": "Sets the &quot;additionalProperties&quot; to false by default for all object definitions in the schema."
        },
        "ƒ:rest_do_request": {
                "prefix": [
                        "rest_do_request",
                        "rdr"
                ],
                "body": "rest_do_request(${1:\\$request:WP_REST_Request|string} )",
                "description": "Do a REST request."
        },
        "ƒ:rest_ensure_request": {
                "prefix": [
                        "rest_ensure_request",
                        "rer"
                ],
                "body": "rest_ensure_request(${1:\\$request:array|string|WP_REST_Request} )",
                "description": "Ensures request arguments are a request object (for consistency)."
        },
        "ƒ:rest_ensure_response": {
                "prefix": [
                        "rest_ensure_response",
                        "rer"
                ],
                "body": "rest_ensure_response(${1:\\$response:WP_REST_Response|WP_Error|WP_HTTP_Response|mixed} )",
                "description": "Ensures a REST response is a response object (for consistency)."
        },
        "ƒ:rest_filter_response_by_context": {
                "prefix": [
                        "rest_filter_response_by_context",
                        "rfrbc"
                ],
                "body": "rest_filter_response_by_context(${1:\\$data:array|object},${2:\\$schema:array},${3:\\$context:string} )",
                "description": "Filters the response to remove any fields not available in the given context."
        },
        "ƒ:rest_filter_response_fields": {
                "prefix": [
                        "rest_filter_response_fields",
                        "rfrf"
                ],
                "body": "rest_filter_response_fields(${1:\\$response:WP_REST_Response},${2:\\$server:WP_REST_Server},${3:\\$request:WP_REST_Request} )",
                "description": "Filters the REST API response to include only a white-listed set of response object fields."
        },
        "ƒ:rest_find_any_matching_schema": {
                "prefix": [
                        "rest_find_any_matching_schema",
                        "rfams"
                ],
                "body": "rest_find_any_matching_schema(${1:\\$value:mixed},${2:\\$args:array},${3:\\$param:string} )",
                "description": "Finds the matching schema among the &quot;anyOf&quot; schemas."
        },
        "ƒ:rest_find_matching_pattern_property_schema": {
                "prefix": [
                        "rest_find_matching_pattern_property_schema",
                        "rfmpps"
                ],
                "body": "rest_find_matching_pattern_property_schema(${1:\\$property:string},${2:\\$args:array} )",
                "description": "Finds the schema for a property using the patternProperties keyword."
        },
        "ƒ:rest_find_one_matching_schema": {
                "prefix": [
                        "rest_find_one_matching_schema",
                        "rfoms"
                ],
                "body": "rest_find_one_matching_schema(${1:\\$value:mixed},${2:\\$args:array},${3:\\$param:string},${4:\\$stop_after_first_match:boolean} )",
                "description": "Finds the matching schema among the &quot;oneOf&quot; schemas."
        },
        "ƒ:rest_format_combining_operation_error": {
                "prefix": [
                        "rest_format_combining_operation_error",
                        "rfcoe"
                ],
                "body": "rest_format_combining_operation_error(${1:\\$param:string},${2:\\$error:array} )",
                "description": "Formats a combining operation error into a WP_Error object."
        },
        "ƒ:rest_get_allowed_schema_keywords": {
                "prefix": [
                        "rest_get_allowed_schema_keywords",
                        "rgask"
                ],
                "body": "rest_get_allowed_schema_keywords()",
                "description": "Get all valid JSON schema properties."
        },
        "ƒ:rest_get_authenticated_app_password": {
                "prefix": [
                        "rest_get_authenticated_app_password",
                        "rgaap"
                ],
                "body": "rest_get_authenticated_app_password()",
                "description": "Gets the Application Password used for authenticating the request."
        },
        "ƒ:rest_get_avatar_sizes": {
                "prefix": [
                        "rest_get_avatar_sizes",
                        "rgas"
                ],
                "body": "rest_get_avatar_sizes()",
                "description": "Retrieves the pixel sizes for avatars."
        },
        "ƒ:rest_get_avatar_urls": {
                "prefix": [
                        "rest_get_avatar_urls",
                        "rgau"
                ],
                "body": "rest_get_avatar_urls(${1:\\$id_or_email:mixed} )",
                "description": "Retrieves the avatar urls in various sizes."
        },
        "ƒ:rest_get_best_type_for_value": {
                "prefix": [
                        "rest_get_best_type_for_value",
                        "rgbtfv"
                ],
                "body": "rest_get_best_type_for_value(${1:\\$value:mixed},${2:\\$types:array} )",
                "description": "Gets the best type for a value."
        },
        "ƒ:rest_get_combining_operation_error": {
                "prefix": [
                        "rest_get_combining_operation_error",
                        "rgcoe"
                ],
                "body": "rest_get_combining_operation_error(${1:\\$value:array},${2:\\$param:string},${3:\\$errors:array} )",
                "description": "Gets the error of combining operation."
        },
        "ƒ:rest_get_date_with_gmt": {
                "prefix": [
                        "rest_get_date_with_gmt",
                        "rgdwg"
                ],
                "body": "rest_get_date_with_gmt(${1:\\$date:string},${2:\\$is_utc:boolean} )",
                "description": "Parses a date into both its local and UTC equivalent, in MySQL datetime format."
        },
        "ƒ:rest_get_endpoint_args_for_schema": {
                "prefix": [
                        "rest_get_endpoint_args_for_schema",
                        "rgeafs"
                ],
                "body": "rest_get_endpoint_args_for_schema(${1:\\$schema:array},${2:\\$method:string} )",
                "description": "Retrieves an array of endpoint arguments from the item schema and endpoint method."
        },
        "ƒ:rest_get_queried_resource_route": {
                "prefix": [
                        "rest_get_queried_resource_route",
                        "rgqrr"
                ],
                "body": "rest_get_queried_resource_route()",
                "description": "Gets the REST route for the currently queried object."
        },
        "ƒ:rest_get_route_for_post": {
                "prefix": [
                        "rest_get_route_for_post",
                        "rgrfp"
                ],
                "body": "rest_get_route_for_post(${1:\\$post:integer|WP_Post} )",
                "description": "Gets the REST API route for a post."
        },
        "ƒ:rest_get_route_for_post_type_items": {
                "prefix": [
                        "rest_get_route_for_post_type_items",
                        "rgrfpti"
                ],
                "body": "rest_get_route_for_post_type_items(${1:\\$post_type:string} )",
                "description": "Gets the REST API route for a post type."
        },
        "ƒ:rest_get_route_for_taxonomy_items": {
                "prefix": [
                        "rest_get_route_for_taxonomy_items",
                        "rgrfti"
                ],
                "body": "rest_get_route_for_taxonomy_items(${1:\\$taxonomy:string} )",
                "description": "Gets the REST API route for a taxonomy."
        },
        "ƒ:rest_get_route_for_term": {
                "prefix": [
                        "rest_get_route_for_term",
                        "rgrft"
                ],
                "body": "rest_get_route_for_term(${1:\\$term:integer|WP_Term} )",
                "description": "Gets the REST API route for a term."
        },
        "ƒ:rest_get_server": {
                "prefix": [
                        "rest_get_server",
                        "rgs"
                ],
                "body": "rest_get_server()",
                "description": "Retrieves the current REST server instance."
        },
        "ƒ:rest_get_url_prefix": {
                "prefix": [
                        "rest_get_url_prefix",
                        "rgup"
                ],
                "body": "rest_get_url_prefix()",
                "description": "Retrieves the URL prefix for any API resource."
        },
        "ƒ:rest_handle_deprecated_argument": {
                "prefix": [
                        "rest_handle_deprecated_argument",
                        "rhda"
                ],
                "body": "rest_handle_deprecated_argument(${1:\\$function:string},${2:\\$message:string},${3:\\$version:string} )",
                "description": "Handles _deprecated_argument() errors."
        },
        "ƒ:rest_handle_deprecated_function": {
                "prefix": [
                        "rest_handle_deprecated_function",
                        "rhdf"
                ],
                "body": "rest_handle_deprecated_function(${1:\\$function:string},${2:\\$replacement:string},${3:\\$version:string} )",
                "description": "Handles _deprecated_function() errors."
        },
        "ƒ:rest_handle_doing_it_wrong": {
                "prefix": [
                        "rest_handle_doing_it_wrong",
                        "rhdiw"
                ],
                "body": "rest_handle_doing_it_wrong(${1:\\$function:string},${2:\\$message:string},${3:\\$version:string|null} )",
                "description": "Handles _doing_it_wrong errors."
        },
        "ƒ:rest_handle_multi_type_schema": {
                "prefix": [
                        "rest_handle_multi_type_schema",
                        "rhmts"
                ],
                "body": "rest_handle_multi_type_schema(${1:\\$value:mixed},${2:\\$args:array},${3:\\$param:string} )",
                "description": "Handles getting the best type for a multi-type schema."
        },
        "ƒ:rest_handle_options_request": {
                "prefix": [
                        "rest_handle_options_request",
                        "rhor"
                ],
                "body": "rest_handle_options_request(${1:\\$response:mixed},${2:\\$handler:WP_REST_Server},${3:\\$request:WP_REST_Request} )",
                "description": "Handles OPTIONS requests for the server."
        },
        "ƒ:rest_is_array": {
                "prefix": [
                        "rest_is_array",
                        "ria"
                ],
                "body": "rest_is_array(${1:\\$maybe_array:mixed} )",
                "description": "Determines if a given value is array-like."
        },
        "ƒ:rest_is_boolean": {
                "prefix": [
                        "rest_is_boolean",
                        "rib"
                ],
                "body": "rest_is_boolean(${1:\\$maybe_bool:boolean|string} )",
                "description": "Determines if a given value is boolean-like."
        },
        "ƒ:rest_is_field_included": {
                "prefix": [
                        "rest_is_field_included",
                        "rifi"
                ],
                "body": "rest_is_field_included(${1:\\$field:string},${2:\\$fields:array} )",
                "description": "Given an array of fields to include in a response, some of which may be `nested.fields`, determine whether the provided field should be included in the response body."
        },
        "ƒ:rest_is_integer": {
                "prefix": [
                        "rest_is_integer",
                        "rii"
                ],
                "body": "rest_is_integer(${1:\\$maybe_integer:mixed} )",
                "description": "Determines if a given value is integer-like."
        },
        "ƒ:rest_is_ip_address": {
                "prefix": [
                        "rest_is_ip_address",
                        "riia"
                ],
                "body": "rest_is_ip_address(${1:\\$ip:string} )",
                "description": "Determines if an IP address is valid."
        },
        "ƒ:rest_is_object": {
                "prefix": [
                        "rest_is_object",
                        "rio"
                ],
                "body": "rest_is_object(${1:\\$maybe_object:mixed} )",
                "description": "Determines if a given value is object-like."
        },
        "ƒ:rest_output_link_header": {
                "prefix": [
                        "rest_output_link_header",
                        "rolh"
                ],
                "body": "rest_output_link_header()",
                "description": "Sends a Link header for the REST API."
        },
        "ƒ:rest_output_link_wp_head": {
                "prefix": [
                        "rest_output_link_wp_head",
                        "rolwh"
                ],
                "body": "rest_output_link_wp_head()",
                "description": "Outputs the REST API link tag into page header."
        },
        "ƒ:rest_output_rsd": {
                "prefix": [
                        "rest_output_rsd",
                        "ror"
                ],
                "body": "rest_output_rsd()",
                "description": "Adds the REST API URL to the WP RSD endpoint."
        },
        "ƒ:rest_parse_date": {
                "prefix": [
                        "rest_parse_date",
                        "rpd"
                ],
                "body": "rest_parse_date(${1:\\$date:string},${2:\\$force_utc:boolean} )",
                "description": "Parses an RFC3339 time into a Unix timestamp."
        },
        "ƒ:rest_parse_embed_param": {
                "prefix": [
                        "rest_parse_embed_param",
                        "rpep"
                ],
                "body": "rest_parse_embed_param(${1:\\$embed:string|array} )",
                "description": "Parses the &quot;_embed&quot; parameter into the list of resources to embed."
        },
        "ƒ:rest_parse_hex_color": {
                "prefix": [
                        "rest_parse_hex_color",
                        "rphc"
                ],
                "body": "rest_parse_hex_color(${1:\\$color:string} )",
                "description": "Parses a 3 or 6 digit hex color (with #)."
        },
        "ƒ:rest_parse_request_arg": {
                "prefix": [
                        "rest_parse_request_arg",
                        "rpra"
                ],
                "body": "rest_parse_request_arg(${1:\\$value:mixed},${2:\\$request:WP_REST_Request},${3:\\$param:string} )",
                "description": "Parse a request argument based on details registered to the route."
        },
        "ƒ:rest_preload_api_request": {
                "prefix": [
                        "rest_preload_api_request",
                        "rpar"
                ],
                "body": "rest_preload_api_request(${1:\\$memo:array},${2:\\$path:string} )",
                "description": "Append result of internal request to REST API for purpose of preloading data to be attached to a page."
        },
        "ƒ:rest_sanitize_array": {
                "prefix": [
                        "rest_sanitize_array",
                        "rsa"
                ],
                "body": "rest_sanitize_array(${1:\\$maybe_array:mixed} )",
                "description": "Converts an array-like value to an array."
        },
        "ƒ:rest_sanitize_boolean": {
                "prefix": [
                        "rest_sanitize_boolean",
                        "rsb"
                ],
                "body": "rest_sanitize_boolean(${1:\\$value:boolean|string|integer} )",
                "description": "Changes a boolean-like value into the proper boolean value."
        },
        "ƒ:rest_sanitize_object": {
                "prefix": [
                        "rest_sanitize_object",
                        "rso"
                ],
                "body": "rest_sanitize_object(${1:\\$maybe_object:mixed} )",
                "description": "Converts an object-like value to an object."
        },
        "ƒ:rest_sanitize_request_arg": {
                "prefix": [
                        "rest_sanitize_request_arg",
                        "rsra"
                ],
                "body": "rest_sanitize_request_arg(${1:\\$value:mixed},${2:\\$request:WP_REST_Request},${3:\\$param:string} )",
                "description": "Sanitize a request argument based on details registered to the route."
        },
        "ƒ:rest_sanitize_value_from_schema": {
                "prefix": [
                        "rest_sanitize_value_from_schema",
                        "rsvfs"
                ],
                "body": "rest_sanitize_value_from_schema(${1:\\$value:mixed},${2:\\$args:array},${3:\\$param:string} )",
                "description": "Sanitize a value based on a schema."
        },
        "ƒ:rest_send_allow_header": {
                "prefix": [
                        "rest_send_allow_header",
                        "rsah"
                ],
                "body": "rest_send_allow_header(${1:\\$response:WP_REST_Response},${2:\\$server:WP_REST_Server},${3:\\$request:WP_REST_Request} )",
                "description": "Sends the &quot;Allow&quot; header to state all methods that can be sent to the current route."
        },
        "ƒ:rest_send_cors_headers": {
                "prefix": [
                        "rest_send_cors_headers",
                        "rsch"
                ],
                "body": "rest_send_cors_headers(${1:\\$value:mixed} )",
                "description": "Sends Cross-Origin Resource Sharing headers with API requests."
        },
        "ƒ:rest_stabilize_value": {
                "prefix": [
                        "rest_stabilize_value",
                        "rsv"
                ],
                "body": "rest_stabilize_value(${1:\\$value:mixed} )",
                "description": "Stabilizes a value following JSON Schema semantics."
        },
        "ƒ:rest_url": {
                "prefix": [
                        "rest_url",
                        "ru"
                ],
                "body": "rest_url(${1:\\$path:string},${2:\\$scheme:string} )",
                "description": "Retrieves the URL to a REST endpoint."
        },
        "ƒ:rest_validate_array_contains_unique_items": {
                "prefix": [
                        "rest_validate_array_contains_unique_items",
                        "rvacui"
                ],
                "body": "rest_validate_array_contains_unique_items(${1:\\$array:array} )",
                "description": "Checks if an array is made up of unique items."
        },
        "ƒ:rest_validate_array_value_from_schema": {
                "prefix": [
                        "rest_validate_array_value_from_schema",
                        "rvavfs"
                ],
                "body": "rest_validate_array_value_from_schema(${1:\\$value:mixed},${2:\\$args:array},${3:\\$param:string} )",
                "description": "Validates an array value based on a schema."
        },
        "ƒ:rest_validate_boolean_value_from_schema": {
                "prefix": [
                        "rest_validate_boolean_value_from_schema",
                        "rvbvfs"
                ],
                "body": "rest_validate_boolean_value_from_schema(${1:\\$value:mixed},${2:\\$param:string} )",
                "description": "Validates a boolean value based on a schema."
        },
        "ƒ:rest_validate_enum": {
                "prefix": [
                        "rest_validate_enum",
                        "rve"
                ],
                "body": "rest_validate_enum(${1:\\$value:mixed},${2:\\$args:array},${3:\\$param:string} )",
                "description": "Validates that the given value is a member of the JSON Schema &quot;enum&quot;."
        },
        "ƒ:rest_validate_integer_value_from_schema": {
                "prefix": [
                        "rest_validate_integer_value_from_schema",
                        "rvivfs"
                ],
                "body": "rest_validate_integer_value_from_schema(${1:\\$value:mixed},${2:\\$args:array},${3:\\$param:string} )",
                "description": "Validates an integer value based on a schema."
        },
        "ƒ:rest_validate_json_schema_pattern": {
                "prefix": [
                        "rest_validate_json_schema_pattern",
                        "rvjsp"
                ],
                "body": "rest_validate_json_schema_pattern(${1:\\$pattern:string},${2:\\$value:string} )",
                "description": "Validates if the JSON Schema pattern matches a value."
        },
        "ƒ:rest_validate_null_value_from_schema": {
                "prefix": [
                        "rest_validate_null_value_from_schema",
                        "rvnvfs"
                ],
                "body": "rest_validate_null_value_from_schema(${1:\\$value:mixed},${2:\\$param:string} )",
                "description": "Validates a null value based on a schema."
        },
        "ƒ:rest_validate_number_value_from_schema": {
                "prefix": [
                        "rest_validate_number_value_from_schema",
                        "rvnvfs"
                ],
                "body": "rest_validate_number_value_from_schema(${1:\\$value:mixed},${2:\\$args:array},${3:\\$param:string} )",
                "description": "Validates a number value based on a schema."
        },
        "ƒ:rest_validate_object_value_from_schema": {
                "prefix": [
                        "rest_validate_object_value_from_schema",
                        "rvovfs"
                ],
                "body": "rest_validate_object_value_from_schema(${1:\\$value:mixed},${2:\\$args:array},${3:\\$param:string} )",
                "description": "Validates an object value based on a schema."
        },
        "ƒ:rest_validate_request_arg": {
                "prefix": [
                        "rest_validate_request_arg",
                        "rvra"
                ],
                "body": "rest_validate_request_arg(${1:\\$value:mixed},${2:\\$request:WP_REST_Request},${3:\\$param:string} )",
                "description": "Validate a request argument based on details registered to the route."
        },
        "ƒ:rest_validate_string_value_from_schema": {
                "prefix": [
                        "rest_validate_string_value_from_schema",
                        "rvsvfs"
                ],
                "body": "rest_validate_string_value_from_schema(${1:\\$value:mixed},${2:\\$args:array},${3:\\$param:string} )",
                "description": "Validates a string value based on a schema."
        },
        "ƒ:rest_validate_value_from_schema": {
                "prefix": [
                        "rest_validate_value_from_schema",
                        "rvvfs"
                ],
                "body": "rest_validate_value_from_schema(${1:\\$value:mixed},${2:\\$args:array},${3:\\$param:string} )",
                "description": "Validate a value based on a schema."
        },
        "ƒ:restore_current_blog": {
                "prefix": [
                        "restore_current_blog",
                        "rcb"
                ],
                "body": "restore_current_blog()",
                "description": "Restore the current blog, after calling switch_to_blog()."
        },
        "ƒ:restore_current_locale": {
                "prefix": [
                        "restore_current_locale",
                        "rcl"
                ],
                "body": "restore_current_locale()",
                "description": "Restores the translations according to the original locale."
        },
        "ƒ:restore_previous_locale": {
                "prefix": [
                        "restore_previous_locale",
                        "rpl"
                ],
                "body": "restore_previous_locale()",
                "description": "Restores the translations according to the previous locale."
        },
        "ƒ:resume_plugin": {
                "prefix": [
                        "resume_plugin",
                        "rp"
                ],
                "body": "resume_plugin(${1:\\$plugin:string},${2:\\$redirect:string} )",
                "description": "Tries to resume a single plugin."
        },
        "ƒ:resume_theme": {
                "prefix": [
                        "resume_theme",
                        "rt"
                ],
                "body": "resume_theme(${1:\\$theme:string},${2:\\$redirect:string} )",
                "description": "Tries to resume a single theme."
        },
        "ƒ:retrieve_password": {
                "prefix": [
                        "retrieve_password",
                        "rp"
                ],
                "body": "retrieve_password(${1:\\$user_login:string|null} )",
                "description": "Handles sending a password retrieval email to a user."
        },
        "ƒ:retrieve_widgets": {
                "prefix": [
                        "retrieve_widgets",
                        "rw"
                ],
                "body": "retrieve_widgets(${1:\\$theme_changed:string|boolean} )",
                "description": "Validates and remaps any &quot;orphaned&quot; widgets to wp_inactive_widgets sidebar, and saves the widget settings. This has to run at least on each theme change."
        },
        "ƒ:revoke_super_admin": {
                "prefix": [
                        "revoke_super_admin",
                        "rsa"
                ],
                "body": "revoke_super_admin(${1:\\$user_id:integer} )",
                "description": "Revokes Super Admin privileges."
        },
        "ƒ:rewind_posts": {
                "prefix": [
                        "rewind_posts",
                        "rp"
                ],
                "body": "rewind_posts()",
                "description": "Rewind the loop posts."
        },
        "ƒ:rich_edit_exists": {
                "prefix": [
                        "rich_edit_exists",
                        "ree"
                ],
                "body": "rich_edit_exists()",
                "description": "Determine if TinyMCE is available."
        },
        "ƒ:rsd_link": {
                "prefix": [
                        "rsd_link",
                        "rl"
                ],
                "body": "rsd_link()",
                "description": "Display the link to the Really Simple Discovery service endpoint."
        },
        "ƒ:rss2_site_icon": {
                "prefix": [
                        "rss2_site_icon",
                        "rsi"
                ],
                "body": "rss2_site_icon()",
                "description": "Displays Site Icon in RSS2."
        },
        "ƒ:rss_enclosure": {
                "prefix": [
                        "rss_enclosure",
                        "re"
                ],
                "body": "rss_enclosure()",
                "description": "Display the rss enclosure for the current post."
        },
        "ƒ:safecss_filter_attr": {
                "prefix": [
                        "safecss_filter_attr",
                        "sfa"
                ],
                "body": "safecss_filter_attr(${1:\\$css:string},${2:\\$deprecated:string} )",
                "description": "Filters an inline style attribute and removes disallowed rules."
        },
        "ƒ:sanitize_bookmark": {
                "prefix": [
                        "sanitize_bookmark",
                        "sb"
                ],
                "body": "sanitize_bookmark(${1:\\$bookmark:stdClass|array},${2:\\$context:string} )",
                "description": "Sanitizes all bookmark fields."
        },
        "ƒ:sanitize_bookmark_field": {
                "prefix": [
                        "sanitize_bookmark_field",
                        "sbf"
                ],
                "body": "sanitize_bookmark_field(${1:\\$field:string},${2:\\$value:mixed},${3:\\$bookmark_id:integer},${4:\\$context:string} )",
                "description": "Sanitizes a bookmark field."
        },
        "ƒ:sanitize_category": {
                "prefix": [
                        "sanitize_category",
                        "sc"
                ],
                "body": "sanitize_category(${1:\\$category:object|array},${2:\\$context:string} )",
                "description": "Sanitizes category data based on context."
        },
        "ƒ:sanitize_category_field": {
                "prefix": [
                        "sanitize_category_field",
                        "scf"
                ],
                "body": "sanitize_category_field(${1:\\$field:string},${2:\\$value:mixed},${3:\\$cat_id:integer},${4:\\$context:string} )",
                "description": "Sanitizes data in single category key field."
        },
        "ƒ:sanitize_comment_cookies": {
                "prefix": [
                        "sanitize_comment_cookies",
                        "scc"
                ],
                "body": "sanitize_comment_cookies()",
                "description": "Sanitizes the cookies sent to the user already."
        },
        "ƒ:sanitize_email": {
                "prefix": [
                        "sanitize_email",
                        "se"
                ],
                "body": "sanitize_email(${1:\\$email:string} )",
                "description": "Strips out all characters that are not allowable in an email."
        },
        "ƒ:sanitize_file_name": {
                "prefix": [
                        "sanitize_file_name",
                        "sfn"
                ],
                "body": "sanitize_file_name(${1:\\$filename:string} )",
                "description": "Sanitizes a filename, replacing whitespace with dashes."
        },
        "ƒ:sanitize_hex_color": {
                "prefix": [
                        "sanitize_hex_color",
                        "shc"
                ],
                "body": "sanitize_hex_color(${1:\\$color:string} )",
                "description": "Sanitizes a hex color."
        },
        "ƒ:sanitize_hex_color_no_hash": {
                "prefix": [
                        "sanitize_hex_color_no_hash",
                        "shcnh"
                ],
                "body": "sanitize_hex_color_no_hash(${1:\\$color:string} )",
                "description": "Sanitizes a hex color without a hash. Use sanitize_hex_color() when possible."
        },
        "ƒ:sanitize_html_class": {
                "prefix": [
                        "sanitize_html_class",
                        "shc"
                ],
                "body": "sanitize_html_class(${1:\\$class:string},${2:\\$fallback:string} )",
                "description": "Sanitizes an HTML classname to ensure it only contains valid characters."
        },
        "ƒ:sanitize_key": {
                "prefix": [
                        "sanitize_key",
                        "sk"
                ],
                "body": "sanitize_key(${1:\\$key:string} )",
                "description": "Sanitizes a string key."
        },
        "ƒ:sanitize_meta": {
                "prefix": [
                        "sanitize_meta",
                        "sm"
                ],
                "body": "sanitize_meta(${1:\\$meta_key:string},${2:\\$meta_value:mixed},${3:\\$object_type:string},${4:\\$object_subtype:string} )",
                "description": "Sanitizes meta value."
        },
        "ƒ:sanitize_mime_type": {
                "prefix": [
                        "sanitize_mime_type",
                        "smt"
                ],
                "body": "sanitize_mime_type(${1:\\$mime_type:string} )",
                "description": "Sanitizes a mime type"
        },
        "ƒ:sanitize_option": {
                "prefix": [
                        "sanitize_option",
                        "so"
                ],
                "body": "sanitize_option(${1:\\$option:string},${2:\\$value:string} )",
                "description": "Sanitizes various option values based on the nature of the option."
        },
        "ƒ:sanitize_post": {
                "prefix": [
                        "sanitize_post",
                        "sp"
                ],
                "body": "sanitize_post(${1:\\$post:object|WP_Post|array},${2:\\$context:string} )",
                "description": "Sanitizes every post field."
        },
        "ƒ:sanitize_post_field": {
                "prefix": [
                        "sanitize_post_field",
                        "spf"
                ],
                "body": "sanitize_post_field(${1:\\$field:string},${2:\\$value:mixed},${3:\\$post_id:integer},${4:\\$context:string} )",
                "description": "Sanitizes a post field based on context."
        },
        "ƒ:sanitize_sql_orderby": {
                "prefix": [
                        "sanitize_sql_orderby",
                        "sso"
                ],
                "body": "sanitize_sql_orderby(${1:\\$orderby:string} )",
                "description": "Ensures a string is a valid SQL &#039;order by&#039; clause."
        },
        "ƒ:sanitize_term": {
                "prefix": [
                        "sanitize_term",
                        "st"
                ],
                "body": "sanitize_term(${1:\\$term:array|object},${2:\\$taxonomy:string},${3:\\$context:string} )",
                "description": "Sanitizes all term fields."
        },
        "ƒ:sanitize_term_field": {
                "prefix": [
                        "sanitize_term_field",
                        "stf"
                ],
                "body": "sanitize_term_field(${1:\\$field:string},${2:\\$value:string},${3:\\$term_id:integer},${4:\\$taxonomy:string},${5:\\$context:string} )",
                "description": "Sanitizes the field value in the term based on the context."
        },
        "ƒ:sanitize_text_field": {
                "prefix": [
                        "sanitize_text_field",
                        "stf"
                ],
                "body": "sanitize_text_field(${1:\\$str:string} )",
                "description": "Sanitizes a string from user input or from the database."
        },
        "ƒ:sanitize_textarea_field": {
                "prefix": [
                        "sanitize_textarea_field",
                        "stf"
                ],
                "body": "sanitize_textarea_field(${1:\\$str:string} )",
                "description": "Sanitizes a multiline string from user input or from the database."
        },
        "ƒ:sanitize_title": {
                "prefix": [
                        "sanitize_title",
                        "st"
                ],
                "body": "sanitize_title(${1:\\$title:string},${2:\\$fallback_title:string},${3:\\$context:string} )",
                "description": "Sanitizes a string into a slug, which can be used in URLs or HTML attributes."
        },
        "ƒ:sanitize_title_for_query": {
                "prefix": [
                        "sanitize_title_for_query",
                        "stfq"
                ],
                "body": "sanitize_title_for_query(${1:\\$title:string} )",
                "description": "Sanitizes a title with the &#039;query&#039; context."
        },
        "ƒ:sanitize_title_with_dashes": {
                "prefix": [
                        "sanitize_title_with_dashes",
                        "stwd"
                ],
                "body": "sanitize_title_with_dashes(${1:\\$title:string},${2:\\$raw_title:string},${3:\\$context:string} )",
                "description": "Sanitizes a title, replacing whitespace and a few other characters with dashes."
        },
        "ƒ:sanitize_trackback_urls": {
                "prefix": [
                        "sanitize_trackback_urls",
                        "stu"
                ],
                "body": "sanitize_trackback_urls(${1:\\$to_ping:string} )",
                "description": "Sanitizes space or carriage return separated URLs that are used to send trackbacks."
        },
        "ƒ:sanitize_url": {
                "prefix": [
                        "sanitize_url",
                        "su"
                ],
                "body": "sanitize_url(${1:\\$url:string},${2:\\$protocols:array|null} )",
                "description": "Performs esc_url() for database or redirect usage."
        },
        "ƒ:sanitize_user": {
                "prefix": [
                        "sanitize_user",
                        "su"
                ],
                "body": "sanitize_user(${1:\\$username:string},${2:\\$strict:boolean} )",
                "description": "Sanitizes a username, stripping out unsafe characters."
        },
        "ƒ:sanitize_user_field": {
                "prefix": [
                        "sanitize_user_field",
                        "suf"
                ],
                "body": "sanitize_user_field(${1:\\$field:string},${2:\\$value:mixed},${3:\\$user_id:integer},${4:\\$context:string} )",
                "description": "Sanitizes user field based on context."
        },
        "ƒ:sanitize_user_object": {
                "prefix": [
                        "sanitize_user_object",
                        "suo"
                ],
                "body": "sanitize_user_object(${1:\\$user:object|array},${2:\\$context:string} )",
                "description": "Sanitize every user field."
        },
        "ƒ:save_mod_rewrite_rules": {
                "prefix": [
                        "save_mod_rewrite_rules",
                        "smrr"
                ],
                "body": "save_mod_rewrite_rules()",
                "description": "Updates the htaccess file with the current rules if it is writable."
        },
        "ƒ:saveDomDocument": {
                "prefix": [
                        "saveDomDocument"
                ],
                "body": "saveDomDocument(${1:\\$doc:DOMDocument},${2:\\$filename:string} )",
                "description": "Saves the XML document into a file."
        },
        "ƒ:screen_icon": {
                "prefix": [
                        "screen_icon",
                        "si"
                ],
                "body": "screen_icon()",
                "description": "Displays a screen icon."
        },
        "ƒ:screen_layout": {
                "prefix": [
                        "screen_layout",
                        "sl"
                ],
                "body": "screen_layout(${1:\\$screen:} )",
                "description": "Returns the screen layout options."
        },
        "ƒ:screen_meta": {
                "prefix": [
                        "screen_meta",
                        "sm"
                ],
                "body": "screen_meta(${1:\\$screen:} )",
                "description": "Renders the screen&#039;s help."
        },
        "ƒ:screen_options": {
                "prefix": [
                        "screen_options",
                        "so"
                ],
                "body": "screen_options(${1:\\$screen:} )",
                "description": "Returns the screen&#039;s per-page options."
        },
        "ƒ:script_concat_settings": {
                "prefix": [
                        "script_concat_settings",
                        "scs"
                ],
                "body": "script_concat_settings()",
                "description": "Determines the concatenation and compression settings for scripts and styles."
        },
        "ƒ:search_theme_directories": {
                "prefix": [
                        "search_theme_directories",
                        "std"
                ],
                "body": "search_theme_directories(${1:\\$force:boolean} )",
                "description": "Searches all registered theme directories for complete and valid themes."
        },
        "ƒ:seems_utf8": {
                "prefix": [
                        "seems_utf8",
                        "su"
                ],
                "body": "seems_utf8(${1:\\$str:string} )",
                "description": "Checks to see if a string is utf8 encoded."
        },
        "ƒ:selected": {
                "prefix": [
                        "selected"
                ],
                "body": "selected(${1:\\$selected:mixed},${2:\\$current:mixed},${3:\\$echo:boolean} )",
                "description": "Outputs the HTML selected attribute."
        },
        "ƒ:self_admin_url": {
                "prefix": [
                        "self_admin_url",
                        "sau"
                ],
                "body": "self_admin_url(${1:\\$path:string},${2:\\$scheme:string} )",
                "description": "Retrieves the URL to the admin area for either the current site or the network depending on context."
        },
        "ƒ:self_link": {
                "prefix": [
                        "self_link",
                        "sl"
                ],
                "body": "self_link()",
                "description": "Display the link for the currently displayed feed in a XSS safe way."
        },
        "ƒ:send_confirmation_on_profile_email": {
                "prefix": [
                        "send_confirmation_on_profile_email",
                        "scope"
                ],
                "body": "send_confirmation_on_profile_email()",
                "description": "Sends a confirmation request email when a change of user email address is attempted."
        },
        "ƒ:send_frame_options_header": {
                "prefix": [
                        "send_frame_options_header",
                        "sfoh"
                ],
                "body": "send_frame_options_header()",
                "description": "Send a HTTP header to limit rendering of pages to same origin iframes."
        },
        "ƒ:send_nosniff_header": {
                "prefix": [
                        "send_nosniff_header",
                        "snh"
                ],
                "body": "send_nosniff_header()",
                "description": "Send a HTTP header to disable content type sniffing in browsers which support it."
        },
        "ƒ:send_origin_headers": {
                "prefix": [
                        "send_origin_headers",
                        "soh"
                ],
                "body": "send_origin_headers()",
                "description": "Send Access-Control-Allow-Origin and related headers if the current request is from an allowed origin."
        },
        "ƒ:separate_comments": {
                "prefix": [
                        "separate_comments",
                        "sc"
                ],
                "body": "separate_comments(${1:\\$comments:array} )",
                "description": "Separates an array of comments into an array keyed by comment_type."
        },
        "ƒ:serialize_block": {
                "prefix": [
                        "serialize_block",
                        "sb"
                ],
                "body": "serialize_block(${1:\\$block:array} )",
                "description": "Returns the content of a block, including comment delimiters, serializing all attributes from the given parsed block."
        },
        "ƒ:serialize_block_attributes": {
                "prefix": [
                        "serialize_block_attributes",
                        "sba"
                ],
                "body": "serialize_block_attributes(${1:\\$block_attributes:array} )",
                "description": "Given an array of attributes, returns a string in the serialized attributes format prepared for post content."
        },
        "ƒ:serialize_blocks": {
                "prefix": [
                        "serialize_blocks",
                        "sb"
                ],
                "body": "serialize_blocks(${1:\\$blocks:array} )",
                "description": "Returns a joined string of the aggregate serialization of the given parsed blocks."
        },
        "ƒ:set_current_screen": {
                "prefix": [
                        "set_current_screen",
                        "scs"
                ],
                "body": "set_current_screen(${1:\\$hook_name:string|WP_Screen} )",
                "description": "Set the current screen object"
        },
        "ƒ:set_current_user": {
                "prefix": [
                        "set_current_user",
                        "scu"
                ],
                "body": "set_current_user(${1:\\$id:integer|null},${2:\\$name:string} )",
                "description": "Changes the current user by ID or name."
        },
        "ƒ:set_post_format": {
                "prefix": [
                        "set_post_format",
                        "spf"
                ],
                "body": "set_post_format(${1:\\$post:integer|object},${2:\\$format:string} )",
                "description": "Assign a format to a post"
        },
        "ƒ:set_post_thumbnail": {
                "prefix": [
                        "set_post_thumbnail",
                        "spt"
                ],
                "body": "set_post_thumbnail(${1:\\$post:integer|WP_Post},${2:\\$thumbnail_id:integer} )",
                "description": "Sets the post thumbnail (featured image) for the given post."
        },
        "ƒ:set_post_thumbnail_size": {
                "prefix": [
                        "set_post_thumbnail_size",
                        "spts"
                ],
                "body": "set_post_thumbnail_size(${1:\\$width:integer},${2:\\$height:integer},${3:\\$crop:boolean|array} )",
                "description": "Registers an image size for the post thumbnail."
        },
        "ƒ:set_post_type": {
                "prefix": [
                        "set_post_type",
                        "spt"
                ],
                "body": "set_post_type(${1:\\$post_id:integer},${2:\\$post_type:string} )",
                "description": "Update the post type for the post ID."
        },
        "ƒ:set_query_var": {
                "prefix": [
                        "set_query_var",
                        "sqv"
                ],
                "body": "set_query_var(${1:\\$var:string},${2:\\$value:mixed} )",
                "description": "Sets the value of a query variable in the WP_Query class."
        },
        "ƒ:set_screen_options": {
                "prefix": [
                        "set_screen_options",
                        "sso"
                ],
                "body": "set_screen_options()",
                "description": "Saves option for number of rows when listing posts, pages, comments, etc."
        },
        "ƒ:set_site_transient": {
                "prefix": [
                        "set_site_transient",
                        "sst"
                ],
                "body": "set_site_transient(${1:\\$transient:string},${2:\\$value:mixed},${3:\\$expiration:integer} )",
                "description": "Sets/updates the value of a site transient."
        },
        "ƒ:set_theme_mod": {
                "prefix": [
                        "set_theme_mod",
                        "stm"
                ],
                "body": "set_theme_mod(${1:\\$name:string},${2:\\$value:mixed} )",
                "description": "Updates theme modification value for the active theme."
        },
        "ƒ:set_transient": {
                "prefix": [
                        "set_transient",
                        "st"
                ],
                "body": "set_transient(${1:\\$transient:string},${2:\\$value:mixed},${3:\\$expiration:integer} )",
                "description": "Sets/updates the value of a transient."
        },
        "ƒ:set_url_scheme": {
                "prefix": [
                        "set_url_scheme",
                        "sus"
                ],
                "body": "set_url_scheme(${1:\\$url:string},${2:\\$scheme:string|null} )",
                "description": "Sets the scheme for a URL."
        },
        "ƒ:set_user_setting": {
                "prefix": [
                        "set_user_setting",
                        "sus"
                ],
                "body": "set_user_setting(${1:\\$name:string},${2:\\$value:string} )",
                "description": "Adds or updates user interface setting."
        },
        "ƒ:settings_errors": {
                "prefix": [
                        "settings_errors",
                        "se"
                ],
                "body": "settings_errors(${1:\\$setting:string},${2:\\$sanitize:boolean},${3:\\$hide_on_update:boolean} )",
                "description": "Displays settings errors registered by add_settings_error()."
        },
        "ƒ:settings_fields": {
                "prefix": [
                        "settings_fields",
                        "sf"
                ],
                "body": "settings_fields(${1:\\$option_group:string} )",
                "description": "Outputs nonce, action, and option_page fields for a settings page."
        },
        "ƒ:setup_postdata": {
                "prefix": [
                        "setup_postdata",
                        "sp"
                ],
                "body": "setup_postdata(${1:\\$post:WP_Post|object|integer} )",
                "description": "Set up global post data."
        },
        "ƒ:setup_userdata": {
                "prefix": [
                        "setup_userdata",
                        "su"
                ],
                "body": "setup_userdata(${1:\\$for_user_id:integer} )",
                "description": "Sets up global user vars."
        },
        "ƒ:shortcode_atts": {
                "prefix": [
                        "shortcode_atts",
                        "sa"
                ],
                "body": "shortcode_atts(${1:\\$pairs:array},${2:\\$atts:array},${3:\\$shortcode:string} )",
                "description": "Combine user attributes with known attributes and fill in defaults when needed."
        },
        "ƒ:shortcode_exists": {
                "prefix": [
                        "shortcode_exists",
                        "se"
                ],
                "body": "shortcode_exists(${1:\\$tag:string} )",
                "description": "Whether a registered shortcode exists named $tag"
        },
        "ƒ:shortcode_parse_atts": {
                "prefix": [
                        "shortcode_parse_atts",
                        "spa"
                ],
                "body": "shortcode_parse_atts(${1:\\$text:string} )",
                "description": "Retrieve all attributes from the shortcodes tag."
        },
        "ƒ:shortcode_unautop": {
                "prefix": [
                        "shortcode_unautop",
                        "su"
                ],
                "body": "shortcode_unautop(${1:\\$text:string} )",
                "description": "Don&#039;t auto-p wrap shortcodes that stand alone."
        },
        "ƒ:show_admin_bar": {
                "prefix": [
                        "show_admin_bar",
                        "sab"
                ],
                "body": "show_admin_bar(${1:\\$show:boolean} )",
                "description": "Sets the display status of the admin bar."
        },
        "ƒ:show_blog_form": {
                "prefix": [
                        "show_blog_form",
                        "sbf"
                ],
                "body": "show_blog_form(${1:\\$blogname:string},${2:\\$blog_title:string},${3:\\$errors:WP_Error|string} )",
                "description": "Generates and displays the Sign-up and Create Site forms."
        },
        "ƒ:show_message": {
                "prefix": [
                        "show_message",
                        "sm"
                ],
                "body": "show_message(${1:\\$message:string|WP_Error} )",
                "description": "Displays the given administration message."
        },
        "ƒ:show_user_form": {
                "prefix": [
                        "show_user_form",
                        "suf"
                ],
                "body": "show_user_form(${1:\\$user_name:string},${2:\\$user_email:string},${3:\\$errors:WP_Error|string} )",
                "description": "Displays the fields for the new user account registration form."
        },
        "ƒ:shutdown_action_hook": {
                "prefix": [
                        "shutdown_action_hook",
                        "sah"
                ],
                "body": "shutdown_action_hook()",
                "description": "Runs just before PHP shuts down execution."
        },
        "ƒ:signup_another_blog": {
                "prefix": [
                        "signup_another_blog",
                        "sab"
                ],
                "body": "signup_another_blog(${1:\\$blogname:string},${2:\\$blog_title:string},${3:\\$errors:WP_Error|string} )",
                "description": "Shows a form for returning users to sign up for another site."
        },
        "ƒ:signup_blog": {
                "prefix": [
                        "signup_blog",
                        "sb"
                ],
                "body": "signup_blog(${1:\\$user_name:string},${2:\\$user_email:string},${3:\\$blogname:string},${4:\\$blog_title:string},${5:\\$errors:WP_Error|string} )",
                "description": "Shows a form for a user or visitor to sign up for a new site."
        },
        "ƒ:signup_get_available_languages": {
                "prefix": [
                        "signup_get_available_languages",
                        "sgal"
                ],
                "body": "signup_get_available_languages()",
                "description": "Retrieves languages available during the site/user sign-up process."
        },
        "ƒ:signup_nonce_check": {
                "prefix": [
                        "signup_nonce_check",
                        "snc"
                ],
                "body": "signup_nonce_check(${1:\\$result:array} )",
                "description": "Processes the signup nonce created in signup_nonce_fields()."
        },
        "ƒ:signup_nonce_fields": {
                "prefix": [
                        "signup_nonce_fields",
                        "snf"
                ],
                "body": "signup_nonce_fields()",
                "description": "Adds a nonce field to the signup page."
        },
        "ƒ:signup_user": {
                "prefix": [
                        "signup_user",
                        "su"
                ],
                "body": "signup_user(${1:\\$user_name:string},${2:\\$user_email:string},${3:\\$errors:WP_Error|string} )",
                "description": "Shows a form for a visitor to sign up for a new user account."
        },
        "ƒ:single_cat_title": {
                "prefix": [
                        "single_cat_title",
                        "sct"
                ],
                "body": "single_cat_title(${1:\\$prefix:string},${2:\\$display:boolean} )",
                "description": "Display or retrieve page title for category archive."
        },
        "ƒ:single_month_title": {
                "prefix": [
                        "single_month_title",
                        "smt"
                ],
                "body": "single_month_title(${1:\\$prefix:string},${2:\\$display:boolean} )",
                "description": "Display or retrieve page title for post archive based on date."
        },
        "ƒ:single_post_title": {
                "prefix": [
                        "single_post_title",
                        "spt"
                ],
                "body": "single_post_title(${1:\\$prefix:string},${2:\\$display:boolean} )",
                "description": "Display or retrieve page title for post."
        },
        "ƒ:single_tag_title": {
                "prefix": [
                        "single_tag_title",
                        "stt"
                ],
                "body": "single_tag_title(${1:\\$prefix:string},${2:\\$display:boolean} )",
                "description": "Display or retrieve page title for tag post archive."
        },
        "ƒ:single_term_title": {
                "prefix": [
                        "single_term_title",
                        "stt"
                ],
                "body": "single_term_title(${1:\\$prefix:string},${2:\\$display:boolean} )",
                "description": "Display or retrieve page title for taxonomy term archive."
        },
        "ƒ:site_admin_notice": {
                "prefix": [
                        "site_admin_notice",
                        "san"
                ],
                "body": "site_admin_notice()",
                "description": "Displays an admin notice to upgrade all sites after a core upgrade."
        },
        "ƒ:site_icon_url": {
                "prefix": [
                        "site_icon_url",
                        "siu"
                ],
                "body": "site_icon_url(${1:\\$size:integer},${2:\\$url:string},${3:\\$blog_id:integer} )",
                "description": "Displays the Site Icon URL."
        },
        "ƒ:site_url": {
                "prefix": [
                        "site_url",
                        "su"
                ],
                "body": "site_url(${1:\\$path:string},${2:\\$scheme:string|null} )",
                "description": "Retrieves the URL for the current site where WordPress application files (e.g. wp-blog-header.php or the wp-admin/ folder) are accessible."
        },
        "ƒ:size_format": {
                "prefix": [
                        "size_format",
                        "sf"
                ],
                "body": "size_format(${1:\\$bytes:integer|string},${2:\\$decimals:integer} )",
                "description": "Converts a number of bytes to the largest unit the bytes will fit into."
        },
        "ƒ:smilies_init": {
                "prefix": [
                        "smilies_init",
                        "si"
                ],
                "body": "smilies_init()",
                "description": "Convert smiley code to the icon graphic file equivalent."
        },
        "ƒ:sodium_add": {
                "prefix": [
                        "sodium_add",
                        "sa"
                ],
                "body": "sodium_add(${1:\\$val:string},${2:\\$addv:string} )",
                "description": ""
        },
        "ƒ:sodium_base642bin": {
                "prefix": [
                        "sodium_base642bin",
                        "sb"
                ],
                "body": "sodium_base642bin(${1:\\$string:string},${2:\\$variant:integer},${3:\\$ignore:string} )",
                "description": ""
        },
        "ƒ:sodium_bin2base64": {
                "prefix": [
                        "sodium_bin2base64",
                        "sb"
                ],
                "body": "sodium_bin2base64(${1:\\$string:string},${2:\\$variant:integer} )",
                "description": ""
        },
        "ƒ:sodium_bin2hex": {
                "prefix": [
                        "sodium_bin2hex",
                        "sb"
                ],
                "body": "sodium_bin2hex(${1:\\$string:string} )",
                "description": ""
        },
        "ƒ:sodium_compare": {
                "prefix": [
                        "sodium_compare",
                        "sc"
                ],
                "body": "sodium_compare(${1:\\$a:string},${2:\\$b:string} )",
                "description": ""
        },
        "ƒ:sodium_crypto_aead_aes256gcm_decrypt": {
                "prefix": [
                        "sodium_crypto_aead_aes256gcm_decrypt",
                        "scaad"
                ],
                "body": "sodium_crypto_aead_aes256gcm_decrypt(${1:\\$message:string},${2:\\$assocData:string},${3:\\$nonce:string},${4:\\$key:string} )",
                "description": ""
        },
        "ƒ:sodium_crypto_aead_aes256gcm_encrypt": {
                "prefix": [
                        "sodium_crypto_aead_aes256gcm_encrypt",
                        "scaae"
                ],
                "body": "sodium_crypto_aead_aes256gcm_encrypt(${1:\\$message:string},${2:\\$assocData:string},${3:\\$nonce:string},${4:\\$key:string} )",
                "description": ""
        },
        "ƒ:sodium_crypto_aead_aes256gcm_is_available": {
                "prefix": [
                        "sodium_crypto_aead_aes256gcm_is_available",
                        "scaaia"
                ],
                "body": "sodium_crypto_aead_aes256gcm_is_available()",
                "description": ""
        },
        "ƒ:sodium_crypto_aead_chacha20poly1305_decrypt": {
                "prefix": [
                        "sodium_crypto_aead_chacha20poly1305_decrypt",
                        "scacd"
                ],
                "body": "sodium_crypto_aead_chacha20poly1305_decrypt(${1:\\$message:string},${2:\\$assocData:string},${3:\\$nonce:string},${4:\\$key:string} )",
                "description": ""
        },
        "ƒ:sodium_crypto_aead_chacha20poly1305_encrypt": {
                "prefix": [
                        "sodium_crypto_aead_chacha20poly1305_encrypt",
                        "scace"
                ],
                "body": "sodium_crypto_aead_chacha20poly1305_encrypt(${1:\\$message:string},${2:\\$assocData:string},${3:\\$nonce:string},${4:\\$key:string} )",
                "description": ""
        },
        "ƒ:sodium_crypto_aead_chacha20poly1305_ietf_decrypt": {
                "prefix": [
                        "sodium_crypto_aead_chacha20poly1305_ietf_decrypt",
                        "scacid"
                ],
                "body": "sodium_crypto_aead_chacha20poly1305_ietf_decrypt(${1:\\$message:string},${2:\\$assocData:string},${3:\\$nonce:string},${4:\\$key:string} )",
                "description": ""
        },
        "ƒ:sodium_crypto_aead_chacha20poly1305_ietf_encrypt": {
                "prefix": [
                        "sodium_crypto_aead_chacha20poly1305_ietf_encrypt",
                        "scacie"
                ],
                "body": "sodium_crypto_aead_chacha20poly1305_ietf_encrypt(${1:\\$message:string},${2:\\$assocData:string},${3:\\$nonce:string},${4:\\$key:string} )",
                "description": ""
        },
        "ƒ:sodium_crypto_aead_chacha20poly1305_ietf_keygen": {
                "prefix": [
                        "sodium_crypto_aead_chacha20poly1305_ietf_keygen",
                        "scacik"
                ],
                "body": "sodium_crypto_aead_chacha20poly1305_ietf_keygen()",
                "description": ""
        },
        "ƒ:sodium_crypto_aead_chacha20poly1305_keygen": {
                "prefix": [
                        "sodium_crypto_aead_chacha20poly1305_keygen",
                        "scack"
                ],
                "body": "sodium_crypto_aead_chacha20poly1305_keygen()",
                "description": ""
        },
        "ƒ:sodium_crypto_aead_xchacha20poly1305_ietf_decrypt": {
                "prefix": [
                        "sodium_crypto_aead_xchacha20poly1305_ietf_decrypt",
                        "scaxid"
                ],
                "body": "sodium_crypto_aead_xchacha20poly1305_ietf_decrypt(${1:\\$message:string},${2:\\$assocData:string},${3:\\$nonce:string},${4:\\$key:string} )",
                "description": ""
        },
        "ƒ:sodium_crypto_aead_xchacha20poly1305_ietf_encrypt": {
                "prefix": [
                        "sodium_crypto_aead_xchacha20poly1305_ietf_encrypt",
                        "scaxie"
                ],
                "body": "sodium_crypto_aead_xchacha20poly1305_ietf_encrypt(${1:\\$message:string},${2:\\$assocData:string},${3:\\$nonce:string},${4:\\$key:string} )",
                "description": ""
        },
        "ƒ:sodium_crypto_aead_xchacha20poly1305_ietf_keygen": {
                "prefix": [
                        "sodium_crypto_aead_xchacha20poly1305_ietf_keygen",
                        "scaxik"
                ],
                "body": "sodium_crypto_aead_xchacha20poly1305_ietf_keygen()",
                "description": ""
        },
        "ƒ:sodium_crypto_auth": {
                "prefix": [
                        "sodium_crypto_auth",
                        "sca"
                ],
                "body": "sodium_crypto_auth(${1:\\$message:string},${2:\\$key:string} )",
                "description": ""
        },
        "ƒ:sodium_crypto_auth_keygen": {
                "prefix": [
                        "sodium_crypto_auth_keygen",
                        "scak"
                ],
                "body": "sodium_crypto_auth_keygen()",
                "description": ""
        },
        "ƒ:sodium_crypto_auth_verify": {
                "prefix": [
                        "sodium_crypto_auth_verify",
                        "scav"
                ],
                "body": "sodium_crypto_auth_verify(${1:\\$mac:string},${2:\\$message:string},${3:\\$key:string} )",
                "description": ""
        },
        "ƒ:sodium_crypto_box": {
                "prefix": [
                        "sodium_crypto_box",
                        "scb"
                ],
                "body": "sodium_crypto_box(${1:\\$message:string},${2:\\$nonce:string},${3:\\$kp:string} )",
                "description": ""
        },
        "ƒ:sodium_crypto_box_keypair": {
                "prefix": [
                        "sodium_crypto_box_keypair",
                        "scbk"
                ],
                "body": "sodium_crypto_box_keypair()",
                "description": ""
        },
        "ƒ:sodium_crypto_box_keypair_from_secretkey_and_publickey": {
                "prefix": [
                        "sodium_crypto_box_keypair_from_secretkey_and_publickey",
                        "scbkfsap"
                ],
                "body": "sodium_crypto_box_keypair_from_secretkey_and_publickey(${1:\\$sk:string},${2:\\$pk:string} )",
                "description": ""
        },
        "ƒ:sodium_crypto_box_open": {
                "prefix": [
                        "sodium_crypto_box_open",
                        "scbo"
                ],
                "body": "sodium_crypto_box_open(${1:\\$message:string},${2:\\$nonce:string},${3:\\$kp:string} )",
                "description": ""
        },
        "ƒ:sodium_crypto_box_publickey": {
                "prefix": [
                        "sodium_crypto_box_publickey",
                        "scbp"
                ],
                "body": "sodium_crypto_box_publickey(${1:\\$keypair:string} )",
                "description": ""
        },
        "ƒ:sodium_crypto_box_publickey_from_secretkey": {
                "prefix": [
                        "sodium_crypto_box_publickey_from_secretkey",
                        "scbpfs"
                ],
                "body": "sodium_crypto_box_publickey_from_secretkey(${1:\\$sk:string} )",
                "description": ""
        },
        "ƒ:sodium_crypto_box_seal": {
                "prefix": [
                        "sodium_crypto_box_seal",
                        "scbs"
                ],
                "body": "sodium_crypto_box_seal(${1:\\$message:string},${2:\\$publicKey:string} )",
                "description": ""
        },
        "ƒ:sodium_crypto_box_seal_open": {
                "prefix": [
                        "sodium_crypto_box_seal_open",
                        "scbso"
                ],
                "body": "sodium_crypto_box_seal_open(${1:\\$message:string},${2:\\$kp:string} )",
                "description": ""
        },
        "ƒ:sodium_crypto_box_secretkey": {
                "prefix": [
                        "sodium_crypto_box_secretkey",
                        "scbs"
                ],
                "body": "sodium_crypto_box_secretkey(${1:\\$keypair:string} )",
                "description": ""
        },
        "ƒ:sodium_crypto_box_seed_keypair": {
                "prefix": [
                        "sodium_crypto_box_seed_keypair",
                        "scbsk"
                ],
                "body": "sodium_crypto_box_seed_keypair(${1:\\$seed:string} )",
                "description": ""
        },
        "ƒ:sodium_crypto_core_ristretto255_add": {
                "prefix": [
                        "sodium_crypto_core_ristretto255_add",
                        "sccra"
                ],
                "body": "sodium_crypto_core_ristretto255_add(${1:\\$p:string},${2:\\$q:string} )",
                "description": ""
        },
        "ƒ:sodium_crypto_core_ristretto255_from_hash": {
                "prefix": [
                        "sodium_crypto_core_ristretto255_from_hash",
                        "sccrfh"
                ],
                "body": "sodium_crypto_core_ristretto255_from_hash(${1:\\$r:string} )",
                "description": ""
        },
        "ƒ:sodium_crypto_core_ristretto255_is_valid_point": {
                "prefix": [
                        "sodium_crypto_core_ristretto255_is_valid_point",
                        "sccrivp"
                ],
                "body": "sodium_crypto_core_ristretto255_is_valid_point(${1:\\$p:string} )",
                "description": ""
        },
        "ƒ:sodium_crypto_core_ristretto255_random": {
                "prefix": [
                        "sodium_crypto_core_ristretto255_random",
                        "sccrr"
                ],
                "body": "sodium_crypto_core_ristretto255_random()",
                "description": ""
        },
        "ƒ:sodium_crypto_core_ristretto255_scalar_add": {
                "prefix": [
                        "sodium_crypto_core_ristretto255_scalar_add",
                        "sccrsa"
                ],
                "body": "sodium_crypto_core_ristretto255_scalar_add(${1:\\$p:string},${2:\\$q:string} )",
                "description": ""
        },
        "ƒ:sodium_crypto_core_ristretto255_scalar_complement": {
                "prefix": [
                        "sodium_crypto_core_ristretto255_scalar_complement",
                        "sccrsc"
                ],
                "body": "sodium_crypto_core_ristretto255_scalar_complement(${1:\\$p:string} )",
                "description": ""
        },
        "ƒ:sodium_crypto_core_ristretto255_scalar_invert": {
                "prefix": [
                        "sodium_crypto_core_ristretto255_scalar_invert",
                        "sccrsi"
                ],
                "body": "sodium_crypto_core_ristretto255_scalar_invert(${1:\\$p:string} )",
                "description": ""
        },
        "ƒ:sodium_crypto_core_ristretto255_scalar_mul": {
                "prefix": [
                        "sodium_crypto_core_ristretto255_scalar_mul",
                        "sccrsm"
                ],
                "body": "sodium_crypto_core_ristretto255_scalar_mul(${1:\\$p:string},${2:\\$q:string} )",
                "description": ""
        },
        "ƒ:sodium_crypto_core_ristretto255_scalar_negate": {
                "prefix": [
                        "sodium_crypto_core_ristretto255_scalar_negate",
                        "sccrsn"
                ],
                "body": "sodium_crypto_core_ristretto255_scalar_negate(${1:\\$p:string} )",
                "description": ""
        },
        "ƒ:sodium_crypto_core_ristretto255_scalar_random": {
                "prefix": [
                        "sodium_crypto_core_ristretto255_scalar_random",
                        "sccrsr"
                ],
                "body": "sodium_crypto_core_ristretto255_scalar_random()",
                "description": ""
        },
        "ƒ:sodium_crypto_core_ristretto255_scalar_reduce": {
                "prefix": [
                        "sodium_crypto_core_ristretto255_scalar_reduce",
                        "sccrsr"
                ],
                "body": "sodium_crypto_core_ristretto255_scalar_reduce(${1:\\$p:string} )",
                "description": ""
        },
        "ƒ:sodium_crypto_core_ristretto255_scalar_sub": {
                "prefix": [
                        "sodium_crypto_core_ristretto255_scalar_sub",
                        "sccrss"
                ],
                "body": "sodium_crypto_core_ristretto255_scalar_sub(${1:\\$p:string},${2:\\$q:string} )",
                "description": ""
        },
        "ƒ:sodium_crypto_core_ristretto255_sub": {
                "prefix": [
                        "sodium_crypto_core_ristretto255_sub",
                        "sccrs"
                ],
                "body": "sodium_crypto_core_ristretto255_sub(${1:\\$p:string},${2:\\$q:string} )",
                "description": ""
        },
        "ƒ:sodium_crypto_generichash": {
                "prefix": [
                        "sodium_crypto_generichash",
                        "scg"
                ],
                "body": "sodium_crypto_generichash(${1:\\$message:string},${2:\\$key:string|null},${3:\\$outLen:integer} )",
                "description": ""
        },
        "ƒ:sodium_crypto_generichash_final": {
                "prefix": [
                        "sodium_crypto_generichash_final",
                        "scgf"
                ],
                "body": "sodium_crypto_generichash_final(${1:\\$ctx:string|null},${2:\\$outputLength:integer} )",
                "description": ""
        },
        "ƒ:sodium_crypto_generichash_init": {
                "prefix": [
                        "sodium_crypto_generichash_init",
                        "scgi"
                ],
                "body": "sodium_crypto_generichash_init(${1:\\$key:string|null},${2:\\$outLen:integer} )",
                "description": ""
        },
        "ƒ:sodium_crypto_generichash_keygen": {
                "prefix": [
                        "sodium_crypto_generichash_keygen",
                        "scgk"
                ],
                "body": "sodium_crypto_generichash_keygen()",
                "description": ""
        },
        "ƒ:sodium_crypto_generichash_update": {
                "prefix": [
                        "sodium_crypto_generichash_update",
                        "scgu"
                ],
                "body": "sodium_crypto_generichash_update(${1:\\$ctx:string|null},${2:\\$message:string} )",
                "description": ""
        },
        "ƒ:sodium_crypto_kdf_derive_from_key": {
                "prefix": [
                        "sodium_crypto_kdf_derive_from_key",
                        "sckdfk"
                ],
                "body": "sodium_crypto_kdf_derive_from_key(${1:\\$subkey_len:integer},${2:\\$subkey_id:integer},${3:\\$context:string},${4:\\$key:string} )",
                "description": ""
        },
        "ƒ:sodium_crypto_kdf_keygen": {
                "prefix": [
                        "sodium_crypto_kdf_keygen",
                        "sckk"
                ],
                "body": "sodium_crypto_kdf_keygen()",
                "description": ""
        },
        "ƒ:sodium_crypto_kx": {
                "prefix": [
                        "sodium_crypto_kx",
                        "sck"
                ],
                "body": "sodium_crypto_kx(${1:\\$my_secret:string},${2:\\$their_public:string},${3:\\$client_public:string},${4:\\$server_public:string} )",
                "description": ""
        },
        "ƒ:sodium_crypto_kx_client_session_keys": {
                "prefix": [
                        "sodium_crypto_kx_client_session_keys",
                        "sckcsk"
                ],
                "body": "sodium_crypto_kx_client_session_keys(${1:\\$keypair:string},${2:\\$serverPublicKey:string} )",
                "description": ""
        },
        "ƒ:sodium_crypto_kx_keypair": {
                "prefix": [
                        "sodium_crypto_kx_keypair",
                        "sckk"
                ],
                "body": "sodium_crypto_kx_keypair()",
                "description": ""
        },
        "ƒ:sodium_crypto_kx_publickey": {
                "prefix": [
                        "sodium_crypto_kx_publickey",
                        "sckp"
                ],
                "body": "sodium_crypto_kx_publickey(${1:\\$keypair:string} )",
                "description": ""
        },
        "ƒ:sodium_crypto_kx_secretkey": {
                "prefix": [
                        "sodium_crypto_kx_secretkey",
                        "scks"
                ],
                "body": "sodium_crypto_kx_secretkey(${1:\\$keypair:string} )",
                "description": ""
        },
        "ƒ:sodium_crypto_kx_seed_keypair": {
                "prefix": [
                        "sodium_crypto_kx_seed_keypair",
                        "scksk"
                ],
                "body": "sodium_crypto_kx_seed_keypair(${1:\\$seed:string} )",
                "description": ""
        },
        "ƒ:sodium_crypto_kx_server_session_keys": {
                "prefix": [
                        "sodium_crypto_kx_server_session_keys",
                        "sckssk"
                ],
                "body": "sodium_crypto_kx_server_session_keys(${1:\\$keypair:string},${2:\\$clientPublicKey:string} )",
                "description": ""
        },
        "ƒ:sodium_crypto_pwhash": {
                "prefix": [
                        "sodium_crypto_pwhash",
                        "scp"
                ],
                "body": "sodium_crypto_pwhash(${1:\\$outlen:integer},${2:\\$passwd:string},${3:\\$salt:string},${4:\\$opslimit:integer},${5:\\$memlimit:integer},${6:\\$algo:integer|null} )",
                "description": ""
        },
        "ƒ:sodium_crypto_pwhash_scryptsalsa208sha256": {
                "prefix": [
                        "sodium_crypto_pwhash_scryptsalsa208sha256",
                        "scps"
                ],
                "body": "sodium_crypto_pwhash_scryptsalsa208sha256(${1:\\$outlen:integer},${2:\\$passwd:string},${3:\\$salt:string},${4:\\$opslimit:integer},${5:\\$memlimit:integer} )",
                "description": ""
        },
        "ƒ:sodium_crypto_pwhash_scryptsalsa208sha256_str": {
                "prefix": [
                        "sodium_crypto_pwhash_scryptsalsa208sha256_str",
                        "scpss"
                ],
                "body": "sodium_crypto_pwhash_scryptsalsa208sha256_str(${1:\\$passwd:string},${2:\\$opslimit:integer},${3:\\$memlimit:integer} )",
                "description": ""
        },
        "ƒ:sodium_crypto_pwhash_scryptsalsa208sha256_str_verify": {
                "prefix": [
                        "sodium_crypto_pwhash_scryptsalsa208sha256_str_verify",
                        "scpssv"
                ],
                "body": "sodium_crypto_pwhash_scryptsalsa208sha256_str_verify(${1:\\$passwd:string},${2:\\$hash:string} )",
                "description": ""
        },
        "ƒ:sodium_crypto_pwhash_str": {
                "prefix": [
                        "sodium_crypto_pwhash_str",
                        "scps"
                ],
                "body": "sodium_crypto_pwhash_str(${1:\\$passwd:string},${2:\\$opslimit:integer},${3:\\$memlimit:integer} )",
                "description": ""
        },
        "ƒ:sodium_crypto_pwhash_str_needs_rehash": {
                "prefix": [
                        "sodium_crypto_pwhash_str_needs_rehash",
                        "scpsnr"
                ],
                "body": "sodium_crypto_pwhash_str_needs_rehash(${1:\\$hash:string},${2:\\$opslimit:integer},${3:\\$memlimit:integer} )",
                "description": ""
        },
        "ƒ:sodium_crypto_pwhash_str_verify": {
                "prefix": [
                        "sodium_crypto_pwhash_str_verify",
                        "scpsv"
                ],
                "body": "sodium_crypto_pwhash_str_verify(${1:\\$passwd:string},${2:\\$hash:string} )",
                "description": ""
        },
        "ƒ:sodium_crypto_scalarmult": {
                "prefix": [
                        "sodium_crypto_scalarmult",
                        "scs"
                ],
                "body": "sodium_crypto_scalarmult(${1:\\$n:string},${2:\\$p:string} )",
                "description": ""
        },
        "ƒ:sodium_crypto_scalarmult_base": {
                "prefix": [
                        "sodium_crypto_scalarmult_base",
                        "scsb"
                ],
                "body": "sodium_crypto_scalarmult_base(${1:\\$n:string} )",
                "description": ""
        },
        "ƒ:sodium_crypto_scalarmult_ristretto255": {
                "prefix": [
                        "sodium_crypto_scalarmult_ristretto255",
                        "scsr"
                ],
                "body": "sodium_crypto_scalarmult_ristretto255(${1:\\$n:string},${2:\\$p:string} )",
                "description": ""
        },
        "ƒ:sodium_crypto_scalarmult_ristretto255_base": {
                "prefix": [
                        "sodium_crypto_scalarmult_ristretto255_base",
                        "scsrb"
                ],
                "body": "sodium_crypto_scalarmult_ristretto255_base(${1:\\$n:string} )",
                "description": ""
        },
        "ƒ:sodium_crypto_secretbox": {
                "prefix": [
                        "sodium_crypto_secretbox",
                        "scs"
                ],
                "body": "sodium_crypto_secretbox(${1:\\$message:string},${2:\\$nonce:string},${3:\\$key:string} )",
                "description": ""
        },
        "ƒ:sodium_crypto_secretbox_keygen": {
                "prefix": [
                        "sodium_crypto_secretbox_keygen",
                        "scsk"
                ],
                "body": "sodium_crypto_secretbox_keygen()",
                "description": ""
        },
        "ƒ:sodium_crypto_secretbox_open": {
                "prefix": [
                        "sodium_crypto_secretbox_open",
                        "scso"
                ],
                "body": "sodium_crypto_secretbox_open(${1:\\$message:string},${2:\\$nonce:string},${3:\\$key:string} )",
                "description": ""
        },
        "ƒ:sodium_crypto_secretstream_xchacha20poly1305_init_pull": {
                "prefix": [
                        "sodium_crypto_secretstream_xchacha20poly1305_init_pull",
                        "scsxip"
                ],
                "body": "sodium_crypto_secretstream_xchacha20poly1305_init_pull(${1:\\$header:string},${2:\\$key:string} )",
                "description": ""
        },
        "ƒ:sodium_crypto_secretstream_xchacha20poly1305_init_push": {
                "prefix": [
                        "sodium_crypto_secretstream_xchacha20poly1305_init_push",
                        "scsxip"
                ],
                "body": "sodium_crypto_secretstream_xchacha20poly1305_init_push(${1:\\$key:string} )",
                "description": ""
        },
        "ƒ:sodium_crypto_secretstream_xchacha20poly1305_keygen": {
                "prefix": [
                        "sodium_crypto_secretstream_xchacha20poly1305_keygen",
                        "scsxk"
                ],
                "body": "sodium_crypto_secretstream_xchacha20poly1305_keygen()",
                "description": ""
        },
        "ƒ:sodium_crypto_secretstream_xchacha20poly1305_pull": {
                "prefix": [
                        "sodium_crypto_secretstream_xchacha20poly1305_pull",
                        "scsxp"
                ],
                "body": "sodium_crypto_secretstream_xchacha20poly1305_pull(${1:\\$state:string},${2:\\$cipher:string},${3:\\$aad:string} )",
                "description": ""
        },
        "ƒ:sodium_crypto_secretstream_xchacha20poly1305_push": {
                "prefix": [
                        "sodium_crypto_secretstream_xchacha20poly1305_push",
                        "scsxp"
                ],
                "body": "sodium_crypto_secretstream_xchacha20poly1305_push(${1:\\$state:string},${2:\\$msg:string},${3:\\$aad:string},${4:\\$tag:integer} )",
                "description": ""
        },
        "ƒ:sodium_crypto_secretstream_xchacha20poly1305_rekey": {
                "prefix": [
                        "sodium_crypto_secretstream_xchacha20poly1305_rekey",
                        "scsxr"
                ],
                "body": "sodium_crypto_secretstream_xchacha20poly1305_rekey(${1:\\$state:string} )",
                "description": ""
        },
        "ƒ:sodium_crypto_shorthash": {
                "prefix": [
                        "sodium_crypto_shorthash",
                        "scs"
                ],
                "body": "sodium_crypto_shorthash(${1:\\$message:string},${2:\\$key:string} )",
                "description": ""
        },
        "ƒ:sodium_crypto_shorthash_keygen": {
                "prefix": [
                        "sodium_crypto_shorthash_keygen",
                        "scsk"
                ],
                "body": "sodium_crypto_shorthash_keygen()",
                "description": ""
        },
        "ƒ:sodium_crypto_sign": {
                "prefix": [
                        "sodium_crypto_sign",
                        "scs"
                ],
                "body": "sodium_crypto_sign(${1:\\$message:string},${2:\\$sk:string} )",
                "description": ""
        },
        "ƒ:sodium_crypto_sign_detached": {
                "prefix": [
                        "sodium_crypto_sign_detached",
                        "scsd"
                ],
                "body": "sodium_crypto_sign_detached(${1:\\$message:string},${2:\\$sk:string} )",
                "description": ""
        },
        "ƒ:sodium_crypto_sign_ed25519_pk_to_curve25519": {
                "prefix": [
                        "sodium_crypto_sign_ed25519_pk_to_curve25519",
                        "scseptc"
                ],
                "body": "sodium_crypto_sign_ed25519_pk_to_curve25519(${1:\\$pk:string} )",
                "description": ""
        },
        "ƒ:sodium_crypto_sign_ed25519_sk_to_curve25519": {
                "prefix": [
                        "sodium_crypto_sign_ed25519_sk_to_curve25519",
                        "scsestc"
                ],
                "body": "sodium_crypto_sign_ed25519_sk_to_curve25519(${1:\\$sk:string} )",
                "description": ""
        },
        "ƒ:sodium_crypto_sign_keypair": {
                "prefix": [
                        "sodium_crypto_sign_keypair",
                        "scsk"
                ],
                "body": "sodium_crypto_sign_keypair()",
                "description": ""
        },
        "ƒ:sodium_crypto_sign_keypair_from_secretkey_and_publickey": {
                "prefix": [
                        "sodium_crypto_sign_keypair_from_secretkey_and_publickey",
                        "scskfsap"
                ],
                "body": "sodium_crypto_sign_keypair_from_secretkey_and_publickey(${1:\\$sk:string},${2:\\$pk:string} )",
                "description": ""
        },
        "ƒ:sodium_crypto_sign_open": {
                "prefix": [
                        "sodium_crypto_sign_open",
                        "scso"
                ],
                "body": "sodium_crypto_sign_open(${1:\\$signedMessage:string},${2:\\$pk:string} )",
                "description": ""
        },
        "ƒ:sodium_crypto_sign_publickey": {
                "prefix": [
                        "sodium_crypto_sign_publickey",
                        "scsp"
                ],
                "body": "sodium_crypto_sign_publickey(${1:\\$keypair:string} )",
                "description": ""
        },
        "ƒ:sodium_crypto_sign_publickey_from_secretkey": {
                "prefix": [
                        "sodium_crypto_sign_publickey_from_secretkey",
                        "scspfs"
                ],
                "body": "sodium_crypto_sign_publickey_from_secretkey(${1:\\$sk:string} )",
                "description": ""
        },
        "ƒ:sodium_crypto_sign_secretkey": {
                "prefix": [
                        "sodium_crypto_sign_secretkey",
                        "scss"
                ],
                "body": "sodium_crypto_sign_secretkey(${1:\\$keypair:string} )",
                "description": ""
        },
        "ƒ:sodium_crypto_sign_seed_keypair": {
                "prefix": [
                        "sodium_crypto_sign_seed_keypair",
                        "scssk"
                ],
                "body": "sodium_crypto_sign_seed_keypair(${1:\\$seed:string} )",
                "description": ""
        },
        "ƒ:sodium_crypto_sign_verify_detached": {
                "prefix": [
                        "sodium_crypto_sign_verify_detached",
                        "scsvd"
                ],
                "body": "sodium_crypto_sign_verify_detached(${1:\\$signature:string},${2:\\$message:string},${3:\\$pk:string} )",
                "description": ""
        },
        "ƒ:sodium_crypto_stream": {
                "prefix": [
                        "sodium_crypto_stream",
                        "scs"
                ],
                "body": "sodium_crypto_stream(${1:\\$len:integer},${2:\\$nonce:string},${3:\\$key:string} )",
                "description": ""
        },
        "ƒ:sodium_crypto_stream_keygen": {
                "prefix": [
                        "sodium_crypto_stream_keygen",
                        "scsk"
                ],
                "body": "sodium_crypto_stream_keygen()",
                "description": ""
        },
        "ƒ:sodium_crypto_stream_xchacha20": {
                "prefix": [
                        "sodium_crypto_stream_xchacha20",
                        "scsx"
                ],
                "body": "sodium_crypto_stream_xchacha20(${1:\\$len:integer},${2:\\$nonce:string},${3:\\$key:string} )",
                "description": ""
        },
        "ƒ:sodium_crypto_stream_xchacha20_keygen": {
                "prefix": [
                        "sodium_crypto_stream_xchacha20_keygen",
                        "scsxk"
                ],
                "body": "sodium_crypto_stream_xchacha20_keygen()",
                "description": ""
        },
        "ƒ:sodium_crypto_stream_xchacha20_xor": {
                "prefix": [
                        "sodium_crypto_stream_xchacha20_xor",
                        "scsxx"
                ],
                "body": "sodium_crypto_stream_xchacha20_xor(${1:\\$message:string},${2:\\$nonce:string},${3:\\$key:string} )",
                "description": ""
        },
        "ƒ:sodium_crypto_stream_xor": {
                "prefix": [
                        "sodium_crypto_stream_xor",
                        "scsx"
                ],
                "body": "sodium_crypto_stream_xor(${1:\\$message:string},${2:\\$nonce:string},${3:\\$key:string} )",
                "description": ""
        },
        "ƒ:sodium_hex2bin": {
                "prefix": [
                        "sodium_hex2bin",
                        "sh"
                ],
                "body": "sodium_hex2bin(${1:\\$string:string} )",
                "description": ""
        },
        "ƒ:sodium_increment": {
                "prefix": [
                        "sodium_increment",
                        "si"
                ],
                "body": "sodium_increment(${1:\\$string:string} )",
                "description": ""
        },
        "ƒ:sodium_library_version_major": {
                "prefix": [
                        "sodium_library_version_major",
                        "slvm"
                ],
                "body": "sodium_library_version_major()",
                "description": ""
        },
        "ƒ:sodium_library_version_minor": {
                "prefix": [
                        "sodium_library_version_minor",
                        "slvm"
                ],
                "body": "sodium_library_version_minor()",
                "description": ""
        },
        "ƒ:sodium_memcmp": {
                "prefix": [
                        "sodium_memcmp",
                        "sm"
                ],
                "body": "sodium_memcmp(${1:\\$a:string},${2:\\$b:string} )",
                "description": ""
        },
        "ƒ:sodium_memzero": {
                "prefix": [
                        "sodium_memzero",
                        "sm"
                ],
                "body": "sodium_memzero(${1:\\$str:string} )",
                "description": ""
        },
        "ƒ:sodium_pad": {
                "prefix": [
                        "sodium_pad",
                        "sp"
                ],
                "body": "sodium_pad(${1:\\$unpadded:string},${2:\\$blockSize:integer} )",
                "description": ""
        },
        "ƒ:sodium_randombytes_buf": {
                "prefix": [
                        "sodium_randombytes_buf",
                        "srb"
                ],
                "body": "sodium_randombytes_buf(${1:\\$amount:integer} )",
                "description": ""
        },
        "ƒ:sodium_randombytes_random16": {
                "prefix": [
                        "sodium_randombytes_random16",
                        "srr"
                ],
                "body": "sodium_randombytes_random16()",
                "description": ""
        },
        "ƒ:sodium_randombytes_uniform": {
                "prefix": [
                        "sodium_randombytes_uniform",
                        "sru"
                ],
                "body": "sodium_randombytes_uniform(${1:\\$upperLimit:integer} )",
                "description": ""
        },
        "ƒ:sodium_unpad": {
                "prefix": [
                        "sodium_unpad",
                        "su"
                ],
                "body": "sodium_unpad(${1:\\$padded:string},${2:\\$blockSize:integer} )",
                "description": ""
        },
        "ƒ:sodium_version_string": {
                "prefix": [
                        "sodium_version_string",
                        "svs"
                ],
                "body": "sodium_version_string()",
                "description": ""
        },
        "ƒ:sodiumCompatAutoloader": {
                "prefix": [
                        "sodiumCompatAutoloader"
                ],
                "body": "sodiumCompatAutoloader(${1:\\$class:string} )",
                "description": "Sodium_Compat autoloader."
        },
        "ƒ:sort_menu": {
                "prefix": [
                        "sort_menu",
                        "sm"
                ],
                "body": "sort_menu(${1:\\$a:array},${2:\\$b:array} )",
                "description": ""
        },
        "ƒ:spawn_cron": {
                "prefix": [
                        "spawn_cron",
                        "sc"
                ],
                "body": "spawn_cron(${1:\\$gmt_time:integer} )",
                "description": "Sends a request to run cron through HTTP request that doesn&#039;t halt page loading."
        },
        "ƒ:start_post_rel_link": {
                "prefix": [
                        "start_post_rel_link",
                        "sprl"
                ],
                "body": "start_post_rel_link(${1:\\$title:string},${2:\\$in_same_cat:boolean},${3:\\$excluded_categories:string} )",
                "description": "Display relational link for the first post."
        },
        "ƒ:start_wp": {
                "prefix": [
                        "start_wp",
                        "sw"
                ],
                "body": "start_wp()",
                "description": "Sets up the WordPress Loop."
        },
        "ƒ:startElement": {
                "prefix": [
                        "startElement"
                ],
                "body": "startElement(${1:\\$parser:resource},${2:\\$tag_name:string},${3:\\$attrs:array} )",
                "description": "XML callback function for the start of a new XML tag."
        },
        "ƒ:status_header": {
                "prefix": [
                        "status_header",
                        "sh"
                ],
                "body": "status_header(${1:\\$code:integer},${2:\\$description:string} )",
                "description": "Set HTTP status header."
        },
        "ƒ:stick_post": {
                "prefix": [
                        "stick_post",
                        "sp"
                ],
                "body": "stick_post(${1:\\$post_id:integer} )",
                "description": "Make a post sticky."
        },
        "ƒ:sticky_class": {
                "prefix": [
                        "sticky_class",
                        "sc"
                ],
                "body": "sticky_class(${1:\\$post_id:integer|null} )",
                "description": "Display &quot;sticky&quot; CSS class, if a post is sticky."
        },
        "ƒ:str_contains": {
                "prefix": [
                        "str_contains",
                        "sc"
                ],
                "body": "str_contains(${1:\\$haystack:string},${2:\\$needle:string} )",
                "description": "Polyfill for `str_contains()` function added in PHP 8.0."
        },
        "ƒ:str_ends_with": {
                "prefix": [
                        "str_ends_with",
                        "sew"
                ],
                "body": "str_ends_with(${1:\\$haystack:string},${2:\\$needle:string} )",
                "description": "Polyfill for `str_ends_with()` function added in PHP 8.0."
        },
        "ƒ:str_starts_with": {
                "prefix": [
                        "str_starts_with",
                        "ssw"
                ],
                "body": "str_starts_with(${1:\\$haystack:string},${2:\\$needle:string} )",
                "description": "Polyfill for `str_starts_with()` function added in PHP 8.0."
        },
        "ƒ:stream_preview_image": {
                "prefix": [
                        "stream_preview_image",
                        "spi"
                ],
                "body": "stream_preview_image(${1:\\$post_id:integer} )",
                "description": "Streams image in post to browser, along with enqueued changes in `$_REQUEST[&#039;history&#039;]`."
        },
        "ƒ:strip_core_block_namespace": {
                "prefix": [
                        "strip_core_block_namespace",
                        "scbn"
                ],
                "body": "strip_core_block_namespace(${1:\\$block_name:string|null} )",
                "description": "Returns the block name to use for serialization. This will remove the default &quot;core/&quot; namespace from a block name."
        },
        "ƒ:strip_fragment_from_url": {
                "prefix": [
                        "strip_fragment_from_url",
                        "sffu"
                ],
                "body": "strip_fragment_from_url(${1:\\$url:string} )",
                "description": "Strips the #fragment from a URL, if one is present."
        },
        "ƒ:strip_shortcode_tag": {
                "prefix": [
                        "strip_shortcode_tag",
                        "sst"
                ],
                "body": "strip_shortcode_tag(${1:\\$m:array} )",
                "description": "Strips a shortcode tag based on RegEx matches against post content."
        },
        "ƒ:strip_shortcodes": {
                "prefix": [
                        "strip_shortcodes",
                        "ss"
                ],
                "body": "strip_shortcodes(${1:\\$content:string} )",
                "description": "Remove all shortcode tags from the given content."
        },
        "ƒ:stripos": {
                "prefix": [
                        "stripos"
                ],
                "body": "stripos(${1:\\$haystack:},${2:\\$needle:} )",
                "description": ""
        },
        "ƒ:stripslashes_deep": {
                "prefix": [
                        "stripslashes_deep",
                        "sd"
                ],
                "body": "stripslashes_deep(${1:\\$value:mixed} )",
                "description": "Navigates through an array, object, or scalar, and removes slashes from the values."
        },
        "ƒ:stripslashes_from_strings_only": {
                "prefix": [
                        "stripslashes_from_strings_only",
                        "sfso"
                ],
                "body": "stripslashes_from_strings_only(${1:\\$value:mixed} )",
                "description": "Callback function for `stripslashes_deep()` which strips slashes from strings."
        },
        "ƒ:styles_for_block_core_search": {
                "prefix": [
                        "styles_for_block_core_search",
                        "sfbcs"
                ],
                "body": "styles_for_block_core_search(${1:\\$attributes:array} )",
                "description": "Builds an array of inline styles for the search block."
        },
        "ƒ:submit_button": {
                "prefix": [
                        "submit_button",
                        "sb"
                ],
                "body": "submit_button(${1:\\$text:string|null},${2:\\$type:string},${3:\\$name:string},${4:\\$wrap:boolean},${5:\\$other_attributes:array|string|null} )",
                "description": "Echoes a submit button, with provided text and appropriate class(es)."
        },
        "ƒ:switch_theme": {
                "prefix": [
                        "switch_theme",
                        "st"
                ],
                "body": "switch_theme(${1:\\$stylesheet:string} )",
                "description": "Switches the theme."
        },
        "ƒ:switch_to_blog": {
                "prefix": [
                        "switch_to_blog",
                        "stb"
                ],
                "body": "switch_to_blog(${1:\\$new_blog_id:integer},${2:\\$deprecated:boolean|null} )",
                "description": "Switch the current blog."
        },
        "ƒ:switch_to_locale": {
                "prefix": [
                        "switch_to_locale",
                        "stl"
                ],
                "body": "switch_to_locale(${1:\\$locale:string} )",
                "description": "Switches the translations according to the given locale."
        },
        "ƒ:sync_category_tag_slugs": {
                "prefix": [
                        "sync_category_tag_slugs",
                        "scts"
                ],
                "body": "sync_category_tag_slugs(${1:\\$term:WP_Term|array},${2:\\$taxonomy:string} )",
                "description": "Synchronizes category and post tag slugs when global terms are enabled."
        },
        "ƒ:tag_description": {
                "prefix": [
                        "tag_description",
                        "td"
                ],
                "body": "tag_description(${1:\\$tag:integer} )",
                "description": "Retrieves tag description."
        },
        "ƒ:tag_escape": {
                "prefix": [
                        "tag_escape",
                        "te"
                ],
                "body": "tag_escape(${1:\\$tag_name:string} )",
                "description": "Escapes an HTML tag name."
        },
        "ƒ:tag_exists": {
                "prefix": [
                        "tag_exists",
                        "te"
                ],
                "body": "tag_exists(${1:\\$tag_name:integer|string} )",
                "description": "Check whether a post tag with a given name exists."
        },
        "ƒ:taxonomy_exists": {
                "prefix": [
                        "taxonomy_exists",
                        "te"
                ],
                "body": "taxonomy_exists(${1:\\$taxonomy:string} )",
                "description": "Determines whether the taxonomy name exists."
        },
        "ƒ:taxonomy_meta_box_sanitize_cb_checkboxes": {
                "prefix": [
                        "taxonomy_meta_box_sanitize_cb_checkboxes",
                        "tmbscc"
                ],
                "body": "taxonomy_meta_box_sanitize_cb_checkboxes(${1:\\$taxonomy:string},${2:\\$terms:array} )",
                "description": "Sanitizes POST values from a checkbox taxonomy metabox."
        },
        "ƒ:taxonomy_meta_box_sanitize_cb_input": {
                "prefix": [
                        "taxonomy_meta_box_sanitize_cb_input",
                        "tmbsci"
                ],
                "body": "taxonomy_meta_box_sanitize_cb_input(${1:\\$taxonomy:string},${2:\\$terms:array|string} )",
                "description": "Sanitizes POST values from an input taxonomy metabox."
        },
        "ƒ:term_description": {
                "prefix": [
                        "term_description",
                        "td"
                ],
                "body": "term_description(${1:\\$term:integer},${2:\\$deprecated:null} )",
                "description": "Retrieves term description."
        },
        "ƒ:term_exists": {
                "prefix": [
                        "term_exists",
                        "te"
                ],
                "body": "term_exists(${1:\\$term:integer|string},${2:\\$taxonomy:string},${3:\\$parent:integer|null} )",
                "description": "Determines whether a taxonomy term exists."
        },
        "ƒ:term_is_ancestor_of": {
                "prefix": [
                        "term_is_ancestor_of",
                        "tiao"
                ],
                "body": "term_is_ancestor_of(${1:\\$term1:integer|object},${2:\\$term2:integer|object},${3:\\$taxonomy:string} )",
                "description": "Checks if a term is an ancestor of another term."
        },
        "ƒ:the_archive_description": {
                "prefix": [
                        "the_archive_description",
                        "tad"
                ],
                "body": "the_archive_description(${1:\\$before:string},${2:\\$after:string} )",
                "description": "Display category, tag, term, or author description."
        },
        "ƒ:the_archive_title": {
                "prefix": [
                        "the_archive_title",
                        "tat"
                ],
                "body": "the_archive_title(${1:\\$before:string},${2:\\$after:string} )",
                "description": "Display the archive title based on the queried object."
        },
        "ƒ:the_attachment_link": {
                "prefix": [
                        "the_attachment_link",
                        "tal"
                ],
                "body": "the_attachment_link(${1:\\$id:integer|WP_Post},${2:\\$fullsize:boolean},${3:\\$deprecated:boolean},${4:\\$permalink:boolean} )",
                "description": "Displays an attachment page link using an image or icon."
        },
        "ƒ:the_attachment_links": {
                "prefix": [
                        "the_attachment_links",
                        "tal"
                ],
                "body": "the_attachment_links(${1:\\$id:integer|boolean} )",
                "description": "This was once used to display attachment links. Now it is deprecated and stubbed."
        },
        "ƒ:the_author": {
                "prefix": [
                        "the_author",
                        "ta"
                ],
                "body": "the_author(${1:\\$deprecated:string},${2:\\$deprecated_echo:boolean} )",
                "description": "Displays the name of the author of the current post."
        },
        "ƒ:the_author_aim": {
                "prefix": [
                        "the_author_aim",
                        "taa"
                ],
                "body": "the_author_aim()",
                "description": "Display the AIM address of the author of the current post."
        },
        "ƒ:the_author_description": {
                "prefix": [
                        "the_author_description",
                        "tad"
                ],
                "body": "the_author_description()",
                "description": "Display the description of the author of the current post."
        },
        "ƒ:the_author_email": {
                "prefix": [
                        "the_author_email",
                        "tae"
                ],
                "body": "the_author_email()",
                "description": "Display the email of the author of the current post."
        },
        "ƒ:the_author_firstname": {
                "prefix": [
                        "the_author_firstname",
                        "taf"
                ],
                "body": "the_author_firstname()",
                "description": "Display the first name of the author of the current post."
        },
        "ƒ:the_author_icq": {
                "prefix": [
                        "the_author_icq",
                        "tai"
                ],
                "body": "the_author_icq()",
                "description": "Display the ICQ number of the author of the current post."
        },
        "ƒ:the_author_ID": {
                "prefix": [
                        "the_author_ID",
                        "taI"
                ],
                "body": "the_author_ID()",
                "description": "Display the ID of the author of the current post."
        },
        "ƒ:the_author_lastname": {
                "prefix": [
                        "the_author_lastname",
                        "tal"
                ],
                "body": "the_author_lastname()",
                "description": "Display the last name of the author of the current post."
        },
        "ƒ:the_author_link": {
                "prefix": [
                        "the_author_link",
                        "tal"
                ],
                "body": "the_author_link()",
                "description": "Displays either author&#039;s link or author&#039;s name."
        },
        "ƒ:the_author_login": {
                "prefix": [
                        "the_author_login",
                        "tal"
                ],
                "body": "the_author_login()",
                "description": "Display the login name of the author of the current post."
        },
        "ƒ:the_author_meta": {
                "prefix": [
                        "the_author_meta",
                        "tam"
                ],
                "body": "the_author_meta(${1:\\$field:string},${2:\\$user_id:integer|false} )",
                "description": "Outputs the field from the user&#039;s DB object. Defaults to current post&#039;s author."
        },
        "ƒ:the_author_msn": {
                "prefix": [
                        "the_author_msn",
                        "tam"
                ],
                "body": "the_author_msn()",
                "description": "Display the MSN address of the author of the current post."
        },
        "ƒ:the_author_nickname": {
                "prefix": [
                        "the_author_nickname",
                        "tan"
                ],
                "body": "the_author_nickname()",
                "description": "Display the nickname of the author of the current post."
        },
        "ƒ:the_author_posts": {
                "prefix": [
                        "the_author_posts",
                        "tap"
                ],
                "body": "the_author_posts()",
                "description": "Displays the number of posts by the author of the current post."
        },
        "ƒ:the_author_posts_link": {
                "prefix": [
                        "the_author_posts_link",
                        "tapl"
                ],
                "body": "the_author_posts_link(${1:\\$deprecated:string} )",
                "description": "Displays an HTML link to the author page of the current post&#039;s author."
        },
        "ƒ:the_author_url": {
                "prefix": [
                        "the_author_url",
                        "tau"
                ],
                "body": "the_author_url()",
                "description": "Display the URL to the home page of the author of the current post."
        },
        "ƒ:the_author_yim": {
                "prefix": [
                        "the_author_yim",
                        "tay"
                ],
                "body": "the_author_yim()",
                "description": "Display the Yahoo! IM name of the author of the current post."
        },
        "ƒ:the_block_editor_meta_box_post_form_hidden_fields": {
                "prefix": [
                        "the_block_editor_meta_box_post_form_hidden_fields",
                        "tbembpfhf"
                ],
                "body": "the_block_editor_meta_box_post_form_hidden_fields(${1:\\$post:WP_Post} )",
                "description": "Renders the hidden form required for the meta boxes form."
        },
        "ƒ:the_block_editor_meta_boxes": {
                "prefix": [
                        "the_block_editor_meta_boxes",
                        "tbemb"
                ],
                "body": "the_block_editor_meta_boxes()",
                "description": "Renders the meta boxes forms."
        },
        "ƒ:the_block_template_skip_link": {
                "prefix": [
                        "the_block_template_skip_link",
                        "tbtsl"
                ],
                "body": "the_block_template_skip_link()",
                "description": "Prints the skip-link script &amp; styles."
        },
        "ƒ:the_category": {
                "prefix": [
                        "the_category",
                        "tc"
                ],
                "body": "the_category(${1:\\$separator:string},${2:\\$parents:string},${3:\\$post_id:integer} )",
                "description": "Displays category list for a post in either HTML list or custom format."
        },
        "ƒ:the_category_head": {
                "prefix": [
                        "the_category_head",
                        "tch"
                ],
                "body": "the_category_head(${1:\\$before:string},${2:\\$after:string} )",
                "description": "Prints a category with optional text before and after."
        },
        "ƒ:the_category_ID": {
                "prefix": [
                        "the_category_ID",
                        "tcI"
                ],
                "body": "the_category_ID(${1:\\$display:boolean} )",
                "description": "Returns or prints a category ID."
        },
        "ƒ:the_category_rss": {
                "prefix": [
                        "the_category_rss",
                        "tcr"
                ],
                "body": "the_category_rss(${1:\\$type:string|null} )",
                "description": "Display the post categories in the feed."
        },
        "ƒ:the_comment": {
                "prefix": [
                        "the_comment",
                        "tc"
                ],
                "body": "the_comment()",
                "description": "Iterate comment index in the comment loop."
        },
        "ƒ:the_comments_navigation": {
                "prefix": [
                        "the_comments_navigation",
                        "tcn"
                ],
                "body": "the_comments_navigation(${1:\\$args:array} )",
                "description": "Displays navigation to next/previous set of comments, when applicable."
        },
        "ƒ:the_comments_pagination": {
                "prefix": [
                        "the_comments_pagination",
                        "tcp"
                ],
                "body": "the_comments_pagination(${1:\\$args:array} )",
                "description": "Displays a paginated navigation to next/previous set of comments, when applicable."
        },
        "ƒ:the_content": {
                "prefix": [
                        "the_content",
                        "tc"
                ],
                "body": "the_content(${1:\\$more_link_text:string|null},${2:\\$strip_teaser:boolean} )",
                "description": "Displays the post content."
        },
        "ƒ:the_content_feed": {
                "prefix": [
                        "the_content_feed",
                        "tcf"
                ],
                "body": "the_content_feed(${1:\\$feed_type:string|null} )",
                "description": "Display the post content for feeds."
        },
        "ƒ:the_content_rss": {
                "prefix": [
                        "the_content_rss",
                        "tcr"
                ],
                "body": "the_content_rss(${1:\\$more_link_text:string},${2:\\$stripteaser:integer},${3:\\$more_file:string},${4:\\$cut:integer},${5:\\$encode_html:integer} )",
                "description": "Display the post content for the feed."
        },
        "ƒ:the_custom_header_markup": {
                "prefix": [
                        "the_custom_header_markup",
                        "tchm"
                ],
                "body": "the_custom_header_markup()",
                "description": "Prints the markup for a custom header."
        },
        "ƒ:the_custom_logo": {
                "prefix": [
                        "the_custom_logo",
                        "tcl"
                ],
                "body": "the_custom_logo(${1:\\$blog_id:integer} )",
                "description": "Displays a custom logo, linked to home unless the theme supports removing the link on the home page."
        },
        "ƒ:the_date": {
                "prefix": [
                        "the_date",
                        "td"
                ],
                "body": "the_date(${1:\\$format:string},${2:\\$before:string},${3:\\$after:string},${4:\\$echo:boolean} )",
                "description": "Display or Retrieve the date the current post was written (once per date)"
        },
        "ƒ:the_date_xml": {
                "prefix": [
                        "the_date_xml",
                        "tdx"
                ],
                "body": "the_date_xml()",
                "description": "Outputs the date in iso8601 format for xml files."
        },
        "ƒ:the_editor": {
                "prefix": [
                        "the_editor",
                        "te"
                ],
                "body": "the_editor(${1:\\$content:string},${2:\\$id:string},${3:\\$prev_id:string},${4:\\$media_buttons:boolean},${5:\\$tab_index:integer},${6:\\$extended:boolean} )",
                "description": "Displays an editor: TinyMCE, HTML, or both."
        },
        "ƒ:the_embed_site_title": {
                "prefix": [
                        "the_embed_site_title",
                        "test"
                ],
                "body": "the_embed_site_title()",
                "description": "Prints the necessary markup for the site title in an embed template."
        },
        "ƒ:the_excerpt": {
                "prefix": [
                        "the_excerpt",
                        "te"
                ],
                "body": "the_excerpt()",
                "description": "Displays the post excerpt."
        },
        "ƒ:the_excerpt_embed": {
                "prefix": [
                        "the_excerpt_embed",
                        "tee"
                ],
                "body": "the_excerpt_embed()",
                "description": "Displays the post excerpt for the embed template."
        },
        "ƒ:the_excerpt_rss": {
                "prefix": [
                        "the_excerpt_rss",
                        "ter"
                ],
                "body": "the_excerpt_rss()",
                "description": "Display the post excerpt for the feed."
        },
        "ƒ:the_feed_link": {
                "prefix": [
                        "the_feed_link",
                        "tfl"
                ],
                "body": "the_feed_link(${1:\\$anchor:string},${2:\\$feed:string} )",
                "description": "Displays the permalink for the feed type."
        },
        "ƒ:the_generator": {
                "prefix": [
                        "the_generator",
                        "tg"
                ],
                "body": "the_generator(${1:\\$type:string} )",
                "description": "Display the generator XML or Comment for RSS, ATOM, etc."
        },
        "ƒ:the_guid": {
                "prefix": [
                        "the_guid",
                        "tg"
                ],
                "body": "the_guid(${1:\\$post:integer|WP_Post} )",
                "description": "Displays the Post Global Unique Identifier (guid)."
        },
        "ƒ:the_header_image_tag": {
                "prefix": [
                        "the_header_image_tag",
                        "thit"
                ],
                "body": "the_header_image_tag(${1:\\$attr:array} )",
                "description": "Displays the image markup for a custom header image."
        },
        "ƒ:the_header_video_url": {
                "prefix": [
                        "the_header_video_url",
                        "thvu"
                ],
                "body": "the_header_video_url()",
                "description": "Displays header video URL."
        },
        "ƒ:the_ID": {
                "prefix": [
                        "the_ID",
                        "tI"
                ],
                "body": "the_ID()",
                "description": "Displays the ID of the current item in the WordPress Loop."
        },
        "ƒ:the_media_upload_tabs": {
                "prefix": [
                        "the_media_upload_tabs",
                        "tmut"
                ],
                "body": "the_media_upload_tabs()",
                "description": "Outputs the legacy media upload tabs UI."
        },
        "ƒ:the_modified_author": {
                "prefix": [
                        "the_modified_author",
                        "tma"
                ],
                "body": "the_modified_author()",
                "description": "Displays the name of the author who last edited the current post, if the author&#039;s ID is available."
        },
        "ƒ:the_modified_date": {
                "prefix": [
                        "the_modified_date",
                        "tmd"
                ],
                "body": "the_modified_date(${1:\\$format:string},${2:\\$before:string},${3:\\$after:string},${4:\\$echo:boolean} )",
                "description": "Display the date on which the post was last modified."
        },
        "ƒ:the_modified_time": {
                "prefix": [
                        "the_modified_time",
                        "tmt"
                ],
                "body": "the_modified_time(${1:\\$format:string} )",
                "description": "Display the time at which the post was last modified."
        },
        "ƒ:the_permalink": {
                "prefix": [
                        "the_permalink",
                        "tp"
                ],
                "body": "the_permalink(${1:\\$post:integer|WP_Post} )",
                "description": "Displays the permalink for the current post."
        },
        "ƒ:the_permalink_rss": {
                "prefix": [
                        "the_permalink_rss",
                        "tpr"
                ],
                "body": "the_permalink_rss()",
                "description": "Display the permalink to the post for use in feeds."
        },
        "ƒ:the_post": {
                "prefix": [
                        "the_post",
                        "tp"
                ],
                "body": "the_post()",
                "description": "Iterate the post index in the loop."
        },
        "ƒ:the_post_navigation": {
                "prefix": [
                        "the_post_navigation",
                        "tpn"
                ],
                "body": "the_post_navigation(${1:\\$args:array} )",
                "description": "Displays the navigation to next/previous post, when applicable."
        },
        "ƒ:the_post_password": {
                "prefix": [
                        "the_post_password",
                        "tpp"
                ],
                "body": "the_post_password()",
                "description": "Displays the post password."
        },
        "ƒ:the_post_thumbnail": {
                "prefix": [
                        "the_post_thumbnail",
                        "tpt"
                ],
                "body": "the_post_thumbnail(${1:\\$size:string|array},${2:\\$attr:string|array} )",
                "description": "Displays the post thumbnail."
        },
        "ƒ:the_post_thumbnail_caption": {
                "prefix": [
                        "the_post_thumbnail_caption",
                        "tptc"
                ],
                "body": "the_post_thumbnail_caption(${1:\\$post:integer|WP_Post|null} )",
                "description": "Displays the post thumbnail caption."
        },
        "ƒ:the_post_thumbnail_url": {
                "prefix": [
                        "the_post_thumbnail_url",
                        "tptu"
                ],
                "body": "the_post_thumbnail_url(${1:\\$size:string|array} )",
                "description": "Displays the post thumbnail URL."
        },
        "ƒ:the_posts_navigation": {
                "prefix": [
                        "the_posts_navigation",
                        "tpn"
                ],
                "body": "the_posts_navigation(${1:\\$args:array} )",
                "description": "Displays the navigation to next/previous set of posts, when applicable."
        },
        "ƒ:the_posts_pagination": {
                "prefix": [
                        "the_posts_pagination",
                        "tpp"
                ],
                "body": "the_posts_pagination(${1:\\$args:array} )",
                "description": "Displays a paginated navigation to next/previous set of posts, when applicable."
        },
        "ƒ:the_privacy_policy_link": {
                "prefix": [
                        "the_privacy_policy_link",
                        "tppl"
                ],
                "body": "the_privacy_policy_link(${1:\\$before:string},${2:\\$after:string} )",
                "description": "Displays the privacy policy link with formatting, when applicable."
        },
        "ƒ:the_search_query": {
                "prefix": [
                        "the_search_query",
                        "tsq"
                ],
                "body": "the_search_query()",
                "description": "Displays the contents of the search query variable."
        },
        "ƒ:the_shortlink": {
                "prefix": [
                        "the_shortlink",
                        "ts"
                ],
                "body": "the_shortlink(${1:\\$text:string},${2:\\$title:string},${3:\\$before:string},${4:\\$after:string} )",
                "description": "Displays the shortlink for a post."
        },
        "ƒ:the_tags": {
                "prefix": [
                        "the_tags",
                        "tt"
                ],
                "body": "the_tags(${1:\\$before:string|null},${2:\\$sep:string},${3:\\$after:string} )",
                "description": "Displays the tags for a post."
        },
        "ƒ:the_taxonomies": {
                "prefix": [
                        "the_taxonomies",
                        "tt"
                ],
                "body": "the_taxonomies(${1:\\$args:array} )",
                "description": "Displays the taxonomies of a post with available options."
        },
        "ƒ:the_terms": {
                "prefix": [
                        "the_terms",
                        "tt"
                ],
                "body": "the_terms(${1:\\$post_id:integer},${2:\\$taxonomy:string},${3:\\$before:string},${4:\\$sep:string},${5:\\$after:string} )",
                "description": "Displays the terms for a post in a list."
        },
        "ƒ:the_time": {
                "prefix": [
                        "the_time",
                        "tt"
                ],
                "body": "the_time(${1:\\$format:string} )",
                "description": "Display the time at which the post was written."
        },
        "ƒ:the_title": {
                "prefix": [
                        "the_title",
                        "tt"
                ],
                "body": "the_title(${1:\\$before:string},${2:\\$after:string},${3:\\$echo:boolean} )",
                "description": "Displays or retrieves the current post title with optional markup."
        },
        "ƒ:the_title_attribute": {
                "prefix": [
                        "the_title_attribute",
                        "tta"
                ],
                "body": "the_title_attribute(${1:\\$args:string|array} )",
                "description": "Sanitizes the current title when retrieving or displaying."
        },
        "ƒ:the_title_rss": {
                "prefix": [
                        "the_title_rss",
                        "ttr"
                ],
                "body": "the_title_rss()",
                "description": "Display the post title in the feed."
        },
        "ƒ:the_weekday": {
                "prefix": [
                        "the_weekday",
                        "tw"
                ],
                "body": "the_weekday()",
                "description": "Display the weekday on which the post was written."
        },
        "ƒ:the_weekday_date": {
                "prefix": [
                        "the_weekday_date",
                        "twd"
                ],
                "body": "the_weekday_date(${1:\\$before:string},${2:\\$after:string} )",
                "description": "Display the weekday on which the post was written."
        },
        "ƒ:the_widget": {
                "prefix": [
                        "the_widget",
                        "tw"
                ],
                "body": "the_widget(${1:\\$widget:string},${2:\\$instance:array},${3:\\$args:array} )",
                "description": "Output an arbitrary widget as a template tag."
        },
        "ƒ:theme_update_available": {
                "prefix": [
                        "theme_update_available",
                        "tua"
                ],
                "body": "theme_update_available(${1:\\$theme:WP_Theme} )",
                "description": "Check if there is an update for a theme available."
        },
        "ƒ:themes_api": {
                "prefix": [
                        "themes_api",
                        "ta"
                ],
                "body": "themes_api(${1:\\$action:string},${2:\\$args:array|object} )",
                "description": "Retrieves theme installer pages from the WordPress.org Themes API."
        },
        "ƒ:timer_float": {
                "prefix": [
                        "timer_float",
                        "tf"
                ],
                "body": "timer_float()",
                "description": "Get the time elapsed so far during this PHP script."
        },
        "ƒ:timer_start": {
                "prefix": [
                        "timer_start",
                        "ts"
                ],
                "body": "timer_start()",
                "description": "Start the WordPress micro-timer."
        },
        "ƒ:timer_stop": {
                "prefix": [
                        "timer_stop",
                        "ts"
                ],
                "body": "timer_stop(${1:\\$display:integer|boolean},${2:\\$precision:integer} )",
                "description": "Retrieve or display the time from the page start to when function is called."
        },
        "ƒ:tinymce_include": {
                "prefix": [
                        "tinymce_include",
                        "ti"
                ],
                "body": "tinymce_include()",
                "description": ""
        },
        "ƒ:touch_time": {
                "prefix": [
                        "touch_time",
                        "tt"
                ],
                "body": "touch_time(${1:\\$edit:integer|boolean},${2:\\$for_post:integer|boolean},${3:\\$tab_index:integer},${4:\\$multi:integer|boolean} )",
                "description": "Prints out HTML form date elements for editing post or comment publish date."
        },
        "ƒ:trackback": {
                "prefix": [
                        "trackback"
                ],
                "body": "trackback(${1:\\$trackback_url:string},${2:\\$title:string},${3:\\$excerpt:string},${4:\\$ID:integer} )",
                "description": "Sends a Trackback."
        },
        "ƒ:trackback_rdf": {
                "prefix": [
                        "trackback_rdf",
                        "tr"
                ],
                "body": "trackback_rdf(${1:\\$deprecated:integer|string} )",
                "description": "Generates and displays the RDF for the trackback information of current post."
        },
        "ƒ:trackback_response": {
                "prefix": [
                        "trackback_response",
                        "tr"
                ],
                "body": "trackback_response(${1:\\$error:integer|boolean},${2:\\$error_message:string} )",
                "description": "Response to a trackback."
        },
        "ƒ:trackback_url": {
                "prefix": [
                        "trackback_url",
                        "tu"
                ],
                "body": "trackback_url(${1:\\$deprecated_echo:boolean} )",
                "description": "Displays the current post&#039;s trackback URL."
        },
        "ƒ:trackback_url_list": {
                "prefix": [
                        "trackback_url_list",
                        "tul"
                ],
                "body": "trackback_url_list(${1:\\$tb_list:string},${2:\\$post_id:integer} )",
                "description": "Do trackbacks for a list of URLs."
        },
        "ƒ:trailingslashit": {
                "prefix": [
                        "trailingslashit"
                ],
                "body": "trailingslashit(${1:\\$string:string} )",
                "description": "Appends a trailing slash."
        },
        "ƒ:translate": {
                "prefix": [
                        "translate"
                ],
                "body": "translate(${1:\\$text:string},${2:\\$domain:string} )",
                "description": "Retrieve the translation of $text."
        },
        "ƒ:translate_level_to_role": {
                "prefix": [
                        "translate_level_to_role",
                        "tltr"
                ],
                "body": "translate_level_to_role(${1:\\$level:integer} )",
                "description": "Translate user level to user role name."
        },
        "ƒ:translate_nooped_plural": {
                "prefix": [
                        "translate_nooped_plural",
                        "tnp"
                ],
                "body": "translate_nooped_plural(${1:\\$nooped_plural:array},${2:\\$count:integer},${3:\\$domain:string} )",
                "description": "Translates and retrieves the singular or plural form of a string that&#039;s been registered with _n_noop() or _nx_noop()."
        },
        "ƒ:translate_settings_using_i18n_schema": {
                "prefix": [
                        "translate_settings_using_i18n_schema",
                        "tsuis"
                ],
                "body": "translate_settings_using_i18n_schema(${1:\\$i18n_schema:string|array|array|object},${2:\\$settings:string|array|array},${3:\\$textdomain:string} )",
                "description": "Translates the provided settings value using its i18n schema."
        },
        "ƒ:translate_smiley": {
                "prefix": [
                        "translate_smiley",
                        "ts"
                ],
                "body": "translate_smiley(${1:\\$matches:array} )",
                "description": "Converts one smiley code to the icon graphic file equivalent."
        },
        "ƒ:translate_user_role": {
                "prefix": [
                        "translate_user_role",
                        "tur"
                ],
                "body": "translate_user_role(${1:\\$name:string},${2:\\$domain:string} )",
                "description": "Translates role name."
        },
        "ƒ:translate_with_context": {
                "prefix": [
                        "translate_with_context",
                        "twc"
                ],
                "body": "translate_with_context(${1:\\$text:string},${2:\\$domain:string} )",
                "description": "Translates $text like translate(), but assumes that the text contains a context after its last vertical bar."
        },
        "ƒ:translate_with_gettext_context": {
                "prefix": [
                        "translate_with_gettext_context",
                        "twgc"
                ],
                "body": "translate_with_gettext_context(${1:\\$text:string},${2:\\$context:string},${3:\\$domain:string} )",
                "description": "Retrieve the translation of $text in the context defined in $context."
        },
        "ƒ:translations_api": {
                "prefix": [
                        "translations_api",
                        "ta"
                ],
                "body": "translations_api(${1:\\$type:string},${2:\\$args:array|object|null} )",
                "description": "Retrieve translations from WordPress Translation API."
        },
        "ƒ:type_url_form_audio": {
                "prefix": [
                        "type_url_form_audio",
                        "tufa"
                ],
                "body": "type_url_form_audio()",
                "description": "Handles retrieving the insert-from-URL form for an audio file."
        },
        "ƒ:type_url_form_file": {
                "prefix": [
                        "type_url_form_file",
                        "tuff"
                ],
                "body": "type_url_form_file()",
                "description": "Handles retrieving the insert-from-URL form for a generic file."
        },
        "ƒ:type_url_form_image": {
                "prefix": [
                        "type_url_form_image",
                        "tufi"
                ],
                "body": "type_url_form_image()",
                "description": "Handles retrieving the insert-from-URL form for an image."
        },
        "ƒ:type_url_form_video": {
                "prefix": [
                        "type_url_form_video",
                        "tufv"
                ],
                "body": "type_url_form_video()",
                "description": "Handles retrieving the insert-from-URL form for a video file."
        },
        "ƒ:undismiss_core_update": {
                "prefix": [
                        "undismiss_core_update",
                        "ucu"
                ],
                "body": "undismiss_core_update(${1:\\$version:string},${2:\\$locale:string} )",
                "description": "Undismisses core update."
        },
        "ƒ:unescape_invalid_shortcodes": {
                "prefix": [
                        "unescape_invalid_shortcodes",
                        "uis"
                ],
                "body": "unescape_invalid_shortcodes(${1:\\$content:string} )",
                "description": "Remove placeholders added by do_shortcodes_in_html_tags()."
        },
        "ƒ:uninstall_plugin": {
                "prefix": [
                        "uninstall_plugin",
                        "up"
                ],
                "body": "uninstall_plugin(${1:\\$plugin:string} )",
                "description": "Uninstalls a single plugin."
        },
        "ƒ:unload_textdomain": {
                "prefix": [
                        "unload_textdomain",
                        "ut"
                ],
                "body": "unload_textdomain(${1:\\$domain:string} )",
                "description": "Unload translations for a text domain."
        },
        "ƒ:unregister_block_pattern": {
                "prefix": [
                        "unregister_block_pattern",
                        "ubp"
                ],
                "body": "unregister_block_pattern(${1:\\$pattern_name:string} )",
                "description": "Unregisters a block pattern."
        },
        "ƒ:unregister_block_pattern_category": {
                "prefix": [
                        "unregister_block_pattern_category",
                        "ubpc"
                ],
                "body": "unregister_block_pattern_category(${1:\\$category_name:string} )",
                "description": "Unregisters a pattern category."
        },
        "ƒ:unregister_block_style": {
                "prefix": [
                        "unregister_block_style",
                        "ubs"
                ],
                "body": "unregister_block_style(${1:\\$block_name:string},${2:\\$block_style_name:string} )",
                "description": "Unregisters a block style."
        },
        "ƒ:unregister_block_type": {
                "prefix": [
                        "unregister_block_type",
                        "ubt"
                ],
                "body": "unregister_block_type(${1:\\$name:string|WP_Block_Type} )",
                "description": "Unregisters a block type."
        },
        "ƒ:unregister_default_headers": {
                "prefix": [
                        "unregister_default_headers",
                        "udh"
                ],
                "body": "unregister_default_headers(${1:\\$header:string|array} )",
                "description": "Unregisters default headers."
        },
        "ƒ:unregister_meta_key": {
                "prefix": [
                        "unregister_meta_key",
                        "umk"
                ],
                "body": "unregister_meta_key(${1:\\$object_type:string},${2:\\$meta_key:string},${3:\\$object_subtype:string} )",
                "description": "Unregisters a meta key from the list of registered keys."
        },
        "ƒ:unregister_nav_menu": {
                "prefix": [
                        "unregister_nav_menu",
                        "unm"
                ],
                "body": "unregister_nav_menu(${1:\\$location:string} )",
                "description": "Unregisters a navigation menu location for a theme."
        },
        "ƒ:unregister_post_meta": {
                "prefix": [
                        "unregister_post_meta",
                        "upm"
                ],
                "body": "unregister_post_meta(${1:\\$post_type:string},${2:\\$meta_key:string} )",
                "description": "Unregisters a meta key for posts."
        },
        "ƒ:unregister_post_type": {
                "prefix": [
                        "unregister_post_type",
                        "upt"
                ],
                "body": "unregister_post_type(${1:\\$post_type:string} )",
                "description": "Unregisters a post type."
        },
        "ƒ:unregister_setting": {
                "prefix": [
                        "unregister_setting",
                        "us"
                ],
                "body": "unregister_setting(${1:\\$option_group:string},${2:\\$option_name:string},${3:\\$deprecated:callable} )",
                "description": "Unregisters a setting."
        },
        "ƒ:unregister_sidebar": {
                "prefix": [
                        "unregister_sidebar",
                        "us"
                ],
                "body": "unregister_sidebar(${1:\\$sidebar_id:string|integer} )",
                "description": "Removes a sidebar from the list."
        },
        "ƒ:unregister_sidebar_widget": {
                "prefix": [
                        "unregister_sidebar_widget",
                        "usw"
                ],
                "body": "unregister_sidebar_widget(${1:\\$id:integer|string} )",
                "description": "Serves as an alias of wp_unregister_sidebar_widget()."
        },
        "ƒ:unregister_taxonomy": {
                "prefix": [
                        "unregister_taxonomy",
                        "ut"
                ],
                "body": "unregister_taxonomy(${1:\\$taxonomy:string} )",
                "description": "Unregisters a taxonomy."
        },
        "ƒ:unregister_taxonomy_for_object_type": {
                "prefix": [
                        "unregister_taxonomy_for_object_type",
                        "utfot"
                ],
                "body": "unregister_taxonomy_for_object_type(${1:\\$taxonomy:string},${2:\\$object_type:string} )",
                "description": "Removes an already registered taxonomy from an object type."
        },
        "ƒ:unregister_term_meta": {
                "prefix": [
                        "unregister_term_meta",
                        "utm"
                ],
                "body": "unregister_term_meta(${1:\\$taxonomy:string},${2:\\$meta_key:string} )",
                "description": "Unregisters a meta key for terms."
        },
        "ƒ:unregister_widget": {
                "prefix": [
                        "unregister_widget",
                        "uw"
                ],
                "body": "unregister_widget(${1:\\$widget:string|WP_Widget} )",
                "description": "Unregisters a widget."
        },
        "ƒ:unregister_widget_control": {
                "prefix": [
                        "unregister_widget_control",
                        "uwc"
                ],
                "body": "unregister_widget_control(${1:\\$id:integer|string} )",
                "description": "Alias of wp_unregister_widget_control()."
        },
        "ƒ:unstick_post": {
                "prefix": [
                        "unstick_post",
                        "up"
                ],
                "body": "unstick_post(${1:\\$post_id:integer} )",
                "description": "Un-stick a post."
        },
        "ƒ:untrailingslashit": {
                "prefix": [
                        "untrailingslashit"
                ],
                "body": "untrailingslashit(${1:\\$string:string} )",
                "description": "Removes trailing forward slashes and backslashes if they exist."
        },
        "ƒ:unzip_file": {
                "prefix": [
                        "unzip_file",
                        "uf"
                ],
                "body": "unzip_file(${1:\\$file:string},${2:\\$to:string} )",
                "description": "Unzips a specified ZIP file to a location on the filesystem via the WordPress Filesystem Abstraction."
        },
        "ƒ:update_archived": {
                "prefix": [
                        "update_archived",
                        "ua"
                ],
                "body": "update_archived(${1:\\$id:integer},${2:\\$archived:string} )",
                "description": "Update the &#039;archived&#039; status of a particular blog."
        },
        "ƒ:update_attached_file": {
                "prefix": [
                        "update_attached_file",
                        "uaf"
                ],
                "body": "update_attached_file(${1:\\$attachment_id:integer},${2:\\$file:string} )",
                "description": "Update attachment file path based on attachment ID."
        },
        "ƒ:update_blog_details": {
                "prefix": [
                        "update_blog_details",
                        "ubd"
                ],
                "body": "update_blog_details(${1:\\$blog_id:integer},${2:\\$details:array} )",
                "description": "Update the details for a blog. Updates the blogs table for a given blog ID."
        },
        "ƒ:update_blog_option": {
                "prefix": [
                        "update_blog_option",
                        "ubo"
                ],
                "body": "update_blog_option(${1:\\$id:integer},${2:\\$option:string},${3:\\$value:mixed},${4:\\$deprecated:mixed|null} )",
                "description": "Update an option for a particular blog."
        },
        "ƒ:update_blog_public": {
                "prefix": [
                        "update_blog_public",
                        "ubp"
                ],
                "body": "update_blog_public(${1:\\$old_value:integer},${2:\\$value:integer} )",
                "description": "Updates this blog&#039;s &#039;public&#039; setting in the global blogs table."
        },
        "ƒ:update_blog_status": {
                "prefix": [
                        "update_blog_status",
                        "ubs"
                ],
                "body": "update_blog_status(${1:\\$blog_id:integer},${2:\\$pref:string},${3:\\$value:string},${4:\\$deprecated:null} )",
                "description": "Update a blog details field."
        },
        "ƒ:update_category_cache": {
                "prefix": [
                        "update_category_cache",
                        "ucc"
                ],
                "body": "update_category_cache()",
                "description": "Update the categories cache."
        },
        "ƒ:update_comment_cache": {
                "prefix": [
                        "update_comment_cache",
                        "ucc"
                ],
                "body": "update_comment_cache(${1:\\$comments:array},${2:\\$update_meta_cache:boolean} )",
                "description": "Updates the comment cache of given comments."
        },
        "ƒ:update_comment_meta": {
                "prefix": [
                        "update_comment_meta",
                        "ucm"
                ],
                "body": "update_comment_meta(${1:\\$comment_id:integer},${2:\\$meta_key:string},${3:\\$meta_value:mixed},${4:\\$prev_value:mixed} )",
                "description": "Updates comment meta field based on comment ID."
        },
        "ƒ:update_core": {
                "prefix": [
                        "update_core",
                        "uc"
                ],
                "body": "update_core(${1:\\$from:string},${2:\\$to:string} )",
                "description": "Upgrades the core of WordPress."
        },
        "ƒ:update_gallery_tab": {
                "prefix": [
                        "update_gallery_tab",
                        "ugt"
                ],
                "body": "update_gallery_tab(${1:\\$tabs:array} )",
                "description": "Adds the gallery tab back to the tabs array if post has image attachments."
        },
        "ƒ:update_home_siteurl": {
                "prefix": [
                        "update_home_siteurl",
                        "uhs"
                ],
                "body": "update_home_siteurl(${1:\\$old_value:string},${2:\\$value:string} )",
                "description": "Flushes rewrite rules if siteurl, home or page_on_front changed."
        },
        "ƒ:update_meta": {
                "prefix": [
                        "update_meta",
                        "um"
                ],
                "body": "update_meta(${1:\\$meta_id:integer},${2:\\$meta_key:string},${3:\\$meta_value:string} )",
                "description": "Updates post meta data by meta ID."
        },
        "ƒ:update_meta_cache": {
                "prefix": [
                        "update_meta_cache",
                        "umc"
                ],
                "body": "update_meta_cache(${1:\\$meta_type:string},${2:\\$object_ids:string|array} )",
                "description": "Updates the metadata cache for the specified objects."
        },
        "ƒ:update_metadata": {
                "prefix": [
                        "update_metadata",
                        "um"
                ],
                "body": "update_metadata(${1:\\$meta_type:string},${2:\\$object_id:integer},${3:\\$meta_key:string},${4:\\$meta_value:mixed},${5:\\$prev_value:mixed} )",
                "description": "Updates metadata for the specified object. If no value already exists for the specified object ID and metadata key, the metadata will be added."
        },
        "ƒ:update_metadata_by_mid": {
                "prefix": [
                        "update_metadata_by_mid",
                        "umbm"
                ],
                "body": "update_metadata_by_mid(${1:\\$meta_type:string},${2:\\$meta_id:integer},${3:\\$meta_value:string},${4:\\$meta_key:string|false} )",
                "description": "Updates metadata by meta ID."
        },
        "ƒ:update_nag": {
                "prefix": [
                        "update_nag",
                        "un"
                ],
                "body": "update_nag()",
                "description": ""
        },
        "ƒ:update_network_cache": {
                "prefix": [
                        "update_network_cache",
                        "unc"
                ],
                "body": "update_network_cache(${1:\\$networks:array} )",
                "description": "Updates the network cache of given networks."
        },
        "ƒ:update_network_option": {
                "prefix": [
                        "update_network_option",
                        "uno"
                ],
                "body": "update_network_option(${1:\\$network_id:integer},${2:\\$option:string},${3:\\$value:mixed} )",
                "description": "Updates the value of a network option that was already added."
        },
        "ƒ:update_network_option_new_admin_email": {
                "prefix": [
                        "update_network_option_new_admin_email",
                        "unonae"
                ],
                "body": "update_network_option_new_admin_email(${1:\\$old_value:string},${2:\\$value:string} )",
                "description": "Sends a confirmation request email when a change of network admin email address is attempted."
        },
        "ƒ:update_object_term_cache": {
                "prefix": [
                        "update_object_term_cache",
                        "uotc"
                ],
                "body": "update_object_term_cache(${1:\\$object_ids:string|array},${2:\\$object_type:string|array} )",
                "description": "Updates the cache for the given term object ID(s)."
        },
        "ƒ:update_option": {
                "prefix": [
                        "update_option",
                        "uo"
                ],
                "body": "update_option(${1:\\$option:string},${2:\\$value:mixed},${3:\\$autoload:string|boolean|null} )",
                "description": "Updates the value of an option that was already added."
        },
        "ƒ:update_option_new_admin_email": {
                "prefix": [
                        "update_option_new_admin_email",
                        "uonae"
                ],
                "body": "update_option_new_admin_email(${1:\\$old_value:string},${2:\\$value:string} )",
                "description": "Sends a confirmation request email when a change of site admin email address is attempted."
        },
        "ƒ:update_page_cache": {
                "prefix": [
                        "update_page_cache",
                        "upc"
                ],
                "body": "update_page_cache(${1:\\$pages:array} )",
                "description": "Alias of update_post_cache()."
        },
        "ƒ:update_post_cache": {
                "prefix": [
                        "update_post_cache",
                        "upc"
                ],
                "body": "update_post_cache(${1:\\$posts:array} )",
                "description": "Updates posts in cache."
        },
        "ƒ:update_post_caches": {
                "prefix": [
                        "update_post_caches",
                        "upc"
                ],
                "body": "update_post_caches(${1:\\$posts:array},${2:\\$post_type:string},${3:\\$update_term_cache:boolean},${4:\\$update_meta_cache:boolean} )",
                "description": "Call major cache updating functions for list of Post objects."
        },
        "ƒ:update_post_meta": {
                "prefix": [
                        "update_post_meta",
                        "upm"
                ],
                "body": "update_post_meta(${1:\\$post_id:integer},${2:\\$meta_key:string},${3:\\$meta_value:mixed},${4:\\$prev_value:mixed} )",
                "description": "Updates a post meta field based on the given post ID."
        },
        "ƒ:update_post_thumbnail_cache": {
                "prefix": [
                        "update_post_thumbnail_cache",
                        "uptc"
                ],
                "body": "update_post_thumbnail_cache(${1:\\$wp_query:WP_Query|null} )",
                "description": "Updates cache for thumbnails in the current loop."
        },
        "ƒ:update_postmeta_cache": {
                "prefix": [
                        "update_postmeta_cache",
                        "upc"
                ],
                "body": "update_postmeta_cache(${1:\\$post_ids:array} )",
                "description": "Updates metadata cache for list of post IDs."
        },
        "ƒ:update_posts_count": {
                "prefix": [
                        "update_posts_count",
                        "upc"
                ],
                "body": "update_posts_count(${1:\\$deprecated:string} )",
                "description": "Updates a blog&#039;s post count."
        },
        "ƒ:update_recently_edited": {
                "prefix": [
                        "update_recently_edited",
                        "ure"
                ],
                "body": "update_recently_edited(${1:\\$file:string} )",
                "description": "Updates the &quot;recently-edited&quot; file for the plugin or theme file editor."
        },
        "ƒ:update_right_now_message": {
                "prefix": [
                        "update_right_now_message",
                        "urnm"
                ],
                "body": "update_right_now_message()",
                "description": "Displays WordPress version and active theme in the &#039;At a Glance&#039; dashboard widget."
        },
        "ƒ:update_site_cache": {
                "prefix": [
                        "update_site_cache",
                        "usc"
                ],
                "body": "update_site_cache(${1:\\$sites:array},${2:\\$update_meta_cache:boolean} )",
                "description": "Updates sites in cache."
        },
        "ƒ:update_site_meta": {
                "prefix": [
                        "update_site_meta",
                        "usm"
                ],
                "body": "update_site_meta(${1:\\$site_id:integer},${2:\\$meta_key:string},${3:\\$meta_value:mixed},${4:\\$prev_value:mixed} )",
                "description": "Updates metadata for a site."
        },
        "ƒ:update_site_option": {
                "prefix": [
                        "update_site_option",
                        "uso"
                ],
                "body": "update_site_option(${1:\\$option:string},${2:\\$value:mixed} )",
                "description": "Updates the value of an option that was already added for the current network."
        },
        "ƒ:update_sitemeta_cache": {
                "prefix": [
                        "update_sitemeta_cache",
                        "usc"
                ],
                "body": "update_sitemeta_cache(${1:\\$site_ids:array} )",
                "description": "Updates metadata cache for list of site IDs."
        },
        "ƒ:update_term_cache": {
                "prefix": [
                        "update_term_cache",
                        "utc"
                ],
                "body": "update_term_cache(${1:\\$terms:array},${2:\\$taxonomy:string} )",
                "description": "Updates terms in cache."
        },
        "ƒ:update_term_meta": {
                "prefix": [
                        "update_term_meta",
                        "utm"
                ],
                "body": "update_term_meta(${1:\\$term_id:integer},${2:\\$meta_key:string},${3:\\$meta_value:mixed},${4:\\$prev_value:mixed} )",
                "description": "Updates term metadata."
        },
        "ƒ:update_termmeta_cache": {
                "prefix": [
                        "update_termmeta_cache",
                        "utc"
                ],
                "body": "update_termmeta_cache(${1:\\$term_ids:array} )",
                "description": "Updates metadata cache for list of term IDs."
        },
        "ƒ:update_user_caches": {
                "prefix": [
                        "update_user_caches",
                        "uuc"
                ],
                "body": "update_user_caches(${1:\\$user:object|WP_User} )",
                "description": "Updates all user caches."
        },
        "ƒ:update_user_meta": {
                "prefix": [
                        "update_user_meta",
                        "uum"
                ],
                "body": "update_user_meta(${1:\\$user_id:integer},${2:\\$meta_key:string},${3:\\$meta_value:mixed},${4:\\$prev_value:mixed} )",
                "description": "Updates user meta field based on user ID."
        },
        "ƒ:update_user_option": {
                "prefix": [
                        "update_user_option",
                        "uuo"
                ],
                "body": "update_user_option(${1:\\$user_id:integer},${2:\\$option_name:string},${3:\\$newvalue:mixed},${4:\\$global:boolean} )",
                "description": "Updates user option with global blog capability."
        },
        "ƒ:update_user_status": {
                "prefix": [
                        "update_user_status",
                        "uus"
                ],
                "body": "update_user_status(${1:\\$id:integer},${2:\\$pref:string},${3:\\$value:integer},${4:\\$deprecated:null} )",
                "description": "Update the status of a user in the database."
        },
        "ƒ:update_usermeta": {
                "prefix": [
                        "update_usermeta",
                        "uu"
                ],
                "body": "update_usermeta(${1:\\$user_id:integer},${2:\\$meta_key:string},${3:\\$meta_value:mixed} )",
                "description": "Update metadata of user."
        },
        "ƒ:upgrade_network": {
                "prefix": [
                        "upgrade_network",
                        "un"
                ],
                "body": "upgrade_network()",
                "description": "Executes network-level upgrade routines."
        },
        "ƒ:upload_is_file_too_big": {
                "prefix": [
                        "upload_is_file_too_big",
                        "uiftb"
                ],
                "body": "upload_is_file_too_big(${1:\\$upload:array} )",
                "description": "Checks whether an upload is too big."
        },
        "ƒ:upload_is_user_over_quota": {
                "prefix": [
                        "upload_is_user_over_quota",
                        "uiuoq"
                ],
                "body": "upload_is_user_over_quota(${1:\\$display_message:boolean} )",
                "description": "Check whether a site has used its allotted upload space."
        },
        "ƒ:upload_size_limit_filter": {
                "prefix": [
                        "upload_size_limit_filter",
                        "uslf"
                ],
                "body": "upload_size_limit_filter(${1:\\$size:integer} )",
                "description": "Filters the maximum upload file size allowed, in bytes."
        },
        "ƒ:upload_space_setting": {
                "prefix": [
                        "upload_space_setting",
                        "uss"
                ],
                "body": "upload_space_setting(${1:\\$id:integer} )",
                "description": "Displays the site upload space quota setting form on the Edit Site Settings screen."
        },
        "ƒ:url_is_accessable_via_ssl": {
                "prefix": [
                        "url_is_accessable_via_ssl",
                        "uiavs"
                ],
                "body": "url_is_accessable_via_ssl(${1:\\$url:string} )",
                "description": "Determines if the URL can be accessed over SSL."
        },
        "ƒ:url_shorten": {
                "prefix": [
                        "url_shorten",
                        "us"
                ],
                "body": "url_shorten(${1:\\$url:string},${2:\\$length:integer} )",
                "description": "Shortens a URL, to be used as link text."
        },
        "ƒ:url_to_postid": {
                "prefix": [
                        "url_to_postid",
                        "utp"
                ],
                "body": "url_to_postid(${1:\\$url:string} )",
                "description": "Examines a URL and try to determine the post ID it represents."
        },
        "ƒ:urldecode_deep": {
                "prefix": [
                        "urldecode_deep",
                        "ud"
                ],
                "body": "urldecode_deep(${1:\\$value:mixed} )",
                "description": "Navigates through an array, object, or scalar, and decodes URL-encoded values"
        },
        "ƒ:urlencode_deep": {
                "prefix": [
                        "urlencode_deep",
                        "ud"
                ],
                "body": "urlencode_deep(${1:\\$value:mixed} )",
                "description": "Navigates through an array, object, or scalar, and encodes the values to be used in a URL."
        },
        "ƒ:use_block_editor_for_post": {
                "prefix": [
                        "use_block_editor_for_post",
                        "ubefp"
                ],
                "body": "use_block_editor_for_post(${1:\\$post:integer|WP_Post} )",
                "description": "Returns whether the post can be edited in the block editor."
        },
        "ƒ:use_block_editor_for_post_type": {
                "prefix": [
                        "use_block_editor_for_post_type",
                        "ubefpt"
                ],
                "body": "use_block_editor_for_post_type(${1:\\$post_type:string} )",
                "description": "Returns whether a post type is compatible with the block editor."
        },
        "ƒ:use_codepress": {
                "prefix": [
                        "use_codepress",
                        "uc"
                ],
                "body": "use_codepress()",
                "description": "Determine whether to use CodePress."
        },
        "ƒ:use_ssl_preference": {
                "prefix": [
                        "use_ssl_preference",
                        "usp"
                ],
                "body": "use_ssl_preference(${1:\\$user:WP_User} )",
                "description": "Optional SSL preference that can be turned on by hooking to the &#039;personal_options&#039; action."
        },
        "ƒ:user_admin_url": {
                "prefix": [
                        "user_admin_url",
                        "uau"
                ],
                "body": "user_admin_url(${1:\\$path:string},${2:\\$scheme:string} )",
                "description": "Retrieves the URL to the admin area for the current user."
        },
        "ƒ:user_can": {
                "prefix": [
                        "user_can",
                        "uc"
                ],
                "body": "user_can(${1:\\$user:integer|WP_User},${2:\\$capability:string},${3:\\$args:mixed} )",
                "description": "Returns whether a particular user has the specified capability."
        },
        "ƒ:user_can_access_admin_page": {
                "prefix": [
                        "user_can_access_admin_page",
                        "ucaap"
                ],
                "body": "user_can_access_admin_page()",
                "description": "Determines whether the current user can access the current admin page."
        },
        "ƒ:user_can_create_draft": {
                "prefix": [
                        "user_can_create_draft",
                        "uccd"
                ],
                "body": "user_can_create_draft(${1:\\$user_id:integer},${2:\\$blog_id:integer},${3:\\$category_id:integer} )",
                "description": "Whether user can create a post."
        },
        "ƒ:user_can_create_post": {
                "prefix": [
                        "user_can_create_post",
                        "uccp"
                ],
                "body": "user_can_create_post(${1:\\$user_id:integer},${2:\\$blog_id:integer},${3:\\$category_id:integer} )",
                "description": "Whether user can create a post."
        },
        "ƒ:user_can_delete_post": {
                "prefix": [
                        "user_can_delete_post",
                        "ucdp"
                ],
                "body": "user_can_delete_post(${1:\\$user_id:integer},${2:\\$post_id:integer},${3:\\$blog_id:integer} )",
                "description": "Whether user can delete a post."
        },
        "ƒ:user_can_delete_post_comments": {
                "prefix": [
                        "user_can_delete_post_comments",
                        "ucdpc"
                ],
                "body": "user_can_delete_post_comments(${1:\\$user_id:integer},${2:\\$post_id:integer},${3:\\$blog_id:integer} )",
                "description": "Whether user can delete a post."
        },
        "ƒ:user_can_edit_post": {
                "prefix": [
                        "user_can_edit_post",
                        "ucep"
                ],
                "body": "user_can_edit_post(${1:\\$user_id:integer},${2:\\$post_id:integer},${3:\\$blog_id:integer} )",
                "description": "Whether user can edit a post."
        },
        "ƒ:user_can_edit_post_comments": {
                "prefix": [
                        "user_can_edit_post_comments",
                        "ucepc"
                ],
                "body": "user_can_edit_post_comments(${1:\\$user_id:integer},${2:\\$post_id:integer},${3:\\$blog_id:integer} )",
                "description": "Whether user can delete a post."
        },
        "ƒ:user_can_edit_post_date": {
                "prefix": [
                        "user_can_edit_post_date",
                        "ucepd"
                ],
                "body": "user_can_edit_post_date(${1:\\$user_id:integer},${2:\\$post_id:integer},${3:\\$blog_id:integer} )",
                "description": "Whether user can delete a post."
        },
        "ƒ:user_can_edit_user": {
                "prefix": [
                        "user_can_edit_user",
                        "uceu"
                ],
                "body": "user_can_edit_user(${1:\\$user_id:integer},${2:\\$other_user:integer} )",
                "description": "Can user can edit other user."
        },
        "ƒ:user_can_richedit": {
                "prefix": [
                        "user_can_richedit",
                        "ucr"
                ],
                "body": "user_can_richedit()",
                "description": "Whether the user can access the visual editor."
        },
        "ƒ:user_can_set_post_date": {
                "prefix": [
                        "user_can_set_post_date",
                        "ucspd"
                ],
                "body": "user_can_set_post_date(${1:\\$user_id:integer},${2:\\$blog_id:integer},${3:\\$category_id:integer} )",
                "description": "Whether user can set new posts&#039; dates."
        },
        "ƒ:user_pass_ok": {
                "prefix": [
                        "user_pass_ok",
                        "upo"
                ],
                "body": "user_pass_ok(${1:\\$user_login:string},${2:\\$user_pass:string} )",
                "description": "Check that the user login name and password is correct."
        },
        "ƒ:user_trailingslashit": {
                "prefix": [
                        "user_trailingslashit",
                        "ut"
                ],
                "body": "user_trailingslashit(${1:\\$string:string},${2:\\$type_of_url:string} )",
                "description": "Retrieves a trailing-slashed string if the site is set for adding trailing slashes."
        },
        "ƒ:username_exists": {
                "prefix": [
                        "username_exists",
                        "ue"
                ],
                "body": "username_exists(${1:\\$username:string} )",
                "description": "Determines whether the given username exists."
        },
        "ƒ:users_can_register_signup_filter": {
                "prefix": [
                        "users_can_register_signup_filter",
                        "ucrsf"
                ],
                "body": "users_can_register_signup_filter()",
                "description": "Determines whether users can self-register, based on Network settings."
        },
        "ƒ:utf8_uri_encode": {
                "prefix": [
                        "utf8_uri_encode",
                        "uue"
                ],
                "body": "utf8_uri_encode(${1:\\$utf8_string:string},${2:\\$length:integer},${3:\\$encode_ascii_characters:boolean} )",
                "description": "Encodes the Unicode values to be used in the URI."
        },
        "ƒ:valid_unicode": {
                "prefix": [
                        "valid_unicode",
                        "vu"
                ],
                "body": "valid_unicode(${1:\\$i:integer} )",
                "description": "Determines if a Unicode codepoint is valid."
        },
        "ƒ:validate_active_plugins": {
                "prefix": [
                        "validate_active_plugins",
                        "vap"
                ],
                "body": "validate_active_plugins()",
                "description": "Validates active plugins."
        },
        "ƒ:validate_another_blog_signup": {
                "prefix": [
                        "validate_another_blog_signup",
                        "vabs"
                ],
                "body": "validate_another_blog_signup()",
                "description": "Validates a new site sign-up for an existing user."
        },
        "ƒ:validate_blog_form": {
                "prefix": [
                        "validate_blog_form",
                        "vbf"
                ],
                "body": "validate_blog_form()",
                "description": "Validates the new site sign-up."
        },
        "ƒ:validate_blog_signup": {
                "prefix": [
                        "validate_blog_signup",
                        "vbs"
                ],
                "body": "validate_blog_signup()",
                "description": "Validates new site signup."
        },
        "ƒ:validate_current_theme": {
                "prefix": [
                        "validate_current_theme",
                        "vct"
                ],
                "body": "validate_current_theme()",
                "description": "Checks that the active theme has the required files."
        },
        "ƒ:validate_email": {
                "prefix": [
                        "validate_email",
                        "ve"
                ],
                "body": "validate_email(${1:\\$email:string},${2:\\$check_domain:boolean} )",
                "description": "Deprecated functionality to validate an email address."
        },
        "ƒ:validate_file": {
                "prefix": [
                        "validate_file",
                        "vf"
                ],
                "body": "validate_file(${1:\\$file:string},${2:\\$allowed_files:array} )",
                "description": "Validates a file name and path against an allowed set of rules."
        },
        "ƒ:validate_file_to_edit": {
                "prefix": [
                        "validate_file_to_edit",
                        "vfte"
                ],
                "body": "validate_file_to_edit(${1:\\$file:string},${2:\\$allowed_files:array} )",
                "description": "Makes sure that the file that was requested to be edited is allowed to be edited."
        },
        "ƒ:validate_plugin": {
                "prefix": [
                        "validate_plugin",
                        "vp"
                ],
                "body": "validate_plugin(${1:\\$plugin:string} )",
                "description": "Validates the plugin path."
        },
        "ƒ:validate_plugin_requirements": {
                "prefix": [
                        "validate_plugin_requirements",
                        "vpr"
                ],
                "body": "validate_plugin_requirements(${1:\\$plugin:string} )",
                "description": "Validates the plugin requirements for WordPress version and PHP version."
        },
        "ƒ:validate_theme_requirements": {
                "prefix": [
                        "validate_theme_requirements",
                        "vtr"
                ],
                "body": "validate_theme_requirements(${1:\\$stylesheet:string} )",
                "description": "Validates the theme requirements for WordPress version and PHP version."
        },
        "ƒ:validate_user_form": {
                "prefix": [
                        "validate_user_form",
                        "vuf"
                ],
                "body": "validate_user_form()",
                "description": "Validates user sign-up name and email."
        },
        "ƒ:validate_user_signup": {
                "prefix": [
                        "validate_user_signup",
                        "vus"
                ],
                "body": "validate_user_signup()",
                "description": "Validates the new user sign-up."
        },
        "ƒ:validate_username": {
                "prefix": [
                        "validate_username",
                        "vu"
                ],
                "body": "validate_username(${1:\\$username:string} )",
                "description": "Checks whether a username is valid."
        },
        "ƒ:verify_file_md5": {
                "prefix": [
                        "verify_file_md5",
                        "vfm"
                ],
                "body": "verify_file_md5(${1:\\$filename:string},${2:\\$expected_md5:string} )",
                "description": "Calculates and compares the MD5 of a file to its expected value."
        },
        "ƒ:verify_file_signature": {
                "prefix": [
                        "verify_file_signature",
                        "vfs"
                ],
                "body": "verify_file_signature(${1:\\$filename:string},${2:\\$signatures:string|array},${3:\\$filename_for_errors:string|false} )",
                "description": "Verifies the contents of a file against its ED25519 signature."
        },
        "ƒ:walk_category_dropdown_tree": {
                "prefix": [
                        "walk_category_dropdown_tree",
                        "wcdt"
                ],
                "body": "walk_category_dropdown_tree(${1:\\$args:mixed} )",
                "description": "Retrieves HTML dropdown (select) content for category list."
        },
        "ƒ:walk_category_tree": {
                "prefix": [
                        "walk_category_tree",
                        "wct"
                ],
                "body": "walk_category_tree(${1:\\$args:mixed} )",
                "description": "Retrieves HTML list content for category list."
        },
        "ƒ:walk_nav_menu_tree": {
                "prefix": [
                        "walk_nav_menu_tree",
                        "wnmt"
                ],
                "body": "walk_nav_menu_tree(${1:\\$items:array},${2:\\$depth:integer},${3:\\$args:stdClass} )",
                "description": "Retrieves the HTML list content for nav menu items."
        },
        "ƒ:walk_page_dropdown_tree": {
                "prefix": [
                        "walk_page_dropdown_tree",
                        "wpdt"
                ],
                "body": "walk_page_dropdown_tree(${1:\\$args:mixed} )",
                "description": "Retrieves HTML dropdown (select) content for page list."
        },
        "ƒ:walk_page_tree": {
                "prefix": [
                        "walk_page_tree",
                        "wpt"
                ],
                "body": "walk_page_tree(${1:\\$pages:array},${2:\\$depth:integer},${3:\\$current_page:integer},${4:\\$args:array} )",
                "description": "Retrieves HTML list content for page list."
        },
        "ƒ:weblog_ping": {
                "prefix": [
                        "weblog_ping",
                        "wp"
                ],
                "body": "weblog_ping(${1:\\$server:string},${2:\\$path:string} )",
                "description": "Sends a pingback."
        },
        "ƒ:welcome_user_msg_filter": {
                "prefix": [
                        "welcome_user_msg_filter",
                        "wumf"
                ],
                "body": "welcome_user_msg_filter(${1:\\$text:string} )",
                "description": "Ensures that the welcome message is not empty. Currently unused."
        },
        "ƒ:win_is_writable": {
                "prefix": [
                        "win_is_writable",
                        "wiw"
                ],
                "body": "win_is_writable(${1:\\$path:string} )",
                "description": "Workaround for Windows bug in is_writable() function"
        },
        "ƒ:wlwmanifest_link": {
                "prefix": [
                        "wlwmanifest_link",
                        "wl"
                ],
                "body": "wlwmanifest_link()",
                "description": "Display the link to the Windows Live Writer manifest file."
        },
        "ƒ:wp": {
                "prefix": [
                        "wp"
                ],
                "body": "wp(${1:\\$query_vars:string|array} )",
                "description": "Set up the WordPress query."
        },
        "ƒ:wp_add_dashboard_widget": {
                "prefix": [
                        "wp_add_dashboard_widget",
                        "wadw"
                ],
                "body": "wp_add_dashboard_widget(${1:\\$widget_id:string},${2:\\$widget_name:string},${3:\\$callback:callable},${4:\\$control_callback:callable|null},${5:\\$callback_args:array|null},${6:\\$context:string},${7:\\$priority:string} )",
                "description": "Adds a new dashboard widget."
        },
        "ƒ:wp_add_id3_tag_data": {
                "prefix": [
                        "wp_add_id3_tag_data",
                        "waitd"
                ],
                "body": "wp_add_id3_tag_data(${1:\\$metadata:array},${2:\\$data:array} )",
                "description": "Parses ID3v2, ID3v1, and getID3 comments to extract usable data."
        },
        "ƒ:wp_add_iframed_editor_assets_html": {
                "prefix": [
                        "wp_add_iframed_editor_assets_html",
                        "waieah"
                ],
                "body": "wp_add_iframed_editor_assets_html()",
                "description": "Inject the block editor assets that need to be loaded into the editor&#039;s iframe as an inline script."
        },
        "ƒ:wp_add_inline_script": {
                "prefix": [
                        "wp_add_inline_script",
                        "wais"
                ],
                "body": "wp_add_inline_script(${1:\\$handle:string},${2:\\$data:string},${3:\\$position:string} )",
                "description": "Adds extra code to a registered script."
        },
        "ƒ:wp_add_inline_style": {
                "prefix": [
                        "wp_add_inline_style",
                        "wais"
                ],
                "body": "wp_add_inline_style(${1:\\$handle:string},${2:\\$data:string} )",
                "description": "Add extra CSS styles to a registered stylesheet."
        },
        "ƒ:wp_add_object_terms": {
                "prefix": [
                        "wp_add_object_terms",
                        "waot"
                ],
                "body": "wp_add_object_terms(${1:\\$object_id:integer},${2:\\$terms:string|integer|array},${3:\\$taxonomy:array|string} )",
                "description": "Adds term(s) associated with a given object."
        },
        "ƒ:wp_add_post_tags": {
                "prefix": [
                        "wp_add_post_tags",
                        "wapt"
                ],
                "body": "wp_add_post_tags(${1:\\$post_id:integer},${2:\\$tags:string|array} )",
                "description": "Add tags to a post."
        },
        "ƒ:wp_add_privacy_policy_content": {
                "prefix": [
                        "wp_add_privacy_policy_content",
                        "wappc"
                ],
                "body": "wp_add_privacy_policy_content(${1:\\$plugin_name:string},${2:\\$policy_text:string} )",
                "description": "Declares a helper function for adding content to the Privacy Policy Guide."
        },
        "ƒ:wp_add_trashed_suffix_to_post_name_for_post": {
                "prefix": [
                        "wp_add_trashed_suffix_to_post_name_for_post",
                        "watstpnfp"
                ],
                "body": "wp_add_trashed_suffix_to_post_name_for_post(${1:\\$post:WP_Post} )",
                "description": "Adds a trashed suffix for a given post."
        },
        "ƒ:wp_add_trashed_suffix_to_post_name_for_trashed_posts": {
                "prefix": [
                        "wp_add_trashed_suffix_to_post_name_for_trashed_posts",
                        "watstpnftp"
                ],
                "body": "wp_add_trashed_suffix_to_post_name_for_trashed_posts(${1:\\$post_name:string},${2:\\$post_ID:integer} )",
                "description": "Adds a suffix if any trashed posts have a given slug."
        },
        "ƒ:wp_admin_bar_add_secondary_groups": {
                "prefix": [
                        "wp_admin_bar_add_secondary_groups",
                        "wabasg"
                ],
                "body": "wp_admin_bar_add_secondary_groups(${1:\\$wp_admin_bar:WP_Admin_Bar} )",
                "description": "Adds secondary menus."
        },
        "ƒ:wp_admin_bar_appearance_menu": {
                "prefix": [
                        "wp_admin_bar_appearance_menu",
                        "wabam"
                ],
                "body": "wp_admin_bar_appearance_menu(${1:\\$wp_admin_bar:WP_Admin_Bar} )",
                "description": "Adds appearance submenu items to the &quot;Site Name&quot; menu."
        },
        "ƒ:wp_admin_bar_comments_menu": {
                "prefix": [
                        "wp_admin_bar_comments_menu",
                        "wabcm"
                ],
                "body": "wp_admin_bar_comments_menu(${1:\\$wp_admin_bar:WP_Admin_Bar} )",
                "description": "Adds edit comments link with awaiting moderation count bubble."
        },
        "ƒ:wp_admin_bar_customize_menu": {
                "prefix": [
                        "wp_admin_bar_customize_menu",
                        "wabcm"
                ],
                "body": "wp_admin_bar_customize_menu(${1:\\$wp_admin_bar:WP_Admin_Bar} )",
                "description": "Adds the &quot;Customize&quot; link to the Toolbar."
        },
        "ƒ:wp_admin_bar_dashboard_view_site_menu": {
                "prefix": [
                        "wp_admin_bar_dashboard_view_site_menu",
                        "wabdvsm"
                ],
                "body": "wp_admin_bar_dashboard_view_site_menu(${1:\\$wp_admin_bar:WP_Admin_Bar} )",
                "description": "Add the &quot;Dashboard&quot;/&quot;Visit Site&quot; menu."
        },
        "ƒ:wp_admin_bar_edit_menu": {
                "prefix": [
                        "wp_admin_bar_edit_menu",
                        "wabem"
                ],
                "body": "wp_admin_bar_edit_menu(${1:\\$wp_admin_bar:WP_Admin_Bar} )",
                "description": "Provides an edit link for posts and terms."
        },
        "ƒ:wp_admin_bar_edit_site_menu": {
                "prefix": [
                        "wp_admin_bar_edit_site_menu",
                        "wabesm"
                ],
                "body": "wp_admin_bar_edit_site_menu(${1:\\$wp_admin_bar:WP_Admin_Bar} )",
                "description": "Adds the &quot;Edit site&quot; link to the Toolbar."
        },
        "ƒ:wp_admin_bar_header": {
                "prefix": [
                        "wp_admin_bar_header",
                        "wabh"
                ],
                "body": "wp_admin_bar_header()",
                "description": "Prints style and scripts for the admin bar."
        },
        "ƒ:wp_admin_bar_my_account_item": {
                "prefix": [
                        "wp_admin_bar_my_account_item",
                        "wabmai"
                ],
                "body": "wp_admin_bar_my_account_item(${1:\\$wp_admin_bar:WP_Admin_Bar} )",
                "description": "Adds the &quot;My Account&quot; item."
        },
        "ƒ:wp_admin_bar_my_account_menu": {
                "prefix": [
                        "wp_admin_bar_my_account_menu",
                        "wabmam"
                ],
                "body": "wp_admin_bar_my_account_menu(${1:\\$wp_admin_bar:WP_Admin_Bar} )",
                "description": "Adds the &quot;My Account&quot; submenu items."
        },
        "ƒ:wp_admin_bar_my_sites_menu": {
                "prefix": [
                        "wp_admin_bar_my_sites_menu",
                        "wabmsm"
                ],
                "body": "wp_admin_bar_my_sites_menu(${1:\\$wp_admin_bar:WP_Admin_Bar} )",
                "description": "Adds the &quot;My Sites/[Site Name]&quot; menu and all submenus."
        },
        "ƒ:wp_admin_bar_new_content_menu": {
                "prefix": [
                        "wp_admin_bar_new_content_menu",
                        "wabncm"
                ],
                "body": "wp_admin_bar_new_content_menu(${1:\\$wp_admin_bar:WP_Admin_Bar} )",
                "description": "Adds &quot;Add New&quot; menu."
        },
        "ƒ:wp_admin_bar_recovery_mode_menu": {
                "prefix": [
                        "wp_admin_bar_recovery_mode_menu",
                        "wabrmm"
                ],
                "body": "wp_admin_bar_recovery_mode_menu(${1:\\$wp_admin_bar:WP_Admin_Bar} )",
                "description": "Adds a link to exit recovery mode when Recovery Mode is active."
        },
        "ƒ:wp_admin_bar_render": {
                "prefix": [
                        "wp_admin_bar_render",
                        "wabr"
                ],
                "body": "wp_admin_bar_render()",
                "description": "Renders the admin bar to the page based on the $wp_admin_bar-&gt;menu member var."
        },
        "ƒ:wp_admin_bar_search_menu": {
                "prefix": [
                        "wp_admin_bar_search_menu",
                        "wabsm"
                ],
                "body": "wp_admin_bar_search_menu(${1:\\$wp_admin_bar:WP_Admin_Bar} )",
                "description": "Adds search form."
        },
        "ƒ:wp_admin_bar_shortlink_menu": {
                "prefix": [
                        "wp_admin_bar_shortlink_menu",
                        "wabsm"
                ],
                "body": "wp_admin_bar_shortlink_menu(${1:\\$wp_admin_bar:WP_Admin_Bar} )",
                "description": "Provides a shortlink."
        },
        "ƒ:wp_admin_bar_sidebar_toggle": {
                "prefix": [
                        "wp_admin_bar_sidebar_toggle",
                        "wabst"
                ],
                "body": "wp_admin_bar_sidebar_toggle(${1:\\$wp_admin_bar:WP_Admin_Bar} )",
                "description": "Adds the sidebar toggle button."
        },
        "ƒ:wp_admin_bar_site_menu": {
                "prefix": [
                        "wp_admin_bar_site_menu",
                        "wabsm"
                ],
                "body": "wp_admin_bar_site_menu(${1:\\$wp_admin_bar:WP_Admin_Bar} )",
                "description": "Adds the &quot;Site Name&quot; menu."
        },
        "ƒ:wp_admin_bar_updates_menu": {
                "prefix": [
                        "wp_admin_bar_updates_menu",
                        "wabum"
                ],
                "body": "wp_admin_bar_updates_menu(${1:\\$wp_admin_bar:WP_Admin_Bar} )",
                "description": "Provides an update link if theme/plugin/core updates are available."
        },
        "ƒ:wp_admin_bar_wp_menu": {
                "prefix": [
                        "wp_admin_bar_wp_menu",
                        "wabwm"
                ],
                "body": "wp_admin_bar_wp_menu(${1:\\$wp_admin_bar:WP_Admin_Bar} )",
                "description": "Adds the WordPress logo menu."
        },
        "ƒ:wp_admin_canonical_url": {
                "prefix": [
                        "wp_admin_canonical_url",
                        "wacu"
                ],
                "body": "wp_admin_canonical_url()",
                "description": "Removes single-use URL parameters and create canonical link based on new URL."
        },
        "ƒ:wp_admin_css": {
                "prefix": [
                        "wp_admin_css",
                        "wac"
                ],
                "body": "wp_admin_css(${1:\\$file:string},${2:\\$force_echo:boolean} )",
                "description": "Enqueues or directly prints a stylesheet link to the specified CSS file."
        },
        "ƒ:wp_admin_css_color": {
                "prefix": [
                        "wp_admin_css_color",
                        "wacc"
                ],
                "body": "wp_admin_css_color(${1:\\$key:string},${2:\\$name:string},${3:\\$url:string},${4:\\$colors:array},${5:\\$icons:array} )",
                "description": "Registers an admin color scheme css file."
        },
        "ƒ:wp_admin_css_uri": {
                "prefix": [
                        "wp_admin_css_uri",
                        "wacu"
                ],
                "body": "wp_admin_css_uri(${1:\\$file:string} )",
                "description": "Displays the URL of a WordPress admin CSS file."
        },
        "ƒ:wp_admin_headers": {
                "prefix": [
                        "wp_admin_headers",
                        "wah"
                ],
                "body": "wp_admin_headers()",
                "description": "Sends a referrer policy header so referrers are not sent externally from administration screens."
        },
        "ƒ:wp_admin_viewport_meta": {
                "prefix": [
                        "wp_admin_viewport_meta",
                        "wavm"
                ],
                "body": "wp_admin_viewport_meta()",
                "description": "Displays the viewport meta in the admin."
        },
        "ƒ:wp_after_insert_post": {
                "prefix": [
                        "wp_after_insert_post",
                        "waip"
                ],
                "body": "wp_after_insert_post(${1:\\$post:integer|WP_Post},${2:\\$update:boolean},${3:\\$post_before:null|WP_Post} )",
                "description": "Fires actions after a post, its terms and meta data has been saved."
        },
        "ƒ:wp_ajax_add_link_category": {
                "prefix": [
                        "wp_ajax_add_link_category",
                        "waalc"
                ],
                "body": "wp_ajax_add_link_category(${1:\\$action:string} )",
                "description": "Ajax handler for adding a link category."
        },
        "ƒ:wp_ajax_add_menu_item": {
                "prefix": [
                        "wp_ajax_add_menu_item",
                        "waami"
                ],
                "body": "wp_ajax_add_menu_item()",
                "description": "Ajax handler for adding a menu item."
        },
        "ƒ:wp_ajax_add_meta": {
                "prefix": [
                        "wp_ajax_add_meta",
                        "waam"
                ],
                "body": "wp_ajax_add_meta()",
                "description": "Ajax handler for adding meta."
        },
        "ƒ:wp_ajax_add_tag": {
                "prefix": [
                        "wp_ajax_add_tag",
                        "waat"
                ],
                "body": "wp_ajax_add_tag()",
                "description": "Ajax handler to add a tag."
        },
        "ƒ:wp_ajax_add_user": {
                "prefix": [
                        "wp_ajax_add_user",
                        "waau"
                ],
                "body": "wp_ajax_add_user(${1:\\$action:string} )",
                "description": "Ajax handler for adding a user."
        },
        "ƒ:wp_ajax_ajax_tag_search": {
                "prefix": [
                        "wp_ajax_ajax_tag_search",
                        "waats"
                ],
                "body": "wp_ajax_ajax_tag_search()",
                "description": "Ajax handler for tag search."
        },
        "ƒ:wp_ajax_autocomplete_user": {
                "prefix": [
                        "wp_ajax_autocomplete_user",
                        "waau"
                ],
                "body": "wp_ajax_autocomplete_user()",
                "description": "Ajax handler for user autocomplete."
        },
        "ƒ:wp_ajax_closed_postboxes": {
                "prefix": [
                        "wp_ajax_closed_postboxes",
                        "wacp"
                ],
                "body": "wp_ajax_closed_postboxes()",
                "description": "Ajax handler for closed post boxes."
        },
        "ƒ:wp_ajax_crop_image": {
                "prefix": [
                        "wp_ajax_crop_image",
                        "waci"
                ],
                "body": "wp_ajax_crop_image()",
                "description": "Ajax handler for cropping an image."
        },
        "ƒ:wp_ajax_dashboard_widgets": {
                "prefix": [
                        "wp_ajax_dashboard_widgets",
                        "wadw"
                ],
                "body": "wp_ajax_dashboard_widgets()",
                "description": "Ajax handler for dashboard widgets."
        },
        "ƒ:wp_ajax_date_format": {
                "prefix": [
                        "wp_ajax_date_format",
                        "wadf"
                ],
                "body": "wp_ajax_date_format()",
                "description": "Ajax handler for date formatting."
        },
        "ƒ:wp_ajax_delete_comment": {
                "prefix": [
                        "wp_ajax_delete_comment",
                        "wadc"
                ],
                "body": "wp_ajax_delete_comment()",
                "description": "Ajax handler for deleting a comment."
        },
        "ƒ:wp_ajax_delete_inactive_widgets": {
                "prefix": [
                        "wp_ajax_delete_inactive_widgets",
                        "wadiw"
                ],
                "body": "wp_ajax_delete_inactive_widgets()",
                "description": "Ajax handler for removing inactive widgets."
        },
        "ƒ:wp_ajax_delete_link": {
                "prefix": [
                        "wp_ajax_delete_link",
                        "wadl"
                ],
                "body": "wp_ajax_delete_link()",
                "description": "Ajax handler for deleting a link."
        },
        "ƒ:wp_ajax_delete_meta": {
                "prefix": [
                        "wp_ajax_delete_meta",
                        "wadm"
                ],
                "body": "wp_ajax_delete_meta()",
                "description": "Ajax handler for deleting meta."
        },
        "ƒ:wp_ajax_delete_page": {
                "prefix": [
                        "wp_ajax_delete_page",
                        "wadp"
                ],
                "body": "wp_ajax_delete_page(${1:\\$action:string} )",
                "description": "Ajax handler to delete a page."
        },
        "ƒ:wp_ajax_delete_plugin": {
                "prefix": [
                        "wp_ajax_delete_plugin",
                        "wadp"
                ],
                "body": "wp_ajax_delete_plugin()",
                "description": "Ajax handler for deleting a plugin."
        },
        "ƒ:wp_ajax_delete_post": {
                "prefix": [
                        "wp_ajax_delete_post",
                        "wadp"
                ],
                "body": "wp_ajax_delete_post(${1:\\$action:string} )",
                "description": "Ajax handler for deleting a post."
        },
        "ƒ:wp_ajax_delete_tag": {
                "prefix": [
                        "wp_ajax_delete_tag",
                        "wadt"
                ],
                "body": "wp_ajax_delete_tag()",
                "description": "Ajax handler for deleting a tag."
        },
        "ƒ:wp_ajax_delete_theme": {
                "prefix": [
                        "wp_ajax_delete_theme",
                        "wadt"
                ],
                "body": "wp_ajax_delete_theme()",
                "description": "Ajax handler for deleting a theme."
        },
        "ƒ:wp_ajax_destroy_sessions": {
                "prefix": [
                        "wp_ajax_destroy_sessions",
                        "wads"
                ],
                "body": "wp_ajax_destroy_sessions()",
                "description": "Ajax handler for destroying multiple open sessions for a user."
        },
        "ƒ:wp_ajax_dim_comment": {
                "prefix": [
                        "wp_ajax_dim_comment",
                        "wadc"
                ],
                "body": "wp_ajax_dim_comment()",
                "description": "Ajax handler to dim a comment."
        },
        "ƒ:wp_ajax_dismiss_wp_pointer": {
                "prefix": [
                        "wp_ajax_dismiss_wp_pointer",
                        "wadwp"
                ],
                "body": "wp_ajax_dismiss_wp_pointer()",
                "description": "Ajax handler for dismissing a WordPress pointer."
        },
        "ƒ:wp_ajax_edit_comment": {
                "prefix": [
                        "wp_ajax_edit_comment",
                        "waec"
                ],
                "body": "wp_ajax_edit_comment()",
                "description": "Ajax handler for editing a comment."
        },
        "ƒ:wp_ajax_edit_theme_plugin_file": {
                "prefix": [
                        "wp_ajax_edit_theme_plugin_file",
                        "waetpf"
                ],
                "body": "wp_ajax_edit_theme_plugin_file()",
                "description": "Ajax handler for editing a theme or plugin file."
        },
        "ƒ:wp_ajax_fetch_list": {
                "prefix": [
                        "wp_ajax_fetch_list",
                        "wafl"
                ],
                "body": "wp_ajax_fetch_list()",
                "description": "Ajax handler for fetching a list table."
        },
        "ƒ:wp_ajax_find_posts": {
                "prefix": [
                        "wp_ajax_find_posts",
                        "wafp"
                ],
                "body": "wp_ajax_find_posts()",
                "description": "Ajax handler for querying posts for the Find Posts modal."
        },
        "ƒ:wp_ajax_generate_password": {
                "prefix": [
                        "wp_ajax_generate_password",
                        "wagp"
                ],
                "body": "wp_ajax_generate_password()",
                "description": "Ajax handler for generating a password."
        },
        "ƒ:wp_ajax_get_attachment": {
                "prefix": [
                        "wp_ajax_get_attachment",
                        "waga"
                ],
                "body": "wp_ajax_get_attachment()",
                "description": "Ajax handler for getting an attachment."
        },
        "ƒ:wp_ajax_get_comments": {
                "prefix": [
                        "wp_ajax_get_comments",
                        "wagc"
                ],
                "body": "wp_ajax_get_comments(${1:\\$action:string} )",
                "description": "Ajax handler for getting comments."
        },
        "ƒ:wp_ajax_get_community_events": {
                "prefix": [
                        "wp_ajax_get_community_events",
                        "wagce"
                ],
                "body": "wp_ajax_get_community_events()",
                "description": "Handles Ajax requests for community events"
        },
        "ƒ:wp_ajax_get_permalink": {
                "prefix": [
                        "wp_ajax_get_permalink",
                        "wagp"
                ],
                "body": "wp_ajax_get_permalink()",
                "description": "Ajax handler to retrieve a permalink."
        },
        "ƒ:wp_ajax_get_post_thumbnail_html": {
                "prefix": [
                        "wp_ajax_get_post_thumbnail_html",
                        "wagpth"
                ],
                "body": "wp_ajax_get_post_thumbnail_html()",
                "description": "Ajax handler for retrieving HTML for the featured image."
        },
        "ƒ:wp_ajax_get_revision_diffs": {
                "prefix": [
                        "wp_ajax_get_revision_diffs",
                        "wagrd"
                ],
                "body": "wp_ajax_get_revision_diffs()",
                "description": "Ajax handler for getting revision diffs."
        },
        "ƒ:wp_ajax_get_tagcloud": {
                "prefix": [
                        "wp_ajax_get_tagcloud",
                        "wagt"
                ],
                "body": "wp_ajax_get_tagcloud()",
                "description": "Ajax handler for getting a tagcloud."
        },
        "ƒ:wp_ajax_health_check_background_updates": {
                "prefix": [
                        "wp_ajax_health_check_background_updates",
                        "wahcbu"
                ],
                "body": "wp_ajax_health_check_background_updates()",
                "description": "Ajax handler for site health checks on background updates."
        },
        "ƒ:wp_ajax_health_check_dotorg_communication": {
                "prefix": [
                        "wp_ajax_health_check_dotorg_communication",
                        "wahcdc"
                ],
                "body": "wp_ajax_health_check_dotorg_communication()",
                "description": "Ajax handler for site health checks on server communication."
        },
        "ƒ:wp_ajax_health_check_get_sizes": {
                "prefix": [
                        "wp_ajax_health_check_get_sizes",
                        "wahcgs"
                ],
                "body": "wp_ajax_health_check_get_sizes()",
                "description": "Ajax handler for site health check to get directories and database sizes."
        },
        "ƒ:wp_ajax_health_check_loopback_requests": {
                "prefix": [
                        "wp_ajax_health_check_loopback_requests",
                        "wahclr"
                ],
                "body": "wp_ajax_health_check_loopback_requests()",
                "description": "Ajax handler for site health checks on loopback requests."
        },
        "ƒ:wp_ajax_health_check_site_status_result": {
                "prefix": [
                        "wp_ajax_health_check_site_status_result",
                        "wahcssr"
                ],
                "body": "wp_ajax_health_check_site_status_result()",
                "description": "Ajax handler for site health check to update the result status."
        },
        "ƒ:wp_ajax_heartbeat": {
                "prefix": [
                        "wp_ajax_heartbeat",
                        "wah"
                ],
                "body": "wp_ajax_heartbeat()",
                "description": "Ajax handler for the Heartbeat API."
        },
        "ƒ:wp_ajax_hidden_columns": {
                "prefix": [
                        "wp_ajax_hidden_columns",
                        "wahc"
                ],
                "body": "wp_ajax_hidden_columns()",
                "description": "Ajax handler for hidden columns."
        },
        "ƒ:wp_ajax_image_editor": {
                "prefix": [
                        "wp_ajax_image_editor",
                        "waie"
                ],
                "body": "wp_ajax_image_editor()",
                "description": "Ajax handler for image editing."
        },
        "ƒ:wp_ajax_imgedit_preview": {
                "prefix": [
                        "wp_ajax_imgedit_preview",
                        "waip"
                ],
                "body": "wp_ajax_imgedit_preview()",
                "description": "Ajax handler for image editor previews."
        },
        "ƒ:wp_ajax_inline_save": {
                "prefix": [
                        "wp_ajax_inline_save",
                        "wais"
                ],
                "body": "wp_ajax_inline_save()",
                "description": "Ajax handler for Quick Edit saving a post from a list table."
        },
        "ƒ:wp_ajax_inline_save_tax": {
                "prefix": [
                        "wp_ajax_inline_save_tax",
                        "waist"
                ],
                "body": "wp_ajax_inline_save_tax()",
                "description": "Ajax handler for quick edit saving for a term."
        },
        "ƒ:wp_ajax_install_plugin": {
                "prefix": [
                        "wp_ajax_install_plugin",
                        "waip"
                ],
                "body": "wp_ajax_install_plugin()",
                "description": "Ajax handler for installing a plugin."
        },
        "ƒ:wp_ajax_install_theme": {
                "prefix": [
                        "wp_ajax_install_theme",
                        "wait"
                ],
                "body": "wp_ajax_install_theme()",
                "description": "Ajax handler for installing a theme."
        },
        "ƒ:wp_ajax_logged_in": {
                "prefix": [
                        "wp_ajax_logged_in",
                        "wali"
                ],
                "body": "wp_ajax_logged_in()",
                "description": "Ajax handler for Customizer preview logged-in status."
        },
        "ƒ:wp_ajax_media_create_image_subsizes": {
                "prefix": [
                        "wp_ajax_media_create_image_subsizes",
                        "wamcis"
                ],
                "body": "wp_ajax_media_create_image_subsizes()",
                "description": "Ajax handler for creating missing image sub-sizes for just uploaded images."
        },
        "ƒ:wp_ajax_menu_get_metabox": {
                "prefix": [
                        "wp_ajax_menu_get_metabox",
                        "wamgm"
                ],
                "body": "wp_ajax_menu_get_metabox()",
                "description": "Ajax handler for retrieving menu meta boxes."
        },
        "ƒ:wp_ajax_menu_locations_save": {
                "prefix": [
                        "wp_ajax_menu_locations_save",
                        "wamls"
                ],
                "body": "wp_ajax_menu_locations_save()",
                "description": "Ajax handler for menu locations save."
        },
        "ƒ:wp_ajax_menu_quick_search": {
                "prefix": [
                        "wp_ajax_menu_quick_search",
                        "wamqs"
                ],
                "body": "wp_ajax_menu_quick_search()",
                "description": "Ajax handler for menu quick searching."
        },
        "ƒ:wp_ajax_meta_box_order": {
                "prefix": [
                        "wp_ajax_meta_box_order",
                        "wambo"
                ],
                "body": "wp_ajax_meta_box_order()",
                "description": "Ajax handler for saving the meta box order."
        },
        "ƒ:wp_ajax_nopriv_generate_password": {
                "prefix": [
                        "wp_ajax_nopriv_generate_password",
                        "wangp"
                ],
                "body": "wp_ajax_nopriv_generate_password()",
                "description": "Ajax handler for generating a password in the no-privilege context."
        },
        "ƒ:wp_ajax_nopriv_heartbeat": {
                "prefix": [
                        "wp_ajax_nopriv_heartbeat",
                        "wanh"
                ],
                "body": "wp_ajax_nopriv_heartbeat()",
                "description": "Ajax handler for the Heartbeat API in the no-privilege context."
        },
        "ƒ:wp_ajax_oembed_cache": {
                "prefix": [
                        "wp_ajax_oembed_cache",
                        "waoc"
                ],
                "body": "wp_ajax_oembed_cache()",
                "description": "Ajax handler for oEmbed caching."
        },
        "ƒ:wp_ajax_parse_embed": {
                "prefix": [
                        "wp_ajax_parse_embed",
                        "wape"
                ],
                "body": "wp_ajax_parse_embed()",
                "description": "Apply [embed] Ajax handlers to a string."
        },
        "ƒ:wp_ajax_parse_media_shortcode": {
                "prefix": [
                        "wp_ajax_parse_media_shortcode",
                        "wapms"
                ],
                "body": "wp_ajax_parse_media_shortcode()",
                "description": ""
        },
        "ƒ:wp_ajax_press_this_add_category": {
                "prefix": [
                        "wp_ajax_press_this_add_category",
                        "waptac"
                ],
                "body": "wp_ajax_press_this_add_category()",
                "description": "Ajax handler for creating new category from Press This."
        },
        "ƒ:wp_ajax_press_this_save_post": {
                "prefix": [
                        "wp_ajax_press_this_save_post",
                        "waptsp"
                ],
                "body": "wp_ajax_press_this_save_post()",
                "description": "Ajax handler for saving a post from Press This."
        },
        "ƒ:wp_ajax_query_attachments": {
                "prefix": [
                        "wp_ajax_query_attachments",
                        "waqa"
                ],
                "body": "wp_ajax_query_attachments()",
                "description": "Ajax handler for querying attachments."
        },
        "ƒ:wp_ajax_query_themes": {
                "prefix": [
                        "wp_ajax_query_themes",
                        "waqt"
                ],
                "body": "wp_ajax_query_themes()",
                "description": "Ajax handler for getting themes from themes_api()."
        },
        "ƒ:wp_ajax_replyto_comment": {
                "prefix": [
                        "wp_ajax_replyto_comment",
                        "warc"
                ],
                "body": "wp_ajax_replyto_comment(${1:\\$action:string} )",
                "description": "Ajax handler for replying to a comment."
        },
        "ƒ:wp_ajax_rest_nonce": {
                "prefix": [
                        "wp_ajax_rest_nonce",
                        "warn"
                ],
                "body": "wp_ajax_rest_nonce()",
                "description": "Ajax handler to renew the REST API nonce."
        },
        "ƒ:wp_ajax_sample_permalink": {
                "prefix": [
                        "wp_ajax_sample_permalink",
                        "wasp"
                ],
                "body": "wp_ajax_sample_permalink()",
                "description": "Ajax handler to retrieve a sample permalink."
        },
        "ƒ:wp_ajax_save_attachment": {
                "prefix": [
                        "wp_ajax_save_attachment",
                        "wasa"
                ],
                "body": "wp_ajax_save_attachment()",
                "description": "Ajax handler for updating attachment attributes."
        },
        "ƒ:wp_ajax_save_attachment_compat": {
                "prefix": [
                        "wp_ajax_save_attachment_compat",
                        "wasac"
                ],
                "body": "wp_ajax_save_attachment_compat()",
                "description": "Ajax handler for saving backward compatible attachment attributes."
        },
        "ƒ:wp_ajax_save_attachment_order": {
                "prefix": [
                        "wp_ajax_save_attachment_order",
                        "wasao"
                ],
                "body": "wp_ajax_save_attachment_order()",
                "description": "Ajax handler for saving the attachment order."
        },
        "ƒ:wp_ajax_save_user_color_scheme": {
                "prefix": [
                        "wp_ajax_save_user_color_scheme",
                        "wasucs"
                ],
                "body": "wp_ajax_save_user_color_scheme()",
                "description": "Ajax handler for auto-saving the selected color scheme for a user&#039;s own profile."
        },
        "ƒ:wp_ajax_save_widget": {
                "prefix": [
                        "wp_ajax_save_widget",
                        "wasw"
                ],
                "body": "wp_ajax_save_widget()",
                "description": "Ajax handler for saving a widget."
        },
        "ƒ:wp_ajax_save_wporg_username": {
                "prefix": [
                        "wp_ajax_save_wporg_username",
                        "waswu"
                ],
                "body": "wp_ajax_save_wporg_username()",
                "description": "Ajax handler for saving the user&#039;s WordPress.org username."
        },
        "ƒ:wp_ajax_search_install_plugins": {
                "prefix": [
                        "wp_ajax_search_install_plugins",
                        "wasip"
                ],
                "body": "wp_ajax_search_install_plugins()",
                "description": "Ajax handler for searching plugins to install."
        },
        "ƒ:wp_ajax_search_plugins": {
                "prefix": [
                        "wp_ajax_search_plugins",
                        "wasp"
                ],
                "body": "wp_ajax_search_plugins()",
                "description": "Ajax handler for searching plugins."
        },
        "ƒ:wp_ajax_send_attachment_to_editor": {
                "prefix": [
                        "wp_ajax_send_attachment_to_editor",
                        "wasate"
                ],
                "body": "wp_ajax_send_attachment_to_editor()",
                "description": "Ajax handler for sending an attachment to the editor."
        },
        "ƒ:wp_ajax_send_link_to_editor": {
                "prefix": [
                        "wp_ajax_send_link_to_editor",
                        "waslte"
                ],
                "body": "wp_ajax_send_link_to_editor()",
                "description": "Ajax handler for sending a link to the editor."
        },
        "ƒ:wp_ajax_send_password_reset": {
                "prefix": [
                        "wp_ajax_send_password_reset",
                        "waspr"
                ],
                "body": "wp_ajax_send_password_reset()",
                "description": "Ajax handler sends a password reset link."
        },
        "ƒ:wp_ajax_set_attachment_thumbnail": {
                "prefix": [
                        "wp_ajax_set_attachment_thumbnail",
                        "wasat"
                ],
                "body": "wp_ajax_set_attachment_thumbnail()",
                "description": "Ajax handler for setting the featured image for an attachment."
        },
        "ƒ:wp_ajax_set_post_thumbnail": {
                "prefix": [
                        "wp_ajax_set_post_thumbnail",
                        "waspt"
                ],
                "body": "wp_ajax_set_post_thumbnail()",
                "description": "Ajax handler for setting the featured image."
        },
        "ƒ:wp_ajax_time_format": {
                "prefix": [
                        "wp_ajax_time_format",
                        "watf"
                ],
                "body": "wp_ajax_time_format()",
                "description": "Ajax handler for time formatting."
        },
        "ƒ:wp_ajax_toggle_auto_updates": {
                "prefix": [
                        "wp_ajax_toggle_auto_updates",
                        "watau"
                ],
                "body": "wp_ajax_toggle_auto_updates()",
                "description": "Ajax handler to enable or disable plugin and theme auto-updates."
        },
        "ƒ:wp_ajax_trash_post": {
                "prefix": [
                        "wp_ajax_trash_post",
                        "watp"
                ],
                "body": "wp_ajax_trash_post(${1:\\$action:string} )",
                "description": "Ajax handler for sending a post to the Trash."
        },
        "ƒ:wp_ajax_untrash_post": {
                "prefix": [
                        "wp_ajax_untrash_post",
                        "waup"
                ],
                "body": "wp_ajax_untrash_post(${1:\\$action:string} )",
                "description": "Ajax handler to restore a post from the Trash."
        },
        "ƒ:wp_ajax_update_plugin": {
                "prefix": [
                        "wp_ajax_update_plugin",
                        "waup"
                ],
                "body": "wp_ajax_update_plugin()",
                "description": "Ajax handler for updating a plugin."
        },
        "ƒ:wp_ajax_update_theme": {
                "prefix": [
                        "wp_ajax_update_theme",
                        "waut"
                ],
                "body": "wp_ajax_update_theme()",
                "description": "Ajax handler for updating a theme."
        },
        "ƒ:wp_ajax_update_welcome_panel": {
                "prefix": [
                        "wp_ajax_update_welcome_panel",
                        "wauwp"
                ],
                "body": "wp_ajax_update_welcome_panel()",
                "description": "Ajax handler for updating whether to display the welcome panel."
        },
        "ƒ:wp_ajax_update_widget": {
                "prefix": [
                        "wp_ajax_update_widget",
                        "wauw"
                ],
                "body": "wp_ajax_update_widget()",
                "description": "Ajax handler for updating a widget."
        },
        "ƒ:wp_ajax_upload_attachment": {
                "prefix": [
                        "wp_ajax_upload_attachment",
                        "waua"
                ],
                "body": "wp_ajax_upload_attachment()",
                "description": "Ajax handler for uploading attachments"
        },
        "ƒ:wp_ajax_widgets_order": {
                "prefix": [
                        "wp_ajax_widgets_order",
                        "wawo"
                ],
                "body": "wp_ajax_widgets_order()",
                "description": "Ajax handler for saving the widgets order."
        },
        "ƒ:wp_ajax_wp_compression_test": {
                "prefix": [
                        "wp_ajax_wp_compression_test",
                        "wawct"
                ],
                "body": "wp_ajax_wp_compression_test()",
                "description": "Ajax handler for compression testing."
        },
        "ƒ:wp_ajax_wp_fullscreen_save_post": {
                "prefix": [
                        "wp_ajax_wp_fullscreen_save_post",
                        "wawfsp"
                ],
                "body": "wp_ajax_wp_fullscreen_save_post()",
                "description": "Ajax handler for saving posts from the fullscreen editor."
        },
        "ƒ:wp_ajax_wp_link_ajax": {
                "prefix": [
                        "wp_ajax_wp_link_ajax",
                        "wawla"
                ],
                "body": "wp_ajax_wp_link_ajax()",
                "description": "Ajax handler for internal linking."
        },
        "ƒ:wp_ajax_wp_privacy_erase_personal_data": {
                "prefix": [
                        "wp_ajax_wp_privacy_erase_personal_data",
                        "wawpepd"
                ],
                "body": "wp_ajax_wp_privacy_erase_personal_data()",
                "description": "Ajax handler for erasing personal data."
        },
        "ƒ:wp_ajax_wp_privacy_export_personal_data": {
                "prefix": [
                        "wp_ajax_wp_privacy_export_personal_data",
                        "wawpepd"
                ],
                "body": "wp_ajax_wp_privacy_export_personal_data()",
                "description": "Ajax handler for exporting a user&#039;s personal data."
        },
        "ƒ:wp_ajax_wp_remove_post_lock": {
                "prefix": [
                        "wp_ajax_wp_remove_post_lock",
                        "wawrpl"
                ],
                "body": "wp_ajax_wp_remove_post_lock()",
                "description": "Ajax handler for removing a post lock."
        },
        "ƒ:wp_allow_comment": {
                "prefix": [
                        "wp_allow_comment",
                        "wac"
                ],
                "body": "wp_allow_comment(${1:\\$commentdata:array},${2:\\$wp_error:boolean} )",
                "description": "Validates whether this comment is allowed to be made."
        },
        "ƒ:wp_allowed_protocols": {
                "prefix": [
                        "wp_allowed_protocols",
                        "wap"
                ],
                "body": "wp_allowed_protocols()",
                "description": "Retrieve a list of protocols to allow in HTML attributes."
        },
        "ƒ:wp_apply_alignment_support": {
                "prefix": [
                        "wp_apply_alignment_support",
                        "waas"
                ],
                "body": "wp_apply_alignment_support(${1:\\$block_type:WP_Block_Type},${2:\\$block_attributes:array} )",
                "description": "Adds CSS classes for block alignment to the incoming attributes array."
        },
        "ƒ:wp_apply_border_support": {
                "prefix": [
                        "wp_apply_border_support",
                        "wabs"
                ],
                "body": "wp_apply_border_support(${1:\\$block_type:WP_Block_Type},${2:\\$block_attributes:array} )",
                "description": "Adds CSS classes and inline styles for border styles to the incoming attributes array. This will be applied to the block markup in the front-end."
        },
        "ƒ:wp_apply_colors_support": {
                "prefix": [
                        "wp_apply_colors_support",
                        "wacs"
                ],
                "body": "wp_apply_colors_support(${1:\\$block_type:WP_Block_Type},${2:\\$block_attributes:array} )",
                "description": "Add CSS classes and inline styles for colors to the incoming attributes array."
        },
        "ƒ:wp_apply_custom_classname_support": {
                "prefix": [
                        "wp_apply_custom_classname_support",
                        "waccs"
                ],
                "body": "wp_apply_custom_classname_support(${1:\\$block_type:WP_Block_Type},${2:\\$block_attributes:array} )",
                "description": "Add the custom classnames to the output."
        },
        "ƒ:wp_apply_dimensions_support": {
                "prefix": [
                        "wp_apply_dimensions_support",
                        "wads"
                ],
                "body": "wp_apply_dimensions_support(${1:\\$block_type:WP_Block_Type},${2:\\$block_attributes:array} )",
                "description": "Adds CSS classes for block dimensions to the incoming attributes array."
        },
        "ƒ:wp_apply_generated_classname_support": {
                "prefix": [
                        "wp_apply_generated_classname_support",
                        "wagcs"
                ],
                "body": "wp_apply_generated_classname_support(${1:\\$block_type:WP_Block_Type} )",
                "description": "Add the generated classnames to the output."
        },
        "ƒ:wp_apply_spacing_support": {
                "prefix": [
                        "wp_apply_spacing_support",
                        "wass"
                ],
                "body": "wp_apply_spacing_support(${1:\\$block_type:WP_Block_Type},${2:\\$block_attributes:array} )",
                "description": "Add CSS classes for block spacing to the incoming attributes array."
        },
        "ƒ:wp_apply_typography_support": {
                "prefix": [
                        "wp_apply_typography_support",
                        "wats"
                ],
                "body": "wp_apply_typography_support(${1:\\$block_type:WP_Block_Type},${2:\\$block_attributes:array} )",
                "description": "Adds CSS classes and inline styles for typography features such as font sizes to the incoming attributes array. This will be applied to the block markup in the front-end."
        },
        "ƒ:wp_array_slice_assoc": {
                "prefix": [
                        "wp_array_slice_assoc",
                        "wasa"
                ],
                "body": "wp_array_slice_assoc(${1:\\$array:array},${2:\\$keys:array} )",
                "description": "Extract a slice of an array, given a list of keys."
        },
        "ƒ:wp_assign_widget_to_sidebar": {
                "prefix": [
                        "wp_assign_widget_to_sidebar",
                        "wawts"
                ],
                "body": "wp_assign_widget_to_sidebar(${1:\\$widget_id:string},${2:\\$sidebar_id:string} )",
                "description": "Assigns a widget to the given sidebar."
        },
        "ƒ:wp_attachment_is": {
                "prefix": [
                        "wp_attachment_is",
                        "wai"
                ],
                "body": "wp_attachment_is(${1:\\$type:string},${2:\\$post:integer|WP_Post|null} )",
                "description": "Verifies an attachment is of a given type."
        },
        "ƒ:wp_attachment_is_image": {
                "prefix": [
                        "wp_attachment_is_image",
                        "waii"
                ],
                "body": "wp_attachment_is_image(${1:\\$post:integer|WP_Post|null} )",
                "description": "Determines whether an attachment is an image."
        },
        "ƒ:wp_audio_shortcode": {
                "prefix": [
                        "wp_audio_shortcode",
                        "was"
                ],
                "body": "wp_audio_shortcode(${1:\\$attr:array},${2:\\$content:string} )",
                "description": "Builds the Audio shortcode output."
        },
        "ƒ:wp_auth_check": {
                "prefix": [
                        "wp_auth_check",
                        "wac"
                ],
                "body": "wp_auth_check(${1:\\$response:array} )",
                "description": "Check whether a user is still logged in, for the heartbeat."
        },
        "ƒ:wp_auth_check_html": {
                "prefix": [
                        "wp_auth_check_html",
                        "wach"
                ],
                "body": "wp_auth_check_html()",
                "description": "Output the HTML that shows the wp-login dialog when the user is no longer logged in."
        },
        "ƒ:wp_auth_check_load": {
                "prefix": [
                        "wp_auth_check_load",
                        "wacl"
                ],
                "body": "wp_auth_check_load()",
                "description": "Load the auth check for monitoring whether the user is still logged in."
        },
        "ƒ:wp_authenticate": {
                "prefix": [
                        "wp_authenticate",
                        "wa"
                ],
                "body": "wp_authenticate(${1:\\$username:string},${2:\\$password:string} )",
                "description": "Authenticate a user, confirming the login credentials are valid."
        },
        "ƒ:wp_authenticate_application_password": {
                "prefix": [
                        "wp_authenticate_application_password",
                        "waap"
                ],
                "body": "wp_authenticate_application_password(${1:\\$input_user:WP_User|WP_Error|null},${2:\\$username:string},${3:\\$password:string} )",
                "description": "Authenticates the user using an application password."
        },
        "ƒ:wp_authenticate_cookie": {
                "prefix": [
                        "wp_authenticate_cookie",
                        "wac"
                ],
                "body": "wp_authenticate_cookie(${1:\\$user:WP_User|WP_Error|null},${2:\\$username:string},${3:\\$password:string} )",
                "description": "Authenticates the user using the WordPress auth cookie."
        },
        "ƒ:wp_authenticate_email_password": {
                "prefix": [
                        "wp_authenticate_email_password",
                        "waep"
                ],
                "body": "wp_authenticate_email_password(${1:\\$user:WP_User|WP_Error|null},${2:\\$email:string},${3:\\$password:string} )",
                "description": "Authenticates a user using the email and password."
        },
        "ƒ:wp_authenticate_spam_check": {
                "prefix": [
                        "wp_authenticate_spam_check",
                        "wasc"
                ],
                "body": "wp_authenticate_spam_check(${1:\\$user:WP_User|WP_Error|null} )",
                "description": "For Multisite blogs, checks if the authenticated user has been marked as a spammer, or if the user&#039;s primary blog has been marked as spam."
        },
        "ƒ:wp_authenticate_username_password": {
                "prefix": [
                        "wp_authenticate_username_password",
                        "waup"
                ],
                "body": "wp_authenticate_username_password(${1:\\$user:WP_User|WP_Error|null},${2:\\$username:string},${3:\\$password:string} )",
                "description": "Authenticates a user, confirming the username and password are valid."
        },
        "ƒ:wp_autosave": {
                "prefix": [
                        "wp_autosave",
                        "wa"
                ],
                "body": "wp_autosave(${1:\\$post_data:array} )",
                "description": "Saves a post submitted with XHR."
        },
        "ƒ:wp_basename": {
                "prefix": [
                        "wp_basename",
                        "wb"
                ],
                "body": "wp_basename(${1:\\$path:string},${2:\\$suffix:string} )",
                "description": "i18n-friendly version of basename()."
        },
        "ƒ:wp_blacklist_check": {
                "prefix": [
                        "wp_blacklist_check",
                        "wbc"
                ],
                "body": "wp_blacklist_check(${1:\\$author:string},${2:\\$email:string},${3:\\$url:string},${4:\\$comment:string},${5:\\$user_ip:string},${6:\\$user_agent:string} )",
                "description": "Does comment contain disallowed characters or words."
        },
        "ƒ:wp_body_open": {
                "prefix": [
                        "wp_body_open",
                        "wbo"
                ],
                "body": "wp_body_open()",
                "description": "Fire the wp_body_open action."
        },
        "ƒ:wp_cache_add": {
                "prefix": [
                        "wp_cache_add",
                        "wca"
                ],
                "body": "wp_cache_add(${1:\\$key:integer|string},${2:\\$data:mixed},${3:\\$group:string},${4:\\$expire:integer} )",
                "description": "Adds data to the cache, if the cache key doesn&#039;t already exist."
        },
        "ƒ:wp_cache_add_global_groups": {
                "prefix": [
                        "wp_cache_add_global_groups",
                        "wcagg"
                ],
                "body": "wp_cache_add_global_groups(${1:\\$groups:string|array} )",
                "description": "Adds a group or set of groups to the list of global groups."
        },
        "ƒ:wp_cache_add_multiple": {
                "prefix": [
                        "wp_cache_add_multiple",
                        "wcam"
                ],
                "body": "wp_cache_add_multiple(${1:\\$data:array},${2:\\$group:string},${3:\\$expire:integer} )",
                "description": "Adds multiple values to the cache in one call."
        },
        "ƒ:wp_cache_add_non_persistent_groups": {
                "prefix": [
                        "wp_cache_add_non_persistent_groups",
                        "wcanpg"
                ],
                "body": "wp_cache_add_non_persistent_groups(${1:\\$groups:string|array} )",
                "description": "Adds a group or set of groups to the list of non-persistent groups."
        },
        "ƒ:wp_cache_close": {
                "prefix": [
                        "wp_cache_close",
                        "wcc"
                ],
                "body": "wp_cache_close()",
                "description": "Closes the cache."
        },
        "ƒ:wp_cache_decr": {
                "prefix": [
                        "wp_cache_decr",
                        "wcd"
                ],
                "body": "wp_cache_decr(${1:\\$key:integer|string},${2:\\$offset:integer},${3:\\$group:string} )",
                "description": "Decrements numeric cache item&#039;s value."
        },
        "ƒ:wp_cache_delete": {
                "prefix": [
                        "wp_cache_delete",
                        "wcd"
                ],
                "body": "wp_cache_delete(${1:\\$key:integer|string},${2:\\$group:string} )",
                "description": "Removes the cache contents matching key and group."
        },
        "ƒ:wp_cache_delete_multiple": {
                "prefix": [
                        "wp_cache_delete_multiple",
                        "wcdm"
                ],
                "body": "wp_cache_delete_multiple(${1:\\$keys:array},${2:\\$group:string} )",
                "description": "Deletes multiple values from the cache in one call."
        },
        "ƒ:wp_cache_flush": {
                "prefix": [
                        "wp_cache_flush",
                        "wcf"
                ],
                "body": "wp_cache_flush()",
                "description": "Removes all cache items."
        },
        "ƒ:wp_cache_flush_runtime": {
                "prefix": [
                        "wp_cache_flush_runtime",
                        "wcfr"
                ],
                "body": "wp_cache_flush_runtime()",
                "description": "Removes all cache items from the in-memory runtime cache."
        },
        "ƒ:wp_cache_get": {
                "prefix": [
                        "wp_cache_get",
                        "wcg"
                ],
                "body": "wp_cache_get(${1:\\$key:integer|string},${2:\\$group:string},${3:\\$force:boolean},${4:\\$found:boolean|null} )",
                "description": "Retrieves the cache contents from the cache by key and group."
        },
        "ƒ:wp_cache_get_last_changed": {
                "prefix": [
                        "wp_cache_get_last_changed",
                        "wcglc"
                ],
                "body": "wp_cache_get_last_changed(${1:\\$group:string} )",
                "description": "Gets last changed date for the specified cache group."
        },
        "ƒ:wp_cache_get_multiple": {
                "prefix": [
                        "wp_cache_get_multiple",
                        "wcgm"
                ],
                "body": "wp_cache_get_multiple(${1:\\$keys:array},${2:\\$group:string},${3:\\$force:boolean} )",
                "description": "Retrieves multiple values from the cache in one call."
        },
        "ƒ:wp_cache_incr": {
                "prefix": [
                        "wp_cache_incr",
                        "wci"
                ],
                "body": "wp_cache_incr(${1:\\$key:integer|string},${2:\\$offset:integer},${3:\\$group:string} )",
                "description": "Increments numeric cache item&#039;s value."
        },
        "ƒ:wp_cache_init": {
                "prefix": [
                        "wp_cache_init",
                        "wci"
                ],
                "body": "wp_cache_init()",
                "description": "Sets up Object Cache Global and assigns it."
        },
        "ƒ:wp_cache_replace": {
                "prefix": [
                        "wp_cache_replace",
                        "wcr"
                ],
                "body": "wp_cache_replace(${1:\\$key:integer|string},${2:\\$data:mixed},${3:\\$group:string},${4:\\$expire:integer} )",
                "description": "Replaces the contents of the cache with new data."
        },
        "ƒ:wp_cache_reset": {
                "prefix": [
                        "wp_cache_reset",
                        "wcr"
                ],
                "body": "wp_cache_reset()",
                "description": "Resets internal cache keys and structures."
        },
        "ƒ:wp_cache_set": {
                "prefix": [
                        "wp_cache_set",
                        "wcs"
                ],
                "body": "wp_cache_set(${1:\\$key:integer|string},${2:\\$data:mixed},${3:\\$group:string},${4:\\$expire:integer} )",
                "description": "Saves the data to the cache."
        },
        "ƒ:wp_cache_set_comments_last_changed": {
                "prefix": [
                        "wp_cache_set_comments_last_changed",
                        "wcsclc"
                ],
                "body": "wp_cache_set_comments_last_changed()",
                "description": "Sets the last changed time for the &#039;comment&#039; cache group."
        },
        "ƒ:wp_cache_set_multiple": {
                "prefix": [
                        "wp_cache_set_multiple",
                        "wcsm"
                ],
                "body": "wp_cache_set_multiple(${1:\\$data:array},${2:\\$group:string},${3:\\$expire:integer} )",
                "description": "Sets multiple values to the cache in one call."
        },
        "ƒ:wp_cache_set_posts_last_changed": {
                "prefix": [
                        "wp_cache_set_posts_last_changed",
                        "wcsplc"
                ],
                "body": "wp_cache_set_posts_last_changed()",
                "description": "Sets the last changed time for the &#039;posts&#039; cache group."
        },
        "ƒ:wp_cache_set_sites_last_changed": {
                "prefix": [
                        "wp_cache_set_sites_last_changed",
                        "wcsslc"
                ],
                "body": "wp_cache_set_sites_last_changed()",
                "description": "Sets the last changed time for the &#039;sites&#039; cache group."
        },
        "ƒ:wp_cache_set_terms_last_changed": {
                "prefix": [
                        "wp_cache_set_terms_last_changed",
                        "wcstlc"
                ],
                "body": "wp_cache_set_terms_last_changed()",
                "description": "Sets the last changed time for the &#039;terms&#039; cache group."
        },
        "ƒ:wp_cache_switch_to_blog": {
                "prefix": [
                        "wp_cache_switch_to_blog",
                        "wcstb"
                ],
                "body": "wp_cache_switch_to_blog(${1:\\$blog_id:integer} )",
                "description": "Switches the internal blog ID."
        },
        "ƒ:wp_calculate_image_sizes": {
                "prefix": [
                        "wp_calculate_image_sizes",
                        "wcis"
                ],
                "body": "wp_calculate_image_sizes(${1:\\$size:string|array},${2:\\$image_src:string|null},${3:\\$image_meta:array|null},${4:\\$attachment_id:integer} )",
                "description": "Creates a &#039;sizes&#039; attribute value for an image."
        },
        "ƒ:wp_calculate_image_srcset": {
                "prefix": [
                        "wp_calculate_image_srcset",
                        "wcis"
                ],
                "body": "wp_calculate_image_srcset(${1:\\$size_array:array},${2:\\$image_src:string},${3:\\$image_meta:array},${4:\\$attachment_id:integer} )",
                "description": "A helper function to calculate the image sources to include in a &#039;srcset&#039; attribute."
        },
        "ƒ:wp_can_install_language_pack": {
                "prefix": [
                        "wp_can_install_language_pack",
                        "wcilp"
                ],
                "body": "wp_can_install_language_pack()",
                "description": "Check if WordPress has access to the filesystem without asking for credentials."
        },
        "ƒ:wp_caption_input_textarea": {
                "prefix": [
                        "wp_caption_input_textarea",
                        "wcit"
                ],
                "body": "wp_caption_input_textarea(${1:\\$edit_post:WP_Post} )",
                "description": "Outputs a textarea element for inputting an attachment caption."
        },
        "ƒ:wp_category_checklist": {
                "prefix": [
                        "wp_category_checklist",
                        "wcc"
                ],
                "body": "wp_category_checklist(${1:\\$post_id:integer},${2:\\$descendants_and_self:integer},${3:\\$selected_cats:array|false},${4:\\$popular_cats:array|false},${5:\\$walker:Walker|null},${6:\\$checked_ontop:boolean} )",
                "description": "Outputs an unordered list of checkbox input elements labeled with category names."
        },
        "ƒ:wp_check_browser_version": {
                "prefix": [
                        "wp_check_browser_version",
                        "wcbv"
                ],
                "body": "wp_check_browser_version()",
                "description": "Checks if the user needs a browser update."
        },
        "ƒ:wp_check_comment_data_max_lengths": {
                "prefix": [
                        "wp_check_comment_data_max_lengths",
                        "wccdml"
                ],
                "body": "wp_check_comment_data_max_lengths(${1:\\$comment_data:array} )",
                "description": "Compares the lengths of comment data against the maximum character limits."
        },
        "ƒ:wp_check_comment_disallowed_list": {
                "prefix": [
                        "wp_check_comment_disallowed_list",
                        "wccdl"
                ],
                "body": "wp_check_comment_disallowed_list(${1:\\$author:string},${2:\\$email:string},${3:\\$url:string},${4:\\$comment:string},${5:\\$user_ip:string},${6:\\$user_agent:string} )",
                "description": "Checks if a comment contains disallowed characters or words."
        },
        "ƒ:wp_check_comment_flood": {
                "prefix": [
                        "wp_check_comment_flood",
                        "wccf"
                ],
                "body": "wp_check_comment_flood(${1:\\$is_flood:boolean},${2:\\$ip:string},${3:\\$email:string},${4:\\$date:string},${5:\\$avoid_die:boolean} )",
                "description": "Checks whether comment flooding is occurring."
        },
        "ƒ:wp_check_filetype": {
                "prefix": [
                        "wp_check_filetype",
                        "wcf"
                ],
                "body": "wp_check_filetype(${1:\\$filename:string},${2:\\$mimes:array|null} )",
                "description": "Retrieve the file type from the file name."
        },
        "ƒ:wp_check_filetype_and_ext": {
                "prefix": [
                        "wp_check_filetype_and_ext",
                        "wcfae"
                ],
                "body": "wp_check_filetype_and_ext(${1:\\$file:string},${2:\\$filename:string},${3:\\$mimes:array|null} )",
                "description": "Attempt to determine the real file type of a file."
        },
        "ƒ:wp_check_for_changed_dates": {
                "prefix": [
                        "wp_check_for_changed_dates",
                        "wcfcd"
                ],
                "body": "wp_check_for_changed_dates(${1:\\$post_id:integer},${2:\\$post:WP_Post},${3:\\$post_before:WP_Post} )",
                "description": "Check for changed dates for published post objects and save the old date."
        },
        "ƒ:wp_check_for_changed_slugs": {
                "prefix": [
                        "wp_check_for_changed_slugs",
                        "wcfcs"
                ],
                "body": "wp_check_for_changed_slugs(${1:\\$post_id:integer},${2:\\$post:WP_Post},${3:\\$post_before:WP_Post} )",
                "description": "Check for changed slugs for published post objects and save the old slug."
        },
        "ƒ:wp_check_invalid_utf8": {
                "prefix": [
                        "wp_check_invalid_utf8",
                        "wciu"
                ],
                "body": "wp_check_invalid_utf8(${1:\\$string:string},${2:\\$strip:boolean} )",
                "description": "Checks for invalid UTF8 in a string."
        },
        "ƒ:wp_check_jsonp_callback": {
                "prefix": [
                        "wp_check_jsonp_callback",
                        "wcjc"
                ],
                "body": "wp_check_jsonp_callback(${1:\\$callback:string} )",
                "description": "Checks that a JSONP callback is a valid JavaScript callback name."
        },
        "ƒ:wp_check_locked_posts": {
                "prefix": [
                        "wp_check_locked_posts",
                        "wclp"
                ],
                "body": "wp_check_locked_posts(${1:\\$response:array},${2:\\$data:array},${3:\\$screen_id:string} )",
                "description": "Checks lock status for posts displayed on the Posts screen."
        },
        "ƒ:wp_check_mysql_version": {
                "prefix": [
                        "wp_check_mysql_version",
                        "wcmv"
                ],
                "body": "wp_check_mysql_version()",
                "description": "Checks the version of the installed MySQL binary."
        },
        "ƒ:wp_check_password": {
                "prefix": [
                        "wp_check_password",
                        "wcp"
                ],
                "body": "wp_check_password(${1:\\$password:string},${2:\\$hash:string},${3:\\$user_id:string|integer} )",
                "description": "Checks the plaintext password against the encrypted Password."
        },
        "ƒ:wp_check_php_mysql_versions": {
                "prefix": [
                        "wp_check_php_mysql_versions",
                        "wcpmv"
                ],
                "body": "wp_check_php_mysql_versions()",
                "description": "Check for the required PHP version, and the MySQL extension or a database drop-in."
        },
        "ƒ:wp_check_php_version": {
                "prefix": [
                        "wp_check_php_version",
                        "wcpv"
                ],
                "body": "wp_check_php_version()",
                "description": "Checks if the user needs to update PHP."
        },
        "ƒ:wp_check_post_hierarchy_for_loops": {
                "prefix": [
                        "wp_check_post_hierarchy_for_loops",
                        "wcphfl"
                ],
                "body": "wp_check_post_hierarchy_for_loops(${1:\\$post_parent:integer},${2:\\$post_ID:integer} )",
                "description": "Check the given subset of the post hierarchy for hierarchy loops."
        },
        "ƒ:wp_check_post_lock": {
                "prefix": [
                        "wp_check_post_lock",
                        "wcpl"
                ],
                "body": "wp_check_post_lock(${1:\\$post_id:integer|WP_Post} )",
                "description": "Determines whether the post is currently being edited by another user."
        },
        "ƒ:wp_check_site_meta_support_prefilter": {
                "prefix": [
                        "wp_check_site_meta_support_prefilter",
                        "wcsmsp"
                ],
                "body": "wp_check_site_meta_support_prefilter(${1:\\$check:mixed} )",
                "description": "Aborts calls to site meta if it is not supported."
        },
        "ƒ:wp_check_term_hierarchy_for_loops": {
                "prefix": [
                        "wp_check_term_hierarchy_for_loops",
                        "wcthfl"
                ],
                "body": "wp_check_term_hierarchy_for_loops(${1:\\$parent:integer},${2:\\$term_id:integer},${3:\\$taxonomy:string} )",
                "description": "Checks the given subset of the term hierarchy for hierarchy loops."
        },
        "ƒ:wp_check_term_meta_support_prefilter": {
                "prefix": [
                        "wp_check_term_meta_support_prefilter",
                        "wctmsp"
                ],
                "body": "wp_check_term_meta_support_prefilter(${1:\\$check:mixed} )",
                "description": "Aborts calls to term meta if it is not supported."
        },
        "ƒ:wp_check_widget_editor_deps": {
                "prefix": [
                        "wp_check_widget_editor_deps",
                        "wcwed"
                ],
                "body": "wp_check_widget_editor_deps()",
                "description": "Displays a _doing_it_wrong() message for conflicting widget editor scripts."
        },
        "ƒ:wp_checkdate": {
                "prefix": [
                        "wp_checkdate",
                        "wc"
                ],
                "body": "wp_checkdate(${1:\\$month:integer},${2:\\$day:integer},${3:\\$year:integer},${4:\\$source_date:string} )",
                "description": "Test if the supplied date is valid for the Gregorian calendar."
        },
        "ƒ:wp_clean_plugins_cache": {
                "prefix": [
                        "wp_clean_plugins_cache",
                        "wcpc"
                ],
                "body": "wp_clean_plugins_cache(${1:\\$clear_update_cache:boolean} )",
                "description": "Clears the plugins cache used by get_plugins() and by default, the plugin updates cache."
        },
        "ƒ:wp_clean_themes_cache": {
                "prefix": [
                        "wp_clean_themes_cache",
                        "wctc"
                ],
                "body": "wp_clean_themes_cache(${1:\\$clear_update_cache:boolean} )",
                "description": "Clears the cache held by get_theme_roots() and WP_Theme."
        },
        "ƒ:wp_clean_update_cache": {
                "prefix": [
                        "wp_clean_update_cache",
                        "wcuc"
                ],
                "body": "wp_clean_update_cache()",
                "description": "Clear existing update caches for plugins, themes, and core."
        },
        "ƒ:wp_clear_auth_cookie": {
                "prefix": [
                        "wp_clear_auth_cookie",
                        "wcac"
                ],
                "body": "wp_clear_auth_cookie()",
                "description": "Removes all of the cookies associated with authentication."
        },
        "ƒ:wp_clear_scheduled_hook": {
                "prefix": [
                        "wp_clear_scheduled_hook",
                        "wcsh"
                ],
                "body": "wp_clear_scheduled_hook(${1:\\$hook:string},${2:\\$args:array},${3:\\$wp_error:boolean} )",
                "description": "Unschedules all events attached to the hook with the specified arguments."
        },
        "ƒ:wp_clearcookie": {
                "prefix": [
                        "wp_clearcookie",
                        "wc"
                ],
                "body": "wp_clearcookie()",
                "description": "Clears the authentication cookie, logging the user out. This function is deprecated."
        },
        "ƒ:wp_clone": {
                "prefix": [
                        "wp_clone",
                        "wc"
                ],
                "body": "wp_clone(${1:\\$object:object} )",
                "description": "Copy an object."
        },
        "ƒ:wp_color_scheme_settings": {
                "prefix": [
                        "wp_color_scheme_settings",
                        "wcss"
                ],
                "body": "wp_color_scheme_settings()",
                "description": ""
        },
        "ƒ:wp_comment_form_unfiltered_html_nonce": {
                "prefix": [
                        "wp_comment_form_unfiltered_html_nonce",
                        "wcfuhn"
                ],
                "body": "wp_comment_form_unfiltered_html_nonce()",
                "description": "Displays form token for unfiltered comments."
        },
        "ƒ:wp_comment_reply": {
                "prefix": [
                        "wp_comment_reply",
                        "wcr"
                ],
                "body": "wp_comment_reply(${1:\\$position:integer},${2:\\$checkbox:boolean},${3:\\$mode:string},${4:\\$table_row:boolean} )",
                "description": "Outputs the in-line comment reply-to form in the Comments list table."
        },
        "ƒ:wp_comment_trashnotice": {
                "prefix": [
                        "wp_comment_trashnotice",
                        "wct"
                ],
                "body": "wp_comment_trashnotice()",
                "description": "Outputs &#039;undo move to Trash&#039; text for comments."
        },
        "ƒ:wp_comments_personal_data_eraser": {
                "prefix": [
                        "wp_comments_personal_data_eraser",
                        "wcpde"
                ],
                "body": "wp_comments_personal_data_eraser(${1:\\$email_address:string},${2:\\$page:integer} )",
                "description": "Erases personal data associated with an email address from the comments table."
        },
        "ƒ:wp_comments_personal_data_exporter": {
                "prefix": [
                        "wp_comments_personal_data_exporter",
                        "wcpde"
                ],
                "body": "wp_comments_personal_data_exporter(${1:\\$email_address:string},${2:\\$page:integer} )",
                "description": "Finds and exports personal data associated with an email address from the comments table."
        },
        "ƒ:wp_common_block_scripts_and_styles": {
                "prefix": [
                        "wp_common_block_scripts_and_styles",
                        "wcbsas"
                ],
                "body": "wp_common_block_scripts_and_styles()",
                "description": "Handles the enqueueing of block scripts and styles that are common to both the editor and the front-end."
        },
        "ƒ:wp_constrain_dimensions": {
                "prefix": [
                        "wp_constrain_dimensions",
                        "wcd"
                ],
                "body": "wp_constrain_dimensions(${1:\\$current_width:integer},${2:\\$current_height:integer},${3:\\$max_width:integer},${4:\\$max_height:integer} )",
                "description": "Calculates the new dimensions for a down-sampled image."
        },
        "ƒ:wp_convert_bytes_to_hr": {
                "prefix": [
                        "wp_convert_bytes_to_hr",
                        "wcbth"
                ],
                "body": "wp_convert_bytes_to_hr(${1:\\$bytes:integer} )",
                "description": "Converts an integer byte value to a shorthand byte value."
        },
        "ƒ:wp_convert_hr_to_bytes": {
                "prefix": [
                        "wp_convert_hr_to_bytes",
                        "wchtb"
                ],
                "body": "wp_convert_hr_to_bytes(${1:\\$value:string} )",
                "description": "Converts a shorthand byte value to an integer byte value."
        },
        "ƒ:wp_convert_widget_settings": {
                "prefix": [
                        "wp_convert_widget_settings",
                        "wcws"
                ],
                "body": "wp_convert_widget_settings(${1:\\$base_name:string},${2:\\$option_name:string},${3:\\$settings:array} )",
                "description": "Converts the widget settings from single to multi-widget format."
        },
        "ƒ:wp_cookie_constants": {
                "prefix": [
                        "wp_cookie_constants",
                        "wcc"
                ],
                "body": "wp_cookie_constants()",
                "description": "Defines cookie-related WordPress constants."
        },
        "ƒ:wp_count_attachments": {
                "prefix": [
                        "wp_count_attachments",
                        "wca"
                ],
                "body": "wp_count_attachments(${1:\\$mime_type:string|array} )",
                "description": "Count number of attachments for the mime type(s)."
        },
        "ƒ:wp_count_comments": {
                "prefix": [
                        "wp_count_comments",
                        "wcc"
                ],
                "body": "wp_count_comments(${1:\\$post_id:integer} )",
                "description": "Retrieves the total comment counts for the whole site or a single post."
        },
        "ƒ:wp_count_posts": {
                "prefix": [
                        "wp_count_posts",
                        "wcp"
                ],
                "body": "wp_count_posts(${1:\\$type:string},${2:\\$perm:string} )",
                "description": "Count number of posts of a post type and if user has permissions to view."
        },
        "ƒ:wp_count_sites": {
                "prefix": [
                        "wp_count_sites",
                        "wcs"
                ],
                "body": "wp_count_sites(${1:\\$network_id:integer|null} )",
                "description": "Count number of sites grouped by site status."
        },
        "ƒ:wp_create_categories": {
                "prefix": [
                        "wp_create_categories",
                        "wcc"
                ],
                "body": "wp_create_categories(${1:\\$categories:array},${2:\\$post_id:integer} )",
                "description": "Create categories for the given post."
        },
        "ƒ:wp_create_category": {
                "prefix": [
                        "wp_create_category",
                        "wcc"
                ],
                "body": "wp_create_category(${1:\\$cat_name:integer|string},${2:\\$category_parent:integer} )",
                "description": "Add a new category to the database if it does not already exist."
        },
        "ƒ:wp_create_image_subsizes": {
                "prefix": [
                        "wp_create_image_subsizes",
                        "wcis"
                ],
                "body": "wp_create_image_subsizes(${1:\\$file:string},${2:\\$attachment_id:integer} )",
                "description": "Creates image sub-sizes, adds the new data to the image meta `sizes` array, and updates the image metadata."
        },
        "ƒ:wp_create_nav_menu": {
                "prefix": [
                        "wp_create_nav_menu",
                        "wcnm"
                ],
                "body": "wp_create_nav_menu(${1:\\$menu_name:string} )",
                "description": "Creates a navigation menu."
        },
        "ƒ:wp_create_nonce": {
                "prefix": [
                        "wp_create_nonce",
                        "wcn"
                ],
                "body": "wp_create_nonce(${1:\\$action:string|integer} )",
                "description": "Creates a cryptographic token tied to a specific action, user, user session, and window of time."
        },
        "ƒ:wp_create_post_autosave": {
                "prefix": [
                        "wp_create_post_autosave",
                        "wcpa"
                ],
                "body": "wp_create_post_autosave(${1:\\$post_data:array|integer} )",
                "description": "Creates autosave data for the specified post from `$_POST` data."
        },
        "ƒ:wp_create_tag": {
                "prefix": [
                        "wp_create_tag",
                        "wct"
                ],
                "body": "wp_create_tag(${1:\\$tag_name:integer|string} )",
                "description": "Add a new tag to the database if it does not already exist."
        },
        "ƒ:wp_create_term": {
                "prefix": [
                        "wp_create_term",
                        "wct"
                ],
                "body": "wp_create_term(${1:\\$tag_name:string},${2:\\$taxonomy:string} )",
                "description": "Add a new term to the database if it does not already exist."
        },
        "ƒ:wp_create_thumbnail": {
                "prefix": [
                        "wp_create_thumbnail",
                        "wct"
                ],
                "body": "wp_create_thumbnail(${1:\\$file:mixed},${2:\\$max_side:integer},${3:\\$deprecated:mixed} )",
                "description": "This was once used to create a thumbnail from an Image given a maximum side size."
        },
        "ƒ:wp_create_user": {
                "prefix": [
                        "wp_create_user",
                        "wcu"
                ],
                "body": "wp_create_user(${1:\\$username:string},${2:\\$password:string},${3:\\$email:string} )",
                "description": "Provides a simpler way of inserting a user into the database."
        },
        "ƒ:wp_create_user_request": {
                "prefix": [
                        "wp_create_user_request",
                        "wcur"
                ],
                "body": "wp_create_user_request(${1:\\$email_address:string},${2:\\$action_name:string},${3:\\$request_data:array},${4:\\$status:string} )",
                "description": "Creates and logs a user request to perform a specific action."
        },
        "ƒ:wp_credits": {
                "prefix": [
                        "wp_credits",
                        "wc"
                ],
                "body": "wp_credits(${1:\\$version:string},${2:\\$locale:string} )",
                "description": "Retrieve the contributor credits."
        },
        "ƒ:wp_credits_section_list": {
                "prefix": [
                        "wp_credits_section_list",
                        "wcsl"
                ],
                "body": "wp_credits_section_list(${1:\\$credits:array},${2:\\$slug:string} )",
                "description": "Displays a list of contributors for a given group."
        },
        "ƒ:wp_credits_section_title": {
                "prefix": [
                        "wp_credits_section_title",
                        "wcst"
                ],
                "body": "wp_credits_section_title(${1:\\$group_data:array} )",
                "description": "Displays the title for a given group of contributors."
        },
        "ƒ:wp_cron": {
                "prefix": [
                        "wp_cron",
                        "wc"
                ],
                "body": "wp_cron()",
                "description": "Register _wp_cron() to run on the {@see &#039;wp_loaded&#039;} action."
        },
        "ƒ:wp_cron_conditionally_prevent_sslverify": {
                "prefix": [
                        "wp_cron_conditionally_prevent_sslverify",
                        "wccps"
                ],
                "body": "wp_cron_conditionally_prevent_sslverify(${1:\\$request:array} )",
                "description": "Disables SSL verification if the &#039;cron_request&#039; arguments include an HTTPS URL."
        },
        "ƒ:wp_crop_image": {
                "prefix": [
                        "wp_crop_image",
                        "wci"
                ],
                "body": "wp_crop_image(${1:\\$src:string|integer},${2:\\$src_x:integer},${3:\\$src_y:integer},${4:\\$src_w:integer},${5:\\$src_h:integer},${6:\\$dst_w:integer},${7:\\$dst_h:integer},${8:\\$src_abs:boolean|false},${9:\\$dst_file:string|false} )",
                "description": "Crops an image to a given size."
        },
        "ƒ:wp_custom_css_cb": {
                "prefix": [
                        "wp_custom_css_cb",
                        "wccc"
                ],
                "body": "wp_custom_css_cb()",
                "description": "Renders the Custom CSS style element."
        },
        "ƒ:wp_customize_support_script": {
                "prefix": [
                        "wp_customize_support_script",
                        "wcss"
                ],
                "body": "wp_customize_support_script()",
                "description": "Prints a script to check whether or not the Customizer is supported, and apply either the no-customize-support or customize-support class to the body."
        },
        "ƒ:wp_customize_url": {
                "prefix": [
                        "wp_customize_url",
                        "wcu"
                ],
                "body": "wp_customize_url(${1:\\$stylesheet:string} )",
                "description": "Returns a URL to load the Customizer."
        },
        "ƒ:wp_dashboard": {
                "prefix": [
                        "wp_dashboard",
                        "wd"
                ],
                "body": "wp_dashboard()",
                "description": "Displays the dashboard."
        },
        "ƒ:wp_dashboard_browser_nag": {
                "prefix": [
                        "wp_dashboard_browser_nag",
                        "wdbn"
                ],
                "body": "wp_dashboard_browser_nag()",
                "description": "Displays the browser update nag."
        },
        "ƒ:wp_dashboard_cached_rss_widget": {
                "prefix": [
                        "wp_dashboard_cached_rss_widget",
                        "wdcrw"
                ],
                "body": "wp_dashboard_cached_rss_widget(${1:\\$widget_id:string},${2:\\$callback:callable},${3:\\$check_urls:array},${4:\\$args:mixed} )",
                "description": "Checks to see if all of the feed url in $check_urls are cached."
        },
        "ƒ:wp_dashboard_empty": {
                "prefix": [
                        "wp_dashboard_empty",
                        "wde"
                ],
                "body": "wp_dashboard_empty()",
                "description": "Empty function usable by plugins to output empty dashboard widget (to be populated later by JS)."
        },
        "ƒ:wp_dashboard_events_news": {
                "prefix": [
                        "wp_dashboard_events_news",
                        "wden"
                ],
                "body": "wp_dashboard_events_news()",
                "description": "Renders the Events and News dashboard widget."
        },
        "ƒ:wp_dashboard_incoming_links": {
                "prefix": [
                        "wp_dashboard_incoming_links",
                        "wdil"
                ],
                "body": "wp_dashboard_incoming_links()",
                "description": "Deprecated dashboard widget controls."
        },
        "ƒ:wp_dashboard_incoming_links_control": {
                "prefix": [
                        "wp_dashboard_incoming_links_control",
                        "wdilc"
                ],
                "body": "wp_dashboard_incoming_links_control()",
                "description": "Deprecated dashboard incoming links control."
        },
        "ƒ:wp_dashboard_incoming_links_output": {
                "prefix": [
                        "wp_dashboard_incoming_links_output",
                        "wdilo"
                ],
                "body": "wp_dashboard_incoming_links_output()",
                "description": "Deprecated dashboard widget controls."
        },
        "ƒ:wp_dashboard_php_nag": {
                "prefix": [
                        "wp_dashboard_php_nag",
                        "wdpn"
                ],
                "body": "wp_dashboard_php_nag()",
                "description": "Displays the PHP update nag."
        },
        "ƒ:wp_dashboard_plugins": {
                "prefix": [
                        "wp_dashboard_plugins",
                        "wdp"
                ],
                "body": "wp_dashboard_plugins()",
                "description": "Deprecated dashboard plugins control."
        },
        "ƒ:wp_dashboard_plugins_output": {
                "prefix": [
                        "wp_dashboard_plugins_output",
                        "wdpo"
                ],
                "body": "wp_dashboard_plugins_output(${1:\\$rss:string},${2:\\$args:array} )",
                "description": "Display plugins text for the WordPress news widget."
        },
        "ƒ:wp_dashboard_primary": {
                "prefix": [
                        "wp_dashboard_primary",
                        "wdp"
                ],
                "body": "wp_dashboard_primary()",
                "description": "&#039;WordPress Events and News&#039; dashboard widget."
        },
        "ƒ:wp_dashboard_primary_control": {
                "prefix": [
                        "wp_dashboard_primary_control",
                        "wdpc"
                ],
                "body": "wp_dashboard_primary_control()",
                "description": "Deprecated dashboard primary control."
        },
        "ƒ:wp_dashboard_primary_output": {
                "prefix": [
                        "wp_dashboard_primary_output",
                        "wdpo"
                ],
                "body": "wp_dashboard_primary_output(${1:\\$widget_id:string},${2:\\$feeds:array} )",
                "description": "Displays the WordPress events and news feeds."
        },
        "ƒ:wp_dashboard_quick_press": {
                "prefix": [
                        "wp_dashboard_quick_press",
                        "wdqp"
                ],
                "body": "wp_dashboard_quick_press(${1:\\$error_msg:string|false} )",
                "description": "The Quick Draft widget display and creation of drafts."
        },
        "ƒ:wp_dashboard_quick_press_output": {
                "prefix": [
                        "wp_dashboard_quick_press_output",
                        "wdqpo"
                ],
                "body": "wp_dashboard_quick_press_output()",
                "description": "Output the QuickPress dashboard widget."
        },
        "ƒ:wp_dashboard_quota": {
                "prefix": [
                        "wp_dashboard_quota",
                        "wdq"
                ],
                "body": "wp_dashboard_quota()",
                "description": "Displays file upload quota on dashboard."
        },
        "ƒ:wp_dashboard_recent_comments": {
                "prefix": [
                        "wp_dashboard_recent_comments",
                        "wdrc"
                ],
                "body": "wp_dashboard_recent_comments(${1:\\$total_items:integer} )",
                "description": "Show Comments section."
        },
        "ƒ:wp_dashboard_recent_comments_control": {
                "prefix": [
                        "wp_dashboard_recent_comments_control",
                        "wdrcc"
                ],
                "body": "wp_dashboard_recent_comments_control()",
                "description": "Deprecated dashboard recent comments control."
        },
        "ƒ:wp_dashboard_recent_drafts": {
                "prefix": [
                        "wp_dashboard_recent_drafts",
                        "wdrd"
                ],
                "body": "wp_dashboard_recent_drafts(${1:\\$drafts:array|false} )",
                "description": "Show recent drafts of the user on the dashboard."
        },
        "ƒ:wp_dashboard_recent_posts": {
                "prefix": [
                        "wp_dashboard_recent_posts",
                        "wdrp"
                ],
                "body": "wp_dashboard_recent_posts(${1:\\$args:array} )",
                "description": "Generates Publishing Soon and Recently Published sections."
        },
        "ƒ:wp_dashboard_right_now": {
                "prefix": [
                        "wp_dashboard_right_now",
                        "wdrn"
                ],
                "body": "wp_dashboard_right_now()",
                "description": "Dashboard widget that displays some basic stats about the site."
        },
        "ƒ:wp_dashboard_rss_control": {
                "prefix": [
                        "wp_dashboard_rss_control",
                        "wdrc"
                ],
                "body": "wp_dashboard_rss_control(${1:\\$widget_id:string},${2:\\$form_inputs:array} )",
                "description": "The RSS dashboard widget control."
        },
        "ƒ:wp_dashboard_rss_output": {
                "prefix": [
                        "wp_dashboard_rss_output",
                        "wdro"
                ],
                "body": "wp_dashboard_rss_output(${1:\\$widget_id:string} )",
                "description": "Display generic dashboard RSS widget feed."
        },
        "ƒ:wp_dashboard_secondary": {
                "prefix": [
                        "wp_dashboard_secondary",
                        "wds"
                ],
                "body": "wp_dashboard_secondary()",
                "description": "Deprecated dashboard secondary section."
        },
        "ƒ:wp_dashboard_secondary_control": {
                "prefix": [
                        "wp_dashboard_secondary_control",
                        "wdsc"
                ],
                "body": "wp_dashboard_secondary_control()",
                "description": "Deprecated dashboard secondary control."
        },
        "ƒ:wp_dashboard_secondary_output": {
                "prefix": [
                        "wp_dashboard_secondary_output",
                        "wdso"
                ],
                "body": "wp_dashboard_secondary_output()",
                "description": "Deprecated dashboard secondary output."
        },
        "ƒ:wp_dashboard_setup": {
                "prefix": [
                        "wp_dashboard_setup",
                        "wds"
                ],
                "body": "wp_dashboard_setup()",
                "description": "Registers dashboard widgets."
        },
        "ƒ:wp_dashboard_site_activity": {
                "prefix": [
                        "wp_dashboard_site_activity",
                        "wdsa"
                ],
                "body": "wp_dashboard_site_activity()",
                "description": "Callback function for Activity widget."
        },
        "ƒ:wp_dashboard_site_health": {
                "prefix": [
                        "wp_dashboard_site_health",
                        "wdsh"
                ],
                "body": "wp_dashboard_site_health()",
                "description": "Displays the Site Health Status widget."
        },
        "ƒ:wp_dashboard_trigger_widget_control": {
                "prefix": [
                        "wp_dashboard_trigger_widget_control",
                        "wdtwc"
                ],
                "body": "wp_dashboard_trigger_widget_control(${1:\\$widget_control_id:integer|false} )",
                "description": "Calls widget control callback."
        },
        "ƒ:wp_date": {
                "prefix": [
                        "wp_date",
                        "wd"
                ],
                "body": "wp_date(${1:\\$format:string},${2:\\$timestamp:integer|null},${3:\\$timezone:DateTimeZone|null} )",
                "description": "Retrieves the date, in localized format."
        },
        "ƒ:wp_debug_backtrace_summary": {
                "prefix": [
                        "wp_debug_backtrace_summary",
                        "wdbs"
                ],
                "body": "wp_debug_backtrace_summary(${1:\\$ignore_class:string|null},${2:\\$skip_frames:integer},${3:\\$pretty:boolean} )",
                "description": "Returns a comma-separated string or array of functions that have been called to get to the current point in code."
        },
        "ƒ:wp_debug_mode": {
                "prefix": [
                        "wp_debug_mode",
                        "wdm"
                ],
                "body": "wp_debug_mode()",
                "description": "Set PHP error reporting based on WordPress debug settings."
        },
        "ƒ:wp_default_editor": {
                "prefix": [
                        "wp_default_editor",
                        "wde"
                ],
                "body": "wp_default_editor()",
                "description": "Find out which editor should be displayed by default."
        },
        "ƒ:wp_default_packages": {
                "prefix": [
                        "wp_default_packages",
                        "wdp"
                ],
                "body": "wp_default_packages(${1:\\$scripts:WP_Scripts} )",
                "description": "Registers all the WordPress packages scripts."
        },
        "ƒ:wp_default_packages_inline_scripts": {
                "prefix": [
                        "wp_default_packages_inline_scripts",
                        "wdpis"
                ],
                "body": "wp_default_packages_inline_scripts(${1:\\$scripts:WP_Scripts} )",
                "description": "Adds inline scripts required for the WordPress JavaScript packages."
        },
        "ƒ:wp_default_packages_scripts": {
                "prefix": [
                        "wp_default_packages_scripts",
                        "wdps"
                ],
                "body": "wp_default_packages_scripts(${1:\\$scripts:WP_Scripts} )",
                "description": "Registers all the WordPress packages scripts that are in the standardized `js/dist/` location."
        },
        "ƒ:wp_default_packages_vendor": {
                "prefix": [
                        "wp_default_packages_vendor",
                        "wdpv"
                ],
                "body": "wp_default_packages_vendor(${1:\\$scripts:WP_Scripts} )",
                "description": "Registers all the WordPress vendor scripts that are in the standardized `js/dist/vendor/` location."
        },
        "ƒ:wp_default_scripts": {
                "prefix": [
                        "wp_default_scripts",
                        "wds"
                ],
                "body": "wp_default_scripts(${1:\\$scripts:WP_Scripts} )",
                "description": "Registers all WordPress scripts."
        },
        "ƒ:wp_default_styles": {
                "prefix": [
                        "wp_default_styles",
                        "wds"
                ],
                "body": "wp_default_styles(${1:\\$styles:WP_Styles} )",
                "description": "Assigns default styles to $styles object."
        },
        "ƒ:wp_defer_comment_counting": {
                "prefix": [
                        "wp_defer_comment_counting",
                        "wdcc"
                ],
                "body": "wp_defer_comment_counting(${1:\\$defer:boolean|null} )",
                "description": "Determines whether to defer comment counting."
        },
        "ƒ:wp_defer_term_counting": {
                "prefix": [
                        "wp_defer_term_counting",
                        "wdtc"
                ],
                "body": "wp_defer_term_counting(${1:\\$defer:boolean|null} )",
                "description": "Enables or disables term counting."
        },
        "ƒ:wp_delete_attachment": {
                "prefix": [
                        "wp_delete_attachment",
                        "wda"
                ],
                "body": "wp_delete_attachment(${1:\\$post_id:integer},${2:\\$force_delete:boolean} )",
                "description": "Trash or delete an attachment."
        },
        "ƒ:wp_delete_attachment_files": {
                "prefix": [
                        "wp_delete_attachment_files",
                        "wdaf"
                ],
                "body": "wp_delete_attachment_files(${1:\\$post_id:integer},${2:\\$meta:array},${3:\\$backup_sizes:array},${4:\\$file:string} )",
                "description": "Deletes all files that belong to the given attachment."
        },
        "ƒ:wp_delete_auto_drafts": {
                "prefix": [
                        "wp_delete_auto_drafts",
                        "wdad"
                ],
                "body": "wp_delete_auto_drafts()",
                "description": "Delete auto-drafts for new posts that are &gt; 7 days old."
        },
        "ƒ:wp_delete_category": {
                "prefix": [
                        "wp_delete_category",
                        "wdc"
                ],
                "body": "wp_delete_category(${1:\\$cat_ID:integer} )",
                "description": "Deletes one existing category."
        },
        "ƒ:wp_delete_comment": {
                "prefix": [
                        "wp_delete_comment",
                        "wdc"
                ],
                "body": "wp_delete_comment(${1:\\$comment_id:integer|WP_Comment},${2:\\$force_delete:boolean} )",
                "description": "Trashes or deletes a comment."
        },
        "ƒ:wp_delete_file": {
                "prefix": [
                        "wp_delete_file",
                        "wdf"
                ],
                "body": "wp_delete_file(${1:\\$file:string} )",
                "description": "Delete a file"
        },
        "ƒ:wp_delete_file_from_directory": {
                "prefix": [
                        "wp_delete_file_from_directory",
                        "wdffd"
                ],
                "body": "wp_delete_file_from_directory(${1:\\$file:string},${2:\\$directory:string} )",
                "description": "Deletes a file if its path is within the given directory."
        },
        "ƒ:wp_delete_link": {
                "prefix": [
                        "wp_delete_link",
                        "wdl"
                ],
                "body": "wp_delete_link(${1:\\$link_id:integer} )",
                "description": "Deletes a specified link from the database."
        },
        "ƒ:wp_delete_nav_menu": {
                "prefix": [
                        "wp_delete_nav_menu",
                        "wdnm"
                ],
                "body": "wp_delete_nav_menu(${1:\\$menu:integer|string|WP_Term} )",
                "description": "Deletes a navigation menu."
        },
        "ƒ:wp_delete_object_term_relationships": {
                "prefix": [
                        "wp_delete_object_term_relationships",
                        "wdotr"
                ],
                "body": "wp_delete_object_term_relationships(${1:\\$object_id:integer},${2:\\$taxonomies:string|array} )",
                "description": "Unlinks the object from the taxonomy or taxonomies."
        },
        "ƒ:wp_delete_post": {
                "prefix": [
                        "wp_delete_post",
                        "wdp"
                ],
                "body": "wp_delete_post(${1:\\$postid:integer},${2:\\$force_delete:boolean} )",
                "description": "Trash or delete a post or page."
        },
        "ƒ:wp_delete_post_revision": {
                "prefix": [
                        "wp_delete_post_revision",
                        "wdpr"
                ],
                "body": "wp_delete_post_revision(${1:\\$revision_id:integer|WP_Post} )",
                "description": "Deletes a revision."
        },
        "ƒ:wp_delete_signup_on_user_delete": {
                "prefix": [
                        "wp_delete_signup_on_user_delete",
                        "wdsoud"
                ],
                "body": "wp_delete_signup_on_user_delete(${1:\\$id:integer},${2:\\$reassign:integer|null},${3:\\$user:WP_User} )",
                "description": "Deletes an associated signup entry when a user is deleted from the database."
        },
        "ƒ:wp_delete_site": {
                "prefix": [
                        "wp_delete_site",
                        "wds"
                ],
                "body": "wp_delete_site(${1:\\$site_id:integer} )",
                "description": "Deletes a site from the database."
        },
        "ƒ:wp_delete_term": {
                "prefix": [
                        "wp_delete_term",
                        "wdt"
                ],
                "body": "wp_delete_term(${1:\\$term:integer},${2:\\$taxonomy:string},${3:\\$args:array|string} )",
                "description": "Removes a term from the database."
        },
        "ƒ:wp_delete_user": {
                "prefix": [
                        "wp_delete_user",
                        "wdu"
                ],
                "body": "wp_delete_user(${1:\\$id:integer},${2:\\$reassign:integer|null} )",
                "description": "Remove user and optionally reassign posts and links to another user."
        },
        "ƒ:wp_dependencies_unique_hosts": {
                "prefix": [
                        "wp_dependencies_unique_hosts",
                        "wduh"
                ],
                "body": "wp_dependencies_unique_hosts()",
                "description": "Retrieves a list of unique hosts of all enqueued scripts and styles."
        },
        "ƒ:wp_dequeue_script": {
                "prefix": [
                        "wp_dequeue_script",
                        "wds"
                ],
                "body": "wp_dequeue_script(${1:\\$handle:string} )",
                "description": "Remove a previously enqueued script."
        },
        "ƒ:wp_dequeue_style": {
                "prefix": [
                        "wp_dequeue_style",
                        "wds"
                ],
                "body": "wp_dequeue_style(${1:\\$handle:string} )",
                "description": "Remove a previously enqueued CSS stylesheet."
        },
        "ƒ:wp_deregister_script": {
                "prefix": [
                        "wp_deregister_script",
                        "wds"
                ],
                "body": "wp_deregister_script(${1:\\$handle:string} )",
                "description": "Remove a registered script."
        },
        "ƒ:wp_deregister_style": {
                "prefix": [
                        "wp_deregister_style",
                        "wds"
                ],
                "body": "wp_deregister_style(${1:\\$handle:string} )",
                "description": "Remove a registered stylesheet."
        },
        "ƒ:wp_destroy_all_sessions": {
                "prefix": [
                        "wp_destroy_all_sessions",
                        "wdas"
                ],
                "body": "wp_destroy_all_sessions()",
                "description": "Removes all session tokens for the current user from the database."
        },
        "ƒ:wp_destroy_current_session": {
                "prefix": [
                        "wp_destroy_current_session",
                        "wdcs"
                ],
                "body": "wp_destroy_current_session()",
                "description": "Removes the current session token from the database."
        },
        "ƒ:wp_destroy_other_sessions": {
                "prefix": [
                        "wp_destroy_other_sessions",
                        "wdos"
                ],
                "body": "wp_destroy_other_sessions()",
                "description": "Removes all but the current session token for the current user for the database."
        },
        "ƒ:wp_die": {
                "prefix": [
                        "wp_die",
                        "wd"
                ],
                "body": "wp_die(${1:\\$message:string|WP_Error},${2:\\$title:string|integer},${3:\\$args:string|array|integer} )",
                "description": "Kills WordPress execution and displays HTML page with an error message."
        },
        "ƒ:wp_direct_php_update_button": {
                "prefix": [
                        "wp_direct_php_update_button",
                        "wdpub"
                ],
                "body": "wp_direct_php_update_button()",
                "description": "Display a button directly linking to a PHP update process."
        },
        "ƒ:wp_doc_link_parse": {
                "prefix": [
                        "wp_doc_link_parse",
                        "wdlp"
                ],
                "body": "wp_doc_link_parse(${1:\\$content:string} )",
                "description": ""
        },
        "ƒ:wp_doing_ajax": {
                "prefix": [
                        "wp_doing_ajax",
                        "wda"
                ],
                "body": "wp_doing_ajax()",
                "description": "Determines whether the current request is a WordPress Ajax request."
        },
        "ƒ:wp_doing_cron": {
                "prefix": [
                        "wp_doing_cron",
                        "wdc"
                ],
                "body": "wp_doing_cron()",
                "description": "Determines whether the current request is a WordPress cron request."
        },
        "ƒ:wp_download_language_pack": {
                "prefix": [
                        "wp_download_language_pack",
                        "wdlp"
                ],
                "body": "wp_download_language_pack(${1:\\$download:string} )",
                "description": "Download a language pack."
        },
        "ƒ:wp_dropdown_categories": {
                "prefix": [
                        "wp_dropdown_categories",
                        "wdc"
                ],
                "body": "wp_dropdown_categories(${1:\\$args:array|string} )",
                "description": "Displays or retrieves the HTML dropdown list of categories."
        },
        "ƒ:wp_dropdown_cats": {
                "prefix": [
                        "wp_dropdown_cats",
                        "wdc"
                ],
                "body": "wp_dropdown_cats(${1:\\$current_cat:integer},${2:\\$current_parent:integer},${3:\\$category_parent:integer},${4:\\$level:integer},${5:\\$categories:array} )",
                "description": "Legacy function used for generating a categories drop-down control."
        },
        "ƒ:wp_dropdown_languages": {
                "prefix": [
                        "wp_dropdown_languages",
                        "wdl"
                ],
                "body": "wp_dropdown_languages(${1:\\$args:string|array} )",
                "description": "Language selector."
        },
        "ƒ:wp_dropdown_pages": {
                "prefix": [
                        "wp_dropdown_pages",
                        "wdp"
                ],
                "body": "wp_dropdown_pages(${1:\\$args:array|string} )",
                "description": "Retrieves or displays a list of pages as a dropdown (select list)."
        },
        "ƒ:wp_dropdown_roles": {
                "prefix": [
                        "wp_dropdown_roles",
                        "wdr"
                ],
                "body": "wp_dropdown_roles(${1:\\$selected:string} )",
                "description": "Prints out option HTML elements for role selectors."
        },
        "ƒ:wp_dropdown_users": {
                "prefix": [
                        "wp_dropdown_users",
                        "wdu"
                ],
                "body": "wp_dropdown_users(${1:\\$args:array|string} )",
                "description": "Creates dropdown HTML content of users."
        },
        "ƒ:wp_edit_attachments_query": {
                "prefix": [
                        "wp_edit_attachments_query",
                        "weaq"
                ],
                "body": "wp_edit_attachments_query(${1:\\$q:array|false} )",
                "description": "Executes a query for attachments. An array of WP_Query arguments can be passed in, which will override the arguments set by this function."
        },
        "ƒ:wp_edit_attachments_query_vars": {
                "prefix": [
                        "wp_edit_attachments_query_vars",
                        "weaqv"
                ],
                "body": "wp_edit_attachments_query_vars(${1:\\$q:array|false} )",
                "description": "Returns the query variables for the current attachments request."
        },
        "ƒ:wp_edit_posts_query": {
                "prefix": [
                        "wp_edit_posts_query",
                        "wepq"
                ],
                "body": "wp_edit_posts_query(${1:\\$q:array|false} )",
                "description": "Runs the query to fetch the posts for listing on the edit posts page."
        },
        "ƒ:wp_edit_theme_plugin_file": {
                "prefix": [
                        "wp_edit_theme_plugin_file",
                        "wetpf"
                ],
                "body": "wp_edit_theme_plugin_file(${1:\\$args:array} )",
                "description": "Attempts to edit a file for a theme or plugin."
        },
        "ƒ:wp_editor": {
                "prefix": [
                        "wp_editor",
                        "we"
                ],
                "body": "wp_editor(${1:\\$content:string},${2:\\$editor_id:string},${3:\\$settings:array} )",
                "description": "Renders an editor."
        },
        "ƒ:wp_embed_defaults": {
                "prefix": [
                        "wp_embed_defaults",
                        "wed"
                ],
                "body": "wp_embed_defaults(${1:\\$url:string} )",
                "description": "Creates default array of embed parameters."
        },
        "ƒ:wp_embed_excerpt_attachment": {
                "prefix": [
                        "wp_embed_excerpt_attachment",
                        "weea"
                ],
                "body": "wp_embed_excerpt_attachment(${1:\\$content:string} )",
                "description": "Filters the post excerpt for the embed template."
        },
        "ƒ:wp_embed_excerpt_more": {
                "prefix": [
                        "wp_embed_excerpt_more",
                        "weem"
                ],
                "body": "wp_embed_excerpt_more(${1:\\$more_string:string} )",
                "description": "Filters the string in the &#039;more&#039; link displayed after a trimmed excerpt."
        },
        "ƒ:wp_embed_handler_audio": {
                "prefix": [
                        "wp_embed_handler_audio",
                        "weha"
                ],
                "body": "wp_embed_handler_audio(${1:\\$matches:array},${2:\\$attr:array},${3:\\$url:string},${4:\\$rawattr:array} )",
                "description": "Audio embed handler callback."
        },
        "ƒ:wp_embed_handler_googlevideo": {
                "prefix": [
                        "wp_embed_handler_googlevideo",
                        "wehg"
                ],
                "body": "wp_embed_handler_googlevideo(${1:\\$matches:},${2:\\$attr:},${3:\\$url:},${4:\\$rawattr:} )",
                "description": "The Google Video embed handler callback."
        },
        "ƒ:wp_embed_handler_video": {
                "prefix": [
                        "wp_embed_handler_video",
                        "wehv"
                ],
                "body": "wp_embed_handler_video(${1:\\$matches:array},${2:\\$attr:array},${3:\\$url:string},${4:\\$rawattr:array} )",
                "description": "Video embed handler callback."
        },
        "ƒ:wp_embed_handler_youtube": {
                "prefix": [
                        "wp_embed_handler_youtube",
                        "wehy"
                ],
                "body": "wp_embed_handler_youtube(${1:\\$matches:array},${2:\\$attr:array},${3:\\$url:string},${4:\\$rawattr:array} )",
                "description": "YouTube iframe embed handler callback."
        },
        "ƒ:wp_embed_register_handler": {
                "prefix": [
                        "wp_embed_register_handler",
                        "werh"
                ],
                "body": "wp_embed_register_handler(${1:\\$id:string},${2:\\$regex:string},${3:\\$callback:callable},${4:\\$priority:integer} )",
                "description": "Registers an embed handler."
        },
        "ƒ:wp_embed_unregister_handler": {
                "prefix": [
                        "wp_embed_unregister_handler",
                        "weuh"
                ],
                "body": "wp_embed_unregister_handler(${1:\\$id:string},${2:\\$priority:integer} )",
                "description": "Unregisters a previously-registered embed handler."
        },
        "ƒ:wp_enable_block_templates": {
                "prefix": [
                        "wp_enable_block_templates",
                        "webt"
                ],
                "body": "wp_enable_block_templates()",
                "description": "Enables the block templates (editor mode) for themes with theme.json by default."
        },
        "ƒ:wp_encode_emoji": {
                "prefix": [
                        "wp_encode_emoji",
                        "wee"
                ],
                "body": "wp_encode_emoji(${1:\\$content:string} )",
                "description": "Converts emoji characters to their equivalent HTML entity."
        },
        "ƒ:wp_enqueue_block_style": {
                "prefix": [
                        "wp_enqueue_block_style",
                        "webs"
                ],
                "body": "wp_enqueue_block_style(${1:\\$block_name:string},${2:\\$args:array} )",
                "description": "Enqueues a stylesheet for a specific block."
        },
        "ƒ:wp_enqueue_block_support_styles": {
                "prefix": [
                        "wp_enqueue_block_support_styles",
                        "webss"
                ],
                "body": "wp_enqueue_block_support_styles(${1:\\$style:string} )",
                "description": "This function takes care of adding inline styles in the proper place, depending on the theme in use."
        },
        "ƒ:wp_enqueue_code_editor": {
                "prefix": [
                        "wp_enqueue_code_editor",
                        "wece"
                ],
                "body": "wp_enqueue_code_editor(${1:\\$args:array} )",
                "description": "Enqueue assets needed by the code editor for the given settings."
        },
        "ƒ:wp_enqueue_editor": {
                "prefix": [
                        "wp_enqueue_editor",
                        "wee"
                ],
                "body": "wp_enqueue_editor()",
                "description": "Outputs the editor scripts, stylesheets, and default settings."
        },
        "ƒ:wp_enqueue_editor_block_directory_assets": {
                "prefix": [
                        "wp_enqueue_editor_block_directory_assets",
                        "weebda"
                ],
                "body": "wp_enqueue_editor_block_directory_assets()",
                "description": "Enqueues the assets required for the block directory within the block editor."
        },
        "ƒ:wp_enqueue_editor_format_library_assets": {
                "prefix": [
                        "wp_enqueue_editor_format_library_assets",
                        "weefla"
                ],
                "body": "wp_enqueue_editor_format_library_assets()",
                "description": "Enqueues the assets required for the format library within the block editor."
        },
        "ƒ:wp_enqueue_global_styles": {
                "prefix": [
                        "wp_enqueue_global_styles",
                        "wegs"
                ],
                "body": "wp_enqueue_global_styles()",
                "description": "Enqueues the global styles defined via theme.json."
        },
        "ƒ:wp_enqueue_global_styles_css_custom_properties": {
                "prefix": [
                        "wp_enqueue_global_styles_css_custom_properties",
                        "wegsccp"
                ],
                "body": "wp_enqueue_global_styles_css_custom_properties()",
                "description": "Function that enqueues the CSS Custom Properties coming from theme.json."
        },
        "ƒ:wp_enqueue_media": {
                "prefix": [
                        "wp_enqueue_media",
                        "wem"
                ],
                "body": "wp_enqueue_media(${1:\\$args:array} )",
                "description": "Enqueues all scripts, styles, settings, and templates necessary to use all media JS APIs."
        },
        "ƒ:wp_enqueue_registered_block_scripts_and_styles": {
                "prefix": [
                        "wp_enqueue_registered_block_scripts_and_styles",
                        "werbsas"
                ],
                "body": "wp_enqueue_registered_block_scripts_and_styles()",
                "description": "Enqueues registered block scripts and styles, depending on current rendered context (only enqueuing editor scripts while in context of the editor)."
        },
        "ƒ:wp_enqueue_script": {
                "prefix": [
                        "wp_enqueue_script",
                        "wes"
                ],
                "body": "wp_enqueue_script(${1:\\$handle:string},${2:\\$src:string},${3:\\$deps:array},${4:\\$ver:string|boolean|null},${5:\\$in_footer:boolean} )",
                "description": "Enqueue a script."
        },
        "ƒ:wp_enqueue_scripts": {
                "prefix": [
                        "wp_enqueue_scripts",
                        "wes"
                ],
                "body": "wp_enqueue_scripts()",
                "description": "Wrapper for do_action( &#039;wp_enqueue_scripts&#039; )."
        },
        "ƒ:wp_enqueue_style": {
                "prefix": [
                        "wp_enqueue_style",
                        "wes"
                ],
                "body": "wp_enqueue_style(${1:\\$handle:string},${2:\\$src:string},${3:\\$deps:array},${4:\\$ver:string|boolean|null},${5:\\$media:string} )",
                "description": "Enqueue a CSS stylesheet."
        },
        "ƒ:wp_exif_date2ts": {
                "prefix": [
                        "wp_exif_date2ts",
                        "wed"
                ],
                "body": "wp_exif_date2ts(${1:\\$str:string} )",
                "description": "Convert the exif date format to a unix timestamp."
        },
        "ƒ:wp_exif_frac2dec": {
                "prefix": [
                        "wp_exif_frac2dec",
                        "wef"
                ],
                "body": "wp_exif_frac2dec(${1:\\$str:string} )",
                "description": "Convert a fraction string to a decimal."
        },
        "ƒ:wp_expand_dimensions": {
                "prefix": [
                        "wp_expand_dimensions",
                        "wed"
                ],
                "body": "wp_expand_dimensions(${1:\\$example_width:integer},${2:\\$example_height:integer},${3:\\$max_width:integer},${4:\\$max_height:integer} )",
                "description": "Based on a supplied width/height example, return the biggest possible dimensions based on the max width/height."
        },
        "ƒ:wp_explain_nonce": {
                "prefix": [
                        "wp_explain_nonce",
                        "wen"
                ],
                "body": "wp_explain_nonce(${1:\\$action:string} )",
                "description": "Retrieve nonce action &quot;Are you sure&quot; message."
        },
        "ƒ:wp_ext2type": {
                "prefix": [
                        "wp_ext2type",
                        "we"
                ],
                "body": "wp_ext2type(${1:\\$ext:string} )",
                "description": "Retrieve the file type based on the extension name."
        },
        "ƒ:wp_extract_urls": {
                "prefix": [
                        "wp_extract_urls",
                        "weu"
                ],
                "body": "wp_extract_urls(${1:\\$content:string} )",
                "description": "Use RegEx to extract URLs from arbitrary content."
        },
        "ƒ:wp_favicon_request": {
                "prefix": [
                        "wp_favicon_request",
                        "wfr"
                ],
                "body": "wp_favicon_request()",
                "description": "Don&#039;t load all of WordPress when handling a favicon.ico request."
        },
        "ƒ:wp_filesize": {
                "prefix": [
                        "wp_filesize",
                        "wf"
                ],
                "body": "wp_filesize(${1:\\$path:string} )",
                "description": "Wrapper for PHP filesize with filters and casting the result as an integer."
        },
        "ƒ:WP_Filesystem": {
                "prefix": [
                        "WP_Filesystem",
                        "WF"
                ],
                "body": "WP_Filesystem(${1:\\$args:array|false},${2:\\$context:string|false},${3:\\$allow_relaxed_file_ownership:boolean} )",
                "description": "Initializes and connects the WordPress Filesystem Abstraction classes."
        },
        "ƒ:wp_filter_comment": {
                "prefix": [
                        "wp_filter_comment",
                        "wfc"
                ],
                "body": "wp_filter_comment(${1:\\$commentdata:array} )",
                "description": "Filters and sanitizes comment data."
        },
        "ƒ:wp_filter_content_tags": {
                "prefix": [
                        "wp_filter_content_tags",
                        "wfct"
                ],
                "body": "wp_filter_content_tags(${1:\\$content:string},${2:\\$context:string|null} )",
                "description": "Filters specific tags in post content and modifies their markup."
        },
        "ƒ:wp_filter_global_styles_post": {
                "prefix": [
                        "wp_filter_global_styles_post",
                        "wfgsp"
                ],
                "body": "wp_filter_global_styles_post(${1:\\$data:string} )",
                "description": "Sanitizes global styles user content removing unsafe rules."
        },
        "ƒ:wp_filter_kses": {
                "prefix": [
                        "wp_filter_kses",
                        "wfk"
                ],
                "body": "wp_filter_kses(${1:\\$data:string} )",
                "description": "Sanitize content with allowed HTML KSES rules."
        },
        "ƒ:wp_filter_nohtml_kses": {
                "prefix": [
                        "wp_filter_nohtml_kses",
                        "wfnk"
                ],
                "body": "wp_filter_nohtml_kses(${1:\\$data:string} )",
                "description": "Strips all HTML from a text string."
        },
        "ƒ:wp_filter_object_list": {
                "prefix": [
                        "wp_filter_object_list",
                        "wfol"
                ],
                "body": "wp_filter_object_list(${1:\\$list:array},${2:\\$args:array},${3:\\$operator:string},${4:\\$field:boolean|string} )",
                "description": "Filters a list of objects, based on a set of key =&gt; value arguments."
        },
        "ƒ:wp_filter_oembed_iframe_title_attribute": {
                "prefix": [
                        "wp_filter_oembed_iframe_title_attribute",
                        "wfoita"
                ],
                "body": "wp_filter_oembed_iframe_title_attribute(${1:\\$result:string},${2:\\$data:object},${3:\\$url:string} )",
                "description": "Filters the given oEmbed HTML to make sure iframes have a title attribute."
        },
        "ƒ:wp_filter_oembed_result": {
                "prefix": [
                        "wp_filter_oembed_result",
                        "wfor"
                ],
                "body": "wp_filter_oembed_result(${1:\\$result:string},${2:\\$data:object},${3:\\$url:string} )",
                "description": "Filters the given oEmbed HTML."
        },
        "ƒ:wp_filter_post_kses": {
                "prefix": [
                        "wp_filter_post_kses",
                        "wfpk"
                ],
                "body": "wp_filter_post_kses(${1:\\$data:string} )",
                "description": "Sanitizes content for allowed HTML tags for post content."
        },
        "ƒ:wp_filter_pre_oembed_result": {
                "prefix": [
                        "wp_filter_pre_oembed_result",
                        "wfpor"
                ],
                "body": "wp_filter_pre_oembed_result(${1:\\$result:null|string},${2:\\$url:string},${3:\\$args:array} )",
                "description": "Filters the oEmbed result before any HTTP requests are made."
        },
        "ƒ:wp_filter_wp_template_unique_post_slug": {
                "prefix": [
                        "wp_filter_wp_template_unique_post_slug",
                        "wfwtups"
                ],
                "body": "wp_filter_wp_template_unique_post_slug(${1:\\$override_slug:string},${2:\\$slug:string},${3:\\$post_ID:integer},${4:\\$post_status:string},${5:\\$post_type:string} )",
                "description": "Generates a unique slug for templates."
        },
        "ƒ:wp_finalize_scraping_edited_file_errors": {
                "prefix": [
                        "wp_finalize_scraping_edited_file_errors",
                        "wfsefe"
                ],
                "body": "wp_finalize_scraping_edited_file_errors(${1:\\$scrape_key:string} )",
                "description": "Finalize scraping for edited file errors."
        },
        "ƒ:wp_find_hierarchy_loop": {
                "prefix": [
                        "wp_find_hierarchy_loop",
                        "wfhl"
                ],
                "body": "wp_find_hierarchy_loop(${1:\\$callback:callable},${2:\\$start:integer},${3:\\$start_parent:integer},${4:\\$callback_args:array} )",
                "description": "Find hierarchy loops using a callback function that maps object IDs to parent IDs."
        },
        "ƒ:wp_find_hierarchy_loop_tortoise_hare": {
                "prefix": [
                        "wp_find_hierarchy_loop_tortoise_hare",
                        "wfhlth"
                ],
                "body": "wp_find_hierarchy_loop_tortoise_hare(${1:\\$callback:callable},${2:\\$start:integer},${3:\\$override:array},${4:\\$callback_args:array},${5:\\$_return_loop:boolean} )",
                "description": "Use the &quot;The Tortoise and the Hare&quot; algorithm to detect loops."
        },
        "ƒ:wp_find_widgets_sidebar": {
                "prefix": [
                        "wp_find_widgets_sidebar",
                        "wfws"
                ],
                "body": "wp_find_widgets_sidebar(${1:\\$widget_id:string} )",
                "description": "Finds the sidebar that a given widget belongs to."
        },
        "ƒ:wp_fix_server_vars": {
                "prefix": [
                        "wp_fix_server_vars",
                        "wfsv"
                ],
                "body": "wp_fix_server_vars()",
                "description": "Fix `$_SERVER` variables for various setups."
        },
        "ƒ:wp_footer": {
                "prefix": [
                        "wp_footer",
                        "wf"
                ],
                "body": "wp_footer()",
                "description": "Fire the wp_footer action."
        },
        "ƒ:wp_force_plain_post_permalink": {
                "prefix": [
                        "wp_force_plain_post_permalink",
                        "wfppp"
                ],
                "body": "wp_force_plain_post_permalink(${1:\\$post:WP_Post|integer|null},${2:\\$sample:boolean|null} )",
                "description": "Determine whether post should always use a plain permalink structure."
        },
        "ƒ:wp_functionality_constants": {
                "prefix": [
                        "wp_functionality_constants",
                        "wfc"
                ],
                "body": "wp_functionality_constants()",
                "description": "Defines functionality-related WordPress constants."
        },
        "ƒ:wp_fuzzy_number_match": {
                "prefix": [
                        "wp_fuzzy_number_match",
                        "wfnm"
                ],
                "body": "wp_fuzzy_number_match(${1:\\$expected:integer|float},${2:\\$actual:integer|float},${3:\\$precision:integer|float} )",
                "description": "Checks if two numbers are nearly the same."
        },
        "ƒ:wp_generate_attachment_metadata": {
                "prefix": [
                        "wp_generate_attachment_metadata",
                        "wgam"
                ],
                "body": "wp_generate_attachment_metadata(${1:\\$attachment_id:integer},${2:\\$file:string} )",
                "description": "Generate attachment meta data and create image sub-sizes for images."
        },
        "ƒ:wp_generate_auth_cookie": {
                "prefix": [
                        "wp_generate_auth_cookie",
                        "wgac"
                ],
                "body": "wp_generate_auth_cookie(${1:\\$user_id:integer},${2:\\$expiration:integer},${3:\\$scheme:string},${4:\\$token:string} )",
                "description": "Generates authentication cookie contents."
        },
        "ƒ:wp_generate_block_templates_export_file": {
                "prefix": [
                        "wp_generate_block_templates_export_file",
                        "wgbtef"
                ],
                "body": "wp_generate_block_templates_export_file()",
                "description": "Creates an export of the current templates and template parts from the site editor at the specified path in a ZIP file."
        },
        "ƒ:wp_generate_password": {
                "prefix": [
                        "wp_generate_password",
                        "wgp"
                ],
                "body": "wp_generate_password(${1:\\$length:integer},${2:\\$special_chars:boolean},${3:\\$extra_special_chars:boolean} )",
                "description": "Generates a random password drawn from the defined set of characters."
        },
        "ƒ:wp_generate_tag_cloud": {
                "prefix": [
                        "wp_generate_tag_cloud",
                        "wgtc"
                ],
                "body": "wp_generate_tag_cloud(${1:\\$tags:array},${2:\\$args:string|array} )",
                "description": "Generates a tag cloud (heatmap) from provided data."
        },
        "ƒ:wp_generate_user_request_key": {
                "prefix": [
                        "wp_generate_user_request_key",
                        "wgurk"
                ],
                "body": "wp_generate_user_request_key(${1:\\$request_id:integer} )",
                "description": "Returns a confirmation key for a user action and stores the hashed version for future comparison."
        },
        "ƒ:wp_generate_uuid4": {
                "prefix": [
                        "wp_generate_uuid4",
                        "wgu"
                ],
                "body": "wp_generate_uuid4()",
                "description": "Generate a random UUID (version 4)."
        },
        "ƒ:wp_generator": {
                "prefix": [
                        "wp_generator",
                        "wg"
                ],
                "body": "wp_generator()",
                "description": "Displays the XHTML generator that is generated on the wp_head hook."
        },
        "ƒ:wp_get_active_and_valid_plugins": {
                "prefix": [
                        "wp_get_active_and_valid_plugins",
                        "wgaavp"
                ],
                "body": "wp_get_active_and_valid_plugins()",
                "description": "Retrieve an array of active and valid plugin files."
        },
        "ƒ:wp_get_active_and_valid_themes": {
                "prefix": [
                        "wp_get_active_and_valid_themes",
                        "wgaavt"
                ],
                "body": "wp_get_active_and_valid_themes()",
                "description": "Retrieves an array of active and valid themes."
        },
        "ƒ:wp_get_active_network_plugins": {
                "prefix": [
                        "wp_get_active_network_plugins",
                        "wganp"
                ],
                "body": "wp_get_active_network_plugins()",
                "description": "Returns array of network plugin files to be included in global scope."
        },
        "ƒ:wp_get_additional_image_sizes": {
                "prefix": [
                        "wp_get_additional_image_sizes",
                        "wgais"
                ],
                "body": "wp_get_additional_image_sizes()",
                "description": "Retrieve additional image sizes."
        },
        "ƒ:wp_get_all_sessions": {
                "prefix": [
                        "wp_get_all_sessions",
                        "wgas"
                ],
                "body": "wp_get_all_sessions()",
                "description": "Retrieves a list of sessions for the current user."
        },
        "ƒ:wp_get_archives": {
                "prefix": [
                        "wp_get_archives",
                        "wga"
                ],
                "body": "wp_get_archives(${1:\\$args:string|array} )",
                "description": "Display archive links based on type and format."
        },
        "ƒ:wp_get_associated_nav_menu_items": {
                "prefix": [
                        "wp_get_associated_nav_menu_items",
                        "wganmi"
                ],
                "body": "wp_get_associated_nav_menu_items(${1:\\$object_id:integer},${2:\\$object_type:string},${3:\\$taxonomy:string} )",
                "description": "Returns the menu items associated with a particular object."
        },
        "ƒ:wp_get_attachment_caption": {
                "prefix": [
                        "wp_get_attachment_caption",
                        "wgac"
                ],
                "body": "wp_get_attachment_caption(${1:\\$post_id:integer} )",
                "description": "Retrieves the caption for an attachment."
        },
        "ƒ:wp_get_attachment_id3_keys": {
                "prefix": [
                        "wp_get_attachment_id3_keys",
                        "wgaik"
                ],
                "body": "wp_get_attachment_id3_keys(${1:\\$attachment:WP_Post},${2:\\$context:string} )",
                "description": "Returns useful keys to use to lookup data from an attachment&#039;s stored metadata."
        },
        "ƒ:wp_get_attachment_image": {
                "prefix": [
                        "wp_get_attachment_image",
                        "wgai"
                ],
                "body": "wp_get_attachment_image(${1:\\$attachment_id:integer},${2:\\$size:string|array},${3:\\$icon:boolean},${4:\\$attr:string|array} )",
                "description": "Get an HTML img element representing an image attachment."
        },
        "ƒ:wp_get_attachment_image_sizes": {
                "prefix": [
                        "wp_get_attachment_image_sizes",
                        "wgais"
                ],
                "body": "wp_get_attachment_image_sizes(${1:\\$attachment_id:integer},${2:\\$size:string|array},${3:\\$image_meta:array|null} )",
                "description": "Retrieves the value for an image attachment&#039;s &#039;sizes&#039; attribute."
        },
        "ƒ:wp_get_attachment_image_src": {
                "prefix": [
                        "wp_get_attachment_image_src",
                        "wgais"
                ],
                "body": "wp_get_attachment_image_src(${1:\\$attachment_id:integer},${2:\\$size:string|array},${3:\\$icon:boolean} )",
                "description": "Retrieves an image to represent an attachment."
        },
        "ƒ:wp_get_attachment_image_srcset": {
                "prefix": [
                        "wp_get_attachment_image_srcset",
                        "wgais"
                ],
                "body": "wp_get_attachment_image_srcset(${1:\\$attachment_id:integer},${2:\\$size:string|array},${3:\\$image_meta:array|null} )",
                "description": "Retrieves the value for an image attachment&#039;s &#039;srcset&#039; attribute."
        },
        "ƒ:wp_get_attachment_image_url": {
                "prefix": [
                        "wp_get_attachment_image_url",
                        "wgaiu"
                ],
                "body": "wp_get_attachment_image_url(${1:\\$attachment_id:integer},${2:\\$size:string|array},${3:\\$icon:boolean} )",
                "description": "Get the URL of an image attachment."
        },
        "ƒ:wp_get_attachment_link": {
                "prefix": [
                        "wp_get_attachment_link",
                        "wgal"
                ],
                "body": "wp_get_attachment_link(${1:\\$id:integer|WP_Post},${2:\\$size:string|array},${3:\\$permalink:boolean},${4:\\$icon:boolean},${5:\\$text:string|false},${6:\\$attr:array|string} )",
                "description": "Retrieves an attachment page link using an image or icon, if possible."
        },
        "ƒ:wp_get_attachment_metadata": {
                "prefix": [
                        "wp_get_attachment_metadata",
                        "wgam"
                ],
                "body": "wp_get_attachment_metadata(${1:\\$attachment_id:integer},${2:\\$unfiltered:boolean} )",
                "description": "Retrieves attachment metadata for attachment ID."
        },
        "ƒ:wp_get_attachment_thumb_file": {
                "prefix": [
                        "wp_get_attachment_thumb_file",
                        "wgatf"
                ],
                "body": "wp_get_attachment_thumb_file(${1:\\$post_id:integer} )",
                "description": "Retrieve thumbnail for an attachment."
        },
        "ƒ:wp_get_attachment_thumb_url": {
                "prefix": [
                        "wp_get_attachment_thumb_url",
                        "wgatu"
                ],
                "body": "wp_get_attachment_thumb_url(${1:\\$post_id:integer} )",
                "description": "Retrieve URL for an attachment thumbnail."
        },
        "ƒ:wp_get_attachment_url": {
                "prefix": [
                        "wp_get_attachment_url",
                        "wgau"
                ],
                "body": "wp_get_attachment_url(${1:\\$attachment_id:integer} )",
                "description": "Retrieve the URL for an attachment."
        },
        "ƒ:wp_get_audio_extensions": {
                "prefix": [
                        "wp_get_audio_extensions",
                        "wgae"
                ],
                "body": "wp_get_audio_extensions()",
                "description": "Returns a filtered list of supported audio formats."
        },
        "ƒ:wp_get_auto_update_message": {
                "prefix": [
                        "wp_get_auto_update_message",
                        "wgaum"
                ],
                "body": "wp_get_auto_update_message()",
                "description": "Determines the appropriate auto-update message to be displayed."
        },
        "ƒ:wp_get_available_translations": {
                "prefix": [
                        "wp_get_available_translations",
                        "wgat"
                ],
                "body": "wp_get_available_translations()",
                "description": "Get available translations from the WordPress.org API."
        },
        "ƒ:wp_get_block_default_classname": {
                "prefix": [
                        "wp_get_block_default_classname",
                        "wgbdc"
                ],
                "body": "wp_get_block_default_classname(${1:\\$block_name:string} )",
                "description": "Get the generated classname from a given block name."
        },
        "ƒ:wp_get_canonical_url": {
                "prefix": [
                        "wp_get_canonical_url",
                        "wgcu"
                ],
                "body": "wp_get_canonical_url(${1:\\$post:integer|WP_Post|null} )",
                "description": "Returns the canonical URL for a post."
        },
        "ƒ:wp_get_code_editor_settings": {
                "prefix": [
                        "wp_get_code_editor_settings",
                        "wgces"
                ],
                "body": "wp_get_code_editor_settings(${1:\\$args:array} )",
                "description": "Generate and return code editor settings."
        },
        "ƒ:wp_get_comment_fields_max_lengths": {
                "prefix": [
                        "wp_get_comment_fields_max_lengths",
                        "wgcfml"
                ],
                "body": "wp_get_comment_fields_max_lengths()",
                "description": "Retrieves the maximum character lengths for the comment form fields."
        },
        "ƒ:wp_get_comment_status": {
                "prefix": [
                        "wp_get_comment_status",
                        "wgcs"
                ],
                "body": "wp_get_comment_status(${1:\\$comment_id:integer|WP_Comment} )",
                "description": "Retrieves the status of a comment by comment ID."
        },
        "ƒ:wp_get_cookie_login": {
                "prefix": [
                        "wp_get_cookie_login",
                        "wgcl"
                ],
                "body": "wp_get_cookie_login()",
                "description": "Gets the user cookie login. This function is deprecated."
        },
        "ƒ:wp_get_current_commenter": {
                "prefix": [
                        "wp_get_current_commenter",
                        "wgcc"
                ],
                "body": "wp_get_current_commenter()",
                "description": "Gets current commenter&#039;s name, email, and URL."
        },
        "ƒ:wp_get_current_user": {
                "prefix": [
                        "wp_get_current_user",
                        "wgcu"
                ],
                "body": "wp_get_current_user()",
                "description": "Retrieve the current user object."
        },
        "ƒ:wp_get_custom_css": {
                "prefix": [
                        "wp_get_custom_css",
                        "wgcc"
                ],
                "body": "wp_get_custom_css(${1:\\$stylesheet:string} )",
                "description": "Fetches the saved Custom CSS content for rendering."
        },
        "ƒ:wp_get_custom_css_post": {
                "prefix": [
                        "wp_get_custom_css_post",
                        "wgccp"
                ],
                "body": "wp_get_custom_css_post(${1:\\$stylesheet:string} )",
                "description": "Fetches the `custom_css` post for a given theme."
        },
        "ƒ:wp_get_db_schema": {
                "prefix": [
                        "wp_get_db_schema",
                        "wgds"
                ],
                "body": "wp_get_db_schema(${1:\\$scope:string},${2:\\$blog_id:integer|null} )",
                "description": "Retrieve the SQL for creating database tables."
        },
        "ƒ:wp_get_default_extension_for_mime_type": {
                "prefix": [
                        "wp_get_default_extension_for_mime_type",
                        "wgdefmt"
                ],
                "body": "wp_get_default_extension_for_mime_type(${1:\\$mime_type:string} )",
                "description": "Returns first matched extension for the mime-type, as mapped from wp_get_mime_types()."
        },
        "ƒ:wp_get_default_update_https_url": {
                "prefix": [
                        "wp_get_default_update_https_url",
                        "wgduhu"
                ],
                "body": "wp_get_default_update_https_url()",
                "description": "Gets the default URL to learn more about updating the site to use HTTPS."
        },
        "ƒ:wp_get_default_update_php_url": {
                "prefix": [
                        "wp_get_default_update_php_url",
                        "wgdupu"
                ],
                "body": "wp_get_default_update_php_url()",
                "description": "Gets the default URL to learn more about updating the PHP version the site is running on."
        },
        "ƒ:wp_get_direct_php_update_url": {
                "prefix": [
                        "wp_get_direct_php_update_url",
                        "wgdpuu"
                ],
                "body": "wp_get_direct_php_update_url()",
                "description": "Gets the URL for directly updating the PHP version the site is running on."
        },
        "ƒ:wp_get_direct_update_https_url": {
                "prefix": [
                        "wp_get_direct_update_https_url",
                        "wgduhu"
                ],
                "body": "wp_get_direct_update_https_url()",
                "description": "Gets the URL for directly updating the site to use HTTPS."
        },
        "ƒ:wp_get_document_title": {
                "prefix": [
                        "wp_get_document_title",
                        "wgdt"
                ],
                "body": "wp_get_document_title()",
                "description": "Returns document title for the current page."
        },
        "ƒ:wp_get_duotone_filter_id": {
                "prefix": [
                        "wp_get_duotone_filter_id",
                        "wgdfi"
                ],
                "body": "wp_get_duotone_filter_id(${1:\\$preset:array} )",
                "description": "Returns the prefixed id for the duotone filter for use as a CSS id."
        },
        "ƒ:wp_get_duotone_filter_property": {
                "prefix": [
                        "wp_get_duotone_filter_property",
                        "wgdfp"
                ],
                "body": "wp_get_duotone_filter_property(${1:\\$preset:array} )",
                "description": "Returns the CSS filter property url to reference the rendered SVG."
        },
        "ƒ:wp_get_duotone_filter_svg": {
                "prefix": [
                        "wp_get_duotone_filter_svg",
                        "wgdfs"
                ],
                "body": "wp_get_duotone_filter_svg(${1:\\$preset:array} )",
                "description": "Returns the duotone filter SVG string for the preset."
        },
        "ƒ:wp_get_elements_class_name": {
                "prefix": [
                        "wp_get_elements_class_name",
                        "wgecn"
                ],
                "body": "wp_get_elements_class_name(${1:\\$block:array} )",
                "description": "Get the elements class names."
        },
        "ƒ:wp_get_environment_type": {
                "prefix": [
                        "wp_get_environment_type",
                        "wget"
                ],
                "body": "wp_get_environment_type()",
                "description": "Retrieves the current environment type."
        },
        "ƒ:wp_get_ext_types": {
                "prefix": [
                        "wp_get_ext_types",
                        "wget"
                ],
                "body": "wp_get_ext_types()",
                "description": "Retrieves the list of common file extensions and their types."
        },
        "ƒ:wp_get_extension_error_description": {
                "prefix": [
                        "wp_get_extension_error_description",
                        "wgeed"
                ],
                "body": "wp_get_extension_error_description(${1:\\$error:array} )",
                "description": "Get a human readable description of an extension&#039;s error."
        },
        "ƒ:wp_get_global_settings": {
                "prefix": [
                        "wp_get_global_settings",
                        "wggs"
                ],
                "body": "wp_get_global_settings(${1:\\$path:array},${2:\\$context:array} )",
                "description": "Function to get the settings resulting of merging core, theme, and user data."
        },
        "ƒ:wp_get_global_styles": {
                "prefix": [
                        "wp_get_global_styles",
                        "wggs"
                ],
                "body": "wp_get_global_styles(${1:\\$path:array},${2:\\$context:array} )",
                "description": "Function to get the styles resulting of merging core, theme, and user data."
        },
        "ƒ:wp_get_global_styles_svg_filters": {
                "prefix": [
                        "wp_get_global_styles_svg_filters",
                        "wggssf"
                ],
                "body": "wp_get_global_styles_svg_filters()",
                "description": "Returns a string containing the SVGs to be referenced as filters (duotone)."
        },
        "ƒ:wp_get_global_stylesheet": {
                "prefix": [
                        "wp_get_global_stylesheet",
                        "wggs"
                ],
                "body": "wp_get_global_stylesheet(${1:\\$types:array} )",
                "description": "Returns the stylesheet resulting of merging core, theme, and user data."
        },
        "ƒ:wp_get_http": {
                "prefix": [
                        "wp_get_http",
                        "wgh"
                ],
                "body": "wp_get_http(${1:\\$url:string},${2:\\$file_path:string|boolean},${3:\\$red:integer} )",
                "description": "Perform a HTTP HEAD or GET request."
        },
        "ƒ:wp_get_http_headers": {
                "prefix": [
                        "wp_get_http_headers",
                        "wghh"
                ],
                "body": "wp_get_http_headers(${1:\\$url:string},${2:\\$deprecated:boolean} )",
                "description": "Retrieve HTTP Headers from URL."
        },
        "ƒ:wp_get_image_editor": {
                "prefix": [
                        "wp_get_image_editor",
                        "wgie"
                ],
                "body": "wp_get_image_editor(${1:\\$path:string},${2:\\$args:array} )",
                "description": "Returns a WP_Image_Editor instance and loads file into it."
        },
        "ƒ:wp_get_image_mime": {
                "prefix": [
                        "wp_get_image_mime",
                        "wgim"
                ],
                "body": "wp_get_image_mime(${1:\\$file:string} )",
                "description": "Returns the real mime type of an image file."
        },
        "ƒ:wp_get_inline_script_tag": {
                "prefix": [
                        "wp_get_inline_script_tag",
                        "wgist"
                ],
                "body": "wp_get_inline_script_tag(${1:\\$javascript:string},${2:\\$attributes:array} )",
                "description": "Wraps inline JavaScript in `&lt;script&gt;` tag."
        },
        "ƒ:wp_get_installed_translations": {
                "prefix": [
                        "wp_get_installed_translations",
                        "wgit"
                ],
                "body": "wp_get_installed_translations(${1:\\$type:string} )",
                "description": "Get installed translations."
        },
        "ƒ:wp_get_layout_style": {
                "prefix": [
                        "wp_get_layout_style",
                        "wgls"
                ],
                "body": "wp_get_layout_style(${1:\\$selector:string},${2:\\$layout:array},${3:\\$has_block_gap_support:boolean},${4:\\$gap_value:string|null},${5:\\$should_skip_gap_serialization:boolean},${6:\\$fallback_gap_value:string} )",
                "description": "Generates the CSS corresponding to the provided layout."
        },
        "ƒ:wp_get_link_cats": {
                "prefix": [
                        "wp_get_link_cats",
                        "wglc"
                ],
                "body": "wp_get_link_cats(${1:\\$link_id:integer} )",
                "description": "Retrieves the link category IDs associated with the link specified."
        },
        "ƒ:wp_get_links": {
                "prefix": [
                        "wp_get_links",
                        "wgl"
                ],
                "body": "wp_get_links(${1:\\$args:string} )",
                "description": "Gets the links associated with category."
        },
        "ƒ:wp_get_linksbyname": {
                "prefix": [
                        "wp_get_linksbyname",
                        "wgl"
                ],
                "body": "wp_get_linksbyname(${1:\\$category:string},${2:\\$args:string} )",
                "description": "Gets the links associated with the named category."
        },
        "ƒ:wp_get_list_item_separator": {
                "prefix": [
                        "wp_get_list_item_separator",
                        "wglis"
                ],
                "body": "wp_get_list_item_separator()",
                "description": "Retrieves the list item separator based on the locale."
        },
        "ƒ:wp_get_loading_attr_default": {
                "prefix": [
                        "wp_get_loading_attr_default",
                        "wglad"
                ],
                "body": "wp_get_loading_attr_default(${1:\\$context:string} )",
                "description": "Gets the default value to use for a `loading` attribute on an element."
        },
        "ƒ:wp_get_media_creation_timestamp": {
                "prefix": [
                        "wp_get_media_creation_timestamp",
                        "wgmct"
                ],
                "body": "wp_get_media_creation_timestamp(${1:\\$metadata:array} )",
                "description": "Parses creation date from media metadata."
        },
        "ƒ:wp_get_mime_types": {
                "prefix": [
                        "wp_get_mime_types",
                        "wgmt"
                ],
                "body": "wp_get_mime_types()",
                "description": "Retrieve list of mime types and file extensions."
        },
        "ƒ:wp_get_missing_image_subsizes": {
                "prefix": [
                        "wp_get_missing_image_subsizes",
                        "wgmis"
                ],
                "body": "wp_get_missing_image_subsizes(${1:\\$attachment_id:integer} )",
                "description": "Compare the existing image sub-sizes (as saved in the attachment meta) to the currently registered image sub-sizes, and return the difference."
        },
        "ƒ:wp_get_mu_plugins": {
                "prefix": [
                        "wp_get_mu_plugins",
                        "wgmp"
                ],
                "body": "wp_get_mu_plugins()",
                "description": "Retrieve an array of must-use plugin files."
        },
        "ƒ:wp_get_nav_menu_items": {
                "prefix": [
                        "wp_get_nav_menu_items",
                        "wgnmi"
                ],
                "body": "wp_get_nav_menu_items(${1:\\$menu:integer|string|WP_Term},${2:\\$args:array} )",
                "description": "Retrieves all menu items of a navigation menu."
        },
        "ƒ:wp_get_nav_menu_name": {
                "prefix": [
                        "wp_get_nav_menu_name",
                        "wgnmn"
                ],
                "body": "wp_get_nav_menu_name(${1:\\$location:string} )",
                "description": "Returns the name of a navigation menu."
        },
        "ƒ:wp_get_nav_menu_object": {
                "prefix": [
                        "wp_get_nav_menu_object",
                        "wgnmo"
                ],
                "body": "wp_get_nav_menu_object(${1:\\$menu:integer|string|WP_Term} )",
                "description": "Returns a navigation menu object."
        },
        "ƒ:wp_get_nav_menu_to_edit": {
                "prefix": [
                        "wp_get_nav_menu_to_edit",
                        "wgnmte"
                ],
                "body": "wp_get_nav_menu_to_edit(${1:\\$menu_id:integer} )",
                "description": "Returns the menu formatted to edit."
        },
        "ƒ:wp_get_nav_menus": {
                "prefix": [
                        "wp_get_nav_menus",
                        "wgnm"
                ],
                "body": "wp_get_nav_menus(${1:\\$args:array} )",
                "description": "Returns all navigation menu objects."
        },
        "ƒ:wp_get_nocache_headers": {
                "prefix": [
                        "wp_get_nocache_headers",
                        "wgnh"
                ],
                "body": "wp_get_nocache_headers()",
                "description": "Get the header information to prevent caching."
        },
        "ƒ:wp_get_object_terms": {
                "prefix": [
                        "wp_get_object_terms",
                        "wgot"
                ],
                "body": "wp_get_object_terms(${1:\\$object_ids:integer|array},${2:\\$taxonomies:string|array},${3:\\$args:array|string} )",
                "description": "Retrieves the terms associated with the given object(s), in the supplied taxonomies."
        },
        "ƒ:wp_get_original_image_path": {
                "prefix": [
                        "wp_get_original_image_path",
                        "wgoip"
                ],
                "body": "wp_get_original_image_path(${1:\\$attachment_id:integer},${2:\\$unfiltered:boolean} )",
                "description": "Retrieves the path to an uploaded image file."
        },
        "ƒ:wp_get_original_image_url": {
                "prefix": [
                        "wp_get_original_image_url",
                        "wgoiu"
                ],
                "body": "wp_get_original_image_url(${1:\\$attachment_id:integer} )",
                "description": "Retrieve the URL to an original attachment image."
        },
        "ƒ:wp_get_original_referer": {
                "prefix": [
                        "wp_get_original_referer",
                        "wgor"
                ],
                "body": "wp_get_original_referer()",
                "description": "Retrieve original referer that was posted, if it exists."
        },
        "ƒ:wp_get_password_hint": {
                "prefix": [
                        "wp_get_password_hint",
                        "wgph"
                ],
                "body": "wp_get_password_hint()",
                "description": "Gets the text suggesting how to create strong passwords."
        },
        "ƒ:wp_get_plugin_error": {
                "prefix": [
                        "wp_get_plugin_error",
                        "wgpe"
                ],
                "body": "wp_get_plugin_error(${1:\\$plugin:string} )",
                "description": "Gets the error that was recorded for a paused plugin."
        },
        "ƒ:wp_get_plugin_file_editable_extensions": {
                "prefix": [
                        "wp_get_plugin_file_editable_extensions",
                        "wgpfee"
                ],
                "body": "wp_get_plugin_file_editable_extensions(${1:\\$plugin:string} )",
                "description": "Gets the list of file extensions that are editable in plugins."
        },
        "ƒ:wp_get_pomo_file_data": {
                "prefix": [
                        "wp_get_pomo_file_data",
                        "wgpfd"
                ],
                "body": "wp_get_pomo_file_data(${1:\\$po_file:string} )",
                "description": "Extract headers from a PO file."
        },
        "ƒ:wp_get_popular_importers": {
                "prefix": [
                        "wp_get_popular_importers",
                        "wgpi"
                ],
                "body": "wp_get_popular_importers()",
                "description": "Returns a list from WordPress.org of popular importer plugins."
        },
        "ƒ:wp_get_post_autosave": {
                "prefix": [
                        "wp_get_post_autosave",
                        "wgpa"
                ],
                "body": "wp_get_post_autosave(${1:\\$post_id:integer},${2:\\$user_id:integer} )",
                "description": "Retrieve the autosaved data of the specified post."
        },
        "ƒ:wp_get_post_categories": {
                "prefix": [
                        "wp_get_post_categories",
                        "wgpc"
                ],
                "body": "wp_get_post_categories(${1:\\$post_id:integer},${2:\\$args:array} )",
                "description": "Retrieve the list of categories for a post."
        },
        "ƒ:wp_get_post_cats": {
                "prefix": [
                        "wp_get_post_cats",
                        "wgpc"
                ],
                "body": "wp_get_post_cats(${1:\\$blogid:integer},${2:\\$post_ID:integer} )",
                "description": "Retrieves a list of post categories."
        },
        "ƒ:wp_get_post_parent_id": {
                "prefix": [
                        "wp_get_post_parent_id",
                        "wgppi"
                ],
                "body": "wp_get_post_parent_id(${1:\\$post:integer|WP_Post|null} )",
                "description": "Returns the ID of the post&#039;s parent."
        },
        "ƒ:wp_get_post_revision": {
                "prefix": [
                        "wp_get_post_revision",
                        "wgpr"
                ],
                "body": "wp_get_post_revision(${1:\\$post:integer|WP_Post},${2:\\$output:string},${3:\\$filter:string} )",
                "description": "Gets a post revision."
        },
        "ƒ:wp_get_post_revisions": {
                "prefix": [
                        "wp_get_post_revisions",
                        "wgpr"
                ],
                "body": "wp_get_post_revisions(${1:\\$post_id:integer|WP_Post},${2:\\$args:array|null} )",
                "description": "Returns all revisions of specified post."
        },
        "ƒ:wp_get_post_revisions_url": {
                "prefix": [
                        "wp_get_post_revisions_url",
                        "wgpru"
                ],
                "body": "wp_get_post_revisions_url(${1:\\$post_id:integer|WP_Post} )",
                "description": "Returns the url for viewing and potentially restoring revisions of a given post."
        },
        "ƒ:wp_get_post_tags": {
                "prefix": [
                        "wp_get_post_tags",
                        "wgpt"
                ],
                "body": "wp_get_post_tags(${1:\\$post_id:integer},${2:\\$args:array} )",
                "description": "Retrieve the tags for a post."
        },
        "ƒ:wp_get_post_terms": {
                "prefix": [
                        "wp_get_post_terms",
                        "wgpt"
                ],
                "body": "wp_get_post_terms(${1:\\$post_id:integer},${2:\\$taxonomy:string|array},${3:\\$args:array} )",
                "description": "Retrieves the terms for a post."
        },
        "ƒ:wp_get_raw_referer": {
                "prefix": [
                        "wp_get_raw_referer",
                        "wgrr"
                ],
                "body": "wp_get_raw_referer()",
                "description": "Retrieves unvalidated referer from &#039;_wp_http_referer&#039; or HTTP referer."
        },
        "ƒ:wp_get_ready_cron_jobs": {
                "prefix": [
                        "wp_get_ready_cron_jobs",
                        "wgrcj"
                ],
                "body": "wp_get_ready_cron_jobs()",
                "description": "Retrieve cron jobs ready to be run."
        },
        "ƒ:wp_get_recent_posts": {
                "prefix": [
                        "wp_get_recent_posts",
                        "wgrp"
                ],
                "body": "wp_get_recent_posts(${1:\\$args:array},${2:\\$output:string} )",
                "description": "Retrieve a number of recent posts."
        },
        "ƒ:wp_get_referer": {
                "prefix": [
                        "wp_get_referer",
                        "wgr"
                ],
                "body": "wp_get_referer()",
                "description": "Retrieve referer from &#039;_wp_http_referer&#039; or HTTP referer."
        },
        "ƒ:wp_get_registered_image_subsizes": {
                "prefix": [
                        "wp_get_registered_image_subsizes",
                        "wgris"
                ],
                "body": "wp_get_registered_image_subsizes()",
                "description": "Returns a normalized list of all currently registered image sub-sizes."
        },
        "ƒ:wp_get_revision_ui_diff": {
                "prefix": [
                        "wp_get_revision_ui_diff",
                        "wgrud"
                ],
                "body": "wp_get_revision_ui_diff(${1:\\$post:WP_Post|integer},${2:\\$compare_from:integer},${3:\\$compare_to:integer} )",
                "description": "Get the revision UI diff."
        },
        "ƒ:wp_get_schedule": {
                "prefix": [
                        "wp_get_schedule",
                        "wgs"
                ],
                "body": "wp_get_schedule(${1:\\$hook:string},${2:\\$args:array} )",
                "description": "Retrieve the recurrence schedule for an event."
        },
        "ƒ:wp_get_scheduled_event": {
                "prefix": [
                        "wp_get_scheduled_event",
                        "wgse"
                ],
                "body": "wp_get_scheduled_event(${1:\\$hook:string},${2:\\$args:array},${3:\\$timestamp:integer|null} )",
                "description": "Retrieve a scheduled event."
        },
        "ƒ:wp_get_schedules": {
                "prefix": [
                        "wp_get_schedules",
                        "wgs"
                ],
                "body": "wp_get_schedules()",
                "description": "Retrieve supported event recurrence schedules."
        },
        "ƒ:wp_get_script_polyfill": {
                "prefix": [
                        "wp_get_script_polyfill",
                        "wgsp"
                ],
                "body": "wp_get_script_polyfill(${1:\\$scripts:WP_Scripts},${2:\\$tests:array} )",
                "description": "Returns contents of an inline script used in appending polyfill scripts for browsers which fail the provided tests. The provided array is a mapping from a condition to verify feature support to its polyfill script handle."
        },
        "ƒ:wp_get_script_tag": {
                "prefix": [
                        "wp_get_script_tag",
                        "wgst"
                ],
                "body": "wp_get_script_tag(${1:\\$attributes:array} )",
                "description": "Formats `&lt;script&gt;` loader tags."
        },
        "ƒ:wp_get_server_protocol": {
                "prefix": [
                        "wp_get_server_protocol",
                        "wgsp"
                ],
                "body": "wp_get_server_protocol()",
                "description": "Return the HTTP protocol sent by the server."
        },
        "ƒ:wp_get_session_token": {
                "prefix": [
                        "wp_get_session_token",
                        "wgst"
                ],
                "body": "wp_get_session_token()",
                "description": "Retrieves the current session token from the logged_in cookie."
        },
        "ƒ:wp_get_shortlink": {
                "prefix": [
                        "wp_get_shortlink",
                        "wgs"
                ],
                "body": "wp_get_shortlink(${1:\\$id:integer},${2:\\$context:string},${3:\\$allow_slugs:boolean} )",
                "description": "Returns a shortlink for a post, page, attachment, or site."
        },
        "ƒ:wp_get_sidebar": {
                "prefix": [
                        "wp_get_sidebar",
                        "wgs"
                ],
                "body": "wp_get_sidebar(${1:\\$id:string} )",
                "description": "Retrieves the registered sidebar with the given ID."
        },
        "ƒ:wp_get_sidebars_widgets": {
                "prefix": [
                        "wp_get_sidebars_widgets",
                        "wgsw"
                ],
                "body": "wp_get_sidebars_widgets(${1:\\$deprecated:boolean} )",
                "description": "Retrieve full list of sidebars and their widget instance IDs."
        },
        "ƒ:wp_get_single_post": {
                "prefix": [
                        "wp_get_single_post",
                        "wgsp"
                ],
                "body": "wp_get_single_post(${1:\\$postid:integer},${2:\\$mode:string} )",
                "description": "Retrieve a single post, based on post ID."
        },
        "ƒ:wp_get_sitemap_providers": {
                "prefix": [
                        "wp_get_sitemap_providers",
                        "wgsp"
                ],
                "body": "wp_get_sitemap_providers()",
                "description": "Gets an array of sitemap providers."
        },
        "ƒ:wp_get_sites": {
                "prefix": [
                        "wp_get_sites",
                        "wgs"
                ],
                "body": "wp_get_sites(${1:\\$args:array} )",
                "description": "Return an array of sites for a network or networks."
        },
        "ƒ:wp_get_split_term": {
                "prefix": [
                        "wp_get_split_term",
                        "wgst"
                ],
                "body": "wp_get_split_term(${1:\\$old_term_id:integer},${2:\\$taxonomy:string} )",
                "description": "Gets the new term ID corresponding to a previously split term."
        },
        "ƒ:wp_get_split_terms": {
                "prefix": [
                        "wp_get_split_terms",
                        "wgst"
                ],
                "body": "wp_get_split_terms(${1:\\$old_term_id:integer} )",
                "description": "Gets data about terms that previously shared a single term_id, but have since been split."
        },
        "ƒ:wp_get_term_taxonomy_parent_id": {
                "prefix": [
                        "wp_get_term_taxonomy_parent_id",
                        "wgttpi"
                ],
                "body": "wp_get_term_taxonomy_parent_id(${1:\\$term_id:integer},${2:\\$taxonomy:string} )",
                "description": "Returns the term&#039;s parent&#039;s term ID."
        },
        "ƒ:wp_get_theme": {
                "prefix": [
                        "wp_get_theme",
                        "wgt"
                ],
                "body": "wp_get_theme(${1:\\$stylesheet:string},${2:\\$theme_root:string} )",
                "description": "Gets a WP_Theme object for a theme."
        },
        "ƒ:wp_get_theme_error": {
                "prefix": [
                        "wp_get_theme_error",
                        "wgte"
                ],
                "body": "wp_get_theme_error(${1:\\$theme:string} )",
                "description": "Gets the error that was recorded for a paused theme."
        },
        "ƒ:wp_get_theme_file_editable_extensions": {
                "prefix": [
                        "wp_get_theme_file_editable_extensions",
                        "wgtfee"
                ],
                "body": "wp_get_theme_file_editable_extensions(${1:\\$theme:WP_Theme} )",
                "description": "Gets the list of file extensions that are editable for a given theme."
        },
        "ƒ:wp_get_themes": {
                "prefix": [
                        "wp_get_themes",
                        "wgt"
                ],
                "body": "wp_get_themes(${1:\\$args:array} )",
                "description": "Returns an array of WP_Theme objects based on the arguments."
        },
        "ƒ:wp_get_translation_updates": {
                "prefix": [
                        "wp_get_translation_updates",
                        "wgtu"
                ],
                "body": "wp_get_translation_updates()",
                "description": "Retrieves a list of all language updates available."
        },
        "ƒ:wp_get_unapproved_comment_author_email": {
                "prefix": [
                        "wp_get_unapproved_comment_author_email",
                        "wgucae"
                ],
                "body": "wp_get_unapproved_comment_author_email()",
                "description": "Gets unapproved comment author&#039;s email."
        },
        "ƒ:wp_get_update_data": {
                "prefix": [
                        "wp_get_update_data",
                        "wgud"
                ],
                "body": "wp_get_update_data()",
                "description": "Collect counts and UI strings for available updates"
        },
        "ƒ:wp_get_update_https_url": {
                "prefix": [
                        "wp_get_update_https_url",
                        "wguhu"
                ],
                "body": "wp_get_update_https_url()",
                "description": "Gets the URL to learn more about updating the site to use HTTPS."
        },
        "ƒ:wp_get_update_php_annotation": {
                "prefix": [
                        "wp_get_update_php_annotation",
                        "wgupa"
                ],
                "body": "wp_get_update_php_annotation()",
                "description": "Returns the default annotation for the web hosting altering the &quot;Update PHP&quot; page URL."
        },
        "ƒ:wp_get_update_php_url": {
                "prefix": [
                        "wp_get_update_php_url",
                        "wgupu"
                ],
                "body": "wp_get_update_php_url()",
                "description": "Gets the URL to learn more about updating the PHP version the site is running on."
        },
        "ƒ:wp_get_upload_dir": {
                "prefix": [
                        "wp_get_upload_dir",
                        "wgud"
                ],
                "body": "wp_get_upload_dir()",
                "description": "Retrieves uploads directory information."
        },
        "ƒ:wp_get_user_contact_methods": {
                "prefix": [
                        "wp_get_user_contact_methods",
                        "wgucm"
                ],
                "body": "wp_get_user_contact_methods(${1:\\$user:WP_User|null} )",
                "description": "Sets up the user contact methods."
        },
        "ƒ:wp_get_user_request": {
                "prefix": [
                        "wp_get_user_request",
                        "wgur"
                ],
                "body": "wp_get_user_request(${1:\\$request_id:integer} )",
                "description": "Returns the user request object for the specified request ID."
        },
        "ƒ:wp_get_user_request_data": {
                "prefix": [
                        "wp_get_user_request_data",
                        "wgurd"
                ],
                "body": "wp_get_user_request_data(${1:\\$request_id:integer} )",
                "description": "Return the user request object for the specified request ID."
        },
        "ƒ:wp_get_users_with_no_role": {
                "prefix": [
                        "wp_get_users_with_no_role",
                        "wguwnr"
                ],
                "body": "wp_get_users_with_no_role(${1:\\$site_id:integer|null} )",
                "description": "Gets the user IDs of all users with no role on this site."
        },
        "ƒ:wp_get_video_extensions": {
                "prefix": [
                        "wp_get_video_extensions",
                        "wgve"
                ],
                "body": "wp_get_video_extensions()",
                "description": "Returns a filtered list of supported video formats."
        },
        "ƒ:wp_get_webp_info": {
                "prefix": [
                        "wp_get_webp_info",
                        "wgwi"
                ],
                "body": "wp_get_webp_info(${1:\\$filename:string} )",
                "description": "Extracts meta information about a WebP file: width, height, and type."
        },
        "ƒ:wp_get_widget_defaults": {
                "prefix": [
                        "wp_get_widget_defaults",
                        "wgwd"
                ],
                "body": "wp_get_widget_defaults()",
                "description": "Retrieve default registered sidebars list."
        },
        "ƒ:wp_getimagesize": {
                "prefix": [
                        "wp_getimagesize",
                        "wg"
                ],
                "body": "wp_getimagesize(${1:\\$filename:string},${2:\\$image_info:array|null} )",
                "description": "Allows PHP&#039;s getimagesize() to be debuggable when necessary."
        },
        "ƒ:wp_global_styles_render_svg_filters": {
                "prefix": [
                        "wp_global_styles_render_svg_filters",
                        "wgsrsf"
                ],
                "body": "wp_global_styles_render_svg_filters()",
                "description": "Renders the SVG filters supplied by theme.json."
        },
        "ƒ:wp_guess_url": {
                "prefix": [
                        "wp_guess_url",
                        "wgu"
                ],
                "body": "wp_guess_url()",
                "description": "Guess the URL for the site."
        },
        "ƒ:wp_handle_comment_submission": {
                "prefix": [
                        "wp_handle_comment_submission",
                        "whcs"
                ],
                "body": "wp_handle_comment_submission(${1:\\$comment_data:array} )",
                "description": "Handles the submission of a comment, usually posted to wp-comments-post.php via a comment form."
        },
        "ƒ:wp_handle_sideload": {
                "prefix": [
                        "wp_handle_sideload",
                        "whs"
                ],
                "body": "wp_handle_sideload(${1:\\$file:array},${2:\\$overrides:array|false},${3:\\$time:string|null} )",
                "description": "Wrapper for _wp_handle_upload()."
        },
        "ƒ:wp_handle_upload": {
                "prefix": [
                        "wp_handle_upload",
                        "whu"
                ],
                "body": "wp_handle_upload(${1:\\$file:array},${2:\\$overrides:array|false},${3:\\$time:string|null} )",
                "description": "Wrapper for _wp_handle_upload()."
        },
        "ƒ:wp_handle_upload_error": {
                "prefix": [
                        "wp_handle_upload_error",
                        "whue"
                ],
                "body": "wp_handle_upload_error(${1:\\$file:},${2:\\$message:} )",
                "description": ""
        },
        "ƒ:wp_has_border_feature_support": {
                "prefix": [
                        "wp_has_border_feature_support",
                        "whbfs"
                ],
                "body": "wp_has_border_feature_support(${1:\\$block_type:WP_Block_Type},${2:\\$feature:string},${3:\\$default_value:mixed} )",
                "description": "Checks whether the current block type supports the border feature requested."
        },
        "ƒ:wp_hash": {
                "prefix": [
                        "wp_hash",
                        "wh"
                ],
                "body": "wp_hash(${1:\\$data:string},${2:\\$scheme:string} )",
                "description": "Get hash of given string."
        },
        "ƒ:wp_hash_password": {
                "prefix": [
                        "wp_hash_password",
                        "whp"
                ],
                "body": "wp_hash_password(${1:\\$password:string} )",
                "description": "Create a hash (encrypt) of a plain text password."
        },
        "ƒ:wp_head": {
                "prefix": [
                        "wp_head",
                        "wh"
                ],
                "body": "wp_head()",
                "description": "Fire the wp_head action."
        },
        "ƒ:wp_heartbeat_set_suspension": {
                "prefix": [
                        "wp_heartbeat_set_suspension",
                        "whss"
                ],
                "body": "wp_heartbeat_set_suspension(${1:\\$settings:array} )",
                "description": "Disables suspension of Heartbeat on the Add/Edit Post screens."
        },
        "ƒ:wp_heartbeat_settings": {
                "prefix": [
                        "wp_heartbeat_settings",
                        "whs"
                ],
                "body": "wp_heartbeat_settings(${1:\\$settings:array} )",
                "description": "Default settings for heartbeat"
        },
        "ƒ:wp_html_excerpt": {
                "prefix": [
                        "wp_html_excerpt",
                        "whe"
                ],
                "body": "wp_html_excerpt(${1:\\$str:string},${2:\\$count:integer},${3:\\$more:string|null} )",
                "description": "Safely extracts not more than the first $count characters from HTML string."
        },
        "ƒ:wp_html_split": {
                "prefix": [
                        "wp_html_split",
                        "whs"
                ],
                "body": "wp_html_split(${1:\\$input:string} )",
                "description": "Separates HTML elements and comments from the text."
        },
        "ƒ:wp_htmledit_pre": {
                "prefix": [
                        "wp_htmledit_pre",
                        "whp"
                ],
                "body": "wp_htmledit_pre(${1:\\$output:string} )",
                "description": "Formats text for the HTML editor."
        },
        "ƒ:wp_http_supports": {
                "prefix": [
                        "wp_http_supports",
                        "whs"
                ],
                "body": "wp_http_supports(${1:\\$capabilities:array},${2:\\$url:string|null} )",
                "description": "Determines if there is an HTTP Transport that can process this request."
        },
        "ƒ:wp_http_validate_url": {
                "prefix": [
                        "wp_http_validate_url",
                        "whvu"
                ],
                "body": "wp_http_validate_url(${1:\\$url:string} )",
                "description": "Validate a URL for safe use in the HTTP API."
        },
        "ƒ:wp_iframe": {
                "prefix": [
                        "wp_iframe",
                        "wi"
                ],
                "body": "wp_iframe(${1:\\$content_func:callable},${2:\\$args:mixed} )",
                "description": "Outputs the iframe to display the media upload page."
        },
        "ƒ:wp_iframe_tag_add_loading_attr": {
                "prefix": [
                        "wp_iframe_tag_add_loading_attr",
                        "witala"
                ],
                "body": "wp_iframe_tag_add_loading_attr(${1:\\$iframe:string},${2:\\$context:string} )",
                "description": "Adds `loading` attribute to an `iframe` HTML tag."
        },
        "ƒ:wp_image_add_srcset_and_sizes": {
                "prefix": [
                        "wp_image_add_srcset_and_sizes",
                        "wiasas"
                ],
                "body": "wp_image_add_srcset_and_sizes(${1:\\$image:string},${2:\\$image_meta:array},${3:\\$attachment_id:integer} )",
                "description": "Adds &#039;srcset&#039; and &#039;sizes&#039; attributes to an existing &#039;img&#039; element."
        },
        "ƒ:wp_image_editor": {
                "prefix": [
                        "wp_image_editor",
                        "wie"
                ],
                "body": "wp_image_editor(${1:\\$post_id:integer},${2:\\$msg:false|object} )",
                "description": "Loads the WP image-editing interface."
        },
        "ƒ:wp_image_editor_supports": {
                "prefix": [
                        "wp_image_editor_supports",
                        "wies"
                ],
                "body": "wp_image_editor_supports(${1:\\$args:string|array} )",
                "description": "Tests whether there is an editor that supports a given mime type or methods."
        },
        "ƒ:wp_image_file_matches_image_meta": {
                "prefix": [
                        "wp_image_file_matches_image_meta",
                        "wifmim"
                ],
                "body": "wp_image_file_matches_image_meta(${1:\\$image_location:string},${2:\\$image_meta:array},${3:\\$attachment_id:integer} )",
                "description": "Determines if the image meta data is for the image source file."
        },
        "ƒ:wp_image_matches_ratio": {
                "prefix": [
                        "wp_image_matches_ratio",
                        "wimr"
                ],
                "body": "wp_image_matches_ratio(${1:\\$source_width:integer},${2:\\$source_height:integer},${3:\\$target_width:integer},${4:\\$target_height:integer} )",
                "description": "Helper function to test if aspect ratios for two images match."
        },
        "ƒ:wp_image_src_get_dimensions": {
                "prefix": [
                        "wp_image_src_get_dimensions",
                        "wisgd"
                ],
                "body": "wp_image_src_get_dimensions(${1:\\$image_src:string},${2:\\$image_meta:array},${3:\\$attachment_id:integer} )",
                "description": "Determines an image&#039;s width and height dimensions based on the source file."
        },
        "ƒ:wp_imagecreatetruecolor": {
                "prefix": [
                        "wp_imagecreatetruecolor",
                        "wi"
                ],
                "body": "wp_imagecreatetruecolor(${1:\\$width:integer},${2:\\$height:integer} )",
                "description": "Create new GD image resource with transparency support"
        },
        "ƒ:wp_img_tag_add_loading_attr": {
                "prefix": [
                        "wp_img_tag_add_loading_attr",
                        "witala"
                ],
                "body": "wp_img_tag_add_loading_attr(${1:\\$image:string},${2:\\$context:string} )",
                "description": "Adds `loading` attribute to an `img` HTML tag."
        },
        "ƒ:wp_img_tag_add_srcset_and_sizes_attr": {
                "prefix": [
                        "wp_img_tag_add_srcset_and_sizes_attr",
                        "witasasa"
                ],
                "body": "wp_img_tag_add_srcset_and_sizes_attr(${1:\\$image:string},${2:\\$context:string},${3:\\$attachment_id:integer} )",
                "description": "Adds `srcset` and `sizes` attributes to an existing `img` HTML tag."
        },
        "ƒ:wp_img_tag_add_width_and_height_attr": {
                "prefix": [
                        "wp_img_tag_add_width_and_height_attr",
                        "witawaha"
                ],
                "body": "wp_img_tag_add_width_and_height_attr(${1:\\$image:string},${2:\\$context:string},${3:\\$attachment_id:integer} )",
                "description": "Adds `width` and `height` attributes to an `img` HTML tag."
        },
        "ƒ:wp_import_cleanup": {
                "prefix": [
                        "wp_import_cleanup",
                        "wic"
                ],
                "body": "wp_import_cleanup(${1:\\$id:string} )",
                "description": "Cleanup importer."
        },
        "ƒ:wp_import_handle_upload": {
                "prefix": [
                        "wp_import_handle_upload",
                        "wihu"
                ],
                "body": "wp_import_handle_upload()",
                "description": "Handle importer uploading and add attachment."
        },
        "ƒ:wp_import_upload_form": {
                "prefix": [
                        "wp_import_upload_form",
                        "wiuf"
                ],
                "body": "wp_import_upload_form(${1:\\$action:string} )",
                "description": "Outputs the form used by the importers to accept the data to be imported"
        },
        "ƒ:wp_increase_content_media_count": {
                "prefix": [
                        "wp_increase_content_media_count",
                        "wicmc"
                ],
                "body": "wp_increase_content_media_count(${1:\\$amount:integer} )",
                "description": "Increases an internal content media count variable."
        },
        "ƒ:wp_init_targeted_link_rel_filters": {
                "prefix": [
                        "wp_init_targeted_link_rel_filters",
                        "witlrf"
                ],
                "body": "wp_init_targeted_link_rel_filters()",
                "description": "Adds all filters modifying the rel attribute of targeted links."
        },
        "ƒ:wp_initial_constants": {
                "prefix": [
                        "wp_initial_constants",
                        "wic"
                ],
                "body": "wp_initial_constants()",
                "description": "Defines initial WordPress constants."
        },
        "ƒ:wp_initial_nav_menu_meta_boxes": {
                "prefix": [
                        "wp_initial_nav_menu_meta_boxes",
                        "winmmb"
                ],
                "body": "wp_initial_nav_menu_meta_boxes()",
                "description": "Limit the amount of meta boxes to pages, posts, links, and categories for first time users."
        },
        "ƒ:wp_initialize_site": {
                "prefix": [
                        "wp_initialize_site",
                        "wis"
                ],
                "body": "wp_initialize_site(${1:\\$site_id:integer|WP_Site},${2:\\$args:array} )",
                "description": "Runs the initialization routine for a given site."
        },
        "ƒ:wp_insert_attachment": {
                "prefix": [
                        "wp_insert_attachment",
                        "wia"
                ],
                "body": "wp_insert_attachment(${1:\\$args:string|array},${2:\\$file:string|false},${3:\\$parent:integer},${4:\\$wp_error:boolean},${5:\\$fire_after_hooks:boolean} )",
                "description": "Insert an attachment."
        },
        "ƒ:wp_insert_category": {
                "prefix": [
                        "wp_insert_category",
                        "wic"
                ],
                "body": "wp_insert_category(${1:\\$catarr:array},${2:\\$wp_error:boolean} )",
                "description": "Updates an existing Category or creates a new Category."
        },
        "ƒ:wp_insert_comment": {
                "prefix": [
                        "wp_insert_comment",
                        "wic"
                ],
                "body": "wp_insert_comment(${1:\\$commentdata:array} )",
                "description": "Inserts a comment into the database."
        },
        "ƒ:wp_insert_link": {
                "prefix": [
                        "wp_insert_link",
                        "wil"
                ],
                "body": "wp_insert_link(${1:\\$linkdata:array},${2:\\$wp_error:boolean} )",
                "description": "Inserts a link into the database, or updates an existing link."
        },
        "ƒ:wp_insert_post": {
                "prefix": [
                        "wp_insert_post",
                        "wip"
                ],
                "body": "wp_insert_post(${1:\\$postarr:array},${2:\\$wp_error:boolean},${3:\\$fire_after_hooks:boolean} )",
                "description": "Insert or update a post."
        },
        "ƒ:wp_insert_site": {
                "prefix": [
                        "wp_insert_site",
                        "wis"
                ],
                "body": "wp_insert_site(${1:\\$data:array} )",
                "description": "Inserts a new site into the database."
        },
        "ƒ:wp_insert_term": {
                "prefix": [
                        "wp_insert_term",
                        "wit"
                ],
                "body": "wp_insert_term(${1:\\$term:string},${2:\\$taxonomy:string},${3:\\$args:array|string} )",
                "description": "Adds a new term to the database."
        },
        "ƒ:wp_insert_user": {
                "prefix": [
                        "wp_insert_user",
                        "wiu"
                ],
                "body": "wp_insert_user(${1:\\$userdata:array|object|WP_User} )",
                "description": "Inserts a user into the database."
        },
        "ƒ:wp_install": {
                "prefix": [
                        "wp_install",
                        "wi"
                ],
                "body": "wp_install(${1:\\$blog_title:string},${2:\\$user_name:string},${3:\\$user_email:string},${4:\\$is_public:boolean},${5:\\$deprecated:string},${6:\\$user_password:string},${7:\\$language:string} )",
                "description": "Installs the site."
        },
        "ƒ:wp_install_defaults": {
                "prefix": [
                        "wp_install_defaults",
                        "wid"
                ],
                "body": "wp_install_defaults(${1:\\$user_id:integer} )",
                "description": "Creates the initial content for a newly-installed site."
        },
        "ƒ:wp_install_language_form": {
                "prefix": [
                        "wp_install_language_form",
                        "wilf"
                ],
                "body": "wp_install_language_form(${1:\\$languages:array} )",
                "description": "Output the select form for the language selection on the installation screen."
        },
        "ƒ:wp_install_maybe_enable_pretty_permalinks": {
                "prefix": [
                        "wp_install_maybe_enable_pretty_permalinks",
                        "wimepp"
                ],
                "body": "wp_install_maybe_enable_pretty_permalinks()",
                "description": "Maybe enable pretty permalinks on installation."
        },
        "ƒ:wp_installing": {
                "prefix": [
                        "wp_installing",
                        "wi"
                ],
                "body": "wp_installing(${1:\\$is_installing:boolean|null} )",
                "description": "Check or set whether WordPress is in &quot;installation&quot; mode."
        },
        "ƒ:wp_is_application_passwords_available": {
                "prefix": [
                        "wp_is_application_passwords_available",
                        "wiapa"
                ],
                "body": "wp_is_application_passwords_available()",
                "description": "Checks if Application Passwords is globally available."
        },
        "ƒ:wp_is_application_passwords_available_for_user": {
                "prefix": [
                        "wp_is_application_passwords_available_for_user",
                        "wiapafu"
                ],
                "body": "wp_is_application_passwords_available_for_user(${1:\\$user:integer|WP_User} )",
                "description": "Checks if Application Passwords is available for a specific user."
        },
        "ƒ:wp_is_application_passwords_supported": {
                "prefix": [
                        "wp_is_application_passwords_supported",
                        "wiaps"
                ],
                "body": "wp_is_application_passwords_supported()",
                "description": "Checks if Application Passwords is supported."
        },
        "ƒ:wp_is_authorize_application_password_request_valid": {
                "prefix": [
                        "wp_is_authorize_application_password_request_valid",
                        "wiaaprv"
                ],
                "body": "wp_is_authorize_application_password_request_valid(${1:\\$request:array},${2:\\$user:WP_User} )",
                "description": "Checks if the Authorize Application Password request is valid."
        },
        "ƒ:wp_is_auto_update_enabled_for_type": {
                "prefix": [
                        "wp_is_auto_update_enabled_for_type",
                        "wiaueft"
                ],
                "body": "wp_is_auto_update_enabled_for_type(${1:\\$type:string} )",
                "description": "Checks whether auto-updates are enabled."
        },
        "ƒ:wp_is_auto_update_forced_for_item": {
                "prefix": [
                        "wp_is_auto_update_forced_for_item",
                        "wiauffi"
                ],
                "body": "wp_is_auto_update_forced_for_item(${1:\\$type:string},${2:\\$update:boolean|null},${3:\\$item:object} )",
                "description": "Checks whether auto-updates are forced for an item."
        },
        "ƒ:wp_is_block_theme": {
                "prefix": [
                        "wp_is_block_theme",
                        "wibt"
                ],
                "body": "wp_is_block_theme()",
                "description": "Returns whether the active theme is a block-based theme or not."
        },
        "ƒ:wp_is_fatal_error_handler_enabled": {
                "prefix": [
                        "wp_is_fatal_error_handler_enabled",
                        "wifehe"
                ],
                "body": "wp_is_fatal_error_handler_enabled()",
                "description": "Checks whether the fatal error handler is enabled."
        },
        "ƒ:wp_is_file_mod_allowed": {
                "prefix": [
                        "wp_is_file_mod_allowed",
                        "wifma"
                ],
                "body": "wp_is_file_mod_allowed(${1:\\$context:string} )",
                "description": "Determines whether file modifications are allowed."
        },
        "ƒ:wp_is_home_url_using_https": {
                "prefix": [
                        "wp_is_home_url_using_https",
                        "wihuuh"
                ],
                "body": "wp_is_home_url_using_https()",
                "description": "Checks whether the current site URL is using HTTPS."
        },
        "ƒ:wp_is_https_supported": {
                "prefix": [
                        "wp_is_https_supported",
                        "wihs"
                ],
                "body": "wp_is_https_supported()",
                "description": "Checks whether HTTPS is supported for the server and domain."
        },
        "ƒ:wp_is_ini_value_changeable": {
                "prefix": [
                        "wp_is_ini_value_changeable",
                        "wiivc"
                ],
                "body": "wp_is_ini_value_changeable(${1:\\$setting:string} )",
                "description": "Determines whether a PHP ini value is changeable at runtime."
        },
        "ƒ:wp_is_json_media_type": {
                "prefix": [
                        "wp_is_json_media_type",
                        "wijmt"
                ],
                "body": "wp_is_json_media_type(${1:\\$media_type:string} )",
                "description": "Checks whether a string is a valid JSON Media Type."
        },
        "ƒ:wp_is_json_request": {
                "prefix": [
                        "wp_is_json_request",
                        "wijr"
                ],
                "body": "wp_is_json_request()",
                "description": "Checks whether current request is a JSON request, or is expecting a JSON response."
        },
        "ƒ:wp_is_jsonp_request": {
                "prefix": [
                        "wp_is_jsonp_request",
                        "wijr"
                ],
                "body": "wp_is_jsonp_request()",
                "description": "Checks whether current request is a JSONP request, or is expecting a JSONP response."
        },
        "ƒ:wp_is_large_network": {
                "prefix": [
                        "wp_is_large_network",
                        "wiln"
                ],
                "body": "wp_is_large_network(${1:\\$using:string},${2:\\$network_id:integer|null} )",
                "description": "Determines whether or not we have a large network."
        },
        "ƒ:wp_is_large_user_count": {
                "prefix": [
                        "wp_is_large_user_count",
                        "wiluc"
                ],
                "body": "wp_is_large_user_count(${1:\\$network_id:integer|null} )",
                "description": "Determines whether the site has a large number of users."
        },
        "ƒ:wp_is_local_html_output": {
                "prefix": [
                        "wp_is_local_html_output",
                        "wilho"
                ],
                "body": "wp_is_local_html_output(${1:\\$html:string} )",
                "description": "Checks whether a given HTML string is likely an output from this WordPress site."
        },
        "ƒ:wp_is_maintenance_mode": {
                "prefix": [
                        "wp_is_maintenance_mode",
                        "wimm"
                ],
                "body": "wp_is_maintenance_mode()",
                "description": "Check if maintenance mode is enabled."
        },
        "ƒ:wp_is_mobile": {
                "prefix": [
                        "wp_is_mobile",
                        "wim"
                ],
                "body": "wp_is_mobile()",
                "description": "Test if the current browser runs on a mobile device (smart phone, tablet, etc.)"
        },
        "ƒ:wp_is_numeric_array": {
                "prefix": [
                        "wp_is_numeric_array",
                        "wina"
                ],
                "body": "wp_is_numeric_array(${1:\\$data:mixed} )",
                "description": "Determines if the variable is a numeric-indexed array."
        },
        "ƒ:wp_is_post_autosave": {
                "prefix": [
                        "wp_is_post_autosave",
                        "wipa"
                ],
                "body": "wp_is_post_autosave(${1:\\$post:integer|WP_Post} )",
                "description": "Determines if the specified post is an autosave."
        },
        "ƒ:wp_is_post_revision": {
                "prefix": [
                        "wp_is_post_revision",
                        "wipr"
                ],
                "body": "wp_is_post_revision(${1:\\$post:integer|WP_Post} )",
                "description": "Determines if the specified post is a revision."
        },
        "ƒ:wp_is_recovery_mode": {
                "prefix": [
                        "wp_is_recovery_mode",
                        "wirm"
                ],
                "body": "wp_is_recovery_mode()",
                "description": "Is WordPress in Recovery Mode."
        },
        "ƒ:wp_is_site_initialized": {
                "prefix": [
                        "wp_is_site_initialized",
                        "wisi"
                ],
                "body": "wp_is_site_initialized(${1:\\$site_id:integer|WP_Site} )",
                "description": "Checks whether a site is initialized."
        },
        "ƒ:wp_is_site_protected_by_basic_auth": {
                "prefix": [
                        "wp_is_site_protected_by_basic_auth",
                        "wispbba"
                ],
                "body": "wp_is_site_protected_by_basic_auth(${1:\\$context:string} )",
                "description": "Checks if this site is protected by HTTP Basic Auth."
        },
        "ƒ:wp_is_site_url_using_https": {
                "prefix": [
                        "wp_is_site_url_using_https",
                        "wisuuh"
                ],
                "body": "wp_is_site_url_using_https()",
                "description": "Checks whether the current site&#039;s URL where WordPress is stored is using HTTPS."
        },
        "ƒ:wp_is_stream": {
                "prefix": [
                        "wp_is_stream",
                        "wis"
                ],
                "body": "wp_is_stream(${1:\\$path:string} )",
                "description": "Test if a given path is a stream URL"
        },
        "ƒ:wp_is_theme_directory_ignored": {
                "prefix": [
                        "wp_is_theme_directory_ignored",
                        "witdi"
                ],
                "body": "wp_is_theme_directory_ignored(${1:\\$path:string} )",
                "description": "Filters theme directories that should be ignored during export."
        },
        "ƒ:wp_is_using_https": {
                "prefix": [
                        "wp_is_using_https",
                        "wiuh"
                ],
                "body": "wp_is_using_https()",
                "description": "Checks whether the website is using HTTPS."
        },
        "ƒ:wp_is_uuid": {
                "prefix": [
                        "wp_is_uuid",
                        "wiu"
                ],
                "body": "wp_is_uuid(${1:\\$uuid:mixed},${2:\\$version:integer|null} )",
                "description": "Validates that a UUID is valid."
        },
        "ƒ:wp_is_writable": {
                "prefix": [
                        "wp_is_writable",
                        "wiw"
                ],
                "body": "wp_is_writable(${1:\\$path:string} )",
                "description": "Determine if a directory is writable."
        },
        "ƒ:wp_is_xml_request": {
                "prefix": [
                        "wp_is_xml_request",
                        "wixr"
                ],
                "body": "wp_is_xml_request()",
                "description": "Checks whether current request is an XML request, or is expecting an XML response."
        },
        "ƒ:wp_iso_descrambler": {
                "prefix": [
                        "wp_iso_descrambler",
                        "wid"
                ],
                "body": "wp_iso_descrambler(${1:\\$string:string} )",
                "description": "Converts to ASCII from email subjects."
        },
        "ƒ:wp_json_encode": {
                "prefix": [
                        "wp_json_encode",
                        "wje"
                ],
                "body": "wp_json_encode(${1:\\$data:mixed},${2:\\$options:integer},${3:\\$depth:integer} )",
                "description": "Encode a variable into JSON, with some sanity checks."
        },
        "ƒ:wp_json_file_decode": {
                "prefix": [
                        "wp_json_file_decode",
                        "wjfd"
                ],
                "body": "wp_json_file_decode(${1:\\$filename:string},${2:\\$options:array} )",
                "description": "Reads and decodes a JSON file."
        },
        "ƒ:wp_just_in_time_script_localization": {
                "prefix": [
                        "wp_just_in_time_script_localization",
                        "wjitsl"
                ],
                "body": "wp_just_in_time_script_localization()",
                "description": "Loads localized data on print rather than initialization."
        },
        "ƒ:wp_kses": {
                "prefix": [
                        "wp_kses",
                        "wk"
                ],
                "body": "wp_kses(${1:\\$string:string},${2:\\$allowed_html:array|string},${3:\\$allowed_protocols:array} )",
                "description": "Filters text content and strips out disallowed HTML."
        },
        "ƒ:wp_kses_allowed_html": {
                "prefix": [
                        "wp_kses_allowed_html",
                        "wkah"
                ],
                "body": "wp_kses_allowed_html(${1:\\$context:string|array} )",
                "description": "Returns an array of allowed HTML tags and attributes for a given context."
        },
        "ƒ:wp_kses_array_lc": {
                "prefix": [
                        "wp_kses_array_lc",
                        "wkal"
                ],
                "body": "wp_kses_array_lc(${1:\\$inarray:array} )",
                "description": "Converts the keys of an array to lowercase."
        },
        "ƒ:wp_kses_attr": {
                "prefix": [
                        "wp_kses_attr",
                        "wka"
                ],
                "body": "wp_kses_attr(${1:\\$element:string},${2:\\$attr:string},${3:\\$allowed_html:array|string},${4:\\$allowed_protocols:array} )",
                "description": "Removes all attributes, if none are allowed for this element."
        },
        "ƒ:wp_kses_attr_check": {
                "prefix": [
                        "wp_kses_attr_check",
                        "wkac"
                ],
                "body": "wp_kses_attr_check(${1:\\$name:string},${2:\\$value:string},${3:\\$whole:string},${4:\\$vless:string},${5:\\$element:string},${6:\\$allowed_html:array} )",
                "description": "Determines whether an attribute is allowed."
        },
        "ƒ:wp_kses_attr_parse": {
                "prefix": [
                        "wp_kses_attr_parse",
                        "wkap"
                ],
                "body": "wp_kses_attr_parse(${1:\\$element:string} )",
                "description": "Finds all attributes of an HTML element."
        },
        "ƒ:wp_kses_bad_protocol": {
                "prefix": [
                        "wp_kses_bad_protocol",
                        "wkbp"
                ],
                "body": "wp_kses_bad_protocol(${1:\\$string:string},${2:\\$allowed_protocols:array} )",
                "description": "Sanitizes a string and removed disallowed URL protocols."
        },
        "ƒ:wp_kses_bad_protocol_once": {
                "prefix": [
                        "wp_kses_bad_protocol_once",
                        "wkbpo"
                ],
                "body": "wp_kses_bad_protocol_once(${1:\\$string:string},${2:\\$allowed_protocols:array},${3:\\$count:integer} )",
                "description": "Sanitizes content from bad protocols and other characters."
        },
        "ƒ:wp_kses_check_attr_val": {
                "prefix": [
                        "wp_kses_check_attr_val",
                        "wkcav"
                ],
                "body": "wp_kses_check_attr_val(${1:\\$value:string},${2:\\$vless:string},${3:\\$checkname:string},${4:\\$checkvalue:mixed} )",
                "description": "Performs different checks for attribute values."
        },
        "ƒ:wp_kses_data": {
                "prefix": [
                        "wp_kses_data",
                        "wkd"
                ],
                "body": "wp_kses_data(${1:\\$data:string} )",
                "description": "Sanitize content with allowed HTML KSES rules."
        },
        "ƒ:wp_kses_decode_entities": {
                "prefix": [
                        "wp_kses_decode_entities",
                        "wkde"
                ],
                "body": "wp_kses_decode_entities(${1:\\$string:string} )",
                "description": "Converts all numeric HTML entities to their named counterparts."
        },
        "ƒ:wp_kses_hair": {
                "prefix": [
                        "wp_kses_hair",
                        "wkh"
                ],
                "body": "wp_kses_hair(${1:\\$attr:string},${2:\\$allowed_protocols:array} )",
                "description": "Builds an attribute list from string containing attributes."
        },
        "ƒ:wp_kses_hair_parse": {
                "prefix": [
                        "wp_kses_hair_parse",
                        "wkhp"
                ],
                "body": "wp_kses_hair_parse(${1:\\$attr:string} )",
                "description": "Builds an attribute list from string containing attributes."
        },
        "ƒ:wp_kses_hook": {
                "prefix": [
                        "wp_kses_hook",
                        "wkh"
                ],
                "body": "wp_kses_hook(${1:\\$string:string},${2:\\$allowed_html:array|string},${3:\\$allowed_protocols:array} )",
                "description": "You add any KSES hooks here."
        },
        "ƒ:wp_kses_html_error": {
                "prefix": [
                        "wp_kses_html_error",
                        "wkhe"
                ],
                "body": "wp_kses_html_error(${1:\\$string:string} )",
                "description": "Handles parsing errors in `wp_kses_hair()`."
        },
        "ƒ:wp_kses_js_entities": {
                "prefix": [
                        "wp_kses_js_entities",
                        "wkje"
                ],
                "body": "wp_kses_js_entities(${1:\\$content:string} )",
                "description": "Removes the HTML JavaScript entities found in early versions of Netscape 4."
        },
        "ƒ:wp_kses_named_entities": {
                "prefix": [
                        "wp_kses_named_entities",
                        "wkne"
                ],
                "body": "wp_kses_named_entities(${1:\\$matches:array} )",
                "description": "Callback for `wp_kses_normalize_entities()` regular expression."
        },
        "ƒ:wp_kses_no_null": {
                "prefix": [
                        "wp_kses_no_null",
                        "wknn"
                ],
                "body": "wp_kses_no_null(${1:\\$string:string},${2:\\$options:array|null} )",
                "description": "Removes any invalid control characters in a text string."
        },
        "ƒ:wp_kses_normalize_entities": {
                "prefix": [
                        "wp_kses_normalize_entities",
                        "wkne"
                ],
                "body": "wp_kses_normalize_entities(${1:\\$string:string},${2:\\$context:string} )",
                "description": "Converts and fixes HTML entities."
        },
        "ƒ:wp_kses_one_attr": {
                "prefix": [
                        "wp_kses_one_attr",
                        "wkoa"
                ],
                "body": "wp_kses_one_attr(${1:\\$string:string},${2:\\$element:string} )",
                "description": "Filters one HTML attribute and ensures its value is allowed."
        },
        "ƒ:wp_kses_post": {
                "prefix": [
                        "wp_kses_post",
                        "wkp"
                ],
                "body": "wp_kses_post(${1:\\$data:string} )",
                "description": "Sanitizes content for allowed HTML tags for post content."
        },
        "ƒ:wp_kses_post_deep": {
                "prefix": [
                        "wp_kses_post_deep",
                        "wkpd"
                ],
                "body": "wp_kses_post_deep(${1:\\$data:mixed} )",
                "description": "Navigates through an array, object, or scalar, and sanitizes content for allowed HTML tags for post content."
        },
        "ƒ:wp_kses_split": {
                "prefix": [
                        "wp_kses_split",
                        "wks"
                ],
                "body": "wp_kses_split(${1:\\$string:string},${2:\\$allowed_html:array|string},${3:\\$allowed_protocols:array} )",
                "description": "Searches for HTML tags, no matter how malformed."
        },
        "ƒ:wp_kses_stripslashes": {
                "prefix": [
                        "wp_kses_stripslashes",
                        "wks"
                ],
                "body": "wp_kses_stripslashes(${1:\\$string:string} )",
                "description": "Strips slashes from in front of quotes."
        },
        "ƒ:wp_kses_uri_attributes": {
                "prefix": [
                        "wp_kses_uri_attributes",
                        "wkua"
                ],
                "body": "wp_kses_uri_attributes()",
                "description": "Returns an array of HTML attribute names whose value contains a URL."
        },
        "ƒ:wp_kses_version": {
                "prefix": [
                        "wp_kses_version",
                        "wkv"
                ],
                "body": "wp_kses_version()",
                "description": "Returns the version number of KSES."
        },
        "ƒ:wp_kses_xml_named_entities": {
                "prefix": [
                        "wp_kses_xml_named_entities",
                        "wkxne"
                ],
                "body": "wp_kses_xml_named_entities(${1:\\$matches:array} )",
                "description": "Callback for `wp_kses_normalize_entities()` regular expression."
        },
        "ƒ:wp_latest_comments_draft_or_post_title": {
                "prefix": [
                        "wp_latest_comments_draft_or_post_title",
                        "wlcdopt"
                ],
                "body": "wp_latest_comments_draft_or_post_title(${1:\\$post:integer|WP_Post} )",
                "description": "Get the post title."
        },
        "ƒ:wp_lazy_loading_enabled": {
                "prefix": [
                        "wp_lazy_loading_enabled",
                        "wlle"
                ],
                "body": "wp_lazy_loading_enabled(${1:\\$tag_name:string},${2:\\$context:string} )",
                "description": "Determines whether to add the `loading` attribute to the specified tag in the specified context."
        },
        "ƒ:wp_link_category_checklist": {
                "prefix": [
                        "wp_link_category_checklist",
                        "wlcc"
                ],
                "body": "wp_link_category_checklist(${1:\\$link_id:integer} )",
                "description": "Outputs a link category checklist element."
        },
        "ƒ:wp_link_manager_disabled_message": {
                "prefix": [
                        "wp_link_manager_disabled_message",
                        "wlmdm"
                ],
                "body": "wp_link_manager_disabled_message()",
                "description": "Outputs the &#039;disabled&#039; message for the WordPress Link Manager."
        },
        "ƒ:wp_link_pages": {
                "prefix": [
                        "wp_link_pages",
                        "wlp"
                ],
                "body": "wp_link_pages(${1:\\$args:string|array} )",
                "description": "The formatted output of a list of pages."
        },
        "ƒ:wp_list_authors": {
                "prefix": [
                        "wp_list_authors",
                        "wla"
                ],
                "body": "wp_list_authors(${1:\\$args:string|array} )",
                "description": "Lists all the authors of the site, with several options available."
        },
        "ƒ:wp_list_bookmarks": {
                "prefix": [
                        "wp_list_bookmarks",
                        "wlb"
                ],
                "body": "wp_list_bookmarks(${1:\\$args:string|array} )",
                "description": "Retrieve or echo all of the bookmarks."
        },
        "ƒ:wp_list_categories": {
                "prefix": [
                        "wp_list_categories",
                        "wlc"
                ],
                "body": "wp_list_categories(${1:\\$args:array|string} )",
                "description": "Displays or retrieves the HTML list of categories."
        },
        "ƒ:wp_list_cats": {
                "prefix": [
                        "wp_list_cats",
                        "wlc"
                ],
                "body": "wp_list_cats(${1:\\$args:string|array} )",
                "description": "Lists categories."
        },
        "ƒ:wp_list_comments": {
                "prefix": [
                        "wp_list_comments",
                        "wlc"
                ],
                "body": "wp_list_comments(${1:\\$args:string|array},${2:\\$comments:array|null} )",
                "description": "Displays a list of comments."
        },
        "ƒ:wp_list_filter": {
                "prefix": [
                        "wp_list_filter",
                        "wlf"
                ],
                "body": "wp_list_filter(${1:\\$list:array},${2:\\$args:array},${3:\\$operator:string} )",
                "description": "Filters a list of objects, based on a set of key =&gt; value arguments."
        },
        "ƒ:wp_list_pages": {
                "prefix": [
                        "wp_list_pages",
                        "wlp"
                ],
                "body": "wp_list_pages(${1:\\$args:array|string} )",
                "description": "Retrieves or displays a list of pages (or hierarchical post type items) in list (li) format."
        },
        "ƒ:wp_list_pluck": {
                "prefix": [
                        "wp_list_pluck",
                        "wlp"
                ],
                "body": "wp_list_pluck(${1:\\$list:array},${2:\\$field:integer|string},${3:\\$index_key:integer|string|null} )",
                "description": "Plucks a certain field out of each object or array in an array."
        },
        "ƒ:wp_list_post_revisions": {
                "prefix": [
                        "wp_list_post_revisions",
                        "wlpr"
                ],
                "body": "wp_list_post_revisions(${1:\\$post_id:integer|WP_Post},${2:\\$type:string} )",
                "description": "Displays a list of a post&#039;s revisions."
        },
        "ƒ:wp_list_sort": {
                "prefix": [
                        "wp_list_sort",
                        "wls"
                ],
                "body": "wp_list_sort(${1:\\$list:array},${2:\\$orderby:string|array},${3:\\$order:string},${4:\\$preserve_keys:boolean} )",
                "description": "Sorts an array of objects or arrays based on one or more orderby arguments."
        },
        "ƒ:wp_list_users": {
                "prefix": [
                        "wp_list_users",
                        "wlu"
                ],
                "body": "wp_list_users(${1:\\$args:string|array} )",
                "description": "Lists all the users of the site, with several options available."
        },
        "ƒ:wp_list_widget_controls": {
                "prefix": [
                        "wp_list_widget_controls",
                        "wlwc"
                ],
                "body": "wp_list_widget_controls(${1:\\$sidebar:string},${2:\\$sidebar_name:string} )",
                "description": "Show the widgets and their settings for a sidebar."
        },
        "ƒ:wp_list_widget_controls_dynamic_sidebar": {
                "prefix": [
                        "wp_list_widget_controls_dynamic_sidebar",
                        "wlwcds"
                ],
                "body": "wp_list_widget_controls_dynamic_sidebar(${1:\\$params:array} )",
                "description": "Retrieves the widget control arguments."
        },
        "ƒ:wp_list_widgets": {
                "prefix": [
                        "wp_list_widgets",
                        "wlw"
                ],
                "body": "wp_list_widgets()",
                "description": "Display list of the available widgets."
        },
        "ƒ:wp_load_alloptions": {
                "prefix": [
                        "wp_load_alloptions",
                        "wla"
                ],
                "body": "wp_load_alloptions(${1:\\$force_cache:boolean} )",
                "description": "Loads and caches all autoloaded options, if available or all options."
        },
        "ƒ:wp_load_core_site_options": {
                "prefix": [
                        "wp_load_core_site_options",
                        "wlcso"
                ],
                "body": "wp_load_core_site_options(${1:\\$network_id:integer|null} )",
                "description": "Loads and caches certain often requested site options if is_multisite() and a persistent cache is not being used."
        },
        "ƒ:wp_load_image": {
                "prefix": [
                        "wp_load_image",
                        "wli"
                ],
                "body": "wp_load_image(${1:\\$file:string} )",
                "description": "Load an image from a string, if PHP supports it."
        },
        "ƒ:wp_load_press_this": {
                "prefix": [
                        "wp_load_press_this",
                        "wlpt"
                ],
                "body": "wp_load_press_this()",
                "description": ""
        },
        "ƒ:wp_load_translations_early": {
                "prefix": [
                        "wp_load_translations_early",
                        "wlte"
                ],
                "body": "wp_load_translations_early()",
                "description": "Attempt an early load of translations."
        },
        "ƒ:wp_localize_community_events": {
                "prefix": [
                        "wp_localize_community_events",
                        "wlce"
                ],
                "body": "wp_localize_community_events()",
                "description": "Localizes community events data that needs to be passed to dashboard.js."
        },
        "ƒ:wp_localize_jquery_ui_datepicker": {
                "prefix": [
                        "wp_localize_jquery_ui_datepicker",
                        "wljud"
                ],
                "body": "wp_localize_jquery_ui_datepicker()",
                "description": "Localizes the jQuery UI datepicker."
        },
        "ƒ:wp_localize_script": {
                "prefix": [
                        "wp_localize_script",
                        "wls"
                ],
                "body": "wp_localize_script(${1:\\$handle:string},${2:\\$object_name:string},${3:\\$l10n:array} )",
                "description": "Localize a script."
        },
        "ƒ:wp_login": {
                "prefix": [
                        "wp_login",
                        "wl"
                ],
                "body": "wp_login(${1:\\$username:string},${2:\\$password:string},${3:\\$deprecated:string} )",
                "description": "Checks a users login information and logs them in if it checks out. This function is deprecated."
        },
        "ƒ:wp_login_form": {
                "prefix": [
                        "wp_login_form",
                        "wlf"
                ],
                "body": "wp_login_form(${1:\\$args:array} )",
                "description": "Provides a simple login form for use anywhere within WordPress."
        },
        "ƒ:wp_login_url": {
                "prefix": [
                        "wp_login_url",
                        "wlu"
                ],
                "body": "wp_login_url(${1:\\$redirect:string},${2:\\$force_reauth:boolean} )",
                "description": "Retrieves the login URL."
        },
        "ƒ:wp_login_viewport_meta": {
                "prefix": [
                        "wp_login_viewport_meta",
                        "wlvm"
                ],
                "body": "wp_login_viewport_meta()",
                "description": "Outputs the viewport meta tag for the login page."
        },
        "ƒ:wp_loginout": {
                "prefix": [
                        "wp_loginout",
                        "wl"
                ],
                "body": "wp_loginout(${1:\\$redirect:string},${2:\\$echo:boolean} )",
                "description": "Display the Log In/Out link."
        },
        "ƒ:wp_logout": {
                "prefix": [
                        "wp_logout",
                        "wl"
                ],
                "body": "wp_logout()",
                "description": "Log the current user out."
        },
        "ƒ:wp_logout_url": {
                "prefix": [
                        "wp_logout_url",
                        "wlu"
                ],
                "body": "wp_logout_url(${1:\\$redirect:string} )",
                "description": "Retrieves the logout URL."
        },
        "ƒ:wp_lostpassword_url": {
                "prefix": [
                        "wp_lostpassword_url",
                        "wlu"
                ],
                "body": "wp_lostpassword_url(${1:\\$redirect:string} )",
                "description": "Returns the URL that allows the user to retrieve the lost password"
        },
        "ƒ:wp_magic_quotes": {
                "prefix": [
                        "wp_magic_quotes",
                        "wmq"
                ],
                "body": "wp_magic_quotes()",
                "description": "Add magic quotes to `$_GET`, `$_POST`, `$_COOKIE`, and `$_SERVER`."
        },
        "ƒ:wp_mail": {
                "prefix": [
                        "wp_mail",
                        "wm"
                ],
                "body": "wp_mail(${1:\\$to:string|array},${2:\\$subject:string},${3:\\$message:string},${4:\\$headers:string|array},${5:\\$attachments:string|array} )",
                "description": "Sends an email, similar to PHP&#039;s mail function."
        },
        "ƒ:wp_maintenance": {
                "prefix": [
                        "wp_maintenance",
                        "wm"
                ],
                "body": "wp_maintenance()",
                "description": "Die with a maintenance message when conditions are met."
        },
        "ƒ:wp_make_content_images_responsive": {
                "prefix": [
                        "wp_make_content_images_responsive",
                        "wmcir"
                ],
                "body": "wp_make_content_images_responsive(${1:\\$content:string} )",
                "description": "Filters &#039;img&#039; elements in post content to add &#039;srcset&#039; and &#039;sizes&#039; attributes."
        },
        "ƒ:wp_make_link_relative": {
                "prefix": [
                        "wp_make_link_relative",
                        "wmlr"
                ],
                "body": "wp_make_link_relative(${1:\\$link:string} )",
                "description": "Converts full URL paths to absolute paths."
        },
        "ƒ:wp_make_plugin_file_tree": {
                "prefix": [
                        "wp_make_plugin_file_tree",
                        "wmpft"
                ],
                "body": "wp_make_plugin_file_tree(${1:\\$plugin_editable_files:array} )",
                "description": "Makes a tree structure for the plugin file editor&#039;s file list."
        },
        "ƒ:wp_make_theme_file_tree": {
                "prefix": [
                        "wp_make_theme_file_tree",
                        "wmtft"
                ],
                "body": "wp_make_theme_file_tree(${1:\\$allowed_files:array} )",
                "description": "Makes a tree structure for the theme file editor&#039;s file list."
        },
        "ƒ:wp_map_nav_menu_locations": {
                "prefix": [
                        "wp_map_nav_menu_locations",
                        "wmnml"
                ],
                "body": "wp_map_nav_menu_locations(${1:\\$new_nav_menu_locations:array},${2:\\$old_nav_menu_locations:array} )",
                "description": "Maps nav menu locations according to assignments in previously active theme."
        },
        "ƒ:wp_map_sidebars_widgets": {
                "prefix": [
                        "wp_map_sidebars_widgets",
                        "wmsw"
                ],
                "body": "wp_map_sidebars_widgets(${1:\\$existing_sidebars_widgets:array} )",
                "description": "Compares a list of sidebars with their widgets against an allowed list."
        },
        "ƒ:wp_match_mime_types": {
                "prefix": [
                        "wp_match_mime_types",
                        "wmmt"
                ],
                "body": "wp_match_mime_types(${1:\\$wildcard_mime_types:string|array},${2:\\$real_mime_types:string|array} )",
                "description": "Check a MIME-Type against a list."
        },
        "ƒ:wp_max_upload_size": {
                "prefix": [
                        "wp_max_upload_size",
                        "wmus"
                ],
                "body": "wp_max_upload_size()",
                "description": "Determines the maximum upload size allowed in php.ini."
        },
        "ƒ:wp_maybe_auto_update": {
                "prefix": [
                        "wp_maybe_auto_update",
                        "wmau"
                ],
                "body": "wp_maybe_auto_update()",
                "description": "Performs WordPress automatic background updates."
        },
        "ƒ:wp_maybe_clean_new_site_cache_on_update": {
                "prefix": [
                        "wp_maybe_clean_new_site_cache_on_update",
                        "wmcnscou"
                ],
                "body": "wp_maybe_clean_new_site_cache_on_update(${1:\\$new_site:WP_Site},${2:\\$old_site:WP_Site} )",
                "description": "Cleans the necessary caches after specific site data has been updated."
        },
        "ƒ:wp_maybe_decline_date": {
                "prefix": [
                        "wp_maybe_decline_date",
                        "wmdd"
                ],
                "body": "wp_maybe_decline_date(${1:\\$date:string},${2:\\$format:string} )",
                "description": "Determines if the date should be declined."
        },
        "ƒ:wp_maybe_enqueue_oembed_host_js": {
                "prefix": [
                        "wp_maybe_enqueue_oembed_host_js",
                        "wmeohj"
                ],
                "body": "wp_maybe_enqueue_oembed_host_js(${1:\\$html:string} )",
                "description": "Enqueue the wp-embed script if the provided oEmbed HTML contains a post embed."
        },
        "ƒ:wp_maybe_generate_attachment_metadata": {
                "prefix": [
                        "wp_maybe_generate_attachment_metadata",
                        "wmgam"
                ],
                "body": "wp_maybe_generate_attachment_metadata(${1:\\$attachment:WP_Post} )",
                "description": "Maybe attempts to generate attachment metadata, if missing."
        },
        "ƒ:wp_maybe_grant_install_languages_cap": {
                "prefix": [
                        "wp_maybe_grant_install_languages_cap",
                        "wmgilc"
                ],
                "body": "wp_maybe_grant_install_languages_cap(${1:\\$allcaps:array} )",
                "description": "Filters the user capabilities to grant the &#039;install_languages&#039; capability as necessary."
        },
        "ƒ:wp_maybe_grant_resume_extensions_caps": {
                "prefix": [
                        "wp_maybe_grant_resume_extensions_caps",
                        "wmgrec"
                ],
                "body": "wp_maybe_grant_resume_extensions_caps(${1:\\$allcaps:array} )",
                "description": "Filters the user capabilities to grant the &#039;resume_plugins&#039; and &#039;resume_themes&#039; capabilities as necessary."
        },
        "ƒ:wp_maybe_grant_site_health_caps": {
                "prefix": [
                        "wp_maybe_grant_site_health_caps",
                        "wmgshc"
                ],
                "body": "wp_maybe_grant_site_health_caps(${1:\\$allcaps:array},${2:\\$caps:array},${3:\\$args:array},${4:\\$user:WP_User} )",
                "description": "Filters the user capabilities to grant the &#039;view_site_health_checks&#039; capabilities as necessary."
        },
        "ƒ:wp_maybe_inline_styles": {
                "prefix": [
                        "wp_maybe_inline_styles",
                        "wmis"
                ],
                "body": "wp_maybe_inline_styles()",
                "description": "Allows small styles to be inlined."
        },
        "ƒ:wp_maybe_load_embeds": {
                "prefix": [
                        "wp_maybe_load_embeds",
                        "wmle"
                ],
                "body": "wp_maybe_load_embeds()",
                "description": "Determines if default embed handlers should be loaded."
        },
        "ƒ:wp_maybe_load_widgets": {
                "prefix": [
                        "wp_maybe_load_widgets",
                        "wmlw"
                ],
                "body": "wp_maybe_load_widgets()",
                "description": "Determines if Widgets library should be loaded."
        },
        "ƒ:wp_maybe_transition_site_statuses_on_update": {
                "prefix": [
                        "wp_maybe_transition_site_statuses_on_update",
                        "wmtssou"
                ],
                "body": "wp_maybe_transition_site_statuses_on_update(${1:\\$new_site:WP_Site},${2:\\$old_site:WP_Site|null} )",
                "description": "Triggers actions on site status updates."
        },
        "ƒ:wp_maybe_update_network_site_counts": {
                "prefix": [
                        "wp_maybe_update_network_site_counts",
                        "wmunsc"
                ],
                "body": "wp_maybe_update_network_site_counts(${1:\\$network_id:integer|null} )",
                "description": "Updates the count of sites for the current network."
        },
        "ƒ:wp_maybe_update_network_site_counts_on_update": {
                "prefix": [
                        "wp_maybe_update_network_site_counts_on_update",
                        "wmunscou"
                ],
                "body": "wp_maybe_update_network_site_counts_on_update(${1:\\$new_site:WP_Site},${2:\\$old_site:WP_Site|null} )",
                "description": "Updates the count of sites for a network based on a changed site."
        },
        "ƒ:wp_maybe_update_network_user_counts": {
                "prefix": [
                        "wp_maybe_update_network_user_counts",
                        "wmunuc"
                ],
                "body": "wp_maybe_update_network_user_counts(${1:\\$network_id:integer|null} )",
                "description": "Updates the network-wide users count."
        },
        "ƒ:wp_maybe_update_user_counts": {
                "prefix": [
                        "wp_maybe_update_user_counts",
                        "wmuuc"
                ],
                "body": "wp_maybe_update_user_counts(${1:\\$network_id:integer|null} )",
                "description": "Updates the total count of users on the site if live user counting is enabled."
        },
        "ƒ:wp_media_attach_action": {
                "prefix": [
                        "wp_media_attach_action",
                        "wmaa"
                ],
                "body": "wp_media_attach_action(${1:\\$parent_id:integer},${2:\\$action:string} )",
                "description": "Encapsulates the logic for Attach/Detach actions."
        },
        "ƒ:wp_media_insert_url_form": {
                "prefix": [
                        "wp_media_insert_url_form",
                        "wmiuf"
                ],
                "body": "wp_media_insert_url_form(${1:\\$default_view:string} )",
                "description": "Creates the form for external url."
        },
        "ƒ:wp_media_personal_data_exporter": {
                "prefix": [
                        "wp_media_personal_data_exporter",
                        "wmpde"
                ],
                "body": "wp_media_personal_data_exporter(${1:\\$email_address:string},${2:\\$page:integer} )",
                "description": "Finds and exports attachments associated with an email address."
        },
        "ƒ:wp_media_upload_handler": {
                "prefix": [
                        "wp_media_upload_handler",
                        "wmuh"
                ],
                "body": "wp_media_upload_handler()",
                "description": "Handles the process of uploading media."
        },
        "ƒ:wp_mediaelement_fallback": {
                "prefix": [
                        "wp_mediaelement_fallback",
                        "wmf"
                ],
                "body": "wp_mediaelement_fallback(${1:\\$url:string} )",
                "description": "Provides a No-JS Flash fallback as a last resort for audio / video."
        },
        "ƒ:wp_meta": {
                "prefix": [
                        "wp_meta",
                        "wm"
                ],
                "body": "wp_meta()",
                "description": "Theme container function for the &#039;wp_meta&#039; action."
        },
        "ƒ:wp_metadata_lazyloader": {
                "prefix": [
                        "wp_metadata_lazyloader",
                        "wml"
                ],
                "body": "wp_metadata_lazyloader()",
                "description": "Retrieves the queue for lazy-loading metadata."
        },
        "ƒ:wp_migrate_old_typography_shape": {
                "prefix": [
                        "wp_migrate_old_typography_shape",
                        "wmots"
                ],
                "body": "wp_migrate_old_typography_shape(${1:\\$metadata:array} )",
                "description": "Converts typography keys declared under `supports.*` to `supports.typography.*`."
        },
        "ƒ:wp_mime_type_icon": {
                "prefix": [
                        "wp_mime_type_icon",
                        "wmti"
                ],
                "body": "wp_mime_type_icon(${1:\\$mime:string|integer} )",
                "description": "Retrieve the icon for a MIME type or attachment."
        },
        "ƒ:wp_mkdir_p": {
                "prefix": [
                        "wp_mkdir_p",
                        "wmp"
                ],
                "body": "wp_mkdir_p(${1:\\$target:string} )",
                "description": "Recursive directory creation based on full path."
        },
        "ƒ:wp_nav_menu": {
                "prefix": [
                        "wp_nav_menu",
                        "wnm"
                ],
                "body": "wp_nav_menu(${1:\\$args:array} )",
                "description": "Displays a navigation menu."
        },
        "ƒ:wp_nav_menu_disabled_check": {
                "prefix": [
                        "wp_nav_menu_disabled_check",
                        "wnmdc"
                ],
                "body": "wp_nav_menu_disabled_check(${1:\\$nav_menu_selected_id:integer|string},${2:\\$display:boolean} )",
                "description": "Check whether to disable the Menu Locations meta box submit button and inputs."
        },
        "ƒ:wp_nav_menu_item_link_meta_box": {
                "prefix": [
                        "wp_nav_menu_item_link_meta_box",
                        "wnmilmb"
                ],
                "body": "wp_nav_menu_item_link_meta_box()",
                "description": "Displays a meta box for the custom links menu item."
        },
        "ƒ:wp_nav_menu_item_post_type_meta_box": {
                "prefix": [
                        "wp_nav_menu_item_post_type_meta_box",
                        "wnmiptmb"
                ],
                "body": "wp_nav_menu_item_post_type_meta_box(${1:\\$data_object:string},${2:\\$box:array} )",
                "description": "Displays a meta box for a post type menu item."
        },
        "ƒ:wp_nav_menu_item_taxonomy_meta_box": {
                "prefix": [
                        "wp_nav_menu_item_taxonomy_meta_box",
                        "wnmitmb"
                ],
                "body": "wp_nav_menu_item_taxonomy_meta_box(${1:\\$data_object:string},${2:\\$box:array} )",
                "description": "Displays a meta box for a taxonomy menu item."
        },
        "ƒ:wp_nav_menu_locations_meta_box": {
                "prefix": [
                        "wp_nav_menu_locations_meta_box",
                        "wnmlmb"
                ],
                "body": "wp_nav_menu_locations_meta_box()",
                "description": "This was once used to display a meta box for the nav menu theme locations."
        },
        "ƒ:wp_nav_menu_manage_columns": {
                "prefix": [
                        "wp_nav_menu_manage_columns",
                        "wnmmc"
                ],
                "body": "wp_nav_menu_manage_columns()",
                "description": "Returns the columns for the nav menus page."
        },
        "ƒ:wp_nav_menu_max_depth": {
                "prefix": [
                        "wp_nav_menu_max_depth",
                        "wnmmd"
                ],
                "body": "wp_nav_menu_max_depth(${1:\\$classes:string} )",
                "description": ""
        },
        "ƒ:wp_nav_menu_post_type_meta_boxes": {
                "prefix": [
                        "wp_nav_menu_post_type_meta_boxes",
                        "wnmptmb"
                ],
                "body": "wp_nav_menu_post_type_meta_boxes()",
                "description": "Creates meta boxes for any post type menu item."
        },
        "ƒ:wp_nav_menu_setup": {
                "prefix": [
                        "wp_nav_menu_setup",
                        "wnms"
                ],
                "body": "wp_nav_menu_setup()",
                "description": "Register nav menu meta boxes and advanced menu items."
        },
        "ƒ:wp_nav_menu_taxonomy_meta_boxes": {
                "prefix": [
                        "wp_nav_menu_taxonomy_meta_boxes",
                        "wnmtmb"
                ],
                "body": "wp_nav_menu_taxonomy_meta_boxes()",
                "description": "Creates meta boxes for any taxonomy menu item."
        },
        "ƒ:wp_nav_menu_update_menu_items": {
                "prefix": [
                        "wp_nav_menu_update_menu_items",
                        "wnmumi"
                ],
                "body": "wp_nav_menu_update_menu_items(${1:\\$nav_menu_selected_id:integer|string},${2:\\$nav_menu_selected_title:string} )",
                "description": "Saves nav menu items"
        },
        "ƒ:wp_network_admin_email_change_notification": {
                "prefix": [
                        "wp_network_admin_email_change_notification",
                        "wnaecn"
                ],
                "body": "wp_network_admin_email_change_notification(${1:\\$option_name:string},${2:\\$new_email:string},${3:\\$old_email:string},${4:\\$network_id:integer} )",
                "description": "Sends an email to the old network admin email address when the network admin email address changes."
        },
        "ƒ:wp_network_dashboard_right_now": {
                "prefix": [
                        "wp_network_dashboard_right_now",
                        "wndrn"
                ],
                "body": "wp_network_dashboard_right_now()",
                "description": ""
        },
        "ƒ:wp_new_blog_notification": {
                "prefix": [
                        "wp_new_blog_notification",
                        "wnbn"
                ],
                "body": "wp_new_blog_notification(${1:\\$blog_title:string},${2:\\$blog_url:string},${3:\\$user_id:integer},${4:\\$password:string} )",
                "description": "Notifies the site admin that the installation of WordPress is complete."
        },
        "ƒ:wp_new_comment": {
                "prefix": [
                        "wp_new_comment",
                        "wnc"
                ],
                "body": "wp_new_comment(${1:\\$commentdata:array},${2:\\$wp_error:boolean} )",
                "description": "Adds a new comment to the database."
        },
        "ƒ:wp_new_comment_notify_moderator": {
                "prefix": [
                        "wp_new_comment_notify_moderator",
                        "wncnm"
                ],
                "body": "wp_new_comment_notify_moderator(${1:\\$comment_ID:integer} )",
                "description": "Sends a comment moderation notification to the comment moderator."
        },
        "ƒ:wp_new_comment_notify_postauthor": {
                "prefix": [
                        "wp_new_comment_notify_postauthor",
                        "wncnp"
                ],
                "body": "wp_new_comment_notify_postauthor(${1:\\$comment_ID:integer} )",
                "description": "Sends a notification of a new comment to the post author."
        },
        "ƒ:wp_new_user_notification": {
                "prefix": [
                        "wp_new_user_notification",
                        "wnun"
                ],
                "body": "wp_new_user_notification(${1:\\$user_id:integer},${2:\\$deprecated:null},${3:\\$notify:string} )",
                "description": "Email login credentials to a newly-registered user."
        },
        "ƒ:wp_next_scheduled": {
                "prefix": [
                        "wp_next_scheduled",
                        "wns"
                ],
                "body": "wp_next_scheduled(${1:\\$hook:string},${2:\\$args:array} )",
                "description": "Retrieve the next timestamp for an event."
        },
        "ƒ:wp_no_robots": {
                "prefix": [
                        "wp_no_robots",
                        "wnr"
                ],
                "body": "wp_no_robots()",
                "description": "Display a `noindex` meta tag."
        },
        "ƒ:wp_nonce_ays": {
                "prefix": [
                        "wp_nonce_ays",
                        "wna"
                ],
                "body": "wp_nonce_ays(${1:\\$action:string} )",
                "description": "Display &quot;Are You Sure&quot; message to confirm the action being taken."
        },
        "ƒ:wp_nonce_field": {
                "prefix": [
                        "wp_nonce_field",
                        "wnf"
                ],
                "body": "wp_nonce_field(${1:\\$action:integer|string},${2:\\$name:string},${3:\\$referer:boolean},${4:\\$echo:boolean} )",
                "description": "Retrieve or display nonce hidden field for forms."
        },
        "ƒ:wp_nonce_tick": {
                "prefix": [
                        "wp_nonce_tick",
                        "wnt"
                ],
                "body": "wp_nonce_tick()",
                "description": "Returns the time-dependent variable for nonce creation."
        },
        "ƒ:wp_nonce_url": {
                "prefix": [
                        "wp_nonce_url",
                        "wnu"
                ],
                "body": "wp_nonce_url(${1:\\$actionurl:string},${2:\\$action:integer|string},${3:\\$name:string} )",
                "description": "Retrieve URL with nonce added to URL query."
        },
        "ƒ:wp_normalize_path": {
                "prefix": [
                        "wp_normalize_path",
                        "wnp"
                ],
                "body": "wp_normalize_path(${1:\\$path:string} )",
                "description": "Normalize a filesystem path."
        },
        "ƒ:wp_normalize_site_data": {
                "prefix": [
                        "wp_normalize_site_data",
                        "wnsd"
                ],
                "body": "wp_normalize_site_data(${1:\\$data:array} )",
                "description": "Normalizes data for a site prior to inserting or updating in the database."
        },
        "ƒ:wp_not_installed": {
                "prefix": [
                        "wp_not_installed",
                        "wni"
                ],
                "body": "wp_not_installed()",
                "description": "Redirect to the installer if WordPress is not installed."
        },
        "ƒ:wp_notify_moderator": {
                "prefix": [
                        "wp_notify_moderator",
                        "wnm"
                ],
                "body": "wp_notify_moderator(${1:\\$comment_id:integer} )",
                "description": "Notifies the moderator of the site about a new comment that is awaiting approval."
        },
        "ƒ:wp_notify_postauthor": {
                "prefix": [
                        "wp_notify_postauthor",
                        "wnp"
                ],
                "body": "wp_notify_postauthor(${1:\\$comment_id:integer|WP_Comment},${2:\\$deprecated:string|null} )",
                "description": "Notify an author (and/or others) of a comment/trackback/pingback on a post."
        },
        "ƒ:wp_ob_end_flush_all": {
                "prefix": [
                        "wp_ob_end_flush_all",
                        "woefa"
                ],
                "body": "wp_ob_end_flush_all()",
                "description": "Flush all output buffers for PHP 5.2."
        },
        "ƒ:wp_oembed_add_discovery_links": {
                "prefix": [
                        "wp_oembed_add_discovery_links",
                        "woadl"
                ],
                "body": "wp_oembed_add_discovery_links()",
                "description": "Adds oEmbed discovery links in the head element of the website."
        },
        "ƒ:wp_oembed_add_host_js": {
                "prefix": [
                        "wp_oembed_add_host_js",
                        "woahj"
                ],
                "body": "wp_oembed_add_host_js()",
                "description": "Adds the necessary JavaScript to communicate with the embedded iframes."
        },
        "ƒ:wp_oembed_add_provider": {
                "prefix": [
                        "wp_oembed_add_provider",
                        "woap"
                ],
                "body": "wp_oembed_add_provider(${1:\\$format:string},${2:\\$provider:string},${3:\\$regex:boolean} )",
                "description": "Adds a URL format and oEmbed provider URL pair."
        },
        "ƒ:wp_oembed_ensure_format": {
                "prefix": [
                        "wp_oembed_ensure_format",
                        "woef"
                ],
                "body": "wp_oembed_ensure_format(${1:\\$format:string} )",
                "description": "Ensures that the specified format is either &#039;json&#039; or &#039;xml&#039;."
        },
        "ƒ:wp_oembed_get": {
                "prefix": [
                        "wp_oembed_get",
                        "wog"
                ],
                "body": "wp_oembed_get(${1:\\$url:string},${2:\\$args:array|string} )",
                "description": "Attempts to fetch the embed HTML for a provided URL using oEmbed."
        },
        "ƒ:wp_oembed_register_route": {
                "prefix": [
                        "wp_oembed_register_route",
                        "worr"
                ],
                "body": "wp_oembed_register_route()",
                "description": "Registers the oEmbed REST API route."
        },
        "ƒ:wp_oembed_remove_provider": {
                "prefix": [
                        "wp_oembed_remove_provider",
                        "worp"
                ],
                "body": "wp_oembed_remove_provider(${1:\\$format:string} )",
                "description": "Removes an oEmbed provider."
        },
        "ƒ:wp_old_slug_redirect": {
                "prefix": [
                        "wp_old_slug_redirect",
                        "wosr"
                ],
                "body": "wp_old_slug_redirect()",
                "description": "Redirect old slugs to the correct permalink."
        },
        "ƒ:wp_omit_loading_attr_threshold": {
                "prefix": [
                        "wp_omit_loading_attr_threshold",
                        "wolat"
                ],
                "body": "wp_omit_loading_attr_threshold(${1:\\$force:boolean} )",
                "description": "Gets the threshold for how many of the first content media elements to not lazy-load."
        },
        "ƒ:wp_opcache_invalidate": {
                "prefix": [
                        "wp_opcache_invalidate",
                        "woi"
                ],
                "body": "wp_opcache_invalidate(${1:\\$filepath:string},${2:\\$force:boolean} )",
                "description": "Attempts to clear the opcode cache for an individual PHP file."
        },
        "ƒ:wp_original_referer_field": {
                "prefix": [
                        "wp_original_referer_field",
                        "worf"
                ],
                "body": "wp_original_referer_field(${1:\\$echo:boolean},${2:\\$jump_back_to:string} )",
                "description": "Retrieve or display original referer hidden field for forms."
        },
        "ƒ:wp_page_menu": {
                "prefix": [
                        "wp_page_menu",
                        "wpm"
                ],
                "body": "wp_page_menu(${1:\\$args:array|string} )",
                "description": "Displays or retrieves a list of pages with an optional home link."
        },
        "ƒ:wp_page_reload_on_back_button_js": {
                "prefix": [
                        "wp_page_reload_on_back_button_js",
                        "wprobbj"
                ],
                "body": "wp_page_reload_on_back_button_js()",
                "description": "Outputs JS that reloads the page if the user navigated to it with the Back or Forward button."
        },
        "ƒ:wp_parse_args": {
                "prefix": [
                        "wp_parse_args",
                        "wpa"
                ],
                "body": "wp_parse_args(${1:\\$args:string|array|object},${2:\\$defaults:array} )",
                "description": "Merges user defined arguments into defaults array."
        },
        "ƒ:wp_parse_auth_cookie": {
                "prefix": [
                        "wp_parse_auth_cookie",
                        "wpac"
                ],
                "body": "wp_parse_auth_cookie(${1:\\$cookie:string},${2:\\$scheme:string} )",
                "description": "Parses a cookie into its components."
        },
        "ƒ:wp_parse_id_list": {
                "prefix": [
                        "wp_parse_id_list",
                        "wpil"
                ],
                "body": "wp_parse_id_list(${1:\\$list:array|string} )",
                "description": "Cleans up an array, comma- or space-separated list of IDs."
        },
        "ƒ:wp_parse_list": {
                "prefix": [
                        "wp_parse_list",
                        "wpl"
                ],
                "body": "wp_parse_list(${1:\\$list:array|string} )",
                "description": "Converts a comma- or space-separated list of scalar values to an array."
        },
        "ƒ:wp_parse_slug_list": {
                "prefix": [
                        "wp_parse_slug_list",
                        "wpsl"
                ],
                "body": "wp_parse_slug_list(${1:\\$list:array|string} )",
                "description": "Cleans up an array, comma- or space-separated list of slugs."
        },
        "ƒ:wp_parse_str": {
                "prefix": [
                        "wp_parse_str",
                        "wps"
                ],
                "body": "wp_parse_str(${1:\\$string:string},${2:\\$array:array} )",
                "description": "Parses a string into variables to be stored in an array."
        },
        "ƒ:wp_parse_url": {
                "prefix": [
                        "wp_parse_url",
                        "wpu"
                ],
                "body": "wp_parse_url(${1:\\$url:string},${2:\\$component:integer} )",
                "description": "A wrapper for PHP&#039;s parse_url() function that handles consistency in the return values across PHP versions."
        },
        "ƒ:wp_parse_widget_id": {
                "prefix": [
                        "wp_parse_widget_id",
                        "wpwi"
                ],
                "body": "wp_parse_widget_id(${1:\\$id:string} )",
                "description": "Converts a widget ID into its id_base and number components."
        },
        "ƒ:wp_password_change_notification": {
                "prefix": [
                        "wp_password_change_notification",
                        "wpcn"
                ],
                "body": "wp_password_change_notification(${1:\\$user:WP_User} )",
                "description": "Notify the blog admin of a user changing password, normally via email."
        },
        "ƒ:wp_paused_plugins": {
                "prefix": [
                        "wp_paused_plugins",
                        "wpp"
                ],
                "body": "wp_paused_plugins()",
                "description": "Get the instance for storing paused plugins."
        },
        "ƒ:wp_paused_themes": {
                "prefix": [
                        "wp_paused_themes",
                        "wpt"
                ],
                "body": "wp_paused_themes()",
                "description": "Get the instance for storing paused extensions."
        },
        "ƒ:wp_playlist_scripts": {
                "prefix": [
                        "wp_playlist_scripts",
                        "wps"
                ],
                "body": "wp_playlist_scripts(${1:\\$type:string} )",
                "description": "Outputs and enqueue default scripts and styles for playlists."
        },
        "ƒ:wp_playlist_shortcode": {
                "prefix": [
                        "wp_playlist_shortcode",
                        "wps"
                ],
                "body": "wp_playlist_shortcode(${1:\\$attr:array} )",
                "description": "Builds the Playlist shortcode output."
        },
        "ƒ:wp_plugin_directory_constants": {
                "prefix": [
                        "wp_plugin_directory_constants",
                        "wpdc"
                ],
                "body": "wp_plugin_directory_constants()",
                "description": "Defines plugin directory WordPress constants."
        },
        "ƒ:wp_plugin_update_row": {
                "prefix": [
                        "wp_plugin_update_row",
                        "wpur"
                ],
                "body": "wp_plugin_update_row(${1:\\$file:string},${2:\\$plugin_data:array} )",
                "description": "Displays update information for a plugin."
        },
        "ƒ:wp_plugin_update_rows": {
                "prefix": [
                        "wp_plugin_update_rows",
                        "wpur"
                ],
                "body": "wp_plugin_update_rows()",
                "description": ""
        },
        "ƒ:wp_plupload_default_settings": {
                "prefix": [
                        "wp_plupload_default_settings",
                        "wpds"
                ],
                "body": "wp_plupload_default_settings()",
                "description": "Prints default Plupload arguments."
        },
        "ƒ:wp_popular_terms_checklist": {
                "prefix": [
                        "wp_popular_terms_checklist",
                        "wptc"
                ],
                "body": "wp_popular_terms_checklist(${1:\\$taxonomy:string},${2:\\$default_term:integer},${3:\\$number:integer},${4:\\$display:boolean} )",
                "description": "Retrieves a list of the most popular terms from the specified taxonomy."
        },
        "ƒ:wp_populate_basic_auth_from_authorization_header": {
                "prefix": [
                        "wp_populate_basic_auth_from_authorization_header",
                        "wpbafah"
                ],
                "body": "wp_populate_basic_auth_from_authorization_header()",
                "description": "Populates the Basic Auth server details from the Authorization header."
        },
        "ƒ:wp_post_mime_type_where": {
                "prefix": [
                        "wp_post_mime_type_where",
                        "wpmtw"
                ],
                "body": "wp_post_mime_type_where(${1:\\$post_mime_types:string|array},${2:\\$table_alias:string} )",
                "description": "Convert MIME types into SQL."
        },
        "ƒ:wp_post_preview_js": {
                "prefix": [
                        "wp_post_preview_js",
                        "wppj"
                ],
                "body": "wp_post_preview_js()",
                "description": "Outputs a small JS snippet on preview tabs/windows to remove `window.name` on unload."
        },
        "ƒ:wp_post_revision_title": {
                "prefix": [
                        "wp_post_revision_title",
                        "wprt"
                ],
                "body": "wp_post_revision_title(${1:\\$revision:integer|object},${2:\\$link:boolean} )",
                "description": "Retrieves formatted date timestamp of a revision (linked to that revisions&#039;s page)."
        },
        "ƒ:wp_post_revision_title_expanded": {
                "prefix": [
                        "wp_post_revision_title_expanded",
                        "wprte"
                ],
                "body": "wp_post_revision_title_expanded(${1:\\$revision:integer|object},${2:\\$link:boolean} )",
                "description": "Retrieves formatted date timestamp of a revision (linked to that revisions&#039;s page)."
        },
        "ƒ:wp_pre_kses_block_attributes": {
                "prefix": [
                        "wp_pre_kses_block_attributes",
                        "wpkba"
                ],
                "body": "wp_pre_kses_block_attributes(${1:\\$string:string},${2:\\$allowed_html:array|string},${3:\\$allowed_protocols:array} )",
                "description": "Removes non-allowable HTML from parsed block attribute values when filtering in the post context."
        },
        "ƒ:wp_pre_kses_less_than": {
                "prefix": [
                        "wp_pre_kses_less_than",
                        "wpklt"
                ],
                "body": "wp_pre_kses_less_than(${1:\\$text:string} )",
                "description": "Converts lone less than signs."
        },
        "ƒ:wp_pre_kses_less_than_callback": {
                "prefix": [
                        "wp_pre_kses_less_than_callback",
                        "wpkltc"
                ],
                "body": "wp_pre_kses_less_than_callback(${1:\\$matches:array} )",
                "description": "Callback function used by preg_replace."
        },
        "ƒ:wp_preload_dialogs": {
                "prefix": [
                        "wp_preload_dialogs",
                        "wpd"
                ],
                "body": "wp_preload_dialogs()",
                "description": "Preloads TinyMCE dialogs."
        },
        "ƒ:wp_prepare_attachment_for_js": {
                "prefix": [
                        "wp_prepare_attachment_for_js",
                        "wpafj"
                ],
                "body": "wp_prepare_attachment_for_js(${1:\\$attachment:integer|WP_Post} )",
                "description": "Prepares an attachment post object for JS, where it is expected to be JSON-encoded and fit into an Attachment model."
        },
        "ƒ:wp_prepare_revisions_for_js": {
                "prefix": [
                        "wp_prepare_revisions_for_js",
                        "wprfj"
                ],
                "body": "wp_prepare_revisions_for_js(${1:\\$post:WP_Post|integer},${2:\\$selected_revision_id:integer},${3:\\$from:integer|null} )",
                "description": "Prepare revisions for JavaScript."
        },
        "ƒ:wp_prepare_site_data": {
                "prefix": [
                        "wp_prepare_site_data",
                        "wpsd"
                ],
                "body": "wp_prepare_site_data(${1:\\$data:array},${2:\\$defaults:array},${3:\\$old_site:WP_Site|null} )",
                "description": "Prepares site data for insertion or update in the database."
        },
        "ƒ:wp_prepare_themes_for_js": {
                "prefix": [
                        "wp_prepare_themes_for_js",
                        "wptfj"
                ],
                "body": "wp_prepare_themes_for_js(${1:\\$themes:array|null} )",
                "description": "Prepares themes for JavaScript."
        },
        "ƒ:wp_print_admin_notice_templates": {
                "prefix": [
                        "wp_print_admin_notice_templates",
                        "wpant"
                ],
                "body": "wp_print_admin_notice_templates()",
                "description": "Prints the JavaScript templates for update admin notices."
        },
        "ƒ:wp_print_community_events_markup": {
                "prefix": [
                        "wp_print_community_events_markup",
                        "wpcem"
                ],
                "body": "wp_print_community_events_markup()",
                "description": "Prints the markup for the Community Events section of the Events and News Dashboard widget."
        },
        "ƒ:wp_print_community_events_templates": {
                "prefix": [
                        "wp_print_community_events_templates",
                        "wpcet"
                ],
                "body": "wp_print_community_events_templates()",
                "description": "Renders the events templates for the Event and News widget."
        },
        "ƒ:wp_print_editor_js": {
                "prefix": [
                        "wp_print_editor_js",
                        "wpej"
                ],
                "body": "wp_print_editor_js()",
                "description": "Prints TinyMCE editor JS."
        },
        "ƒ:wp_print_file_editor_templates": {
                "prefix": [
                        "wp_print_file_editor_templates",
                        "wpfet"
                ],
                "body": "wp_print_file_editor_templates()",
                "description": "Prints file editor templates (for plugins and themes)."
        },
        "ƒ:wp_print_footer_scripts": {
                "prefix": [
                        "wp_print_footer_scripts",
                        "wpfs"
                ],
                "body": "wp_print_footer_scripts()",
                "description": "Hooks to print the scripts and styles in the footer."
        },
        "ƒ:wp_print_head_scripts": {
                "prefix": [
                        "wp_print_head_scripts",
                        "wphs"
                ],
                "body": "wp_print_head_scripts()",
                "description": "Prints the script queue in the HTML head on the front end."
        },
        "ƒ:wp_print_inline_script_tag": {
                "prefix": [
                        "wp_print_inline_script_tag",
                        "wpist"
                ],
                "body": "wp_print_inline_script_tag(${1:\\$javascript:string},${2:\\$attributes:array} )",
                "description": "Prints inline JavaScript wrapped in `&lt;script&gt;` tag."
        },
        "ƒ:wp_print_media_templates": {
                "prefix": [
                        "wp_print_media_templates",
                        "wpmt"
                ],
                "body": "wp_print_media_templates()",
                "description": "Prints the templates used in the media manager."
        },
        "ƒ:wp_print_plugin_file_tree": {
                "prefix": [
                        "wp_print_plugin_file_tree",
                        "wppft"
                ],
                "body": "wp_print_plugin_file_tree(${1:\\$tree:array|string},${2:\\$label:string},${3:\\$level:integer},${4:\\$size:integer},${5:\\$index:integer} )",
                "description": "Outputs the formatted file list for the plugin file editor."
        },
        "ƒ:wp_print_request_filesystem_credentials_modal": {
                "prefix": [
                        "wp_print_request_filesystem_credentials_modal",
                        "wprfcm"
                ],
                "body": "wp_print_request_filesystem_credentials_modal()",
                "description": "Prints the filesystem credentials modal when needed."
        },
        "ƒ:wp_print_revision_templates": {
                "prefix": [
                        "wp_print_revision_templates",
                        "wprt"
                ],
                "body": "wp_print_revision_templates()",
                "description": "Print JavaScript templates required for the revisions experience."
        },
        "ƒ:wp_print_script_tag": {
                "prefix": [
                        "wp_print_script_tag",
                        "wpst"
                ],
                "body": "wp_print_script_tag(${1:\\$attributes:array} )",
                "description": "Prints formatted `&lt;script&gt;` loader tag."
        },
        "ƒ:wp_print_scripts": {
                "prefix": [
                        "wp_print_scripts",
                        "wps"
                ],
                "body": "wp_print_scripts(${1:\\$handles:string|boolean|array} )",
                "description": "Prints scripts in document head that are in the $handles queue."
        },
        "ƒ:wp_print_styles": {
                "prefix": [
                        "wp_print_styles",
                        "wps"
                ],
                "body": "wp_print_styles(${1:\\$handles:string|boolean|array} )",
                "description": "Display styles that are in the $handles queue."
        },
        "ƒ:wp_print_theme_file_tree": {
                "prefix": [
                        "wp_print_theme_file_tree",
                        "wptft"
                ],
                "body": "wp_print_theme_file_tree(${1:\\$tree:array|string},${2:\\$level:integer},${3:\\$size:integer},${4:\\$index:integer} )",
                "description": "Outputs the formatted file list for the theme file editor."
        },
        "ƒ:wp_print_update_row_templates": {
                "prefix": [
                        "wp_print_update_row_templates",
                        "wpurt"
                ],
                "body": "wp_print_update_row_templates()",
                "description": "Prints the JavaScript templates for update and deletion rows in list tables."
        },
        "ƒ:wp_privacy_anonymize_data": {
                "prefix": [
                        "wp_privacy_anonymize_data",
                        "wpad"
                ],
                "body": "wp_privacy_anonymize_data(${1:\\$type:string},${2:\\$data:string} )",
                "description": "Return uniform &quot;anonymous&quot; data by type."
        },
        "ƒ:wp_privacy_anonymize_ip": {
                "prefix": [
                        "wp_privacy_anonymize_ip",
                        "wpai"
                ],
                "body": "wp_privacy_anonymize_ip(${1:\\$ip_addr:string},${2:\\$ipv6_fallback:boolean} )",
                "description": "Return an anonymized IPv4 or IPv6 address."
        },
        "ƒ:wp_privacy_delete_old_export_files": {
                "prefix": [
                        "wp_privacy_delete_old_export_files",
                        "wpdoef"
                ],
                "body": "wp_privacy_delete_old_export_files()",
                "description": "Cleans up export files older than three days old."
        },
        "ƒ:wp_privacy_exports_dir": {
                "prefix": [
                        "wp_privacy_exports_dir",
                        "wped"
                ],
                "body": "wp_privacy_exports_dir()",
                "description": "Returns the directory used to store personal data export files."
        },
        "ƒ:wp_privacy_exports_url": {
                "prefix": [
                        "wp_privacy_exports_url",
                        "wpeu"
                ],
                "body": "wp_privacy_exports_url()",
                "description": "Returns the URL of the directory used to store personal data export files."
        },
        "ƒ:wp_privacy_generate_personal_data_export_file": {
                "prefix": [
                        "wp_privacy_generate_personal_data_export_file",
                        "wpgpdef"
                ],
                "body": "wp_privacy_generate_personal_data_export_file(${1:\\$request_id:integer} )",
                "description": "Generate the personal data export file."
        },
        "ƒ:wp_privacy_generate_personal_data_export_group_html": {
                "prefix": [
                        "wp_privacy_generate_personal_data_export_group_html",
                        "wpgpdegh"
                ],
                "body": "wp_privacy_generate_personal_data_export_group_html(${1:\\$group_data:array},${2:\\$group_id:string},${3:\\$groups_count:integer} )",
                "description": "Generate a single group for the personal data export report."
        },
        "ƒ:wp_privacy_process_personal_data_erasure_page": {
                "prefix": [
                        "wp_privacy_process_personal_data_erasure_page",
                        "wpppdep"
                ],
                "body": "wp_privacy_process_personal_data_erasure_page(${1:\\$response:array},${2:\\$eraser_index:integer},${3:\\$email_address:string},${4:\\$page:integer},${5:\\$request_id:integer} )",
                "description": "Mark erasure requests as completed after processing is finished."
        },
        "ƒ:wp_privacy_process_personal_data_export_page": {
                "prefix": [
                        "wp_privacy_process_personal_data_export_page",
                        "wpppdep"
                ],
                "body": "wp_privacy_process_personal_data_export_page(${1:\\$response:array},${2:\\$exporter_index:integer},${3:\\$email_address:string},${4:\\$page:integer},${5:\\$request_id:integer},${6:\\$send_as_email:boolean},${7:\\$exporter_key:string} )",
                "description": "Intercept personal data exporter page Ajax responses in order to assemble the personal data export file."
        },
        "ƒ:wp_privacy_send_personal_data_export_email": {
                "prefix": [
                        "wp_privacy_send_personal_data_export_email",
                        "wpspdee"
                ],
                "body": "wp_privacy_send_personal_data_export_email(${1:\\$request_id:integer} )",
                "description": "Send an email to the user with a link to the personal data export file"
        },
        "ƒ:wp_protect_special_option": {
                "prefix": [
                        "wp_protect_special_option",
                        "wpso"
                ],
                "body": "wp_protect_special_option(${1:\\$option:string} )",
                "description": "Protects WordPress special option from being modified."
        },
        "ƒ:wp_prototype_before_jquery": {
                "prefix": [
                        "wp_prototype_before_jquery",
                        "wpbj"
                ],
                "body": "wp_prototype_before_jquery(${1:\\$js_array:array} )",
                "description": "Reorders JavaScript scripts array to place prototype before jQuery."
        },
        "ƒ:wp_publish_post": {
                "prefix": [
                        "wp_publish_post",
                        "wpp"
                ],
                "body": "wp_publish_post(${1:\\$post:integer|WP_Post} )",
                "description": "Publish a post by transitioning the post status."
        },
        "ƒ:wp_queue_comments_for_comment_meta_lazyload": {
                "prefix": [
                        "wp_queue_comments_for_comment_meta_lazyload",
                        "wqcfcml"
                ],
                "body": "wp_queue_comments_for_comment_meta_lazyload(${1:\\$comments:array} )",
                "description": "Queues comments for metadata lazy-loading."
        },
        "ƒ:wp_queue_posts_for_term_meta_lazyload": {
                "prefix": [
                        "wp_queue_posts_for_term_meta_lazyload",
                        "wqpftml"
                ],
                "body": "wp_queue_posts_for_term_meta_lazyload(${1:\\$posts:array} )",
                "description": "Queues posts for lazy-loading of term meta."
        },
        "ƒ:wp_quicktags": {
                "prefix": [
                        "wp_quicktags",
                        "wq"
                ],
                "body": "wp_quicktags()",
                "description": "Handles quicktags."
        },
        "ƒ:wp_raise_memory_limit": {
                "prefix": [
                        "wp_raise_memory_limit",
                        "wrml"
                ],
                "body": "wp_raise_memory_limit(${1:\\$context:string} )",
                "description": "Attempts to raise the PHP memory limit for memory intensive processes."
        },
        "ƒ:wp_rand": {
                "prefix": [
                        "wp_rand",
                        "wr"
                ],
                "body": "wp_rand(${1:\\$min:integer},${2:\\$max:integer} )",
                "description": "Generates a random number."
        },
        "ƒ:wp_read_audio_metadata": {
                "prefix": [
                        "wp_read_audio_metadata",
                        "wram"
                ],
                "body": "wp_read_audio_metadata(${1:\\$file:string} )",
                "description": "Retrieves metadata from an audio file&#039;s ID3 tags."
        },
        "ƒ:wp_read_image_metadata": {
                "prefix": [
                        "wp_read_image_metadata",
                        "wrim"
                ],
                "body": "wp_read_image_metadata(${1:\\$file:string} )",
                "description": "Get extended image metadata, exif or iptc as available."
        },
        "ƒ:wp_read_video_metadata": {
                "prefix": [
                        "wp_read_video_metadata",
                        "wrvm"
                ],
                "body": "wp_read_video_metadata(${1:\\$file:string} )",
                "description": "Retrieves metadata from a video file&#039;s ID3 tags."
        },
        "ƒ:wp_readonly": {
                "prefix": [
                        "wp_readonly",
                        "wr"
                ],
                "body": "wp_readonly(${1:\\$readonly:mixed},${2:\\$current:mixed},${3:\\$echo:boolean} )",
                "description": "Outputs the HTML readonly attribute."
        },
        "ƒ:wp_recovery_mode": {
                "prefix": [
                        "wp_recovery_mode",
                        "wrm"
                ],
                "body": "wp_recovery_mode()",
                "description": "Access the WordPress Recovery Mode instance."
        },
        "ƒ:wp_recovery_mode_nag": {
                "prefix": [
                        "wp_recovery_mode_nag",
                        "wrmn"
                ],
                "body": "wp_recovery_mode_nag()",
                "description": "Displays a notice when the user is in recovery mode."
        },
        "ƒ:wp_recursive_ksort": {
                "prefix": [
                        "wp_recursive_ksort",
                        "wrk"
                ],
                "body": "wp_recursive_ksort(${1:\\$array:array} )",
                "description": "Sorts the keys of an array alphabetically."
        },
        "ƒ:wp_redirect": {
                "prefix": [
                        "wp_redirect",
                        "wr"
                ],
                "body": "wp_redirect(${1:\\$location:string},${2:\\$status:integer},${3:\\$x_redirect_by:string} )",
                "description": "Redirects to another page."
        },
        "ƒ:wp_redirect_admin_locations": {
                "prefix": [
                        "wp_redirect_admin_locations",
                        "wral"
                ],
                "body": "wp_redirect_admin_locations()",
                "description": "Redirects a variety of shorthand URLs to the admin."
        },
        "ƒ:wp_referer_field": {
                "prefix": [
                        "wp_referer_field",
                        "wrf"
                ],
                "body": "wp_referer_field(${1:\\$echo:boolean} )",
                "description": "Retrieve or display referer hidden field for forms."
        },
        "ƒ:wp_refresh_heartbeat_nonces": {
                "prefix": [
                        "wp_refresh_heartbeat_nonces",
                        "wrhn"
                ],
                "body": "wp_refresh_heartbeat_nonces(${1:\\$response:array} )",
                "description": "Adds the latest Heartbeat and REST-API nonce to the Heartbeat response."
        },
        "ƒ:wp_refresh_post_lock": {
                "prefix": [
                        "wp_refresh_post_lock",
                        "wrpl"
                ],
                "body": "wp_refresh_post_lock(${1:\\$response:array},${2:\\$data:array},${3:\\$screen_id:string} )",
                "description": "Checks lock status on the New/Edit Post screen and refresh the lock."
        },
        "ƒ:wp_refresh_post_nonces": {
                "prefix": [
                        "wp_refresh_post_nonces",
                        "wrpn"
                ],
                "body": "wp_refresh_post_nonces(${1:\\$response:array},${2:\\$data:array},${3:\\$screen_id:string} )",
                "description": "Checks nonce expiration on the New/Edit Post screen and refresh if needed."
        },
        "ƒ:wp_register": {
                "prefix": [
                        "wp_register",
                        "wr"
                ],
                "body": "wp_register(${1:\\$before:string},${2:\\$after:string},${3:\\$echo:boolean} )",
                "description": "Display the Registration or Admin link."
        },
        "ƒ:wp_register_alignment_support": {
                "prefix": [
                        "wp_register_alignment_support",
                        "wras"
                ],
                "body": "wp_register_alignment_support(${1:\\$block_type:WP_Block_Type} )",
                "description": "Registers the align block attribute for block types that support it."
        },
        "ƒ:wp_register_border_support": {
                "prefix": [
                        "wp_register_border_support",
                        "wrbs"
                ],
                "body": "wp_register_border_support(${1:\\$block_type:WP_Block_Type} )",
                "description": "Registers the style attribute used by the border feature if needed for block types that support borders."
        },
        "ƒ:wp_register_colors_support": {
                "prefix": [
                        "wp_register_colors_support",
                        "wrcs"
                ],
                "body": "wp_register_colors_support(${1:\\$block_type:WP_Block_Type} )",
                "description": "Registers the style and colors block attributes for block types that support it."
        },
        "ƒ:wp_register_comment_personal_data_eraser": {
                "prefix": [
                        "wp_register_comment_personal_data_eraser",
                        "wrcpde"
                ],
                "body": "wp_register_comment_personal_data_eraser(${1:\\$erasers:array} )",
                "description": "Registers the personal data eraser for comments."
        },
        "ƒ:wp_register_comment_personal_data_exporter": {
                "prefix": [
                        "wp_register_comment_personal_data_exporter",
                        "wrcpde"
                ],
                "body": "wp_register_comment_personal_data_exporter(${1:\\$exporters:array} )",
                "description": "Registers the personal data exporter for comments."
        },
        "ƒ:wp_register_custom_classname_support": {
                "prefix": [
                        "wp_register_custom_classname_support",
                        "wrccs"
                ],
                "body": "wp_register_custom_classname_support(${1:\\$block_type:WP_Block_Type} )",
                "description": "Registers the custom classname block attribute for block types that support it."
        },
        "ƒ:wp_register_development_scripts": {
                "prefix": [
                        "wp_register_development_scripts",
                        "wrds"
                ],
                "body": "wp_register_development_scripts(${1:\\$scripts:WP_Scripts} )",
                "description": "Registers development scripts that integrate with `@wordpress/scripts`."
        },
        "ƒ:wp_register_dimensions_support": {
                "prefix": [
                        "wp_register_dimensions_support",
                        "wrds"
                ],
                "body": "wp_register_dimensions_support(${1:\\$block_type:WP_Block_Type} )",
                "description": "Registers the style block attribute for block types that support it."
        },
        "ƒ:wp_register_duotone_support": {
                "prefix": [
                        "wp_register_duotone_support",
                        "wrds"
                ],
                "body": "wp_register_duotone_support(${1:\\$block_type:WP_Block_Type} )",
                "description": "Registers the style and colors block attributes for block types that support it."
        },
        "ƒ:wp_register_fatal_error_handler": {
                "prefix": [
                        "wp_register_fatal_error_handler",
                        "wrfeh"
                ],
                "body": "wp_register_fatal_error_handler()",
                "description": "Registers the shutdown handler for fatal errors."
        },
        "ƒ:wp_register_layout_support": {
                "prefix": [
                        "wp_register_layout_support",
                        "wrls"
                ],
                "body": "wp_register_layout_support(${1:\\$block_type:WP_Block_Type} )",
                "description": "Registers the layout block attribute for block types that support it."
        },
        "ƒ:wp_register_media_personal_data_exporter": {
                "prefix": [
                        "wp_register_media_personal_data_exporter",
                        "wrmpde"
                ],
                "body": "wp_register_media_personal_data_exporter(${1:\\$exporters:array} )",
                "description": "Registers the personal data exporter for media."
        },
        "ƒ:wp_register_plugin_realpath": {
                "prefix": [
                        "wp_register_plugin_realpath",
                        "wrpr"
                ],
                "body": "wp_register_plugin_realpath(${1:\\$file:string} )",
                "description": "Register a plugin&#039;s real path."
        },
        "ƒ:wp_register_script": {
                "prefix": [
                        "wp_register_script",
                        "wrs"
                ],
                "body": "wp_register_script(${1:\\$handle:string},${2:\\$src:string|boolean},${3:\\$deps:array},${4:\\$ver:string|boolean|null},${5:\\$in_footer:boolean} )",
                "description": "Register a new script."
        },
        "ƒ:wp_register_sidebar_widget": {
                "prefix": [
                        "wp_register_sidebar_widget",
                        "wrsw"
                ],
                "body": "wp_register_sidebar_widget(${1:\\$id:integer|string},${2:\\$name:string},${3:\\$output_callback:callable},${4:\\$options:array},${5:\\$params:mixed} )",
                "description": "Register an instance of a widget."
        },
        "ƒ:wp_register_sitemap_provider": {
                "prefix": [
                        "wp_register_sitemap_provider",
                        "wrsp"
                ],
                "body": "wp_register_sitemap_provider(${1:\\$name:string},${2:\\$provider:WP_Sitemaps_Provider} )",
                "description": "Registers a new sitemap provider."
        },
        "ƒ:wp_register_spacing_support": {
                "prefix": [
                        "wp_register_spacing_support",
                        "wrss"
                ],
                "body": "wp_register_spacing_support(${1:\\$block_type:WP_Block_Type} )",
                "description": "Registers the style block attribute for block types that support it."
        },
        "ƒ:wp_register_style": {
                "prefix": [
                        "wp_register_style",
                        "wrs"
                ],
                "body": "wp_register_style(${1:\\$handle:string},${2:\\$src:string|boolean},${3:\\$deps:array},${4:\\$ver:string|boolean|null},${5:\\$media:string} )",
                "description": "Register a CSS stylesheet."
        },
        "ƒ:wp_register_tinymce_scripts": {
                "prefix": [
                        "wp_register_tinymce_scripts",
                        "wrts"
                ],
                "body": "wp_register_tinymce_scripts(${1:\\$scripts:WP_Scripts},${2:\\$force_uncompressed:boolean} )",
                "description": "Registers TinyMCE scripts."
        },
        "ƒ:wp_register_typography_support": {
                "prefix": [
                        "wp_register_typography_support",
                        "wrts"
                ],
                "body": "wp_register_typography_support(${1:\\$block_type:WP_Block_Type} )",
                "description": "Registers the style and typography block attributes for block types that support it."
        },
        "ƒ:wp_register_user_personal_data_exporter": {
                "prefix": [
                        "wp_register_user_personal_data_exporter",
                        "wrupde"
                ],
                "body": "wp_register_user_personal_data_exporter(${1:\\$exporters:array} )",
                "description": "Registers the personal data exporter for users."
        },
        "ƒ:wp_register_widget_control": {
                "prefix": [
                        "wp_register_widget_control",
                        "wrwc"
                ],
                "body": "wp_register_widget_control(${1:\\$id:integer|string},${2:\\$name:string},${3:\\$control_callback:callable},${4:\\$options:array},${5:\\$params:mixed} )",
                "description": "Registers widget control callback for customizing options."
        },
        "ƒ:wp_registration_url": {
                "prefix": [
                        "wp_registration_url",
                        "wru"
                ],
                "body": "wp_registration_url()",
                "description": "Returns the URL that allows the user to register on the site."
        },
        "ƒ:wp_rel_callback": {
                "prefix": [
                        "wp_rel_callback",
                        "wrc"
                ],
                "body": "wp_rel_callback(${1:\\$matches:array},${2:\\$rel:string} )",
                "description": "Callback to add a rel attribute to HTML A element."
        },
        "ƒ:wp_rel_nofollow": {
                "prefix": [
                        "wp_rel_nofollow",
                        "wrn"
                ],
                "body": "wp_rel_nofollow(${1:\\$text:string} )",
                "description": "Adds `rel=&quot;nofollow&quot;` string to all HTML A elements in content."
        },
        "ƒ:wp_rel_nofollow_callback": {
                "prefix": [
                        "wp_rel_nofollow_callback",
                        "wrnc"
                ],
                "body": "wp_rel_nofollow_callback(${1:\\$matches:array} )",
                "description": "Callback to add `rel=&quot;nofollow&quot;` string to HTML A element."
        },
        "ƒ:wp_rel_ugc": {
                "prefix": [
                        "wp_rel_ugc",
                        "wru"
                ],
                "body": "wp_rel_ugc(${1:\\$text:string} )",
                "description": "Adds `rel=&quot;nofollow ugc&quot;` string to all HTML A elements in content."
        },
        "ƒ:wp_remote_fopen": {
                "prefix": [
                        "wp_remote_fopen",
                        "wrf"
                ],
                "body": "wp_remote_fopen(${1:\\$uri:string} )",
                "description": "HTTP request for URI to retrieve content."
        },
        "ƒ:wp_remote_get": {
                "prefix": [
                        "wp_remote_get",
                        "wrg"
                ],
                "body": "wp_remote_get(${1:\\$url:string},${2:\\$args:array} )",
                "description": "Performs an HTTP request using the GET method and returns its response."
        },
        "ƒ:wp_remote_head": {
                "prefix": [
                        "wp_remote_head",
                        "wrh"
                ],
                "body": "wp_remote_head(${1:\\$url:string},${2:\\$args:array} )",
                "description": "Performs an HTTP request using the HEAD method and returns its response."
        },
        "ƒ:wp_remote_post": {
                "prefix": [
                        "wp_remote_post",
                        "wrp"
                ],
                "body": "wp_remote_post(${1:\\$url:string},${2:\\$args:array} )",
                "description": "Performs an HTTP request using the POST method and returns its response."
        },
        "ƒ:wp_remote_request": {
                "prefix": [
                        "wp_remote_request",
                        "wrr"
                ],
                "body": "wp_remote_request(${1:\\$url:string},${2:\\$args:array} )",
                "description": "Performs an HTTP request and returns its response."
        },
        "ƒ:wp_remote_retrieve_body": {
                "prefix": [
                        "wp_remote_retrieve_body",
                        "wrrb"
                ],
                "body": "wp_remote_retrieve_body(${1:\\$response:array|WP_Error} )",
                "description": "Retrieve only the body from the raw response."
        },
        "ƒ:wp_remote_retrieve_cookie": {
                "prefix": [
                        "wp_remote_retrieve_cookie",
                        "wrrc"
                ],
                "body": "wp_remote_retrieve_cookie(${1:\\$response:array|WP_Error},${2:\\$name:string} )",
                "description": "Retrieve a single cookie by name from the raw response."
        },
        "ƒ:wp_remote_retrieve_cookie_value": {
                "prefix": [
                        "wp_remote_retrieve_cookie_value",
                        "wrrcv"
                ],
                "body": "wp_remote_retrieve_cookie_value(${1:\\$response:array|WP_Error},${2:\\$name:string} )",
                "description": "Retrieve a single cookie&#039;s value by name from the raw response."
        },
        "ƒ:wp_remote_retrieve_cookies": {
                "prefix": [
                        "wp_remote_retrieve_cookies",
                        "wrrc"
                ],
                "body": "wp_remote_retrieve_cookies(${1:\\$response:array|WP_Error} )",
                "description": "Retrieve only the cookies from the raw response."
        },
        "ƒ:wp_remote_retrieve_header": {
                "prefix": [
                        "wp_remote_retrieve_header",
                        "wrrh"
                ],
                "body": "wp_remote_retrieve_header(${1:\\$response:array|WP_Error},${2:\\$header:string} )",
                "description": "Retrieve a single header by name from the raw response."
        },
        "ƒ:wp_remote_retrieve_headers": {
                "prefix": [
                        "wp_remote_retrieve_headers",
                        "wrrh"
                ],
                "body": "wp_remote_retrieve_headers(${1:\\$response:array|WP_Error} )",
                "description": "Retrieve only the headers from the raw response."
        },
        "ƒ:wp_remote_retrieve_response_code": {
                "prefix": [
                        "wp_remote_retrieve_response_code",
                        "wrrrc"
                ],
                "body": "wp_remote_retrieve_response_code(${1:\\$response:array|WP_Error} )",
                "description": "Retrieve only the response code from the raw response."
        },
        "ƒ:wp_remote_retrieve_response_message": {
                "prefix": [
                        "wp_remote_retrieve_response_message",
                        "wrrrm"
                ],
                "body": "wp_remote_retrieve_response_message(${1:\\$response:array|WP_Error} )",
                "description": "Retrieve only the response message from the raw response."
        },
        "ƒ:wp_removable_query_args": {
                "prefix": [
                        "wp_removable_query_args",
                        "wrqa"
                ],
                "body": "wp_removable_query_args()",
                "description": "Returns an array of single-use query variable names that can be removed from a URL."
        },
        "ƒ:wp_remove_object_terms": {
                "prefix": [
                        "wp_remove_object_terms",
                        "wrot"
                ],
                "body": "wp_remove_object_terms(${1:\\$object_id:integer},${2:\\$terms:string|integer|array},${3:\\$taxonomy:string} )",
                "description": "Removes term(s) associated with a given object."
        },
        "ƒ:wp_remove_targeted_link_rel_filters": {
                "prefix": [
                        "wp_remove_targeted_link_rel_filters",
                        "wrtlrf"
                ],
                "body": "wp_remove_targeted_link_rel_filters()",
                "description": "Removes all filters modifying the rel attribute of targeted links."
        },
        "ƒ:wp_render_duotone_filter_preset": {
                "prefix": [
                        "wp_render_duotone_filter_preset",
                        "wrdfp"
                ],
                "body": "wp_render_duotone_filter_preset(${1:\\$preset:array} )",
                "description": "Renders the duotone filter SVG and returns the CSS filter property to reference the rendered SVG."
        },
        "ƒ:wp_render_duotone_support": {
                "prefix": [
                        "wp_render_duotone_support",
                        "wrds"
                ],
                "body": "wp_render_duotone_support(${1:\\$block_content:string},${2:\\$block:array} )",
                "description": "Render out the duotone stylesheet and SVG."
        },
        "ƒ:wp_render_elements_support": {
                "prefix": [
                        "wp_render_elements_support",
                        "wres"
                ],
                "body": "wp_render_elements_support(${1:\\$block_content:string},${2:\\$block:array} )",
                "description": "Update the block content with elements class names."
        },
        "ƒ:wp_render_elements_support_styles": {
                "prefix": [
                        "wp_render_elements_support_styles",
                        "wress"
                ],
                "body": "wp_render_elements_support_styles(${1:\\$pre_render:string|null},${2:\\$block:array} )",
                "description": "Render the elements stylesheet."
        },
        "ƒ:wp_render_layout_support_flag": {
                "prefix": [
                        "wp_render_layout_support_flag",
                        "wrlsf"
                ],
                "body": "wp_render_layout_support_flag(${1:\\$block_content:string},${2:\\$block:array} )",
                "description": "Renders the layout config to the block wrapper."
        },
        "ƒ:wp_render_widget": {
                "prefix": [
                        "wp_render_widget",
                        "wrw"
                ],
                "body": "wp_render_widget(${1:\\$widget_id:string},${2:\\$sidebar_id:string} )",
                "description": "Calls the render callback of a widget and returns the output."
        },
        "ƒ:wp_render_widget_control": {
                "prefix": [
                        "wp_render_widget_control",
                        "wrwc"
                ],
                "body": "wp_render_widget_control(${1:\\$id:string} )",
                "description": "Calls the control callback of a widget and returns the output."
        },
        "ƒ:wp_replace_in_html_tags": {
                "prefix": [
                        "wp_replace_in_html_tags",
                        "wriht"
                ],
                "body": "wp_replace_in_html_tags(${1:\\$haystack:string},${2:\\$replace_pairs:array} )",
                "description": "Replaces characters or phrases within HTML elements only."
        },
        "ƒ:wp_replace_insecure_home_url": {
                "prefix": [
                        "wp_replace_insecure_home_url",
                        "wrihu"
                ],
                "body": "wp_replace_insecure_home_url(${1:\\$content:string} )",
                "description": "Replaces insecure HTTP URLs to the site in the given content, if configured to do so."
        },
        "ƒ:wp_reschedule_event": {
                "prefix": [
                        "wp_reschedule_event",
                        "wre"
                ],
                "body": "wp_reschedule_event(${1:\\$timestamp:integer},${2:\\$recurrence:string},${3:\\$hook:string},${4:\\$args:array},${5:\\$wp_error:boolean} )",
                "description": "Reschedules a recurring event."
        },
        "ƒ:wp_reset_postdata": {
                "prefix": [
                        "wp_reset_postdata",
                        "wrp"
                ],
                "body": "wp_reset_postdata()",
                "description": "After looping through a separate query, this function restores the $post global to the current post in the main query."
        },
        "ƒ:wp_reset_query": {
                "prefix": [
                        "wp_reset_query",
                        "wrq"
                ],
                "body": "wp_reset_query()",
                "description": "Destroys the previous query and sets up a new query."
        },
        "ƒ:wp_reset_vars": {
                "prefix": [
                        "wp_reset_vars",
                        "wrv"
                ],
                "body": "wp_reset_vars(${1:\\$vars:array} )",
                "description": "Resets global variables based on $_GET and $_POST."
        },
        "ƒ:wp_resolve_numeric_slug_conflicts": {
                "prefix": [
                        "wp_resolve_numeric_slug_conflicts",
                        "wrnsc"
                ],
                "body": "wp_resolve_numeric_slug_conflicts(${1:\\$query_vars:array} )",
                "description": "Resolves numeric slugs that collide with date permalinks."
        },
        "ƒ:wp_resolve_post_date": {
                "prefix": [
                        "wp_resolve_post_date",
                        "wrpd"
                ],
                "body": "wp_resolve_post_date(${1:\\$post_date:string},${2:\\$post_date_gmt:string} )",
                "description": "Uses wp_checkdate to return a valid Gregorian-calendar value for post_date."
        },
        "ƒ:wp_resource_hints": {
                "prefix": [
                        "wp_resource_hints",
                        "wrh"
                ],
                "body": "wp_resource_hints()",
                "description": "Prints resource hints to browsers for pre-fetching, pre-rendering and pre-connecting to web sites."
        },
        "ƒ:wp_restore_group_inner_container": {
                "prefix": [
                        "wp_restore_group_inner_container",
                        "wrgic"
                ],
                "body": "wp_restore_group_inner_container(${1:\\$block_content:string},${2:\\$block:array} )",
                "description": "For themes without theme.json file, make sure to restore the inner div for the group block to avoid breaking styles relying on that div."
        },
        "ƒ:wp_restore_image": {
                "prefix": [
                        "wp_restore_image",
                        "wri"
                ],
                "body": "wp_restore_image(${1:\\$post_id:integer} )",
                "description": "Restores the metadata for a given attachment."
        },
        "ƒ:wp_restore_image_outer_container": {
                "prefix": [
                        "wp_restore_image_outer_container",
                        "wrioc"
                ],
                "body": "wp_restore_image_outer_container(${1:\\$block_content:string},${2:\\$block:array} )",
                "description": "For themes without theme.json file, make sure to restore the outer div for the aligned image block to avoid breaking styles relying on that div."
        },
        "ƒ:wp_restore_post_revision": {
                "prefix": [
                        "wp_restore_post_revision",
                        "wrpr"
                ],
                "body": "wp_restore_post_revision(${1:\\$revision_id:integer|WP_Post},${2:\\$fields:array|null} )",
                "description": "Restores a post to the specified revision."
        },
        "ƒ:wp_revisions_enabled": {
                "prefix": [
                        "wp_revisions_enabled",
                        "wre"
                ],
                "body": "wp_revisions_enabled(${1:\\$post:WP_Post} )",
                "description": "Determine if revisions are enabled for a given post."
        },
        "ƒ:wp_revisions_to_keep": {
                "prefix": [
                        "wp_revisions_to_keep",
                        "wrtk"
                ],
                "body": "wp_revisions_to_keep(${1:\\$post:WP_Post} )",
                "description": "Determine how many revisions to retain for a given post."
        },
        "ƒ:wp_revoke_user": {
                "prefix": [
                        "wp_revoke_user",
                        "wru"
                ],
                "body": "wp_revoke_user(${1:\\$id:integer} )",
                "description": "Remove all capabilities from user."
        },
        "ƒ:wp_richedit_pre": {
                "prefix": [
                        "wp_richedit_pre",
                        "wrp"
                ],
                "body": "wp_richedit_pre(${1:\\$text:string} )",
                "description": "Formats text for the rich text editor."
        },
        "ƒ:wp_robots": {
                "prefix": [
                        "wp_robots",
                        "wr"
                ],
                "body": "wp_robots()",
                "description": "Displays the robots meta tag as necessary."
        },
        "ƒ:wp_robots_max_image_preview_large": {
                "prefix": [
                        "wp_robots_max_image_preview_large",
                        "wrmipl"
                ],
                "body": "wp_robots_max_image_preview_large(${1:\\$robots:array} )",
                "description": "Adds `max-image-preview:large` to the robots meta tag."
        },
        "ƒ:wp_robots_no_robots": {
                "prefix": [
                        "wp_robots_no_robots",
                        "wrnr"
                ],
                "body": "wp_robots_no_robots(${1:\\$robots:array} )",
                "description": "Adds `noindex` to the robots meta tag."
        },
        "ƒ:wp_robots_noindex": {
                "prefix": [
                        "wp_robots_noindex",
                        "wrn"
                ],
                "body": "wp_robots_noindex(${1:\\$robots:array} )",
                "description": "Adds `noindex` to the robots meta tag if required by the site configuration."
        },
        "ƒ:wp_robots_noindex_embeds": {
                "prefix": [
                        "wp_robots_noindex_embeds",
                        "wrne"
                ],
                "body": "wp_robots_noindex_embeds(${1:\\$robots:array} )",
                "description": "Adds `noindex` to the robots meta tag for embeds."
        },
        "ƒ:wp_robots_noindex_search": {
                "prefix": [
                        "wp_robots_noindex_search",
                        "wrns"
                ],
                "body": "wp_robots_noindex_search(${1:\\$robots:array} )",
                "description": "Adds `noindex` to the robots meta tag if a search is being performed."
        },
        "ƒ:wp_robots_sensitive_page": {
                "prefix": [
                        "wp_robots_sensitive_page",
                        "wrsp"
                ],
                "body": "wp_robots_sensitive_page(${1:\\$robots:array} )",
                "description": "Adds `noindex` and `noarchive` to the robots meta tag."
        },
        "ƒ:wp_roles": {
                "prefix": [
                        "wp_roles",
                        "wr"
                ],
                "body": "wp_roles()",
                "description": "Retrieves the global WP_Roles instance and instantiates it if necessary."
        },
        "ƒ:wp_rss": {
                "prefix": [
                        "wp_rss",
                        "wr"
                ],
                "body": "wp_rss(${1:\\$url:string},${2:\\$num_items:integer} )",
                "description": "Display all RSS items in a HTML ordered list."
        },
        "ƒ:wp_safe_redirect": {
                "prefix": [
                        "wp_safe_redirect",
                        "wsr"
                ],
                "body": "wp_safe_redirect(${1:\\$location:string},${2:\\$status:integer},${3:\\$x_redirect_by:string} )",
                "description": "Performs a safe (local) redirect, using wp_redirect()."
        },
        "ƒ:wp_safe_remote_get": {
                "prefix": [
                        "wp_safe_remote_get",
                        "wsrg"
                ],
                "body": "wp_safe_remote_get(${1:\\$url:string},${2:\\$args:array} )",
                "description": "Retrieve the raw response from a safe HTTP request using the GET method."
        },
        "ƒ:wp_safe_remote_head": {
                "prefix": [
                        "wp_safe_remote_head",
                        "wsrh"
                ],
                "body": "wp_safe_remote_head(${1:\\$url:string},${2:\\$args:array} )",
                "description": "Retrieve the raw response from a safe HTTP request using the HEAD method."
        },
        "ƒ:wp_safe_remote_post": {
                "prefix": [
                        "wp_safe_remote_post",
                        "wsrp"
                ],
                "body": "wp_safe_remote_post(${1:\\$url:string},${2:\\$args:array} )",
                "description": "Retrieve the raw response from a safe HTTP request using the POST method."
        },
        "ƒ:wp_safe_remote_request": {
                "prefix": [
                        "wp_safe_remote_request",
                        "wsrr"
                ],
                "body": "wp_safe_remote_request(${1:\\$url:string},${2:\\$args:array} )",
                "description": "Retrieve the raw response from a safe HTTP request."
        },
        "ƒ:wp_salt": {
                "prefix": [
                        "wp_salt",
                        "ws"
                ],
                "body": "wp_salt(${1:\\$scheme:string} )",
                "description": "Returns a salt to add to hashes."
        },
        "ƒ:wp_sanitize_redirect": {
                "prefix": [
                        "wp_sanitize_redirect",
                        "wsr"
                ],
                "body": "wp_sanitize_redirect(${1:\\$location:string} )",
                "description": "Sanitizes a URL for use in a redirect."
        },
        "ƒ:wp_sanitize_script_attributes": {
                "prefix": [
                        "wp_sanitize_script_attributes",
                        "wssa"
                ],
                "body": "wp_sanitize_script_attributes(${1:\\$attributes:array} )",
                "description": "Sanitizes an attributes array into an attributes string to be placed inside a `&lt;script&gt;` tag."
        },
        "ƒ:wp_save_image": {
                "prefix": [
                        "wp_save_image",
                        "wsi"
                ],
                "body": "wp_save_image(${1:\\$post_id:integer} )",
                "description": "Saves image to post, along with enqueued changes in `$_REQUEST[&#039;history&#039;]`."
        },
        "ƒ:wp_save_image_file": {
                "prefix": [
                        "wp_save_image_file",
                        "wsif"
                ],
                "body": "wp_save_image_file(${1:\\$filename:string},${2:\\$image:WP_Image_Editor},${3:\\$mime_type:string},${4:\\$post_id:integer} )",
                "description": "Saves image to file."
        },
        "ƒ:wp_save_nav_menu_items": {
                "prefix": [
                        "wp_save_nav_menu_items",
                        "wsnmi"
                ],
                "body": "wp_save_nav_menu_items(${1:\\$menu_id:integer},${2:\\$menu_data:array} )",
                "description": "Save posted nav menu item data."
        },
        "ƒ:wp_save_post_revision": {
                "prefix": [
                        "wp_save_post_revision",
                        "wspr"
                ],
                "body": "wp_save_post_revision(${1:\\$post_id:integer} )",
                "description": "Creates a revision for the current version of a post."
        },
        "ƒ:wp_schedule_delete_old_privacy_export_files": {
                "prefix": [
                        "wp_schedule_delete_old_privacy_export_files",
                        "wsdopef"
                ],
                "body": "wp_schedule_delete_old_privacy_export_files()",
                "description": "Schedule a `WP_Cron` job to delete expired export files."
        },
        "ƒ:wp_schedule_event": {
                "prefix": [
                        "wp_schedule_event",
                        "wse"
                ],
                "body": "wp_schedule_event(${1:\\$timestamp:integer},${2:\\$recurrence:string},${3:\\$hook:string},${4:\\$args:array},${5:\\$wp_error:boolean} )",
                "description": "Schedules a recurring event."
        },
        "ƒ:wp_schedule_https_detection": {
                "prefix": [
                        "wp_schedule_https_detection",
                        "wshd"
                ],
                "body": "wp_schedule_https_detection()",
                "description": "Schedules the Cron hook for detecting HTTPS support."
        },
        "ƒ:wp_schedule_single_event": {
                "prefix": [
                        "wp_schedule_single_event",
                        "wsse"
                ],
                "body": "wp_schedule_single_event(${1:\\$timestamp:integer},${2:\\$hook:string},${3:\\$args:array},${4:\\$wp_error:boolean} )",
                "description": "Schedules an event to run only once."
        },
        "ƒ:wp_schedule_update_checks": {
                "prefix": [
                        "wp_schedule_update_checks",
                        "wsuc"
                ],
                "body": "wp_schedule_update_checks()",
                "description": "Schedule core, theme, and plugin update checks."
        },
        "ƒ:wp_schedule_update_network_counts": {
                "prefix": [
                        "wp_schedule_update_network_counts",
                        "wsunc"
                ],
                "body": "wp_schedule_update_network_counts()",
                "description": "Schedules update of the network-wide counts for the current network."
        },
        "ƒ:wp_schedule_update_user_counts": {
                "prefix": [
                        "wp_schedule_update_user_counts",
                        "wsuuc"
                ],
                "body": "wp_schedule_update_user_counts()",
                "description": "Schedules a recurring recalculation of the total count of users."
        },
        "ƒ:wp_scheduled_delete": {
                "prefix": [
                        "wp_scheduled_delete",
                        "wsd"
                ],
                "body": "wp_scheduled_delete()",
                "description": "Permanently delete comments or posts of any type that have held a status of &#039;trash&#039; for the number of days defined in EMPTY_TRASH_DAYS."
        },
        "ƒ:wp_script_add_data": {
                "prefix": [
                        "wp_script_add_data",
                        "wsad"
                ],
                "body": "wp_script_add_data(${1:\\$handle:string},${2:\\$key:string},${3:\\$value:mixed} )",
                "description": "Add metadata to a script."
        },
        "ƒ:wp_script_is": {
                "prefix": [
                        "wp_script_is",
                        "wsi"
                ],
                "body": "wp_script_is(${1:\\$handle:string},${2:\\$list:string} )",
                "description": "Determines whether a script has been added to the queue."
        },
        "ƒ:wp_scripts": {
                "prefix": [
                        "wp_scripts",
                        "ws"
                ],
                "body": "wp_scripts()",
                "description": "Initialize $wp_scripts if it has not been set."
        },
        "ƒ:wp_scripts_get_suffix": {
                "prefix": [
                        "wp_scripts_get_suffix",
                        "wsgs"
                ],
                "body": "wp_scripts_get_suffix(${1:\\$type:string} )",
                "description": "Returns the suffix that can be used for the scripts."
        },
        "ƒ:wp_send_json": {
                "prefix": [
                        "wp_send_json",
                        "wsj"
                ],
                "body": "wp_send_json(${1:\\$response:mixed},${2:\\$status_code:integer|null},${3:\\$options:integer} )",
                "description": "Send a JSON response back to an Ajax request."
        },
        "ƒ:wp_send_json_error": {
                "prefix": [
                        "wp_send_json_error",
                        "wsje"
                ],
                "body": "wp_send_json_error(${1:\\$data:mixed|null},${2:\\$status_code:integer|null},${3:\\$options:integer} )",
                "description": "Send a JSON response back to an Ajax request, indicating failure."
        },
        "ƒ:wp_send_json_success": {
                "prefix": [
                        "wp_send_json_success",
                        "wsjs"
                ],
                "body": "wp_send_json_success(${1:\\$data:mixed|null},${2:\\$status_code:integer|null},${3:\\$options:integer} )",
                "description": "Send a JSON response back to an Ajax request, indicating success."
        },
        "ƒ:wp_send_new_user_notifications": {
                "prefix": [
                        "wp_send_new_user_notifications",
                        "wsnun"
                ],
                "body": "wp_send_new_user_notifications(${1:\\$user_id:integer},${2:\\$notify:string} )",
                "description": "Initiates email notifications related to the creation of new users."
        },
        "ƒ:wp_send_user_request": {
                "prefix": [
                        "wp_send_user_request",
                        "wsur"
                ],
                "body": "wp_send_user_request(${1:\\$request_id:string} )",
                "description": "Send a confirmation request email to confirm an action."
        },
        "ƒ:wp_sensitive_page_meta": {
                "prefix": [
                        "wp_sensitive_page_meta",
                        "wspm"
                ],
                "body": "wp_sensitive_page_meta()",
                "description": "Display a `noindex,noarchive` meta tag and referrer `strict-origin-when-cross-origin` meta tag."
        },
        "ƒ:wp_set_all_user_settings": {
                "prefix": [
                        "wp_set_all_user_settings",
                        "wsaus"
                ],
                "body": "wp_set_all_user_settings(${1:\\$user_settings:array} )",
                "description": "Private. Sets all user interface settings."
        },
        "ƒ:wp_set_auth_cookie": {
                "prefix": [
                        "wp_set_auth_cookie",
                        "wsac"
                ],
                "body": "wp_set_auth_cookie(${1:\\$user_id:integer},${2:\\$remember:boolean},${3:\\$secure:boolean|string},${4:\\$token:string} )",
                "description": "Sets the authentication cookies based on user ID."
        },
        "ƒ:wp_set_comment_cookies": {
                "prefix": [
                        "wp_set_comment_cookies",
                        "wscc"
                ],
                "body": "wp_set_comment_cookies(${1:\\$comment:WP_Comment},${2:\\$user:WP_User},${3:\\$cookies_consent:boolean} )",
                "description": "Sets the cookies used to store an unauthenticated commentator&#039;s identity. Typically used to recall previous comments by this commentator that are still held in moderation."
        },
        "ƒ:wp_set_comment_status": {
                "prefix": [
                        "wp_set_comment_status",
                        "wscs"
                ],
                "body": "wp_set_comment_status(${1:\\$comment_id:integer|WP_Comment},${2:\\$comment_status:string},${3:\\$wp_error:boolean} )",
                "description": "Sets the status of a comment."
        },
        "ƒ:wp_set_current_user": {
                "prefix": [
                        "wp_set_current_user",
                        "wscu"
                ],
                "body": "wp_set_current_user(${1:\\$id:integer|null},${2:\\$name:string} )",
                "description": "Changes the current user by ID or name."
        },
        "ƒ:wp_set_internal_encoding": {
                "prefix": [
                        "wp_set_internal_encoding",
                        "wsie"
                ],
                "body": "wp_set_internal_encoding()",
                "description": "Set internal encoding."
        },
        "ƒ:wp_set_lang_dir": {
                "prefix": [
                        "wp_set_lang_dir",
                        "wsld"
                ],
                "body": "wp_set_lang_dir()",
                "description": "Set the location of the language directory."
        },
        "ƒ:wp_set_link_cats": {
                "prefix": [
                        "wp_set_link_cats",
                        "wslc"
                ],
                "body": "wp_set_link_cats(${1:\\$link_id:integer},${2:\\$link_categories:array} )",
                "description": "Update link with the specified link categories."
        },
        "ƒ:wp_set_object_terms": {
                "prefix": [
                        "wp_set_object_terms",
                        "wsot"
                ],
                "body": "wp_set_object_terms(${1:\\$object_id:integer},${2:\\$terms:string|integer|array},${3:\\$taxonomy:string},${4:\\$append:boolean} )",
                "description": "Creates term and taxonomy relationships."
        },
        "ƒ:wp_set_password": {
                "prefix": [
                        "wp_set_password",
                        "wsp"
                ],
                "body": "wp_set_password(${1:\\$password:string},${2:\\$user_id:integer} )",
                "description": "Updates the user&#039;s password with a new encrypted one."
        },
        "ƒ:wp_set_post_categories": {
                "prefix": [
                        "wp_set_post_categories",
                        "wspc"
                ],
                "body": "wp_set_post_categories(${1:\\$post_ID:integer},${2:\\$post_categories:array|integer},${3:\\$append:boolean} )",
                "description": "Set categories for a post."
        },
        "ƒ:wp_set_post_cats": {
                "prefix": [
                        "wp_set_post_cats",
                        "wspc"
                ],
                "body": "wp_set_post_cats(${1:\\$blogid:integer},${2:\\$post_ID:integer},${3:\\$post_categories:array} )",
                "description": "Sets the categories that the post ID belongs to."
        },
        "ƒ:wp_set_post_lock": {
                "prefix": [
                        "wp_set_post_lock",
                        "wspl"
                ],
                "body": "wp_set_post_lock(${1:\\$post_id:integer|WP_Post} )",
                "description": "Marks the post as currently being edited by the current user."
        },
        "ƒ:wp_set_post_tags": {
                "prefix": [
                        "wp_set_post_tags",
                        "wspt"
                ],
                "body": "wp_set_post_tags(${1:\\$post_id:integer},${2:\\$tags:string|array},${3:\\$append:boolean} )",
                "description": "Set the tags for a post."
        },
        "ƒ:wp_set_post_terms": {
                "prefix": [
                        "wp_set_post_terms",
                        "wspt"
                ],
                "body": "wp_set_post_terms(${1:\\$post_id:integer},${2:\\$tags:string|array},${3:\\$taxonomy:string},${4:\\$append:boolean} )",
                "description": "Set the terms for a post."
        },
        "ƒ:wp_set_script_translations": {
                "prefix": [
                        "wp_set_script_translations",
                        "wsst"
                ],
                "body": "wp_set_script_translations(${1:\\$handle:string},${2:\\$domain:string},${3:\\$path:string|null} )",
                "description": "Sets translated strings for a script."
        },
        "ƒ:wp_set_sidebars_widgets": {
                "prefix": [
                        "wp_set_sidebars_widgets",
                        "wssw"
                ],
                "body": "wp_set_sidebars_widgets(${1:\\$sidebars_widgets:array} )",
                "description": "Set the sidebar widget option to update sidebars."
        },
        "ƒ:wp_set_unique_slug_on_create_template_part": {
                "prefix": [
                        "wp_set_unique_slug_on_create_template_part",
                        "wsusoctp"
                ],
                "body": "wp_set_unique_slug_on_create_template_part(${1:\\$post_id:integer} )",
                "description": "Sets a custom slug when creating auto-draft template parts."
        },
        "ƒ:wp_set_wpdb_vars": {
                "prefix": [
                        "wp_set_wpdb_vars",
                        "wswv"
                ],
                "body": "wp_set_wpdb_vars()",
                "description": "Set the database table prefix and the format specifiers for database table columns."
        },
        "ƒ:wp_setcookie": {
                "prefix": [
                        "wp_setcookie",
                        "ws"
                ],
                "body": "wp_setcookie(${1:\\$username:string},${2:\\$password:string},${3:\\$already_md5:boolean},${4:\\$home:string},${5:\\$siteurl:string},${6:\\$remember:boolean} )",
                "description": "Sets a cookie for a user who just logged in. This function is deprecated."
        },
        "ƒ:wp_setup_nav_menu_item": {
                "prefix": [
                        "wp_setup_nav_menu_item",
                        "wsnmi"
                ],
                "body": "wp_setup_nav_menu_item(${1:\\$menu_item:object} )",
                "description": "Decorates a menu item object with the shared navigation menu item properties."
        },
        "ƒ:wp_setup_widgets_block_editor": {
                "prefix": [
                        "wp_setup_widgets_block_editor",
                        "wswbe"
                ],
                "body": "wp_setup_widgets_block_editor()",
                "description": "Enables the widgets block editor. This is hooked into &#039;after_setup_theme&#039; so that the block editor is enabled by default but can be disabled by themes."
        },
        "ƒ:wp_shake_js": {
                "prefix": [
                        "wp_shake_js",
                        "wsj"
                ],
                "body": "wp_shake_js()",
                "description": "Outputs the JavaScript to handle the form shaking on the login page."
        },
        "ƒ:wp_shortlink_header": {
                "prefix": [
                        "wp_shortlink_header",
                        "wsh"
                ],
                "body": "wp_shortlink_header()",
                "description": "Sends a Link: rel=shortlink header if a shortlink is defined for the current page."
        },
        "ƒ:wp_shortlink_wp_head": {
                "prefix": [
                        "wp_shortlink_wp_head",
                        "wswh"
                ],
                "body": "wp_shortlink_wp_head()",
                "description": "Injects rel=shortlink into the head if a shortlink is defined for the current page."
        },
        "ƒ:wp_should_load_block_editor_scripts_and_styles": {
                "prefix": [
                        "wp_should_load_block_editor_scripts_and_styles",
                        "wslbesas"
                ],
                "body": "wp_should_load_block_editor_scripts_and_styles()",
                "description": "Checks if the editor scripts and styles for all registered block types should be enqueued on the current screen."
        },
        "ƒ:wp_should_load_separate_core_block_assets": {
                "prefix": [
                        "wp_should_load_separate_core_block_assets",
                        "wslscba"
                ],
                "body": "wp_should_load_separate_core_block_assets()",
                "description": "Checks whether separate styles should be loaded for core blocks on-render."
        },
        "ƒ:wp_should_replace_insecure_home_url": {
                "prefix": [
                        "wp_should_replace_insecure_home_url",
                        "wsrihu"
                ],
                "body": "wp_should_replace_insecure_home_url()",
                "description": "Checks whether WordPress should replace old HTTP URLs to the site with their HTTPS counterpart."
        },
        "ƒ:wp_should_skip_block_supports_serialization": {
                "prefix": [
                        "wp_should_skip_block_supports_serialization",
                        "wssbss"
                ],
                "body": "wp_should_skip_block_supports_serialization(${1:\\$block_type:WP_Block_Type},${2:\\$feature_set:string},${3:\\$feature:string|null} )",
                "description": "Checks whether serialization of the current block&#039;s supported properties should occur."
        },
        "ƒ:wp_should_upgrade_global_tables": {
                "prefix": [
                        "wp_should_upgrade_global_tables",
                        "wsugt"
                ],
                "body": "wp_should_upgrade_global_tables()",
                "description": "Determine if global tables should be upgraded."
        },
        "ƒ:wp_show_heic_upload_error": {
                "prefix": [
                        "wp_show_heic_upload_error",
                        "wshue"
                ],
                "body": "wp_show_heic_upload_error(${1:\\$plupload_settings:array} )",
                "description": "Callback to enable showing of the user error when uploading .heic images."
        },
        "ƒ:wp_shrink_dimensions": {
                "prefix": [
                        "wp_shrink_dimensions",
                        "wsd"
                ],
                "body": "wp_shrink_dimensions(${1:\\$width:integer},${2:\\$height:integer},${3:\\$wmax:integer},${4:\\$hmax:integer} )",
                "description": "Calculates the new dimensions for a downsampled image."
        },
        "ƒ:wp_sidebar_description": {
                "prefix": [
                        "wp_sidebar_description",
                        "wsd"
                ],
                "body": "wp_sidebar_description(${1:\\$id:string} )",
                "description": "Retrieve description for a sidebar."
        },
        "ƒ:wp_signon": {
                "prefix": [
                        "wp_signon",
                        "ws"
                ],
                "body": "wp_signon(${1:\\$credentials:array},${2:\\$secure_cookie:string|boolean} )",
                "description": "Authenticates and logs a user in with &#039;remember&#039; capability."
        },
        "ƒ:wp_simplepie_autoload": {
                "prefix": [
                        "wp_simplepie_autoload",
                        "wsa"
                ],
                "body": "wp_simplepie_autoload(${1:\\$class:} )",
                "description": "WordPress autoloader for SimplePie."
        },
        "ƒ:wp_site_admin_email_change_notification": {
                "prefix": [
                        "wp_site_admin_email_change_notification",
                        "wsaecn"
                ],
                "body": "wp_site_admin_email_change_notification(${1:\\$old_email:string},${2:\\$new_email:string},${3:\\$option_name:string} )",
                "description": "Send an email to the old site admin email address when the site admin email address changes."
        },
        "ƒ:wp_site_icon": {
                "prefix": [
                        "wp_site_icon",
                        "wsi"
                ],
                "body": "wp_site_icon()",
                "description": "Display site icon meta tags."
        },
        "ƒ:wp_sitemaps_get_max_urls": {
                "prefix": [
                        "wp_sitemaps_get_max_urls",
                        "wsgmu"
                ],
                "body": "wp_sitemaps_get_max_urls(${1:\\$object_type:string} )",
                "description": "Gets the maximum number of URLs for a sitemap."
        },
        "ƒ:wp_sitemaps_get_server": {
                "prefix": [
                        "wp_sitemaps_get_server",
                        "wsgs"
                ],
                "body": "wp_sitemaps_get_server()",
                "description": "Retrieves the current Sitemaps server instance."
        },
        "ƒ:wp_skip_border_serialization": {
                "prefix": [
                        "wp_skip_border_serialization",
                        "wsbs"
                ],
                "body": "wp_skip_border_serialization(${1:\\$block_type:WP_Block_Type} )",
                "description": "Checks whether serialization of the current block&#039;s border properties should occur."
        },
        "ƒ:wp_skip_dimensions_serialization": {
                "prefix": [
                        "wp_skip_dimensions_serialization",
                        "wsds"
                ],
                "body": "wp_skip_dimensions_serialization(${1:\\$block_type:WP_Block_type} )",
                "description": "Checks whether serialization of the current block&#039;s dimensions properties should occur."
        },
        "ƒ:wp_skip_paused_plugins": {
                "prefix": [
                        "wp_skip_paused_plugins",
                        "wspp"
                ],
                "body": "wp_skip_paused_plugins(${1:\\$plugins:array} )",
                "description": "Filters a given list of plugins, removing any paused plugins from it."
        },
        "ƒ:wp_skip_paused_themes": {
                "prefix": [
                        "wp_skip_paused_themes",
                        "wspt"
                ],
                "body": "wp_skip_paused_themes(${1:\\$themes:array} )",
                "description": "Filters a given list of themes, removing any paused themes from it."
        },
        "ƒ:wp_skip_spacing_serialization": {
                "prefix": [
                        "wp_skip_spacing_serialization",
                        "wsss"
                ],
                "body": "wp_skip_spacing_serialization(${1:\\$block_type:WP_Block_Type} )",
                "description": "Checks whether serialization of the current block&#039;s spacing properties should occur."
        },
        "ƒ:wp_slash": {
                "prefix": [
                        "wp_slash",
                        "ws"
                ],
                "body": "wp_slash(${1:\\$value:string|array} )",
                "description": "Adds slashes to a string or recursively adds slashes to strings within an array."
        },
        "ƒ:wp_slash_strings_only": {
                "prefix": [
                        "wp_slash_strings_only",
                        "wsso"
                ],
                "body": "wp_slash_strings_only(${1:\\$value:mixed} )",
                "description": "Adds slashes to only string values in an array of values."
        },
        "ƒ:wp_spaces_regexp": {
                "prefix": [
                        "wp_spaces_regexp",
                        "wsr"
                ],
                "body": "wp_spaces_regexp()",
                "description": "Returns the regexp for common whitespace characters."
        },
        "ƒ:wp_spam_comment": {
                "prefix": [
                        "wp_spam_comment",
                        "wsc"
                ],
                "body": "wp_spam_comment(${1:\\$comment_id:integer|WP_Comment} )",
                "description": "Marks a comment as Spam."
        },
        "ƒ:wp_specialchars": {
                "prefix": [
                        "wp_specialchars",
                        "ws"
                ],
                "body": "wp_specialchars(${1:\\$text:string},${2:\\$quote_style:string},${3:\\$charset:false|string},${4:\\$double_encode:false} )",
                "description": "Legacy escaping for HTML blocks."
        },
        "ƒ:wp_specialchars_decode": {
                "prefix": [
                        "wp_specialchars_decode",
                        "wsd"
                ],
                "body": "wp_specialchars_decode(${1:\\$string:string},${2:\\$quote_style:string|integer} )",
                "description": "Converts a number of HTML entities into their special characters."
        },
        "ƒ:wp_sprintf": {
                "prefix": [
                        "wp_sprintf",
                        "ws"
                ],
                "body": "wp_sprintf(${1:\\$pattern:string},${2:\\$args:mixed} )",
                "description": "WordPress implementation of PHP sprintf() with filters."
        },
        "ƒ:wp_sprintf_l": {
                "prefix": [
                        "wp_sprintf_l",
                        "wsl"
                ],
                "body": "wp_sprintf_l(${1:\\$pattern:string},${2:\\$args:array} )",
                "description": "Localizes list items before the rest of the content."
        },
        "ƒ:wp_ssl_constants": {
                "prefix": [
                        "wp_ssl_constants",
                        "wsc"
                ],
                "body": "wp_ssl_constants()",
                "description": "Defines SSL-related WordPress constants."
        },
        "ƒ:wp_star_rating": {
                "prefix": [
                        "wp_star_rating",
                        "wsr"
                ],
                "body": "wp_star_rating(${1:\\$args:array} )",
                "description": "Outputs a HTML element with a star rating for a given rating."
        },
        "ƒ:wp_start_object_cache": {
                "prefix": [
                        "wp_start_object_cache",
                        "wsoc"
                ],
                "body": "wp_start_object_cache()",
                "description": "Start the WordPress object cache."
        },
        "ƒ:wp_start_scraping_edited_file_errors": {
                "prefix": [
                        "wp_start_scraping_edited_file_errors",
                        "wssefe"
                ],
                "body": "wp_start_scraping_edited_file_errors()",
                "description": "Start scraping edited file errors."
        },
        "ƒ:wp_staticize_emoji": {
                "prefix": [
                        "wp_staticize_emoji",
                        "wse"
                ],
                "body": "wp_staticize_emoji(${1:\\$text:string} )",
                "description": "Converts emoji to a static img element."
        },
        "ƒ:wp_staticize_emoji_for_email": {
                "prefix": [
                        "wp_staticize_emoji_for_email",
                        "wsefe"
                ],
                "body": "wp_staticize_emoji_for_email(${1:\\$mail:array} )",
                "description": "Converts emoji in emails into static images."
        },
        "ƒ:wp_stream_image": {
                "prefix": [
                        "wp_stream_image",
                        "wsi"
                ],
                "body": "wp_stream_image(${1:\\$image:WP_Image_Editor},${2:\\$mime_type:string},${3:\\$attachment_id:integer} )",
                "description": "Streams image in WP_Image_Editor to browser."
        },
        "ƒ:wp_strict_cross_origin_referrer": {
                "prefix": [
                        "wp_strict_cross_origin_referrer",
                        "wscor"
                ],
                "body": "wp_strict_cross_origin_referrer()",
                "description": "Displays a referrer `strict-origin-when-cross-origin` meta tag."
        },
        "ƒ:wp_strip_all_tags": {
                "prefix": [
                        "wp_strip_all_tags",
                        "wsat"
                ],
                "body": "wp_strip_all_tags(${1:\\$string:string},${2:\\$remove_breaks:boolean} )",
                "description": "Properly strips all HTML tags including script and style"
        },
        "ƒ:wp_style_add_data": {
                "prefix": [
                        "wp_style_add_data",
                        "wsad"
                ],
                "body": "wp_style_add_data(${1:\\$handle:string},${2:\\$key:string},${3:\\$value:mixed} )",
                "description": "Add metadata to a CSS stylesheet."
        },
        "ƒ:wp_style_is": {
                "prefix": [
                        "wp_style_is",
                        "wsi"
                ],
                "body": "wp_style_is(${1:\\$handle:string},${2:\\$list:string} )",
                "description": "Check whether a CSS stylesheet has been added to the queue."
        },
        "ƒ:wp_style_loader_src": {
                "prefix": [
                        "wp_style_loader_src",
                        "wsls"
                ],
                "body": "wp_style_loader_src(${1:\\$src:string},${2:\\$handle:string} )",
                "description": "Administration Screen CSS for changing the styles."
        },
        "ƒ:wp_styles": {
                "prefix": [
                        "wp_styles",
                        "ws"
                ],
                "body": "wp_styles()",
                "description": "Initialize $wp_styles if it has not been set."
        },
        "ƒ:wp_suspend_cache_addition": {
                "prefix": [
                        "wp_suspend_cache_addition",
                        "wsca"
                ],
                "body": "wp_suspend_cache_addition(${1:\\$suspend:boolean|null} )",
                "description": "Temporarily suspend cache additions."
        },
        "ƒ:wp_suspend_cache_invalidation": {
                "prefix": [
                        "wp_suspend_cache_invalidation",
                        "wsci"
                ],
                "body": "wp_suspend_cache_invalidation(${1:\\$suspend:boolean} )",
                "description": "Suspend cache invalidation."
        },
        "ƒ:wp_switch_roles_and_user": {
                "prefix": [
                        "wp_switch_roles_and_user",
                        "wsrau"
                ],
                "body": "wp_switch_roles_and_user(${1:\\$new_site_id:integer},${2:\\$old_site_id:integer} )",
                "description": "Switches the initialized roles and current user capabilities to another site."
        },
        "ƒ:wp_tag_cloud": {
                "prefix": [
                        "wp_tag_cloud",
                        "wtc"
                ],
                "body": "wp_tag_cloud(${1:\\$args:array|string} )",
                "description": "Displays a tag cloud."
        },
        "ƒ:wp_targeted_link_rel": {
                "prefix": [
                        "wp_targeted_link_rel",
                        "wtlr"
                ],
                "body": "wp_targeted_link_rel(${1:\\$text:string} )",
                "description": "Adds `rel=&quot;noopener&quot;` to all HTML A elements that have a target."
        },
        "ƒ:wp_targeted_link_rel_callback": {
                "prefix": [
                        "wp_targeted_link_rel_callback",
                        "wtlrc"
                ],
                "body": "wp_targeted_link_rel_callback(${1:\\$matches:array} )",
                "description": "Callback to add `rel=&quot;noopener&quot;` string to HTML A element."
        },
        "ƒ:wp_templating_constants": {
                "prefix": [
                        "wp_templating_constants",
                        "wtc"
                ],
                "body": "wp_templating_constants()",
                "description": "Defines templating-related WordPress constants."
        },
        "ƒ:wp_tempnam": {
                "prefix": [
                        "wp_tempnam",
                        "wt"
                ],
                "body": "wp_tempnam(${1:\\$filename:string},${2:\\$dir:string} )",
                "description": "Returns a filename of a temporary unique file."
        },
        "ƒ:wp_term_is_shared": {
                "prefix": [
                        "wp_term_is_shared",
                        "wtis"
                ],
                "body": "wp_term_is_shared(${1:\\$term_id:integer} )",
                "description": "Determines whether a term is shared between multiple taxonomies."
        },
        "ƒ:wp_terms_checklist": {
                "prefix": [
                        "wp_terms_checklist",
                        "wtc"
                ],
                "body": "wp_terms_checklist(${1:\\$post_id:integer},${2:\\$args:array|string} )",
                "description": "Outputs an unordered list of checkbox input elements labelled with term names."
        },
        "ƒ:wp_text_diff": {
                "prefix": [
                        "wp_text_diff",
                        "wtd"
                ],
                "body": "wp_text_diff(${1:\\$left_string:string},${2:\\$right_string:string},${3:\\$args:string|array|null} )",
                "description": "Displays a human readable HTML representation of the difference between two strings."
        },
        "ƒ:wp_theme_auto_update_setting_template": {
                "prefix": [
                        "wp_theme_auto_update_setting_template",
                        "wtaust"
                ],
                "body": "wp_theme_auto_update_setting_template()",
                "description": "Returns the JavaScript template used to display the auto-update setting for a theme."
        },
        "ƒ:wp_theme_update_row": {
                "prefix": [
                        "wp_theme_update_row",
                        "wtur"
                ],
                "body": "wp_theme_update_row(${1:\\$theme_key:string},${2:\\$theme:WP_Theme} )",
                "description": "Displays update information for a theme."
        },
        "ƒ:wp_theme_update_rows": {
                "prefix": [
                        "wp_theme_update_rows",
                        "wtur"
                ],
                "body": "wp_theme_update_rows()",
                "description": ""
        },
        "ƒ:wp_throttle_comment_flood": {
                "prefix": [
                        "wp_throttle_comment_flood",
                        "wtcf"
                ],
                "body": "wp_throttle_comment_flood(${1:\\$block:boolean},${2:\\$time_lastcomment:integer},${3:\\$time_newcomment:integer} )",
                "description": "Determines whether a comment should be blocked because of comment flood."
        },
        "ƒ:wp_timezone": {
                "prefix": [
                        "wp_timezone",
                        "wt"
                ],
                "body": "wp_timezone()",
                "description": "Retrieves the timezone of the site as a `DateTimeZone` object."
        },
        "ƒ:wp_timezone_choice": {
                "prefix": [
                        "wp_timezone_choice",
                        "wtc"
                ],
                "body": "wp_timezone_choice(${1:\\$selected_zone:string},${2:\\$locale:string|null} )",
                "description": "Gives a nicely-formatted list of timezone strings."
        },
        "ƒ:wp_timezone_override_offset": {
                "prefix": [
                        "wp_timezone_override_offset",
                        "wtoo"
                ],
                "body": "wp_timezone_override_offset()",
                "description": "gmt_offset modification for smart timezone handling."
        },
        "ƒ:wp_timezone_string": {
                "prefix": [
                        "wp_timezone_string",
                        "wts"
                ],
                "body": "wp_timezone_string()",
                "description": "Retrieves the timezone of the site as a string."
        },
        "ƒ:wp_timezone_supported": {
                "prefix": [
                        "wp_timezone_supported",
                        "wts"
                ],
                "body": "wp_timezone_supported()",
                "description": "Check for PHP timezone support"
        },
        "ƒ:wp_tiny_mce": {
                "prefix": [
                        "wp_tiny_mce",
                        "wtm"
                ],
                "body": "wp_tiny_mce(${1:\\$teeny:},${2:\\$settings:} )",
                "description": "Outputs the TinyMCE editor."
        },
        "ƒ:wp_tinycolor_bound01": {
                "prefix": [
                        "wp_tinycolor_bound01",
                        "wtb"
                ],
                "body": "wp_tinycolor_bound01(${1:\\$n:mixed},${2:\\$max:integer} )",
                "description": "Takes input from [0, n] and returns it as [0, 1]."
        },
        "ƒ:wp_tinycolor_hsl_to_rgb": {
                "prefix": [
                        "wp_tinycolor_hsl_to_rgb",
                        "wthtr"
                ],
                "body": "wp_tinycolor_hsl_to_rgb(${1:\\$hsl_color:array} )",
                "description": "Converts an HSL object to an RGB object with converted and rounded values."
        },
        "ƒ:wp_tinycolor_hue_to_rgb": {
                "prefix": [
                        "wp_tinycolor_hue_to_rgb",
                        "wthtr"
                ],
                "body": "wp_tinycolor_hue_to_rgb(${1:\\$p:float},${2:\\$q:float},${3:\\$t:float} )",
                "description": "Helper function for hsl to rgb conversion."
        },
        "ƒ:wp_tinycolor_rgb_to_rgb": {
                "prefix": [
                        "wp_tinycolor_rgb_to_rgb",
                        "wtrtr"
                ],
                "body": "wp_tinycolor_rgb_to_rgb(${1:\\$rgb_color:array} )",
                "description": "Rounds and converts values of an RGB object."
        },
        "ƒ:wp_tinycolor_string_to_rgb": {
                "prefix": [
                        "wp_tinycolor_string_to_rgb",
                        "wtstr"
                ],
                "body": "wp_tinycolor_string_to_rgb(${1:\\$color_str:string} )",
                "description": "Parses hex, hsl, and rgb CSS strings using the same regex as TinyColor v1.4.2 used in the JavaScript. Only colors output from react-color are implemented."
        },
        "ƒ:wp_tinymce_inline_scripts": {
                "prefix": [
                        "wp_tinymce_inline_scripts",
                        "wtis"
                ],
                "body": "wp_tinymce_inline_scripts()",
                "description": "Adds inline scripts required for the TinyMCE in the block editor."
        },
        "ƒ:wp_title": {
                "prefix": [
                        "wp_title",
                        "wt"
                ],
                "body": "wp_title(${1:\\$sep:string},${2:\\$display:boolean},${3:\\$seplocation:string} )",
                "description": "Display or retrieve page title for all areas of blog."
        },
        "ƒ:wp_title_rss": {
                "prefix": [
                        "wp_title_rss",
                        "wtr"
                ],
                "body": "wp_title_rss(${1:\\$deprecated:string} )",
                "description": "Display the blog title for display of the feed title."
        },
        "ƒ:wp_transition_comment_status": {
                "prefix": [
                        "wp_transition_comment_status",
                        "wtcs"
                ],
                "body": "wp_transition_comment_status(${1:\\$new_status:string},${2:\\$old_status:string},${3:\\$comment:WP_Comment} )",
                "description": "Calls hooks for when a comment status transition occurs."
        },
        "ƒ:wp_transition_post_status": {
                "prefix": [
                        "wp_transition_post_status",
                        "wtps"
                ],
                "body": "wp_transition_post_status(${1:\\$new_status:string},${2:\\$old_status:string},${3:\\$post:WP_Post} )",
                "description": "Fires actions related to the transitioning of a post&#039;s status."
        },
        "ƒ:wp_trash_comment": {
                "prefix": [
                        "wp_trash_comment",
                        "wtc"
                ],
                "body": "wp_trash_comment(${1:\\$comment_id:integer|WP_Comment} )",
                "description": "Moves a comment to the Trash"
        },
        "ƒ:wp_trash_post": {
                "prefix": [
                        "wp_trash_post",
                        "wtp"
                ],
                "body": "wp_trash_post(${1:\\$post_id:integer} )",
                "description": "Move a post or page to the Trash"
        },
        "ƒ:wp_trash_post_comments": {
                "prefix": [
                        "wp_trash_post_comments",
                        "wtpc"
                ],
                "body": "wp_trash_post_comments(${1:\\$post:integer|WP_Post|null} )",
                "description": "Moves comments for a post to the Trash."
        },
        "ƒ:wp_trim_excerpt": {
                "prefix": [
                        "wp_trim_excerpt",
                        "wte"
                ],
                "body": "wp_trim_excerpt(${1:\\$text:string},${2:\\$post:WP_Post|object|integer|null} )",
                "description": "Generates an excerpt from the content, if needed."
        },
        "ƒ:wp_trim_words": {
                "prefix": [
                        "wp_trim_words",
                        "wtw"
                ],
                "body": "wp_trim_words(${1:\\$text:string},${2:\\$num_words:integer},${3:\\$more:string|null} )",
                "description": "Trims text to a certain number of words."
        },
        "ƒ:wp_trusted_keys": {
                "prefix": [
                        "wp_trusted_keys",
                        "wtk"
                ],
                "body": "wp_trusted_keys()",
                "description": "Retrieves the list of signing keys trusted by WordPress."
        },
        "ƒ:wp_typography_get_css_variable_inline_style": {
                "prefix": [
                        "wp_typography_get_css_variable_inline_style",
                        "wtgcvis"
                ],
                "body": "wp_typography_get_css_variable_inline_style(${1:\\$attributes:array},${2:\\$feature:string},${3:\\$css_property:string} )",
                "description": "Generates an inline style for a typography feature e.g. text decoration, text transform, and font style."
        },
        "ƒ:wp_underscore_audio_template": {
                "prefix": [
                        "wp_underscore_audio_template",
                        "wuat"
                ],
                "body": "wp_underscore_audio_template()",
                "description": "Output the markup for a audio tag to be used in an Underscore template when data.model is passed."
        },
        "ƒ:wp_underscore_playlist_templates": {
                "prefix": [
                        "wp_underscore_playlist_templates",
                        "wupt"
                ],
                "body": "wp_underscore_playlist_templates()",
                "description": "Outputs the templates used by playlists."
        },
        "ƒ:wp_underscore_video_template": {
                "prefix": [
                        "wp_underscore_video_template",
                        "wuvt"
                ],
                "body": "wp_underscore_video_template()",
                "description": "Output the markup for a video tag to be used in an Underscore template when data.model is passed."
        },
        "ƒ:wp_uninitialize_site": {
                "prefix": [
                        "wp_uninitialize_site",
                        "wus"
                ],
                "body": "wp_uninitialize_site(${1:\\$site_id:integer|WP_Site} )",
                "description": "Runs the uninitialization routine for a given site."
        },
        "ƒ:wp_unique_filename": {
                "prefix": [
                        "wp_unique_filename",
                        "wuf"
                ],
                "body": "wp_unique_filename(${1:\\$dir:string},${2:\\$filename:string},${3:\\$unique_filename_callback:callable|null} )",
                "description": "Get a filename that is sanitized and unique for the given directory."
        },
        "ƒ:wp_unique_id": {
                "prefix": [
                        "wp_unique_id",
                        "wui"
                ],
                "body": "wp_unique_id(${1:\\$prefix:string} )",
                "description": "Gets unique ID."
        },
        "ƒ:wp_unique_post_slug": {
                "prefix": [
                        "wp_unique_post_slug",
                        "wups"
                ],
                "body": "wp_unique_post_slug(${1:\\$slug:string},${2:\\$post_ID:integer},${3:\\$post_status:string},${4:\\$post_type:string},${5:\\$post_parent:integer} )",
                "description": "Computes a unique slug for the post, when given the desired slug and some post details."
        },
        "ƒ:wp_unique_term_slug": {
                "prefix": [
                        "wp_unique_term_slug",
                        "wuts"
                ],
                "body": "wp_unique_term_slug(${1:\\$slug:string},${2:\\$term:object} )",
                "description": "Makes term slug unique, if it isn&#039;t already."
        },
        "ƒ:wp_unregister_GLOBALS": {
                "prefix": [
                        "wp_unregister_GLOBALS",
                        "wuG"
                ],
                "body": "wp_unregister_GLOBALS()",
                "description": "Turn register globals off."
        },
        "ƒ:wp_unregister_sidebar_widget": {
                "prefix": [
                        "wp_unregister_sidebar_widget",
                        "wusw"
                ],
                "body": "wp_unregister_sidebar_widget(${1:\\$id:integer|string} )",
                "description": "Remove widget from sidebar."
        },
        "ƒ:wp_unregister_widget_control": {
                "prefix": [
                        "wp_unregister_widget_control",
                        "wuwc"
                ],
                "body": "wp_unregister_widget_control(${1:\\$id:integer|string} )",
                "description": "Remove control callback for widget."
        },
        "ƒ:wp_unschedule_event": {
                "prefix": [
                        "wp_unschedule_event",
                        "wue"
                ],
                "body": "wp_unschedule_event(${1:\\$timestamp:integer},${2:\\$hook:string},${3:\\$args:array},${4:\\$wp_error:boolean} )",
                "description": "Unschedule a previously scheduled event."
        },
        "ƒ:wp_unschedule_hook": {
                "prefix": [
                        "wp_unschedule_hook",
                        "wuh"
                ],
                "body": "wp_unschedule_hook(${1:\\$hook:string},${2:\\$wp_error:boolean} )",
                "description": "Unschedules all events attached to the hook."
        },
        "ƒ:wp_unslash": {
                "prefix": [
                        "wp_unslash",
                        "wu"
                ],
                "body": "wp_unslash(${1:\\$value:string|array} )",
                "description": "Removes slashes from a string or recursively removes slashes from strings within an array."
        },
        "ƒ:wp_unspam_comment": {
                "prefix": [
                        "wp_unspam_comment",
                        "wuc"
                ],
                "body": "wp_unspam_comment(${1:\\$comment_id:integer|WP_Comment} )",
                "description": "Removes a comment from the Spam."
        },
        "ƒ:wp_untrash_comment": {
                "prefix": [
                        "wp_untrash_comment",
                        "wuc"
                ],
                "body": "wp_untrash_comment(${1:\\$comment_id:integer|WP_Comment} )",
                "description": "Removes a comment from the Trash"
        },
        "ƒ:wp_untrash_post": {
                "prefix": [
                        "wp_untrash_post",
                        "wup"
                ],
                "body": "wp_untrash_post(${1:\\$post_id:integer} )",
                "description": "Restores a post from the Trash."
        },
        "ƒ:wp_untrash_post_comments": {
                "prefix": [
                        "wp_untrash_post_comments",
                        "wupc"
                ],
                "body": "wp_untrash_post_comments(${1:\\$post:integer|WP_Post|null} )",
                "description": "Restore comments for a post from the Trash."
        },
        "ƒ:wp_untrash_post_set_previous_status": {
                "prefix": [
                        "wp_untrash_post_set_previous_status",
                        "wupsps"
                ],
                "body": "wp_untrash_post_set_previous_status(${1:\\$new_status:string},${2:\\$post_id:integer},${3:\\$previous_status:string} )",
                "description": "Filter callback which sets the status of an untrashed post to its previous status."
        },
        "ƒ:wp_update_attachment_metadata": {
                "prefix": [
                        "wp_update_attachment_metadata",
                        "wuam"
                ],
                "body": "wp_update_attachment_metadata(${1:\\$attachment_id:integer},${2:\\$data:array} )",
                "description": "Updates metadata for an attachment."
        },
        "ƒ:wp_update_blog_public_option_on_site_update": {
                "prefix": [
                        "wp_update_blog_public_option_on_site_update",
                        "wubpoosu"
                ],
                "body": "wp_update_blog_public_option_on_site_update(${1:\\$site_id:integer},${2:\\$public:string} )",
                "description": "Updates the `blog_public` option for a given site ID."
        },
        "ƒ:wp_update_category": {
                "prefix": [
                        "wp_update_category",
                        "wuc"
                ],
                "body": "wp_update_category(${1:\\$catarr:array} )",
                "description": "Aliases wp_insert_category() with minimal args."
        },
        "ƒ:wp_update_comment": {
                "prefix": [
                        "wp_update_comment",
                        "wuc"
                ],
                "body": "wp_update_comment(${1:\\$commentarr:array},${2:\\$wp_error:boolean} )",
                "description": "Updates an existing comment in the database."
        },
        "ƒ:wp_update_comment_count": {
                "prefix": [
                        "wp_update_comment_count",
                        "wucc"
                ],
                "body": "wp_update_comment_count(${1:\\$post_id:integer|null},${2:\\$do_deferred:boolean} )",
                "description": "Updates the comment count for post(s)."
        },
        "ƒ:wp_update_comment_count_now": {
                "prefix": [
                        "wp_update_comment_count_now",
                        "wuccn"
                ],
                "body": "wp_update_comment_count_now(${1:\\$post_id:integer} )",
                "description": "Updates the comment count for the post."
        },
        "ƒ:wp_update_core": {
                "prefix": [
                        "wp_update_core",
                        "wuc"
                ],
                "body": "wp_update_core(${1:\\$current:},${2:\\$feedback:} )",
                "description": "This was once used to kick-off the Core Updater."
        },
        "ƒ:wp_update_custom_css_post": {
                "prefix": [
                        "wp_update_custom_css_post",
                        "wuccp"
                ],
                "body": "wp_update_custom_css_post(${1:\\$css:string},${2:\\$args:array} )",
                "description": "Updates the `custom_css` post for a given theme."
        },
        "ƒ:wp_update_https_detection_errors": {
                "prefix": [
                        "wp_update_https_detection_errors",
                        "wuhde"
                ],
                "body": "wp_update_https_detection_errors()",
                "description": "Runs a remote HTTPS request to detect whether HTTPS supported, and stores potential errors."
        },
        "ƒ:wp_update_https_migration_required": {
                "prefix": [
                        "wp_update_https_migration_required",
                        "wuhmr"
                ],
                "body": "wp_update_https_migration_required(${1:\\$old_url:mixed},${2:\\$new_url:mixed} )",
                "description": "Updates the &#039;https_migration_required&#039; option if needed when the given URL has been updated from HTTP to HTTPS."
        },
        "ƒ:wp_update_image_subsizes": {
                "prefix": [
                        "wp_update_image_subsizes",
                        "wuis"
                ],
                "body": "wp_update_image_subsizes(${1:\\$attachment_id:integer} )",
                "description": "If any of the currently registered image sub-sizes are missing, create them and update the image meta data."
        },
        "ƒ:wp_update_link": {
                "prefix": [
                        "wp_update_link",
                        "wul"
                ],
                "body": "wp_update_link(${1:\\$linkdata:array} )",
                "description": "Updates a link in the database."
        },
        "ƒ:wp_update_nav_menu_item": {
                "prefix": [
                        "wp_update_nav_menu_item",
                        "wunmi"
                ],
                "body": "wp_update_nav_menu_item(${1:\\$menu_id:integer},${2:\\$menu_item_db_id:integer},${3:\\$menu_item_data:array},${4:\\$fire_after_hooks:boolean} )",
                "description": "Saves the properties of a menu item or create a new one."
        },
        "ƒ:wp_update_nav_menu_object": {
                "prefix": [
                        "wp_update_nav_menu_object",
                        "wunmo"
                ],
                "body": "wp_update_nav_menu_object(${1:\\$menu_id:integer},${2:\\$menu_data:array} )",
                "description": "Saves the properties of a menu or create a new menu with those properties."
        },
        "ƒ:wp_update_network_counts": {
                "prefix": [
                        "wp_update_network_counts",
                        "wunc"
                ],
                "body": "wp_update_network_counts(${1:\\$network_id:integer|null} )",
                "description": "Updates the network-wide counts for the current network."
        },
        "ƒ:wp_update_network_site_counts": {
                "prefix": [
                        "wp_update_network_site_counts",
                        "wunsc"
                ],
                "body": "wp_update_network_site_counts(${1:\\$network_id:integer|null} )",
                "description": "Updates the network-wide site count."
        },
        "ƒ:wp_update_network_user_counts": {
                "prefix": [
                        "wp_update_network_user_counts",
                        "wunuc"
                ],
                "body": "wp_update_network_user_counts(${1:\\$network_id:integer|null} )",
                "description": "Updates the network-wide user count."
        },
        "ƒ:wp_update_php_annotation": {
                "prefix": [
                        "wp_update_php_annotation",
                        "wupa"
                ],
                "body": "wp_update_php_annotation(${1:\\$before:string},${2:\\$after:string} )",
                "description": "Prints the default annotation for the web host altering the &quot;Update PHP&quot; page URL."
        },
        "ƒ:wp_update_plugin": {
                "prefix": [
                        "wp_update_plugin",
                        "wup"
                ],
                "body": "wp_update_plugin(${1:\\$plugin:},${2:\\$feedback:} )",
                "description": "This was once used to kick-off the Plugin Updater."
        },
        "ƒ:wp_update_plugins": {
                "prefix": [
                        "wp_update_plugins",
                        "wup"
                ],
                "body": "wp_update_plugins(${1:\\$extra_stats:array} )",
                "description": "Checks for available updates to plugins based on the latest versions hosted on WordPress.org."
        },
        "ƒ:wp_update_post": {
                "prefix": [
                        "wp_update_post",
                        "wup"
                ],
                "body": "wp_update_post(${1:\\$postarr:array|object},${2:\\$wp_error:boolean},${3:\\$fire_after_hooks:boolean} )",
                "description": "Update a post with new post data."
        },
        "ƒ:wp_update_site": {
                "prefix": [
                        "wp_update_site",
                        "wus"
                ],
                "body": "wp_update_site(${1:\\$site_id:integer},${2:\\$data:array} )",
                "description": "Updates a site in the database."
        },
        "ƒ:wp_update_term": {
                "prefix": [
                        "wp_update_term",
                        "wut"
                ],
                "body": "wp_update_term(${1:\\$term_id:integer},${2:\\$taxonomy:string},${3:\\$args:array|string} )",
                "description": "Updates term based on arguments provided."
        },
        "ƒ:wp_update_term_count": {
                "prefix": [
                        "wp_update_term_count",
                        "wutc"
                ],
                "body": "wp_update_term_count(${1:\\$terms:integer|array},${2:\\$taxonomy:string},${3:\\$do_deferred:boolean} )",
                "description": "Updates the amount of terms in taxonomy."
        },
        "ƒ:wp_update_term_count_now": {
                "prefix": [
                        "wp_update_term_count_now",
                        "wutcn"
                ],
                "body": "wp_update_term_count_now(${1:\\$terms:array},${2:\\$taxonomy:string} )",
                "description": "Performs term count update immediately."
        },
        "ƒ:wp_update_theme": {
                "prefix": [
                        "wp_update_theme",
                        "wut"
                ],
                "body": "wp_update_theme(${1:\\$theme:},${2:\\$feedback:} )",
                "description": "This was once used to kick-off the Theme Updater."
        },
        "ƒ:wp_update_themes": {
                "prefix": [
                        "wp_update_themes",
                        "wut"
                ],
                "body": "wp_update_themes(${1:\\$extra_stats:array} )",
                "description": "Checks for available updates to themes based on the latest versions hosted on WordPress.org."
        },
        "ƒ:wp_update_urls_to_https": {
                "prefix": [
                        "wp_update_urls_to_https",
                        "wuuth"
                ],
                "body": "wp_update_urls_to_https()",
                "description": "Update the &#039;home&#039; and &#039;siteurl&#039; option to use the HTTPS variant of their URL."
        },
        "ƒ:wp_update_user": {
                "prefix": [
                        "wp_update_user",
                        "wuu"
                ],
                "body": "wp_update_user(${1:\\$userdata:array|object|WP_User} )",
                "description": "Updates a user in the database."
        },
        "ƒ:wp_update_user_counts": {
                "prefix": [
                        "wp_update_user_counts",
                        "wuuc"
                ],
                "body": "wp_update_user_counts(${1:\\$network_id:integer|null} )",
                "description": "Updates the total count of users on the site."
        },
        "ƒ:wp_upgrade": {
                "prefix": [
                        "wp_upgrade",
                        "wu"
                ],
                "body": "wp_upgrade()",
                "description": "Runs WordPress Upgrade functions."
        },
        "ƒ:wp_upload_bits": {
                "prefix": [
                        "wp_upload_bits",
                        "wub"
                ],
                "body": "wp_upload_bits(${1:\\$name:string},${2:\\$deprecated:null|string},${3:\\$bits:string},${4:\\$time:string|null} )",
                "description": "Create a file in the upload folder with given content."
        },
        "ƒ:wp_upload_dir": {
                "prefix": [
                        "wp_upload_dir",
                        "wud"
                ],
                "body": "wp_upload_dir(${1:\\$time:string|null},${2:\\$create_dir:boolean},${3:\\$refresh_cache:boolean} )",
                "description": "Returns an array containing the current upload directory&#039;s path and URL."
        },
        "ƒ:wp_use_widgets_block_editor": {
                "prefix": [
                        "wp_use_widgets_block_editor",
                        "wuwbe"
                ],
                "body": "wp_use_widgets_block_editor()",
                "description": "Whether or not to use the block editor to manage widgets. Defaults to true unless a theme has removed support for widgets-block-editor or a plugin has filtered the return value of this function."
        },
        "ƒ:wp_user_personal_data_exporter": {
                "prefix": [
                        "wp_user_personal_data_exporter",
                        "wupde"
                ],
                "body": "wp_user_personal_data_exporter(${1:\\$email_address:string} )",
                "description": "Finds and exports personal data associated with an email address from the user and user_meta table."
        },
        "ƒ:wp_user_request_action_description": {
                "prefix": [
                        "wp_user_request_action_description",
                        "wurad"
                ],
                "body": "wp_user_request_action_description(${1:\\$action_name:string} )",
                "description": "Gets action description from the name and return a string."
        },
        "ƒ:wp_user_settings": {
                "prefix": [
                        "wp_user_settings",
                        "wus"
                ],
                "body": "wp_user_settings()",
                "description": "Saves and restores user interface settings stored in a cookie."
        },
        "ƒ:wp_using_ext_object_cache": {
                "prefix": [
                        "wp_using_ext_object_cache",
                        "wueoc"
                ],
                "body": "wp_using_ext_object_cache(${1:\\$using:boolean|null} )",
                "description": "Toggle `$_wp_using_ext_object_cache` on and off without directly touching global."
        },
        "ƒ:wp_using_themes": {
                "prefix": [
                        "wp_using_themes",
                        "wut"
                ],
                "body": "wp_using_themes()",
                "description": "Determines whether the current request should use themes."
        },
        "ƒ:wp_validate_application_password": {
                "prefix": [
                        "wp_validate_application_password",
                        "wvap"
                ],
                "body": "wp_validate_application_password(${1:\\$input_user:integer|false} )",
                "description": "Validates the application password credentials passed via Basic Authentication."
        },
        "ƒ:wp_validate_auth_cookie": {
                "prefix": [
                        "wp_validate_auth_cookie",
                        "wvac"
                ],
                "body": "wp_validate_auth_cookie(${1:\\$cookie:string},${2:\\$scheme:string} )",
                "description": "Validates authentication cookie."
        },
        "ƒ:wp_validate_boolean": {
                "prefix": [
                        "wp_validate_boolean",
                        "wvb"
                ],
                "body": "wp_validate_boolean(${1:\\$var:mixed} )",
                "description": "Filter/validate a variable as a boolean."
        },
        "ƒ:wp_validate_logged_in_cookie": {
                "prefix": [
                        "wp_validate_logged_in_cookie",
                        "wvlic"
                ],
                "body": "wp_validate_logged_in_cookie(${1:\\$user_id:integer|false} )",
                "description": "Validates the logged-in cookie."
        },
        "ƒ:wp_validate_redirect": {
                "prefix": [
                        "wp_validate_redirect",
                        "wvr"
                ],
                "body": "wp_validate_redirect(${1:\\$location:string},${2:\\$default:string} )",
                "description": "Validates a URL for use in a redirect."
        },
        "ƒ:wp_validate_site_data": {
                "prefix": [
                        "wp_validate_site_data",
                        "wvsd"
                ],
                "body": "wp_validate_site_data(${1:\\$errors:WP_Error},${2:\\$data:array},${3:\\$old_site:WP_Site|null} )",
                "description": "Validates data for a site prior to inserting or updating in the database."
        },
        "ƒ:wp_validate_user_request_key": {
                "prefix": [
                        "wp_validate_user_request_key",
                        "wvurk"
                ],
                "body": "wp_validate_user_request_key(${1:\\$request_id:string},${2:\\$key:string} )",
                "description": "Validates a user request by comparing the key with the request&#039;s key."
        },
        "ƒ:wp_verify_nonce": {
                "prefix": [
                        "wp_verify_nonce",
                        "wvn"
                ],
                "body": "wp_verify_nonce(${1:\\$nonce:string},${2:\\$action:string|integer} )",
                "description": "Verifies that a correct security nonce was used with time limit."
        },
        "ƒ:wp_version_check": {
                "prefix": [
                        "wp_version_check",
                        "wvc"
                ],
                "body": "wp_version_check(${1:\\$extra_stats:array},${2:\\$force_check:boolean} )",
                "description": "Check WordPress version against the newest version."
        },
        "ƒ:wp_video_shortcode": {
                "prefix": [
                        "wp_video_shortcode",
                        "wvs"
                ],
                "body": "wp_video_shortcode(${1:\\$attr:array},${2:\\$content:string} )",
                "description": "Builds the Video shortcode output."
        },
        "ƒ:wp_welcome_panel": {
                "prefix": [
                        "wp_welcome_panel",
                        "wwp"
                ],
                "body": "wp_welcome_panel()",
                "description": "Displays a welcome panel to introduce users to WordPress."
        },
        "ƒ:wp_widget_control": {
                "prefix": [
                        "wp_widget_control",
                        "wwc"
                ],
                "body": "wp_widget_control(${1:\\$sidebar_args:array} )",
                "description": "Meta widget used to display the control form for a widget."
        },
        "ƒ:wp_widget_description": {
                "prefix": [
                        "wp_widget_description",
                        "wwd"
                ],
                "body": "wp_widget_description(${1:\\$id:integer|string} )",
                "description": "Retrieve description for widget."
        },
        "ƒ:wp_widget_rss_form": {
                "prefix": [
                        "wp_widget_rss_form",
                        "wwrf"
                ],
                "body": "wp_widget_rss_form(${1:\\$args:array|string},${2:\\$inputs:array|null} )",
                "description": "Display RSS widget options form."
        },
        "ƒ:wp_widget_rss_output": {
                "prefix": [
                        "wp_widget_rss_output",
                        "wwro"
                ],
                "body": "wp_widget_rss_output(${1:\\$rss:string|array|object},${2:\\$args:array} )",
                "description": "Display the RSS entries in a list."
        },
        "ƒ:wp_widget_rss_process": {
                "prefix": [
                        "wp_widget_rss_process",
                        "wwrp"
                ],
                "body": "wp_widget_rss_process(${1:\\$widget_rss:array},${2:\\$check_feed:boolean} )",
                "description": "Process RSS feed widget data and optionally retrieve feed items."
        },
        "ƒ:wp_widgets_access_body_class": {
                "prefix": [
                        "wp_widgets_access_body_class",
                        "wwabc"
                ],
                "body": "wp_widgets_access_body_class(${1:\\$classes:string} )",
                "description": ""
        },
        "ƒ:wp_widgets_add_menu": {
                "prefix": [
                        "wp_widgets_add_menu",
                        "wwam"
                ],
                "body": "wp_widgets_add_menu()",
                "description": "Append the Widgets menu to the themes main menu."
        },
        "ƒ:wp_widgets_init": {
                "prefix": [
                        "wp_widgets_init",
                        "wwi"
                ],
                "body": "wp_widgets_init()",
                "description": "Registers all of the default WordPress widgets on startup."
        },
        "ƒ:wp_write_post": {
                "prefix": [
                        "wp_write_post",
                        "wwp"
                ],
                "body": "wp_write_post()",
                "description": "Creates a new post from the &quot;Write Post&quot; form using `$_POST` information."
        },
        "ƒ:wpautop": {
                "prefix": [
                        "wpautop"
                ],
                "body": "wpautop(${1:\\$text:string},${2:\\$br:boolean} )",
                "description": "Replaces double line breaks with paragraph elements."
        },
        "ƒ:wpmu_activate_signup": {
                "prefix": [
                        "wpmu_activate_signup",
                        "was"
                ],
                "body": "wpmu_activate_signup(${1:\\$key:string} )",
                "description": "Activates a signup."
        },
        "ƒ:wpmu_activate_stylesheet": {
                "prefix": [
                        "wpmu_activate_stylesheet",
                        "was"
                ],
                "body": "wpmu_activate_stylesheet()",
                "description": "Loads styles specific to this page."
        },
        "ƒ:wpmu_admin_do_redirect": {
                "prefix": [
                        "wpmu_admin_do_redirect",
                        "wadr"
                ],
                "body": "wpmu_admin_do_redirect(${1:\\$url:string} )",
                "description": "Redirect a user based on $_GET or $_POST arguments."
        },
        "ƒ:wpmu_admin_redirect_add_updated_param": {
                "prefix": [
                        "wpmu_admin_redirect_add_updated_param",
                        "waraup"
                ],
                "body": "wpmu_admin_redirect_add_updated_param(${1:\\$url:string} )",
                "description": "Adds an &#039;updated=true&#039; argument to a URL."
        },
        "ƒ:wpmu_checkAvailableSpace": {
                "prefix": [
                        "wpmu_checkAvailableSpace",
                        "wc"
                ],
                "body": "wpmu_checkAvailableSpace()",
                "description": "Determines if the available space defined by the admin has been exceeded by the user."
        },
        "ƒ:wpmu_create_blog": {
                "prefix": [
                        "wpmu_create_blog",
                        "wcb"
                ],
                "body": "wpmu_create_blog(${1:\\$domain:string},${2:\\$path:string},${3:\\$title:string},${4:\\$user_id:integer},${5:\\$options:array},${6:\\$network_id:integer} )",
                "description": "Creates a site."
        },
        "ƒ:wpmu_create_user": {
                "prefix": [
                        "wpmu_create_user",
                        "wcu"
                ],
                "body": "wpmu_create_user(${1:\\$user_name:string},${2:\\$password:string},${3:\\$email:string} )",
                "description": "Creates a user."
        },
        "ƒ:wpmu_current_site": {
                "prefix": [
                        "wpmu_current_site",
                        "wcs"
                ],
                "body": "wpmu_current_site()",
                "description": "This deprecated function managed much of the site and network loading in multisite."
        },
        "ƒ:wpmu_delete_blog": {
                "prefix": [
                        "wpmu_delete_blog",
                        "wdb"
                ],
                "body": "wpmu_delete_blog(${1:\\$blog_id:integer},${2:\\$drop:boolean} )",
                "description": "Delete a site."
        },
        "ƒ:wpmu_delete_user": {
                "prefix": [
                        "wpmu_delete_user",
                        "wdu"
                ],
                "body": "wpmu_delete_user(${1:\\$id:integer} )",
                "description": "Delete a user from the network and remove from all sites."
        },
        "ƒ:wpmu_get_blog_allowedthemes": {
                "prefix": [
                        "wpmu_get_blog_allowedthemes",
                        "wgba"
                ],
                "body": "wpmu_get_blog_allowedthemes(${1:\\$blog_id:} )",
                "description": "Deprecated functionality for getting themes allowed on a specific site."
        },
        "ƒ:wpmu_log_new_registrations": {
                "prefix": [
                        "wpmu_log_new_registrations",
                        "wlnr"
                ],
                "body": "wpmu_log_new_registrations(${1:\\$blog_id:WP_Site|integer},${2:\\$user_id:integer|array} )",
                "description": "Logs the user email, IP, and registration date of a new site."
        },
        "ƒ:wpmu_menu": {
                "prefix": [
                        "wpmu_menu",
                        "wm"
                ],
                "body": "wpmu_menu()",
                "description": "Outputs the WPMU menu."
        },
        "ƒ:wpmu_new_site_admin_notification": {
                "prefix": [
                        "wpmu_new_site_admin_notification",
                        "wnsan"
                ],
                "body": "wpmu_new_site_admin_notification(${1:\\$site_id:integer},${2:\\$user_id:integer} )",
                "description": "Notifies the Multisite network administrator that a new site was created."
        },
        "ƒ:wpmu_signup_blog": {
                "prefix": [
                        "wpmu_signup_blog",
                        "wsb"
                ],
                "body": "wpmu_signup_blog(${1:\\$domain:string},${2:\\$path:string},${3:\\$title:string},${4:\\$user:string},${5:\\$user_email:string},${6:\\$meta:array} )",
                "description": "Records site signup information for future activation."
        },
        "ƒ:wpmu_signup_blog_notification": {
                "prefix": [
                        "wpmu_signup_blog_notification",
                        "wsbn"
                ],
                "body": "wpmu_signup_blog_notification(${1:\\$domain:string},${2:\\$path:string},${3:\\$title:string},${4:\\$user_login:string},${5:\\$user_email:string},${6:\\$key:string},${7:\\$meta:array} )",
                "description": "Sends a confirmation request email to a user when they sign up for a new site. The new site will not become active until the confirmation link is clicked."
        },
        "ƒ:wpmu_signup_stylesheet": {
                "prefix": [
                        "wpmu_signup_stylesheet",
                        "wss"
                ],
                "body": "wpmu_signup_stylesheet()",
                "description": "Prints styles for front-end Multisite Sign-up pages."
        },
        "ƒ:wpmu_signup_user": {
                "prefix": [
                        "wpmu_signup_user",
                        "wsu"
                ],
                "body": "wpmu_signup_user(${1:\\$user:string},${2:\\$user_email:string},${3:\\$meta:array} )",
                "description": "Records user signup information for future activation."
        },
        "ƒ:wpmu_signup_user_notification": {
                "prefix": [
                        "wpmu_signup_user_notification",
                        "wsun"
                ],
                "body": "wpmu_signup_user_notification(${1:\\$user_login:string},${2:\\$user_email:string},${3:\\$key:string},${4:\\$meta:array} )",
                "description": "Sends a confirmation request email to a user when they sign up for a new user account (without signing up for a site at the same time). The user account will not become active until the confirmation link is clicked."
        },
        "ƒ:wpmu_update_blogs_date": {
                "prefix": [
                        "wpmu_update_blogs_date",
                        "wubd"
                ],
                "body": "wpmu_update_blogs_date()",
                "description": "Update the last_updated field for the current site."
        },
        "ƒ:wpmu_validate_blog_signup": {
                "prefix": [
                        "wpmu_validate_blog_signup",
                        "wvbs"
                ],
                "body": "wpmu_validate_blog_signup(${1:\\$blogname:string},${2:\\$blog_title:string},${3:\\$user:WP_User|string} )",
                "description": "Processes new site registrations."
        },
        "ƒ:wpmu_validate_user_signup": {
                "prefix": [
                        "wpmu_validate_user_signup",
                        "wvus"
                ],
                "body": "wpmu_validate_user_signup(${1:\\$user_name:string},${2:\\$user_email:string} )",
                "description": "Sanitizes and validates data required for a user sign-up."
        },
        "ƒ:wpmu_welcome_notification": {
                "prefix": [
                        "wpmu_welcome_notification",
                        "wwn"
                ],
                "body": "wpmu_welcome_notification(${1:\\$blog_id:integer},${2:\\$user_id:integer},${3:\\$password:string},${4:\\$title:string},${5:\\$meta:array} )",
                "description": "Notifies the site administrator that their site activation was successful."
        },
        "ƒ:wpmu_welcome_user_notification": {
                "prefix": [
                        "wpmu_welcome_user_notification",
                        "wwun"
                ],
                "body": "wpmu_welcome_user_notification(${1:\\$user_id:integer},${2:\\$password:string},${3:\\$meta:array} )",
                "description": "Notifies a user that their account activation has been successful."
        },
        "ƒ:wptexturize": {
                "prefix": [
                        "wptexturize"
                ],
                "body": "wptexturize(${1:\\$text:string},${2:\\$reset:boolean} )",
                "description": "Replaces common plain text characters with formatted entities."
        },
        "ƒ:wptexturize_primes": {
                "prefix": [
                        "wptexturize_primes",
                        "wp"
                ],
                "body": "wptexturize_primes(${1:\\$haystack:string},${2:\\$needle:string},${3:\\$prime:string},${4:\\$open_quote:string},${5:\\$close_quote:string} )",
                "description": "Implements a logic tree to determine whether or not &quot;7&#039;.&quot; represents seven feet, then converts the special char into either a prime char or a closing quote char."
        },
        "ƒ:wpview_media_sandbox_styles": {
                "prefix": [
                        "wpview_media_sandbox_styles",
                        "wmss"
                ],
                "body": "wpview_media_sandbox_styles()",
                "description": "Returns the URLs for CSS files used in an iframe-sandbox&#039;d TinyMCE media view."
        },
        "ƒ:write_post": {
                "prefix": [
                        "write_post",
                        "wp"
                ],
                "body": "write_post()",
                "description": "Calls wp_write_post() and handles the errors."
        },
        "ƒ:wxr_authors_list": {
                "prefix": [
                        "wxr_authors_list",
                        "wal"
                ],
                "body": "wxr_authors_list(${1:\\$post_ids:array|null} )",
                "description": "Output list of authors with posts"
        },
        "ƒ:wxr_cat_name": {
                "prefix": [
                        "wxr_cat_name",
                        "wcn"
                ],
                "body": "wxr_cat_name(${1:\\$category:WP_Term} )",
                "description": "Output a cat_name XML tag from a given category object"
        },
        "ƒ:wxr_category_description": {
                "prefix": [
                        "wxr_category_description",
                        "wcd"
                ],
                "body": "wxr_category_description(${1:\\$category:WP_Term} )",
                "description": "Output a category_description XML tag from a given category object"
        },
        "ƒ:wxr_cdata": {
                "prefix": [
                        "wxr_cdata",
                        "wc"
                ],
                "body": "wxr_cdata(${1:\\$str:string} )",
                "description": "Wrap given string in XML CDATA tag."
        },
        "ƒ:wxr_filter_postmeta": {
                "prefix": [
                        "wxr_filter_postmeta",
                        "wfp"
                ],
                "body": "wxr_filter_postmeta(${1:\\$return_me:boolean},${2:\\$meta_key:string} )",
                "description": ""
        },
        "ƒ:wxr_nav_menu_terms": {
                "prefix": [
                        "wxr_nav_menu_terms",
                        "wnmt"
                ],
                "body": "wxr_nav_menu_terms()",
                "description": "Output all navigation menu terms"
        },
        "ƒ:wxr_post_taxonomy": {
                "prefix": [
                        "wxr_post_taxonomy",
                        "wpt"
                ],
                "body": "wxr_post_taxonomy()",
                "description": "Output list of taxonomy terms, in XML tag format, associated with a post"
        },
        "ƒ:wxr_site_url": {
                "prefix": [
                        "wxr_site_url",
                        "wsu"
                ],
                "body": "wxr_site_url()",
                "description": "Return the URL of the site"
        },
        "ƒ:wxr_tag_description": {
                "prefix": [
                        "wxr_tag_description",
                        "wtd"
                ],
                "body": "wxr_tag_description(${1:\\$tag:WP_Term} )",
                "description": "Output a tag_description XML tag from a given tag object"
        },
        "ƒ:wxr_tag_name": {
                "prefix": [
                        "wxr_tag_name",
                        "wtn"
                ],
                "body": "wxr_tag_name(${1:\\$tag:WP_Term} )",
                "description": "Output a tag_name XML tag from a given tag object"
        },
        "ƒ:wxr_term_description": {
                "prefix": [
                        "wxr_term_description",
                        "wtd"
                ],
                "body": "wxr_term_description(${1:\\$term:WP_Term} )",
                "description": "Output a term_description XML tag from a given term object"
        },
        "ƒ:wxr_term_meta": {
                "prefix": [
                        "wxr_term_meta",
                        "wtm"
                ],
                "body": "wxr_term_meta(${1:\\$term:WP_Term} )",
                "description": "Output term meta XML tags for a given term object."
        },
        "ƒ:wxr_term_name": {
                "prefix": [
                        "wxr_term_name",
                        "wtn"
                ],
                "body": "wxr_term_name(${1:\\$term:WP_Term} )",
                "description": "Output a term_name XML tag from a given term object"
        },
        "ƒ:xfn_check": {
                "prefix": [
                        "xfn_check",
                        "xc"
                ],
                "body": "xfn_check(${1:\\$xfn_relationship:string},${2:\\$xfn_value:string},${3:\\$deprecated:mixed} )",
                "description": "Displays &#039;checked&#039; checkboxes attribute for XFN microformat options."
        },
        "ƒ:xmlrpc_getpostcategory": {
                "prefix": [
                        "xmlrpc_getpostcategory",
                        "xg"
                ],
                "body": "xmlrpc_getpostcategory(${1:\\$content:string} )",
                "description": "Retrieve the post category or categories from XMLRPC XML."
        },
        "ƒ:xmlrpc_getposttitle": {
                "prefix": [
                        "xmlrpc_getposttitle",
                        "xg"
                ],
                "body": "xmlrpc_getposttitle(${1:\\$content:string} )",
                "description": "Retrieve post title from XMLRPC XML."
        },
        "ƒ:xmlrpc_pingback_error": {
                "prefix": [
                        "xmlrpc_pingback_error",
                        "xpe"
                ],
                "body": "xmlrpc_pingback_error(${1:\\$ixr_error:IXR_Error} )",
                "description": "Default filter attached to xmlrpc_pingback_error."
        },
        "ƒ:xmlrpc_removepostdata": {
                "prefix": [
                        "xmlrpc_removepostdata",
                        "xr"
                ],
                "body": "xmlrpc_removepostdata(${1:\\$content:string} )",
                "description": "XMLRPC XML content without title and category elements."
        },
        "ƒ:zeroise": {
                "prefix": [
                        "zeroise"
                ],
                "body": "zeroise(${1:\\$number:integer},${2:\\$threshold:integer} )",
                "description": "Add leading zeros when necessary."
        }
}